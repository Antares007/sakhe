// @flow
import type {Stream} from '@most/types'
import type {$} from './most'

export interface Absurd<T> {
  (): T;
}

export interface RState<T> {
  (state: T): T;
}

export interface InputRay<A> {
  extend<Key: $Keys<A>, B: $Subtype<$ElementType<A, Key>>>(
    key: Key,
    absurdB: Absurd<B>
  ): (pith: $<Pith<B>>) => void;
  val<Key: $Keys<A>>(key: Key, r: Stream<RState<$ElementType<A, Key>>>): void;
}

export interface Pith<A> {
  (state: InputRay<A>, onChange: Stream<A>): void;
}

export interface Bark<A> {
  (pith: $<Pith<A>>): Stream<RState<A>>;
}

declare export default function tree<A>(absurdA: Absurd<A>): Bark<A>
