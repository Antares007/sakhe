// @flow
import type {Stream} from '@most/types'
import type {Data, VNode} from './types'

export type Action = {type: 'on', action: $FlowTODO, event: Event}

export type RVNode = {
  (vnode: VNode, cb: (event: mixed) => void): VNode,
  type: 'rvnode',
}

export interface Ray0 {
  node(
    tag: string,
    data?: Data | Stream<Data>,
    key?: string
  ): (pith: Pith | Stream<Pith>) => void;
  text(text: string | Stream<string>): void;
  comment(text: string | Stream<string>): void;
  put(tag: string, key: string, r: Stream<RVNode>): void;
}
export type Pith = (put: Ray0, on: Stream<Action>) => void

export type Bark = (pith: Pith | Stream<Pith>) => Stream<RVNode>

declare export default function tree(
  tag: string,
  data?: Data | Stream<Data>
): Bark
