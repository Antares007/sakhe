// @flow
import type {Stream} from '@most/types'
import type {PutRay} from '../most'
import type {Data, VNode} from './types'

export type Action = {type: 'on', action: $FlowTODO, event: Event}

export type Patch = (vnode: VNode, cb: (event: mixed) => void) => void
export type ActionRay = Stream<Action>

export interface VNodeRay extends PutRay<Patch> {
  node(
    tag: string,
    data?: Data | Stream<Data>,
    key?: string
  ): (pith: Pith | Stream<Pith>) => void;
  text(text: string | Stream<string>): void;
  comment(text: string | Stream<string>): void;
  rnode(tag: string, key: string, r: Stream<Patch>): void;
}

export interface Pith {(put: VNodeRay, on: ActionRay): void}

export interface Bark {(pith: Pith | Stream<Pith>): Stream<Patch>}

declare export default function tree(
  tag: string,
  data?: Data | Stream<Data>
): Bark
