// @flow
import type {Stream} from '@most/types'

export type $<T> = T | Stream<T>

export interface Ray<A> {(a: Stream<A>): void}

export type Pith<A> = {(put: Ray<A>): void}

export type Bark<A, B> = {(pith: $<Pith<A>>): Stream<B>}

declare export function to$<T>(x: T | Stream<T>): Stream<T>

declare export function tree<A, B>(
  deltac: (as: Stream<A>[]) => Stream<B>
): Bark<A, B>
