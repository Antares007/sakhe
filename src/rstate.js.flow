// @flow
import type {Stream} from '@most/types'
import type {$} from './most'

export type Absurd<T> = () => T

export type R<T> = (state: T) => T

export type RState<T> = {
  (state: T): T,
  type: 'rstate',
}

export type Ray0<A> = {
  extend<Key: $Keys<A>, B: $Subtype<$ElementType<A, Key>>>(
    key: Key,
    absurdB: Absurd<B>
  ): (pith: $<Pith<B>>) => void,
  val<Key: $Keys<A>>(key: Key, r: Stream<R<$ElementType<A, Key>>>): void,
  put(r: Stream<R<A>>): void,
}

export type Pith<A> = (state: Ray0<A>) => void

export type Bark<A> = (pith: $<Pith<A>>) => Stream<RState<A>>

declare export default function tree<A>(absurdA: Absurd<A>): Bark<A>
