// @flow
export type UnaryFn<A, B> = A => B

export type Pipe = (<A, B, C, D, E, F, G>(
  ab: UnaryFn<A, B>,
  bc: UnaryFn<B, C>,
  cd: UnaryFn<C, D>,
  de: UnaryFn<D, E>,
  ef: UnaryFn<E, F>,
  fg: UnaryFn<F, G>,
  ...rest: Array<void>
) => UnaryFn<A, G>) &
  (<A, B, C, D, E, F>(
    ab: UnaryFn<A, B>,
    bc: UnaryFn<B, C>,
    cd: UnaryFn<C, D>,
    de: UnaryFn<D, E>,
    ef: UnaryFn<E, F>,
    ...rest: Array<void>
  ) => UnaryFn<A, F>) &
  (<A, B, C, D, E>(
    ab: UnaryFn<A, B>,
    bc: UnaryFn<B, C>,
    cd: UnaryFn<C, D>,
    de: UnaryFn<D, E>,
    ...rest: Array<void>
  ) => UnaryFn<A, E>) &
  (<A, B, C, D>(
    ab: UnaryFn<A, B>,
    bc: UnaryFn<B, C>,
    cd: UnaryFn<C, D>,
    ...rest: Array<void>
  ) => UnaryFn<A, D>) &
  (<A, B, C>(
    ab: UnaryFn<A, B>,
    bc: UnaryFn<B, C>,
    ...rest: Array<void>
  ) => UnaryFn<A, C>) &
  (<A, B>(ab: UnaryFn<A, B>, ...rest: Array<void>) => UnaryFn<A, B>)

declare export default Pipe
