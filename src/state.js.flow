// @flow
import type {Stream} from '@most/types'
import type {
  Absurd,
  StateRay as InnerStateRay,
  Pith as InnerPith
} from './rstate'

export interface StateRay<A: {+[key: string]: mixed}> extends InnerStateRay<A> {
  extend<Key: $Keys<A>, B: $Subtype<$ElementType<$Exact<A>, Key>>>(
    key: Key,
    absurdB: Absurd<B>
  ): (pith: Pith<B> | Stream<Pith<B>>) => void;
}

export interface Pith<A> extends InnerPith<A> {
  (state: StateRay<A>, onChange: Stream<A>): void;
}

export interface Bark<A> {
  (pith: Pith<A> | Stream<Pith<A>>): Stream<$Subtype<$Exact<A>>>;
}

declare export default function tree<A>(
  absurdA: Absurd<A>,
  initState?: A
): Bark<A>
