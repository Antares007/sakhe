// @flow
import type {Stream} from '@most/types'
import type {Absurd, Ray0 as StateRay} from '../rstate'
import type {Data} from '../vtree/types'
import type {Ray0 as RVNodeRay, Action} from '../vtree/rvnode'

export interface Ray<A> {
  snode<Key: $Keys<A>, B: $Subtype<$ElementType<$Exact<A>, Key>>>(
    key: Key,
    absurd: Absurd<B>,
    tag: string,
    data?: Data
  ): (pith: SPith<B>) => void;
}
export type VPith<A> = (put: RVNodeRay & Ray<A>) => void

export type SPith<A> = (
  state: StateRay<A>,
  on: Stream<Action>,
  onChange: Stream<A>
) => VPith<A> | Stream<VPith<A>>

declare export default function tree<A>(
  absurd: Absurd<A>,
  initState: $Subtype<$Exact<A>>,
  element: Element,
  data?: Data
): (pith: SPith<A>) => Stream<A>
