// @flow
import type {Stream} from '@most/types'
import type {Data} from '../vtree/types'
import type {Absurd, StateRay as InnerStateRay} from '../rstate'
import type {
  VNodeRay as InnerVNodeRay,
  ActionRay as InnerActionRay,
} from './rsvnode'

export type VNodeRay<A> = {
  ...$Exact<InnerVNodeRay<A>>,
  snode<Key: $Keys<A>, B: $Subtype<$ElementType<$Exact<A>, Key>>>(
    key: Key,
    absurd: Absurd<B>,
    tag: string,
    data?: Data
  ): (pith: SPith<B>) => void,
}
export type ActionRay = InnerActionRay
export type VPith<A> = (put: VNodeRay<A>, on: ActionRay) => void

export type StateRay<A> = InnerStateRay<A>
export type StateChangeRay<A> = Stream<A>
export type SPith<A> = (
  state: StateRay<A>,
  on: ActionRay,
  onChange: StateChangeRay<A>
) => VPith<A> | Stream<VPith<A>>

declare export default function tree<A>(
  absurd: Absurd<A>,
  initState: $Subtype<$Exact<A>>,
  element: Element,
  data?: Data
): (pith: SPith<A>) => Stream<A>
