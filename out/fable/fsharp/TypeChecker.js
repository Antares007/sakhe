"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mkNilListPat = mkNilListPat;
exports.mkConsListPat = mkConsListPat;
exports.UngeneralizableItem$$$$002Ector$$48F4AA5B = UngeneralizableItem$$$$002Ector$$48F4AA5B;
exports.UngeneralizableItem$$GetFreeTyvars = UngeneralizableItem$$GetFreeTyvars;
exports.UngeneralizableItem$$get_WillNeverHaveFreeTypars = UngeneralizableItem$$get_WillNeverHaveFreeTypars;
exports.UngeneralizableItem$$get_CachedFreeLocalTycons = UngeneralizableItem$$get_CachedFreeLocalTycons;
exports.UngeneralizableItem$$get_CachedFreeTraitSolutions = UngeneralizableItem$$get_CachedFreeTraitSolutions;
exports.TcEnv$$get_DisplayEnv = TcEnv$$get_DisplayEnv;
exports.TcEnv$$get_NameEnv = TcEnv$$get_NameEnv;
exports.TcEnv$$get_AccessRights = TcEnv$$get_AccessRights;
exports.computeAccessRights = computeAccessRights;
exports.emptyTcEnv = emptyTcEnv;
exports.InitialExplicitCtorInfo = InitialExplicitCtorInfo;
exports.InitialImplicitCtorInfo = InitialImplicitCtorInfo;
exports.EnterFamilyRegion = EnterFamilyRegion;
exports.ExitFamilyRegion = ExitFamilyRegion;
exports.AreWithinCtorShape = AreWithinCtorShape;
exports.AreWithinImplicitCtor = AreWithinImplicitCtor;
exports.GetCtorShapeCounter = GetCtorShapeCounter;
exports.GetRecdInfo = GetRecdInfo;
exports.AdjustCtorShapeCounter = AdjustCtorShapeCounter;
exports.ExitCtorShapeRegion = ExitCtorShapeRegion;
exports.addFreeItemOfTy = addFreeItemOfTy;
exports.addFreeItemOfModuleTy = addFreeItemOfModuleTy;
exports.AddValMapToNameEnv = AddValMapToNameEnv;
exports.AddValListToNameEnv = AddValListToNameEnv;
exports.addInternalsAccessibility = addInternalsAccessibility;
exports.AddLocalValPrimitive = AddLocalValPrimitive;
exports.AddLocalValMap = AddLocalValMap;
exports.AddLocalVals = AddLocalVals;
exports.AddLocalVal = AddLocalVal;
exports.AddLocalExnDefnAndReport = AddLocalExnDefnAndReport;
exports.AddLocalTyconRefs = AddLocalTyconRefs;
exports.AddLocalTycons = AddLocalTycons;
exports.AddLocalTyconsAndReport = AddLocalTyconsAndReport;
exports.OpenModulesOrNamespaces = OpenModulesOrNamespaces;
exports.AddRootModuleOrNamespaceRefs = AddRootModuleOrNamespaceRefs;
exports.AddNonLocalCcu = AddNonLocalCcu;
exports.AddLocalRootModuleOrNamespace = AddLocalRootModuleOrNamespace;
exports.AddModuleAbbreviationAndReport = AddModuleAbbreviationAndReport;
exports.AddLocalSubModule = AddLocalSubModule;
exports.AddLocalSubModuleAndReport = AddLocalSubModuleAndReport;
exports.AddDeclaredTypars = AddDeclaredTypars;
exports.cenv$$$Create$$Z24644A4C = cenv$$$Create$$Z24644A4C;
exports.CopyAndFixupTypars = CopyAndFixupTypars;
exports.UnifyTypes = UnifyTypes;
exports.MakeInitialEnv = MakeInitialEnv;
exports.MakeInnerEnvWithAcc = MakeInnerEnvWithAcc;
exports.MakeInnerEnv = MakeInnerEnv;
exports.MakeInnerEnvForTyconRef = MakeInnerEnvForTyconRef;
exports.MakeInnerEnvForMember = MakeInnerEnvForMember;
exports.GetCurrAccumulatedModuleOrNamespaceType = GetCurrAccumulatedModuleOrNamespaceType;
exports.SetCurrAccumulatedModuleOrNamespaceType = SetCurrAccumulatedModuleOrNamespaceType;
exports.LocateEnv = LocateEnv;
exports.BuildRootModuleType = BuildRootModuleType;
exports.BuildRootModuleExpr = BuildRootModuleExpr;
exports.TryStripPrefixPath = TryStripPrefixPath;
exports.ImplicitlyOpenOwnNamespace = ImplicitlyOpenOwnNamespace;
exports.ShrinkContext = ShrinkContext;
exports.UnifyRefTupleType = UnifyRefTupleType;
exports.UnifyStructTupleType = UnifyStructTupleType;
exports.UnifyFunctionTypeUndoIfFailed = UnifyFunctionTypeUndoIfFailed;
exports.UnifyFunctionType = UnifyFunctionType;
exports.ReportImplicitlyIgnoredBoolExpression = ReportImplicitlyIgnoredBoolExpression;
exports.UnifyUnitType = UnifyUnitType;
exports.ForNewConstructors = ForNewConstructors;
exports.TcSynRationalConst = TcSynRationalConst;
exports.TcConst = TcConst;
exports.TcFieldInit = TcFieldInit;
exports.AdjustValSynInfoInSignature = AdjustValSynInfoInSignature;
exports.TranslateTopArgSynInfo = TranslateTopArgSynInfo;
exports.TranslateTopValSynInfo = TranslateTopValSynInfo;
exports.TranslatePartialArity = TranslatePartialArity;
exports.ComputeLogicalName = ComputeLogicalName;
exports.MakeMemberDataAndMangledNameForMemberVal = MakeMemberDataAndMangledNameForMemberVal;
exports.DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD = DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD;
exports.DeclKind$$$MustHaveArity$$Z6CE1C8BD = DeclKind$$$MustHaveArity$$Z6CE1C8BD;
exports.DeclKind$$get_CanBeDllImport = DeclKind$$get_CanBeDllImport;
exports.DeclKind$$$IsAccessModifierPermitted$$Z6CE1C8BD = DeclKind$$$IsAccessModifierPermitted$$Z6CE1C8BD;
exports.DeclKind$$$ImplicitlyStatic$$Z6CE1C8BD = DeclKind$$$ImplicitlyStatic$$Z6CE1C8BD;
exports.DeclKind$$$AllowedAttribTargets = DeclKind$$$AllowedAttribTargets;
exports.DeclKind$$$CanGeneralizeConstrainedTypars$$Z6CE1C8BD = DeclKind$$$CanGeneralizeConstrainedTypars$$Z6CE1C8BD;
exports.DeclKind$$$ConvertToLinearBindings$$Z6CE1C8BD = DeclKind$$$ConvertToLinearBindings$$Z6CE1C8BD;
exports.DeclKind$$$CanOverrideOrImplement$$Z6CE1C8BD = DeclKind$$$CanOverrideOrImplement$$Z6CE1C8BD;
exports.PrelimValScheme1$$get_Type = PrelimValScheme1$$get_Type;
exports.PrelimValScheme1$$get_Ident = PrelimValScheme1$$get_Ident;
exports.ValScheme$$get_GeneralizedTypars = ValScheme$$get_GeneralizedTypars;
exports.ValScheme$$get_TypeScheme = ValScheme$$get_TypeScheme;
exports.TcPatPhase2Input$$get_RightPath = TcPatPhase2Input$$get_RightPath;
exports.CheckedBindingInfo$$get_Expr = CheckedBindingInfo$$get_Expr;
exports.CheckedBindingInfo$$get_SeqPoint = CheckedBindingInfo$$get_SeqPoint;
exports.GeneralizedTypeForTypeScheme = GeneralizedTypeForTypeScheme;
exports.NonGenericTypeScheme = NonGenericTypeScheme;
exports.UpdateAccModuleOrNamespaceType = UpdateAccModuleOrNamespaceType;
exports.PublishModuleDefn = PublishModuleDefn;
exports.PublishTypeDefn = PublishTypeDefn;
exports.PublishValueDefnPrim = PublishValueDefnPrim;
exports.PublishValueDefn = PublishValueDefn;
exports.CombineVisibilityAttribs = CombineVisibilityAttribs;
exports.ComputeAccessAndCompPath = ComputeAccessAndCompPath;
exports.CheckForAbnormalOperatorNames = CheckForAbnormalOperatorNames;
exports.MakeAndPublishVal = MakeAndPublishVal;
exports.MakeAndPublishVals = MakeAndPublishVals;
exports.MakeAndPublishBaseVal = MakeAndPublishBaseVal;
exports.InstanceMembersNeedSafeInitCheck = InstanceMembersNeedSafeInitCheck;
exports.MakeSafeInitField = MakeSafeInitField;
exports.ComputeInstanceSafeInitInfo = ComputeInstanceSafeInitInfo;
exports.MakeAndPublishSafeThisVal = MakeAndPublishSafeThisVal;
exports.AdjustAndForgetUsesOfRecValue = AdjustAndForgetUsesOfRecValue;
exports.AdjustRecType = AdjustRecType;
exports.RecordUseOfRecValue = RecordUseOfRecValue;
exports.GetAllUsesOfRecValue = GetAllUsesOfRecValue;
exports.ChooseCanonicalDeclaredTyparsAfterInference = ChooseCanonicalDeclaredTyparsAfterInference;
exports.ChooseCanonicalValSchemeAfterInference = ChooseCanonicalValSchemeAfterInference;
exports.PlaceTyparsInDeclarationOrder = PlaceTyparsInDeclarationOrder;
exports.SetTyparRigid = SetTyparRigid;
exports.GeneralizeVal = GeneralizeVal;
exports.GeneralizeVals = GeneralizeVals;
exports.DontGeneralizeVals = DontGeneralizeVals;
exports.InferGenericArityFromTyScheme = InferGenericArityFromTyScheme;
exports.ComputeIsTyFunc = ComputeIsTyFunc;
exports.UseSyntacticArity = UseSyntacticArity;
exports.CombineSyntacticAndInferredArities = CombineSyntacticAndInferredArities;
exports.BuildValScheme = BuildValScheme;
exports.UseCombinedArity = UseCombinedArity;
exports.UseNoArity = UseNoArity;
exports.MakeSimpleVals = MakeSimpleVals;
exports.MakeAndPublishSimpleVals = MakeAndPublishSimpleVals;
exports.FreshenTyconRef = FreshenTyconRef;
exports.FreshenPossibleForallTy = FreshenPossibleForallTy;
exports.infoOfTyconRef = infoOfTyconRef;
exports.FreshenAbstractSlot = FreshenAbstractSlot;
exports.BuildFieldMap = BuildFieldMap;
exports.ApplyUnionCaseOrExn = ApplyUnionCaseOrExn;
exports.ApplyUnionCaseOrExnTypes = ApplyUnionCaseOrExnTypes;
exports.ApplyUnionCaseOrExnTypesForPat = ApplyUnionCaseOrExnTypesForPat;
exports.UnionCaseOrExnCheck = UnionCaseOrExnCheck;
exports.TcUnionCaseOrExnField = TcUnionCaseOrExnField;
exports.AddUnscopedTypar = AddUnscopedTypar;
exports.TryFindUnscopedTypar = TryFindUnscopedTypar;
exports.HideUnscopedTypars = HideUnscopedTypars;
exports.GeneralizationHelpers$$$ComputeUngeneralizableTypars = GeneralizationHelpers$$$ComputeUngeneralizableTypars;
exports.GeneralizationHelpers$$$ComputeUnabstractableTycons = GeneralizationHelpers$$$ComputeUnabstractableTycons;
exports.GeneralizationHelpers$$$ComputeUnabstractableTraitSolutions = GeneralizationHelpers$$$ComputeUnabstractableTraitSolutions;
exports.GeneralizationHelpers$$$IsGeneralizableValue = GeneralizationHelpers$$$IsGeneralizableValue;
exports.GeneralizationHelpers$$$CanGeneralizeConstrainedTyparsForDecl = GeneralizationHelpers$$$CanGeneralizeConstrainedTyparsForDecl;
exports.GeneralizationHelpers$$$TrimUngeneralizableTypars = GeneralizationHelpers$$$TrimUngeneralizableTypars;
exports.GeneralizationHelpers$$$CondenseTypars = GeneralizationHelpers$$$CondenseTypars;
exports.GeneralizationHelpers$$$CanonicalizePartialInferenceProblem = GeneralizationHelpers$$$CanonicalizePartialInferenceProblem;
exports.GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars = GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars;
exports.GeneralizationHelpers$$$CheckDeclaredTyparsPermitted = GeneralizationHelpers$$$CheckDeclaredTyparsPermitted;
exports.GeneralizationHelpers$$$ComputeCanInferExtraGeneralizableTypars = GeneralizationHelpers$$$ComputeCanInferExtraGeneralizableTypars;
exports.ComputeInlineFlag = ComputeInlineFlag;
exports.PushOnePatternToRhs = PushOnePatternToRhs;
exports.BindingNormalization$$$NormalizeBinding = BindingNormalization$$$NormalizeBinding;
exports.EventDeclarationNormalization$$$ConvertSynInfo = EventDeclarationNormalization$$$ConvertSynInfo;
exports.EventDeclarationNormalization$$$ConvertMemberFlags = EventDeclarationNormalization$$$ConvertMemberFlags;
exports.EventDeclarationNormalization$$$GenerateExtraBindings = EventDeclarationNormalization$$$GenerateExtraBindings;
exports.FreshenObjectArgType = FreshenObjectArgType;
exports.TcValEarlyGeneralizationConsistencyCheck = TcValEarlyGeneralizationConsistencyCheck;
exports.TcVal = TcVal;
exports.LightweightTcValForUsingInBuildMethodCall = LightweightTcValForUsingInBuildMethodCall;
exports.ApplicableExpr$$get_Range = ApplicableExpr$$get_Range;
exports.ApplicableExpr$$get_Type = ApplicableExpr$$get_Type;
exports.ApplicableExpr$$SupplyArgument$$Z47F331B3 = ApplicableExpr$$SupplyArgument$$Z47F331B3;
exports.ApplicableExpr$$get_Expr = ApplicableExpr$$get_Expr;
exports.MakeApplicableExprNoFlex = MakeApplicableExprNoFlex;
exports.MakeApplicableExprWithFlex = MakeApplicableExprWithFlex;
exports.TcRuntimeTypeTest = TcRuntimeTypeTest;
exports.TcStaticUpcast = TcStaticUpcast;
exports.BuildPossiblyConditionalMethodCall = BuildPossiblyConditionalMethodCall;
exports.TryFindIntrinsicOrExtensionMethInfo = TryFindIntrinsicOrExtensionMethInfo;
exports.BuildDisposableCleanup = BuildDisposableCleanup;
exports.BuildOffsetToStringData = BuildOffsetToStringData;
exports.BuildILFieldGet = BuildILFieldGet;
exports.BuildILFieldSet = BuildILFieldSet;
exports.BuildILStaticFieldSet = BuildILStaticFieldSet;
exports.BuildRecdFieldSet = BuildRecdFieldSet;
exports.$007CBinOpExpr$007C_$007C = $007CBinOpExpr$007C_$007C;
exports.$007CSimpleEqualsExpr$007C_$007C = $007CSimpleEqualsExpr$007C_$007C;
exports.$007CJoinRelation$007C_$007C = $007CJoinRelation$007C_$007C;
exports.TryGetNamedArg = TryGetNamedArg;
exports.GetMethodArgs = GetMethodArgs;
exports.CompilePatternForMatch = CompilePatternForMatch;
exports.CompilePatternForMatchClauses = CompilePatternForMatchClauses;
exports.AnalyzeArbitraryExprAsEnumerable = AnalyzeArbitraryExprAsEnumerable;
exports.ConvertArbitraryExprToEnumerable = ConvertArbitraryExprToEnumerable;
exports.mkSeqEmpty = mkSeqEmpty;
exports.mkSeqCollect = mkSeqCollect;
exports.mkSeqUsing = mkSeqUsing;
exports.mkSeqDelay = mkSeqDelay;
exports.mkSeqAppend = mkSeqAppend;
exports.mkSeqFromFunctions = mkSeqFromFunctions;
exports.mkSeqFinally = mkSeqFinally;
exports.mkSeqExprMatchClauses = mkSeqExprMatchClauses;
exports.compileSeqExprMatchClauses = compileSeqExprMatchClauses;
exports.elimFastIntegerForLoop = elimFastIntegerForLoop;
exports.$007CExprAsPat$007C_$007C = $007CExprAsPat$007C_$007C;
exports.$007CSimpleSemicolonSequence$007C_$007C = $007CSimpleSemicolonSequence$007C_$007C;
exports.MutRecShapes$$$map = MutRecShapes$$$map;
exports.MutRecShapes$$$mapTycons = MutRecShapes$$$mapTycons;
exports.MutRecShapes$$$mapTyconsAndLets = MutRecShapes$$$mapTyconsAndLets;
exports.MutRecShapes$$$mapLets = MutRecShapes$$$mapLets;
exports.MutRecShapes$$$mapModules = MutRecShapes$$$mapModules;
exports.MutRecShapes$$$mapWithEnv = MutRecShapes$$$mapWithEnv;
exports.MutRecShapes$$$mapTyconsWithEnv = MutRecShapes$$$mapTyconsWithEnv;
exports.MutRecShapes$$$mapWithParent = MutRecShapes$$$mapWithParent;
exports.MutRecShapes$$$computeEnvs = MutRecShapes$$$computeEnvs;
exports.MutRecShapes$$$extendEnvs = MutRecShapes$$$extendEnvs;
exports.MutRecShapes$$$dropEnvs = MutRecShapes$$$dropEnvs;
exports.MutRecShapes$$$expandTyconsWithEnv = MutRecShapes$$$expandTyconsWithEnv;
exports.MutRecShapes$$$mapFoldWithEnv = MutRecShapes$$$mapFoldWithEnv;
exports.MutRecShapes$$$collectTycons = MutRecShapes$$$collectTycons;
exports.MutRecShapes$$$topTycons = MutRecShapes$$$topTycons;
exports.MutRecShapes$$$iter = MutRecShapes$$$iter;
exports.MutRecShapes$$$iterTycons = MutRecShapes$$$iterTycons;
exports.MutRecShapes$$$iterTyconsAndLets = MutRecShapes$$$iterTyconsAndLets;
exports.MutRecShapes$$$iterModules = MutRecShapes$$$iterModules;
exports.MutRecShapes$$$iterWithEnv = MutRecShapes$$$iterWithEnv;
exports.MutRecShapes$$$iterTyconsWithEnv = MutRecShapes$$$iterTyconsWithEnv;
exports.EliminateInitializationGraphs = EliminateInitializationGraphs;
exports.CheckAndRewriteObjectCtor = CheckAndRewriteObjectCtor;
exports.buildApp = buildApp;
exports.MakeDelayedSet = MakeDelayedSet;
exports.ContainerInfo$$get_ParentRef = ContainerInfo$$get_ParentRef;
exports.ModuleOrNamespaceContainerInfo = ModuleOrNamespaceContainerInfo;
exports.TyconContainerInfo = TyconContainerInfo;
exports.RecursiveBindingInfo$$get_EnclosingDeclaredTypars = RecursiveBindingInfo$$get_EnclosingDeclaredTypars;
exports.RecursiveBindingInfo$$get_Val = RecursiveBindingInfo$$get_Val;
exports.RecursiveBindingInfo$$get_ExplicitTyparInfo = RecursiveBindingInfo$$get_ExplicitTyparInfo;
exports.RecursiveBindingInfo$$get_DeclaredTypars = RecursiveBindingInfo$$get_DeclaredTypars;
exports.RecursiveBindingInfo$$get_Index = RecursiveBindingInfo$$get_Index;
exports.RecursiveBindingInfo$$get_ContainerInfo = RecursiveBindingInfo$$get_ContainerInfo;
exports.RecursiveBindingInfo$$get_DeclKind = RecursiveBindingInfo$$get_DeclKind;
exports.PostGeneralizationRecursiveBinding$$get_GeneralizedTypars = PostGeneralizationRecursiveBinding$$get_GeneralizedTypars;
exports.CanInferExtraGeneralizedTyparsForRecBinding = CanInferExtraGeneralizedTyparsForRecBinding;
exports.GetInstanceMemberThisVariable = GetInstanceMemberThisVariable;
exports.TcTyparConstraint = TcTyparConstraint;
exports.TcPseudoMemberSpec = TcPseudoMemberSpec;
exports.TcValSpec = TcValSpec;
exports.TcTyparOrMeasurePar = TcTyparOrMeasurePar;
exports.TcTypar = TcTypar;
exports.TcTyparDecl = TcTyparDecl;
exports.TcTyparDecls = TcTyparDecls;
exports.TcTypeOrMeasure = TcTypeOrMeasure;
exports.TcType = TcType;
exports.TcMeasure = TcMeasure;
exports.TcAnonTypeOrMeasure = TcAnonTypeOrMeasure;
exports.TcTypes = TcTypes;
exports.TcTypesAsTuple = TcTypesAsTuple;
exports.TcMeasuresAsTuple = TcMeasuresAsTuple;
exports.TcTypesOrMeasures = TcTypesOrMeasures;
exports.TcTyparConstraints = TcTyparConstraints;
exports.TcTypeApp = TcTypeApp;
exports.TcTypeOrMeasureAndRecover = TcTypeOrMeasureAndRecover;
exports.TcTypeAndRecover = TcTypeAndRecover;
exports.TcNestedTypeApplication = TcNestedTypeApplication;
exports.TryAdjustHiddenVarNameToCompGenName = TryAdjustHiddenVarNameToCompGenName;
exports.TcSimplePat = TcSimplePat;
exports.ValidateOptArgOrder = ValidateOptArgOrder;
exports.TcSimplePats = TcSimplePats;
exports.TcSimplePatsOfUnknownType = TcSimplePatsOfUnknownType;
exports.TcPatBindingName = TcPatBindingName;
exports.TcPatAndRecover = TcPatAndRecover;
exports.TcPat = TcPat;
exports.TcPatterns = TcPatterns;
exports.solveTypAsError = solveTypAsError;
exports.RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects = RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects;
exports.RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects_Delayed = RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects_Delayed;
exports.UnifyTypesAndRecover = UnifyTypesAndRecover;
exports.TcExprOfUnknownType = TcExprOfUnknownType;
exports.TcExprFlex = TcExprFlex;
exports.TcExpr = TcExpr;
exports.TcExprNoRecover = TcExprNoRecover;
exports.TcExprOfUnknownTypeThen = TcExprOfUnknownTypeThen;
exports.TcExprThatIsCtorBody = TcExprThatIsCtorBody;
exports.TcExprThatCanBeCtorBody = TcExprThatCanBeCtorBody;
exports.TcExprThatCantBeCtorBody = TcExprThatCantBeCtorBody;
exports.TcStmtThatCantBeCtorBody = TcStmtThatCantBeCtorBody;
exports.TcStmt = TcStmt;
exports.TcExprThen = TcExprThen;
exports.TcExprs = TcExprs;
exports.CheckSuperInit = CheckSuperInit;
exports.TcExprUndelayedNoType = TcExprUndelayedNoType;
exports.TcExprUndelayed = TcExprUndelayed;
exports.TcIteratedLambdas = TcIteratedLambdas;
exports.TcIndexerThen = TcIndexerThen;
exports.TcNewExpr = TcNewExpr;
exports.TcCtorCall = TcCtorCall;
exports.TcRecordConstruction = TcRecordConstruction;
exports.GetNameAndArityOfObjExprBinding = GetNameAndArityOfObjExprBinding;
exports.FreshenObjExprAbstractSlot = FreshenObjExprAbstractSlot;
exports.TcObjectExprBinding = TcObjectExprBinding;
exports.ComputeObjectExprOverrides = ComputeObjectExprOverrides;
exports.CheckSuperType = CheckSuperType;
exports.TcObjectExpr = TcObjectExpr;
exports.TcConstStringExpr = TcConstStringExpr;
exports.TcConstExpr = TcConstExpr;
exports.TcAssertExpr = TcAssertExpr;
exports.TcRecdExpr = TcRecdExpr;
exports.TcForEachExpr = TcForEachExpr;
exports.TcQuotationExpr = TcQuotationExpr;
exports.TcComputationOrSequenceExpression = TcComputationOrSequenceExpression;
exports.IgnoreAttribute = IgnoreAttribute;
exports.TcComputationExpression = TcComputationExpression;
exports.TcSequenceExpression = TcSequenceExpression;
exports.Propagate = Propagate;
exports.PropagateThenTcDelayed = PropagateThenTcDelayed;
exports.TcDelayed = TcDelayed;
exports.delayRest = delayRest;
exports.TcFunctionApplicationThen = TcFunctionApplicationThen;
exports.TcLongIdentThen = TcLongIdentThen;
exports.TcItemThen = TcItemThen;
exports.GetSynMemberApplicationArgs = GetSynMemberApplicationArgs;
exports.TcMemberTyArgsOpt = TcMemberTyArgsOpt;
exports.GetMemberApplicationArgs = GetMemberApplicationArgs;
exports.TcLookupThen = TcLookupThen;
exports.TcEventValueThen = TcEventValueThen;
exports.TcMethodApplicationThen = TcMethodApplicationThen;
exports.GetNewInferenceTypeForMethodArg = GetNewInferenceTypeForMethodArg;
exports.TcMethodApplication = TcMethodApplication;
exports.TcUnnamedMethodArgs = TcUnnamedMethodArgs;
exports.TcUnnamedMethodArg = TcUnnamedMethodArg;
exports.TcMethodNamedArgs = TcMethodNamedArgs;
exports.TcMethodNamedArg = TcMethodNamedArg;
exports.TcMethodArg = TcMethodArg;
exports.TcNewDelegateThen = TcNewDelegateThen;
exports.bindLetRec = bindLetRec;
exports.CheckRecursiveBindingIds = CheckRecursiveBindingIds;
exports.TcLinearExprs = TcLinearExprs;
exports.TcAndPatternCompileMatchClauses = TcAndPatternCompileMatchClauses;
exports.TcMatchPattern = TcMatchPattern;
exports.TcMatchClauses = TcMatchClauses;
exports.TcMatchClause = TcMatchClause;
exports.TcStaticOptimizationConstraint = TcStaticOptimizationConstraint;
exports.mkConvToNativeInt = mkConvToNativeInt;
exports.TcAndBuildFixedExpr = TcAndBuildFixedExpr;
exports.TcNormalizedBinding = TcNormalizedBinding;
exports.TcLiteral = TcLiteral;
exports.TcBindingTyparDecls = TcBindingTyparDecls;
exports.TcNonrecBindingTyparDecls = TcNonrecBindingTyparDecls;
exports.TcNonRecursiveBinding = TcNonRecursiveBinding;
exports.TcAttribute = TcAttribute;
exports.TcAttributesWithPossibleTargets = TcAttributesWithPossibleTargets;
exports.TcAttributesMaybeFail = TcAttributesMaybeFail;
exports.TcAttributesCanFail = TcAttributesCanFail;
exports.TcAttributes = TcAttributes;
exports.TcLetBinding = TcLetBinding;
exports.TcLetBindings = TcLetBindings;
exports.CheckMemberFlags = CheckMemberFlags;
exports.ApplyTypesFromArgumentPatterns = ApplyTypesFromArgumentPatterns;
exports.ComputeIsComplete = ComputeIsComplete;
exports.ApplyAbstractSlotInference = ApplyAbstractSlotInference;
exports.CheckForNonAbstractInterface = CheckForNonAbstractInterface;
exports.AnalyzeRecursiveStaticMemberOrValDecl = AnalyzeRecursiveStaticMemberOrValDecl;
exports.AnalyzeRecursiveInstanceMemberDecl = AnalyzeRecursiveInstanceMemberDecl;
exports.AnalyzeRecursiveDecl = AnalyzeRecursiveDecl;
exports.AnalyzeAndMakeAndPublishRecursiveValue = AnalyzeAndMakeAndPublishRecursiveValue;
exports.AnalyzeAndMakeAndPublishRecursiveValues = AnalyzeAndMakeAndPublishRecursiveValues;
exports.TcLetrecBinding = TcLetrecBinding;
exports.TcIncrementalLetRecGeneralization = TcIncrementalLetRecGeneralization;
exports.TcLetrecComputeAndGeneralizeGenericTyparsForBinding = TcLetrecComputeAndGeneralizeGenericTyparsForBinding;
exports.TcLetrecComputeSupportForBinding = TcLetrecComputeSupportForBinding;
exports.TcLetrecGeneralizeBinding = TcLetrecGeneralizeBinding;
exports.TcLetrecComputeCtorSafeThisValBind = TcLetrecComputeCtorSafeThisValBind;
exports.MakeCheckSafeInitField = MakeCheckSafeInitField;
exports.MakeCheckSafeInit = MakeCheckSafeInit;
exports.TcLetrecAdjustMemberForSpecialVals = TcLetrecAdjustMemberForSpecialVals;
exports.FixupLetrecBind = FixupLetrecBind;
exports.unionGeneralizedTypars = unionGeneralizedTypars;
exports.TcLetrec = TcLetrec;
exports.TcAndPublishValSpec = TcAndPublishValSpec;
exports.CheckNamespaceModuleOrTypeName = CheckNamespaceModuleOrTypeName;
exports.CheckDuplicates = CheckDuplicates;
exports.TcRecdUnionAndEnumDeclarations$$$CombineReprAccess = TcRecdUnionAndEnumDeclarations$$$CombineReprAccess;
exports.TcRecdUnionAndEnumDeclarations$$$MakeRecdFieldSpec = TcRecdUnionAndEnumDeclarations$$$MakeRecdFieldSpec;
exports.TcRecdUnionAndEnumDeclarations$$$TcFieldDecl = TcRecdUnionAndEnumDeclarations$$$TcFieldDecl;
exports.TcRecdUnionAndEnumDeclarations$$$TcAnonFieldDecl = TcRecdUnionAndEnumDeclarations$$$TcAnonFieldDecl;
exports.TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecl = TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecl;
exports.TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecls = TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecls;
exports.TcRecdUnionAndEnumDeclarations$$$CheckUnionCaseName = TcRecdUnionAndEnumDeclarations$$$CheckUnionCaseName;
exports.TcRecdUnionAndEnumDeclarations$$$ValidateFieldNames = TcRecdUnionAndEnumDeclarations$$$ValidateFieldNames;
exports.TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecl = TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecl;
exports.TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecls = TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecls;
exports.TcRecdUnionAndEnumDeclarations$$$TcEnumDecl = TcRecdUnionAndEnumDeclarations$$$TcEnumDecl;
exports.TcRecdUnionAndEnumDeclarations$$$TcEnumDecls = TcRecdUnionAndEnumDeclarations$$$TcEnumDecls;
exports.PublishInterface = PublishInterface;
exports.TcAndPublishMemberSpec = TcAndPublishMemberSpec;
exports.TcTyconMemberSpecs = TcTyconMemberSpecs;
exports.TcModuleOrNamespaceLidAndPermitAutoResolve = TcModuleOrNamespaceLidAndPermitAutoResolve;
exports.TcOpenDecl = TcOpenDecl;
exports.IncrClassChecking$002EIncrClassCtorLhs$$GetNormalizedInstanceCtorDeclaredTypars = IncrClassChecking$002EIncrClassCtorLhs$$GetNormalizedInstanceCtorDeclaredTypars;
exports.IncrClassChecking$$$TcImplictCtorLhs_Phase2A = IncrClassChecking$$$TcImplictCtorLhs_Phase2A;
exports.IncrClassChecking$002EIncrClassReprInfo$$$Empty$$Z64CD1A83 = IncrClassChecking$002EIncrClassReprInfo$$$Empty$$Z64CD1A83;
exports.IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5 = IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5;
exports.IncrClassChecking$002EIncrClassReprInfo$$$IsMethodRepr = IncrClassChecking$002EIncrClassReprInfo$$$IsMethodRepr;
exports.IncrClassChecking$002EIncrClassReprInfo$$ChooseRepresentation$$Z160A65F6 = IncrClassChecking$002EIncrClassReprInfo$$ChooseRepresentation$$Z160A65F6;
exports.IncrClassChecking$002EIncrClassReprInfo$$ChooseAndAddRepresentation$$Z34856005 = IncrClassChecking$002EIncrClassReprInfo$$ChooseAndAddRepresentation$$Z34856005;
exports.IncrClassChecking$002EIncrClassReprInfo$$ValNowWithRepresentation$$7D0CFEA5 = IncrClassChecking$002EIncrClassReprInfo$$ValNowWithRepresentation$$7D0CFEA5;
exports.IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5 = IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5;
exports.IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsLocalVar$$7D0CFEA5 = IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsLocalVar$$7D0CFEA5;
exports.IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsMethod$$7D0CFEA5 = IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsMethod$$7D0CFEA5;
exports.IncrClassChecking$002EIncrClassReprInfo$$MakeValueLookup = IncrClassChecking$002EIncrClassReprInfo$$MakeValueLookup;
exports.IncrClassChecking$002EIncrClassReprInfo$$MakeValueAssign = IncrClassChecking$002EIncrClassReprInfo$$MakeValueAssign;
exports.IncrClassChecking$002EIncrClassReprInfo$$MakeValueGetAddress = IncrClassChecking$002EIncrClassReprInfo$$MakeValueGetAddress;
exports.IncrClassChecking$002EIncrClassReprInfo$$PublishIncrClassFields$$Z7ABB5DE6 = IncrClassChecking$002EIncrClassReprInfo$$PublishIncrClassFields$$Z7ABB5DE6;
exports.IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C;
exports.IncrClassChecking$$$MakeCtorForIncrClassConstructionPhase2C = IncrClassChecking$$$MakeCtorForIncrClassConstructionPhase2C;
exports.MutRecBindingChecking$$$TcMutRecBindings_Phase2A_CreateRecursiveValuesAndCheckArgumentPatterns = MutRecBindingChecking$$$TcMutRecBindings_Phase2A_CreateRecursiveValuesAndCheckArgumentPatterns;
exports.MutRecBindingChecking$$$TcMutRecBindings_Phase2B_TypeCheckAndIncrementalGeneralization = MutRecBindingChecking$$$TcMutRecBindings_Phase2B_TypeCheckAndIncrementalGeneralization;
exports.MutRecBindingChecking$$$TcMutRecBindings_Phase2C_FixupRecursiveReferences = MutRecBindingChecking$$$TcMutRecBindings_Phase2C_FixupRecursiveReferences;
exports.MutRecBindingChecking$$$TcMutRecBindings_Phase2D_ExtractImplicitFieldAndMethodBindings = MutRecBindingChecking$$$TcMutRecBindings_Phase2D_ExtractImplicitFieldAndMethodBindings;
exports.MutRecBindingChecking$$$TcModuleAbbrevDecl = MutRecBindingChecking$$$TcModuleAbbrevDecl;
exports.MutRecBindingChecking$$$TcMutRecDefns_UpdateNSContents = MutRecBindingChecking$$$TcMutRecDefns_UpdateNSContents;
exports.MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents = MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents;
exports.MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs = MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs;
exports.MutRecBindingChecking$$$TcMutRecDefns_Phase2_Bindings = MutRecBindingChecking$$$TcMutRecDefns_Phase2_Bindings;
exports.TcMutRecDefns_Phase2 = TcMutRecDefns_Phase2;
exports.AddAugmentationDeclarations$$$tcaugHasNominalInterface = AddAugmentationDeclarations$$$tcaugHasNominalInterface;
exports.AddAugmentationDeclarations$$$AddGenericCompareDeclarations = AddAugmentationDeclarations$$$AddGenericCompareDeclarations;
exports.AddAugmentationDeclarations$$$AddGenericEqualityWithComparerDeclarations = AddAugmentationDeclarations$$$AddGenericEqualityWithComparerDeclarations;
exports.AddAugmentationDeclarations$$$AddGenericCompareBindings = AddAugmentationDeclarations$$$AddGenericCompareBindings;
exports.AddAugmentationDeclarations$$$AddGenericCompareWithComparerBindings = AddAugmentationDeclarations$$$AddGenericCompareWithComparerBindings;
exports.AddAugmentationDeclarations$$$AddGenericEqualityWithComparerBindings = AddAugmentationDeclarations$$$AddGenericEqualityWithComparerBindings;
exports.AddAugmentationDeclarations$$$AddGenericHashAndComparisonDeclarations = AddAugmentationDeclarations$$$AddGenericHashAndComparisonDeclarations;
exports.AddAugmentationDeclarations$$$AddGenericHashAndComparisonBindings = AddAugmentationDeclarations$$$AddGenericHashAndComparisonBindings;
exports.AddAugmentationDeclarations$$$AddGenericEqualityBindings = AddAugmentationDeclarations$$$AddGenericEqualityBindings;
exports.TyconConstraintInference$$$InferSetOfTyconsSupportingComparable = TyconConstraintInference$$$InferSetOfTyconsSupportingComparable;
exports.TyconConstraintInference$$$InferSetOfTyconsSupportingEquatable = TyconConstraintInference$$$InferSetOfTyconsSupportingEquatable;
exports.ComputeModuleName = ComputeModuleName;
exports.CheckForDuplicateConcreteType = CheckForDuplicateConcreteType;
exports.CheckForDuplicateModule = CheckForDuplicateModule;
exports.TcExceptionDeclarations$$$TcExnDefnCore_Phase1A = TcExceptionDeclarations$$$TcExnDefnCore_Phase1A;
exports.TcExceptionDeclarations$$$TcExnDefnCore_Phase1G_EstablishRepresentation = TcExceptionDeclarations$$$TcExnDefnCore_Phase1G_EstablishRepresentation;
exports.TcExceptionDeclarations$$$TcExnDefn = TcExceptionDeclarations$$$TcExnDefn;
exports.TcExceptionDeclarations$$$TcExnSignature = TcExceptionDeclarations$$$TcExnSignature;
exports.EstablishTypeDefinitionCores$$$ComputeModuleOrNamespaceKind = EstablishTypeDefinitionCores$$$ComputeModuleOrNamespaceKind;
exports.EstablishTypeDefinitionCores$$$AdjustModuleName = EstablishTypeDefinitionCores$$$AdjustModuleName;
exports.EstablishTypeDefinitionCores$$$TypeNamesInMutRecDecls = EstablishTypeDefinitionCores$$$TypeNamesInMutRecDecls;
exports.EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecDecls = EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecDecls;
exports.EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecSigDecls = EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecSigDecls;
exports.EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1A_BuildInitialModule = EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1A_BuildInitialModule;
exports.EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicStructsAndInheritance = EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicStructsAndInheritance;
exports.EstablishTypeDefinitionCores$$$TcMutRecDefns_CheckExplicitConstraints = EstablishTypeDefinitionCores$$$TcMutRecDefns_CheckExplicitConstraints;
exports.EstablishTypeDefinitionCores$$$TcMutRecDefns_Phase1 = EstablishTypeDefinitionCores$$$TcMutRecDefns_Phase1;
exports.TcDeclarations$$$TcMutRecDefinitions = TcDeclarations$$$TcMutRecDefinitions;
exports.TcDeclarations$$$TcMutRecSignatureDecls = TcDeclarations$$$TcMutRecSignatureDecls;
exports.TcSignatureElementNonMutRec = TcSignatureElementNonMutRec;
exports.TcSignatureElements = TcSignatureElements;
exports.TcSignatureElementsNonMutRec = TcSignatureElementsNonMutRec;
exports.TcSignatureElementsMutRec = TcSignatureElementsMutRec;
exports.TcModuleOrNamespaceSignatureElementsNonMutRec = TcModuleOrNamespaceSignatureElementsNonMutRec;
exports.ElimModuleDoBinding = ElimModuleDoBinding;
exports.TcMutRecDefnsEscapeCheck = TcMutRecDefnsEscapeCheck;
exports.CheckLetOrDoInNamespace = CheckLetOrDoInNamespace;
exports.TcModuleOrNamespaceElementNonMutRec = TcModuleOrNamespaceElementNonMutRec;
exports.TcModuleOrNamespaceElementsNonMutRec = TcModuleOrNamespaceElementsNonMutRec;
exports.TcModuleOrNamespaceElementsMutRec = TcModuleOrNamespaceElementsMutRec;
exports.TcMutRecDefsFinish = TcMutRecDefsFinish;
exports.TcModuleOrNamespaceElements = TcModuleOrNamespaceElements;
exports.ApplyAssemblyLevelAutoOpenAttributeToTcEnv = ApplyAssemblyLevelAutoOpenAttributeToTcEnv;
exports.AddCcuToTcEnv = AddCcuToTcEnv;
exports.CreateInitialTcEnv = CreateInitialTcEnv;
exports.CombineTopAttrs = CombineTopAttrs;
exports.IterTyconsOfModuleOrNamespaceType = IterTyconsOfModuleOrNamespaceType;
exports.ApplyDefaults = ApplyDefaults;
exports.CheckValueRestriction = CheckValueRestriction;
exports.SolveInternalUnknowns = SolveInternalUnknowns;
exports.CheckModuleSignature = CheckModuleSignature;
exports.TypeCheckOneImplFile = TypeCheckOneImplFile;
exports.TypeCheckOneSigFile = TypeCheckOneSigFile;
exports.MutRecDefnsPhase2DataForModule = exports.MutRecDefnsPhase2DataForTycon = exports.MutRecDefnsPhase1DataForTycon = exports.MutRecDataForModuleAbbrev = exports.MutRecDataForOpen = exports.RecDefnBindingInfo = exports.ValSpecResult = exports.TyconBindingDefn = exports.NormalizedRecBindingDefn = exports.ExprContainerInfo = exports.ContainerInfo = exports.MemberOrValContainerInfo = exports.TypeRealizationPass = exports.CheckConstraints = exports.ImplictlyBoundTyparsAllowed = exports.NewSlotsOK = exports.DelayedItem = exports.PreInitializationGraphEliminationBinding = exports.InitializationGraphAnalysisState = exports.MutRecShape$00605 = exports.ApplicableExpr = exports.IsObjExprBinding = exports.NormalizedBinding = exports.NormalizedBindingPatternInfo = exports.NormalizedBindingRhs = exports.GeneralizeConstrainedTyparOptions = exports.emptyUnscopedTyparEnv = exports.SyntacticUnscopedTyparEnv = exports.RecursiveUseFixupPoints = exports.CheckedBindingInfo = exports.TcPatPhase2Input = exports.ValScheme = exports.PrelimValScheme2 = exports.PrelimValScheme1 = exports.DeclKind = exports.noArgOrRetAttribs = exports.ArgAndRetAttribs = exports.dontInferTypars = exports.permitInferTypars = exports.ExplicitTyparInfo = exports.OverridesOK = exports.ValMemberInfoTransient = exports.PartialValReprInfo = exports.AttributeTargets$$$Top = exports.AttributeTargets$$$ModuleDecl = exports.AttributeTargets$$$ExnDecl = exports.AttributeTargets$$$TyconDecl = exports.AttributeTargets$$$UnionCaseDecl = exports.AttributeTargets$$$FieldDeclRestricted = exports.AttributeTargets$$$FieldDecl = exports.cenv = exports.TcEnv = exports.UngeneralizableItem = exports.CtorInfo = exports.SafeInitData = exports.InvalidInternalsVisibleToAssemblyName = exports.StandardOperatorRedefinitionWarning = exports.NonUniqueInferredAbstractSlot = exports.OverrideInExtrinsicAugmentation = exports.OverrideInIntrinsicAugmentation = exports.IntfImplInExtrinsicAugmentation = exports.IntfImplInIntrinsicAugmentation = exports.DeprecatedThreadStaticBindingWarning = exports.UseOfAddressOfOperator = exports.NonVirtualAugmentationOnNullValuedType = exports.VirtualAugmentationOnNullValuedType = exports.SelfRefObjCtor = exports.StaticCoercionShouldUseBox = exports.TypeTestUnnecessary = exports.UpcastUnnecessary = exports.CoercionTargetSealed = exports.RuntimeCoercionSourceSealed = exports.IndeterminateStaticCoercion = exports.IndeterminateRuntimeCoercion = exports.InvalidRuntimeCoercion = exports.ValNotLocal = exports.ValNotMutable = exports.ValueRestriction = exports.VarBoundTwice = exports.UnionPatternsBindDifferentNames = exports.UnitTypeExpectedWithPossiblePropertySetter = exports.UnitTypeExpectedWithPossibleAssignment = exports.UnitTypeExpectedWithEquality = exports.UnitTypeExpected = exports.FunctionValueUnexpected = exports.MissingFields = exports.FieldGivenTwice = exports.FieldsFromDifferentTypes = exports.UnionCaseWrongNumberOfArgs = exports.UnionCaseWrongArguments = exports.TyconBadArgs = exports.LetRecUnsound = exports.LetRecCheckedAtRuntime = exports.LetRecEvaluatedOutOfOrder = exports.RecursiveUseCheckedAtRuntime = exports.Recursion = exports.NotAFunctionButIndexer = exports.NotAFunction = exports.FunctionExpected = exports.BakedInMemberConstraintName = void 0;
exports.EmptyTopAttrs = exports.TopAttribs = exports.MutRecBindingChecking$002ETyconBindingsPhase2C = exports.MutRecBindingChecking$002ETyconBindingPhase2C = exports.MutRecBindingChecking$002ETyconBindingsPhase2B = exports.MutRecBindingChecking$002ETyconBindingPhase2B = exports.MutRecBindingChecking$002ETyconBindingsPhase2A = exports.MutRecBindingChecking$002ETyconBindingPhase2A = exports.IncrClassChecking$002EIncrClassConstructionBindingsPhase2C = exports.IncrClassChecking$002EIncrClassReprInfo = exports.IncrClassChecking$002EIncrClassValRepr = exports.IncrClassChecking$002EIncrClassCtorLhs = exports.IncrClassChecking$002EIncrClassBindingGroup = exports.ParameterlessStructCtor = exports.NotUpperCaseConstructor = exports.PostBindCtorThisVarRefCellRecursiveBinding = exports.PostGeneralizationRecursiveBinding = exports.PreGeneralizationRecursiveBinding = exports.PreCheckingRecursiveBinding = exports.RecursiveBindingInfo = exports.MutRecDefnsPhase2InfoForTycon = void 0;

var _PatternMatchCompilation = require("./PatternMatchCompilation");

var _TcGlobals = require("./TcGlobals");

var _Types = require("../fable-core.2.0.3/Types");

var _range = require("./range");

var _TastOps = require("./TastOps");

var _TaggedCollections = require("../utils/TaggedCollections");

var _NameResolution = require("./NameResolution");

var _AccessibilityLogic = require("./AccessibilityLogic");

var _tast = require("./tast");

var _ConstraintSolver = require("./ConstraintSolver");

var _Option = require("../fable-core.2.0.3/Option");

var _illib = require("../absil/illib");

var _List = require("../fable-core.2.0.3/List");

var _Map = require("../fable-core.2.0.3/Map");

var _ErrorLogger = require("./ErrorLogger");

var _adapters = require("../fcs-fable/adapters");

var _ast = require("./ast");

var _InfoReader = require("./InfoReader");

var _String = require("../fable-core.2.0.3/String");

var _Char = require("../fable-core.2.0.3/Char");

var _Seq = require("../fable-core.2.0.3/Seq");

var _lib = require("./lib");

var _Util = require("../fable-core.2.0.3/Util");

var _il = require("../absil/il");

var _PrettyNaming = require("./PrettyNaming");

var _NicePrint = require("./NicePrint");

var _FSComp = require("../codegen/FSComp");

var _rational = require("./rational");

var _Long = require("../fable-core.2.0.3/Long");

var _infos = require("./infos");

var _AttributeChecking = require("./AttributeChecking");

var _zset = require("../absil/zset");

var _TypeRelations = require("./TypeRelations");

var _MethodCalls = require("./MethodCalls");

var _FSharp = require("../fable-core.2.0.3/FSharp.Core");

var _Array = require("../fable-core.2.0.3/Array");

var _Set = require("../fable-core.2.0.3/Set");

var _MethodOverrides = require("./MethodOverrides");

var _CheckFormatStrings = require("./CheckFormatStrings");

var _Int = require("../fable-core.2.0.3/Int32");

var _SignatureConformance = require("./SignatureConformance");

var _zmap = require("../absil/zmap");

var _AugmentWithHashCompare = require("./AugmentWithHashCompare");

var _ildiag = require("../absil/ildiag");

var _QueueList = require("./QueueList");

var _FindUnsolved = require("./FindUnsolved");

var _PostInferenceChecks = require("./PostInferenceChecks");

function mkNilListPat(g, m, ty) {
  return new _PatternMatchCompilation.Pattern(6, "TPat_unioncase", (0, _TcGlobals.TcGlobals$$get_nil_ucref)(g), (0, _Types.L)(ty, (0, _Types.L)()), (0, _Types.L)(), m);
}

function mkConsListPat(g$$1, ty$$1, ph, pt) {
  return new _PatternMatchCompilation.Pattern(6, "TPat_unioncase", (0, _TcGlobals.TcGlobals$$get_cons_ucref)(g$$1), (0, _Types.L)(ty$$1, (0, _Types.L)()), (0, _Types.L)(ph, (0, _Types.L)(pt, (0, _Types.L)())), (0, _range.unionRanges)((0, _PatternMatchCompilation.Pattern$$get_Range)(ph), (0, _PatternMatchCompilation.Pattern$$get_Range)(pt)));
}

const BakedInMemberConstraintName = (0, _Types.declare)(function BakedInMemberConstraintName(arg1, arg2) {
  this.Data0 = arg1;
  this.Data1 = arg2;
}, _Types.FSharpException);
exports.BakedInMemberConstraintName = BakedInMemberConstraintName;
const FunctionExpected = (0, _Types.declare)(function FunctionExpected(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.FunctionExpected = FunctionExpected;
const NotAFunction = (0, _Types.declare)(function NotAFunction(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.NotAFunction = NotAFunction;
const NotAFunctionButIndexer = (0, _Types.declare)(function NotAFunctionButIndexer(arg1, arg2, arg3, arg4, arg5) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
  this.Data4 = arg5;
}, _Types.FSharpException);
exports.NotAFunctionButIndexer = NotAFunctionButIndexer;
const Recursion = (0, _Types.declare)(function Recursion(arg1, arg2, arg3, arg4, arg5) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
  this.Data4 = arg5;
}, _Types.FSharpException);
exports.Recursion = Recursion;
const RecursiveUseCheckedAtRuntime = (0, _Types.declare)(function RecursiveUseCheckedAtRuntime(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.RecursiveUseCheckedAtRuntime = RecursiveUseCheckedAtRuntime;
const LetRecEvaluatedOutOfOrder = (0, _Types.declare)(function LetRecEvaluatedOutOfOrder(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.LetRecEvaluatedOutOfOrder = LetRecEvaluatedOutOfOrder;
const LetRecCheckedAtRuntime = (0, _Types.declare)(function LetRecCheckedAtRuntime(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.LetRecCheckedAtRuntime = LetRecCheckedAtRuntime;
const LetRecUnsound = (0, _Types.declare)(function LetRecUnsound(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.LetRecUnsound = LetRecUnsound;
const TyconBadArgs = (0, _Types.declare)(function TyconBadArgs(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3 | 0;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.TyconBadArgs = TyconBadArgs;
const UnionCaseWrongArguments = (0, _Types.declare)(function UnionCaseWrongArguments(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2 | 0;
  this.Data2 = arg3 | 0;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.UnionCaseWrongArguments = UnionCaseWrongArguments;
const UnionCaseWrongNumberOfArgs = (0, _Types.declare)(function UnionCaseWrongNumberOfArgs(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2 | 0;
  this.Data2 = arg3 | 0;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.UnionCaseWrongNumberOfArgs = UnionCaseWrongNumberOfArgs;
const FieldsFromDifferentTypes = (0, _Types.declare)(function FieldsFromDifferentTypes(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.FieldsFromDifferentTypes = FieldsFromDifferentTypes;
const FieldGivenTwice = (0, _Types.declare)(function FieldGivenTwice(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.FieldGivenTwice = FieldGivenTwice;
const MissingFields = (0, _Types.declare)(function MissingFields(arg1, arg2) {
  this.Data0 = arg1;
  this.Data1 = arg2;
}, _Types.FSharpException);
exports.MissingFields = MissingFields;
const FunctionValueUnexpected = (0, _Types.declare)(function FunctionValueUnexpected(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.FunctionValueUnexpected = FunctionValueUnexpected;
const UnitTypeExpected = (0, _Types.declare)(function UnitTypeExpected(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.UnitTypeExpected = UnitTypeExpected;
const UnitTypeExpectedWithEquality = (0, _Types.declare)(function UnitTypeExpectedWithEquality(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.UnitTypeExpectedWithEquality = UnitTypeExpectedWithEquality;
const UnitTypeExpectedWithPossibleAssignment = (0, _Types.declare)(function UnitTypeExpectedWithPossibleAssignment(arg1, arg2, arg3, arg4, arg5) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
  this.Data4 = arg5;
}, _Types.FSharpException);
exports.UnitTypeExpectedWithPossibleAssignment = UnitTypeExpectedWithPossibleAssignment;
const UnitTypeExpectedWithPossiblePropertySetter = (0, _Types.declare)(function UnitTypeExpectedWithPossiblePropertySetter(arg1, arg2, arg3, arg4, arg5) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
  this.Data4 = arg5;
}, _Types.FSharpException);
exports.UnitTypeExpectedWithPossiblePropertySetter = UnitTypeExpectedWithPossiblePropertySetter;
const UnionPatternsBindDifferentNames = (0, _Types.declare)(function UnionPatternsBindDifferentNames(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.UnionPatternsBindDifferentNames = UnionPatternsBindDifferentNames;
const VarBoundTwice = (0, _Types.declare)(function VarBoundTwice(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.VarBoundTwice = VarBoundTwice;
const ValueRestriction = (0, _Types.declare)(function ValueRestriction(arg1, arg2, arg3, arg4, arg5) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
  this.Data4 = arg5;
}, _Types.FSharpException);
exports.ValueRestriction = ValueRestriction;
const ValNotMutable = (0, _Types.declare)(function ValNotMutable(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.ValNotMutable = ValNotMutable;
const ValNotLocal = (0, _Types.declare)(function ValNotLocal(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.ValNotLocal = ValNotLocal;
const InvalidRuntimeCoercion = (0, _Types.declare)(function InvalidRuntimeCoercion(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.InvalidRuntimeCoercion = InvalidRuntimeCoercion;
const IndeterminateRuntimeCoercion = (0, _Types.declare)(function IndeterminateRuntimeCoercion(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.IndeterminateRuntimeCoercion = IndeterminateRuntimeCoercion;
const IndeterminateStaticCoercion = (0, _Types.declare)(function IndeterminateStaticCoercion(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.IndeterminateStaticCoercion = IndeterminateStaticCoercion;
const RuntimeCoercionSourceSealed = (0, _Types.declare)(function RuntimeCoercionSourceSealed(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.RuntimeCoercionSourceSealed = RuntimeCoercionSourceSealed;
const CoercionTargetSealed = (0, _Types.declare)(function CoercionTargetSealed(arg1, arg2, arg3) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
}, _Types.FSharpException);
exports.CoercionTargetSealed = CoercionTargetSealed;
const UpcastUnnecessary = (0, _Types.declare)(function UpcastUnnecessary(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.UpcastUnnecessary = UpcastUnnecessary;
const TypeTestUnnecessary = (0, _Types.declare)(function TypeTestUnnecessary(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.TypeTestUnnecessary = TypeTestUnnecessary;
const StaticCoercionShouldUseBox = (0, _Types.declare)(function StaticCoercionShouldUseBox(arg1, arg2, arg3, arg4) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
}, _Types.FSharpException);
exports.StaticCoercionShouldUseBox = StaticCoercionShouldUseBox;
const SelfRefObjCtor = (0, _Types.declare)(function SelfRefObjCtor(arg1, arg2) {
  this.Data0 = arg1;
  this.Data1 = arg2;
}, _Types.FSharpException);
exports.SelfRefObjCtor = SelfRefObjCtor;
const VirtualAugmentationOnNullValuedType = (0, _Types.declare)(function VirtualAugmentationOnNullValuedType(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.VirtualAugmentationOnNullValuedType = VirtualAugmentationOnNullValuedType;
const NonVirtualAugmentationOnNullValuedType = (0, _Types.declare)(function NonVirtualAugmentationOnNullValuedType(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.NonVirtualAugmentationOnNullValuedType = NonVirtualAugmentationOnNullValuedType;
const UseOfAddressOfOperator = (0, _Types.declare)(function UseOfAddressOfOperator(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.UseOfAddressOfOperator = UseOfAddressOfOperator;
const DeprecatedThreadStaticBindingWarning = (0, _Types.declare)(function DeprecatedThreadStaticBindingWarning(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.DeprecatedThreadStaticBindingWarning = DeprecatedThreadStaticBindingWarning;
const IntfImplInIntrinsicAugmentation = (0, _Types.declare)(function IntfImplInIntrinsicAugmentation(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.IntfImplInIntrinsicAugmentation = IntfImplInIntrinsicAugmentation;
const IntfImplInExtrinsicAugmentation = (0, _Types.declare)(function IntfImplInExtrinsicAugmentation(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.IntfImplInExtrinsicAugmentation = IntfImplInExtrinsicAugmentation;
const OverrideInIntrinsicAugmentation = (0, _Types.declare)(function OverrideInIntrinsicAugmentation(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.OverrideInIntrinsicAugmentation = OverrideInIntrinsicAugmentation;
const OverrideInExtrinsicAugmentation = (0, _Types.declare)(function OverrideInExtrinsicAugmentation(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.OverrideInExtrinsicAugmentation = OverrideInExtrinsicAugmentation;
const NonUniqueInferredAbstractSlot = (0, _Types.declare)(function NonUniqueInferredAbstractSlot(arg1, arg2, arg3, arg4, arg5, arg6) {
  this.Data0 = arg1;
  this.Data1 = arg2;
  this.Data2 = arg3;
  this.Data3 = arg4;
  this.Data4 = arg5;
  this.Data5 = arg6;
}, _Types.FSharpException);
exports.NonUniqueInferredAbstractSlot = NonUniqueInferredAbstractSlot;
const StandardOperatorRedefinitionWarning = (0, _Types.declare)(function StandardOperatorRedefinitionWarning(arg1, arg2) {
  this.Data0 = arg1;
  this.Data1 = arg2;
}, _Types.FSharpException);
exports.StandardOperatorRedefinitionWarning = StandardOperatorRedefinitionWarning;
const InvalidInternalsVisibleToAssemblyName = (0, _Types.declare)(function InvalidInternalsVisibleToAssemblyName(arg1, arg2) {
  this.Data0 = arg1;
  this.Data1 = arg2;
}, _Types.FSharpException);
exports.InvalidInternalsVisibleToAssemblyName = InvalidInternalsVisibleToAssemblyName;
const SafeInitData = (0, _Types.declare)(function SafeInitData(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.SafeInitData = SafeInitData;
const CtorInfo = (0, _Types.declare)(function CtorInfo(arg1, arg2, arg3, arg4) {
  this.ctorShapeCounter = arg1 | 0;
  this.safeThisValOpt = arg2;
  this.safeInitInfo = arg3;
  this.ctorIsImplicit = arg4;
}, _Types.Record);
exports.CtorInfo = CtorInfo;
const UngeneralizableItem = (0, _Types.declare)(function UngeneralizableItem(computeFreeTyvars) {
  const $this$$1 = this;
  $this$$1.computeFreeTyvars = computeFreeTyvars;
  $this$$1.willNeverHaveFreeTypars = false;
  $this$$1.cachedFreeLocalTycons = _TastOps.emptyFreeTycons;
  $this$$1.cachedFreeTraitSolutions = _TastOps.emptyFreeLocals;
});
exports.UngeneralizableItem = UngeneralizableItem;

function UngeneralizableItem$$$$002Ector$$48F4AA5B(computeFreeTyvars) {
  return this != null ? UngeneralizableItem.call(this, computeFreeTyvars) : new UngeneralizableItem(computeFreeTyvars);
}

function UngeneralizableItem$$GetFreeTyvars(item) {
  const fvs = item.computeFreeTyvars();

  if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(fvs.FreeTypars)) {
    item.willNeverHaveFreeTypars = true;
    item.cachedFreeLocalTycons = fvs.FreeTycons;
    item.cachedFreeTraitSolutions = fvs.FreeTraitSolutions;
  }

  return fvs;
}

function UngeneralizableItem$$get_WillNeverHaveFreeTypars(item$$1) {
  return item$$1.willNeverHaveFreeTypars;
}

function UngeneralizableItem$$get_CachedFreeLocalTycons(item$$2) {
  return item$$2.cachedFreeLocalTycons;
}

function UngeneralizableItem$$get_CachedFreeTraitSolutions(item$$3) {
  return item$$3.cachedFreeTraitSolutions;
}

const TcEnv = (0, _Types.declare)(function TcEnv(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12) {
  this.eNameResEnv = arg1;
  this.eUngeneralizableItems = arg2;
  this.ePath = arg3;
  this.eCompPath = arg4;
  this.eAccessPath = arg5;
  this.eAccessRights = arg6;
  this.eInternalsVisibleCompPaths = arg7;
  this.eModuleOrNamespaceTypeAccumulator = arg8;
  this.eContextInfo = arg9;
  this.eFamilyType = arg10;
  this.eCtorInfo = arg11;
  this.eCallerMemberName = arg12;
}, _Types.Record);
exports.TcEnv = TcEnv;

function TcEnv$$get_DisplayEnv(tenv) {
  return (0, _NameResolution.NameResolutionEnv$$get_DisplayEnv)(tenv.eNameResEnv);
}

function TcEnv$$get_NameEnv(tenv$$1) {
  return tenv$$1.eNameResEnv;
}

function TcEnv$$get_AccessRights(tenv$$2) {
  return tenv$$2.eAccessRights;
}

TcEnv.prototype.toString = function () {
  return "TcEnv(...)";
};

function computeAccessRights(eAccessPath, eInternalsVisibleCompPaths, eFamilyType) {
  return new _AccessibilityLogic.AccessorDomain(0, "AccessibleFrom", (0, _Types.L)(eAccessPath, eInternalsVisibleCompPaths), eFamilyType);
}

function emptyTcEnv(g$$2) {
  const cpath = _tast.compPathInternal;
  return new TcEnv((0, _NameResolution.NameResolutionEnv$$$Empty$$2AE8EA0C)(g$$2), (0, _Types.L)(), (0, _Types.L)(), cpath, cpath, computeAccessRights(cpath, (0, _Types.L)(), null), (0, _Types.L)(), new _Types.FSharpRef((0, _tast.NewEmptyModuleOrNamespaceType)(new _tast.ModuleOrNamespaceKind(2, "Namespace"))), new _ConstraintSolver.ContextInfo(0, "NoContext"), null, null, null);
}

function InitialExplicitCtorInfo(safeThisValOpt, safeInitInfo) {
  return new CtorInfo(3, safeThisValOpt, safeInitInfo, false);
}

function InitialImplicitCtorInfo() {
  return new CtorInfo(0, null, new SafeInitData(1, "NoSafeInitInfo"), true);
}

function EnterFamilyRegion(tcref, env) {
  const eFamilyType$$1 = tcref;
  return new TcEnv(env.eNameResEnv, env.eUngeneralizableItems, env.ePath, env.eCompPath, env.eAccessPath, computeAccessRights(env.eAccessPath, env.eInternalsVisibleCompPaths, eFamilyType$$1), env.eInternalsVisibleCompPaths, env.eModuleOrNamespaceTypeAccumulator, env.eContextInfo, eFamilyType$$1, env.eCtorInfo, env.eCallerMemberName);
}

function ExitFamilyRegion(env$$1) {
  const eFamilyType$$2 = null;

  if (env$$1.eFamilyType == null) {
    return env$$1;
  } else {
    return new TcEnv(env$$1.eNameResEnv, env$$1.eUngeneralizableItems, env$$1.ePath, env$$1.eCompPath, env$$1.eAccessPath, computeAccessRights(env$$1.eAccessPath, env$$1.eInternalsVisibleCompPaths, eFamilyType$$2), env$$1.eInternalsVisibleCompPaths, env$$1.eModuleOrNamespaceTypeAccumulator, env$$1.eContextInfo, eFamilyType$$2, env$$1.eCtorInfo, env$$1.eCallerMemberName);
  }
}

function AreWithinCtorShape(env$$2) {
  if (env$$2.eCtorInfo != null) {
    const ctorInfo = env$$2.eCtorInfo;
    return ctorInfo.ctorShapeCounter > 0;
  } else {
    return false;
  }
}

function AreWithinImplicitCtor(env$$3) {
  if (env$$3.eCtorInfo != null) {
    const ctorInfo$$1 = env$$3.eCtorInfo;
    return ctorInfo$$1.ctorIsImplicit;
  } else {
    return false;
  }
}

function GetCtorShapeCounter(env$$4) {
  if (env$$4.eCtorInfo != null) {
    const ctorInfo$$2 = env$$4.eCtorInfo;
    return ctorInfo$$2.ctorShapeCounter | 0;
  } else {
    return 0;
  }
}

function GetRecdInfo(env$$5) {
  if (env$$5.eCtorInfo != null) {
    const ctorInfo$$3 = env$$5.eCtorInfo;

    if (ctorInfo$$3.ctorShapeCounter === 1) {
      return new _tast.RecordConstructionInfo(0, "RecdExprIsObjInit");
    } else {
      return new _tast.RecordConstructionInfo(1, "RecdExpr");
    }
  } else {
    return new _tast.RecordConstructionInfo(1, "RecdExpr");
  }
}

function AdjustCtorShapeCounter(f, env$$6) {
  return new TcEnv(env$$6.eNameResEnv, env$$6.eUngeneralizableItems, env$$6.ePath, env$$6.eCompPath, env$$6.eAccessPath, env$$6.eAccessRights, env$$6.eInternalsVisibleCompPaths, env$$6.eModuleOrNamespaceTypeAccumulator, env$$6.eContextInfo, env$$6.eFamilyType, (0, _Option.defaultArg)(env$$6.eCtorInfo, null, function (ctorInfo$$4) {
    return new CtorInfo(f(ctorInfo$$4.ctorShapeCounter), ctorInfo$$4.safeThisValOpt, ctorInfo$$4.safeInitInfo, ctorInfo$$4.ctorIsImplicit);
  }), env$$6.eCallerMemberName);
}

function ExitCtorShapeRegion(env$$7) {
  return AdjustCtorShapeCounter(function (_arg1) {
    return 0;
  }, env$$7);
}

function addFreeItemOfTy(ty$$2, eUngeneralizableItems$$1) {
  const fvs$$1 = (0, _TastOps.freeInType)(_TastOps.CollectAllNoCaching, ty$$2);

  if ((0, _TastOps.isEmptyFreeTyvars)(fvs$$1)) {
    return eUngeneralizableItems$$1;
  } else {
    return (0, _Types.L)(UngeneralizableItem$$$$002Ector$$48F4AA5B(function () {
      return (0, _TastOps.freeInType)(_TastOps.CollectAllNoCaching, ty$$2);
    }), eUngeneralizableItems$$1);
  }
}

function addFreeItemOfModuleTy(mtyp, eUngeneralizableItems$$2) {
  const fvs$$2 = (0, _TastOps.freeInModuleTy)(mtyp);

  if ((0, _TastOps.isEmptyFreeTyvars)(fvs$$2)) {
    return eUngeneralizableItems$$2;
  } else {
    return (0, _Types.L)(UngeneralizableItem$$$$002Ector$$48F4AA5B(function () {
      return (0, _TastOps.freeInModuleTy)(mtyp);
    }), eUngeneralizableItems$$2);
  }
}

function AddValMapToNameEnv(vs, nenv) {
  return (0, _illib.NameMapModule$$$foldBackRange)(function (v, nenv$$1) {
    return (0, _NameResolution.AddValRefToNameEnv)(nenv$$1, (0, _tast.mkLocalValRef)(v));
  }, vs, nenv);
}

function AddValListToNameEnv(vs$$1, nenv$$2) {
  return (0, _List.foldBack)(function (v$$1, nenv$$3) {
    return (0, _NameResolution.AddValRefToNameEnv)(nenv$$3, (0, _tast.mkLocalValRef)(v$$1));
  }, vs$$1, nenv$$2);
}

function addInternalsAccessibility(env$$8, ccu) {
  const compPath = new _tast.CompilationPath(0, "CompPath", (0, _tast.CcuThunk$$get_ILScopeRef)(ccu), (0, _Types.L)());
  const eInternalsVisibleCompPaths$$2 = (0, _Types.L)(compPath, env$$8.eInternalsVisibleCompPaths);
  return new TcEnv(env$$8.eNameResEnv, env$$8.eUngeneralizableItems, env$$8.ePath, env$$8.eCompPath, env$$8.eAccessPath, computeAccessRights(env$$8.eAccessPath, eInternalsVisibleCompPaths$$2, env$$8.eFamilyType), (0, _Types.L)(compPath, env$$8.eInternalsVisibleCompPaths), env$$8.eModuleOrNamespaceTypeAccumulator, env$$8.eContextInfo, env$$8.eFamilyType, env$$8.eCtorInfo, env$$8.eCallerMemberName);
}

function AddLocalValPrimitive(v$$2, env$$9) {
  return new TcEnv((0, _NameResolution.AddValRefToNameEnv)(env$$9.eNameResEnv, (0, _tast.mkLocalValRef)(v$$2)), addFreeItemOfTy((0, _tast.Val$$get_Type)(v$$2), env$$9.eUngeneralizableItems), env$$9.ePath, env$$9.eCompPath, env$$9.eAccessPath, env$$9.eAccessRights, env$$9.eInternalsVisibleCompPaths, env$$9.eModuleOrNamespaceTypeAccumulator, env$$9.eContextInfo, env$$9.eFamilyType, env$$9.eCtorInfo, env$$9.eCallerMemberName);
}

function AddLocalValMap(tcSink, scopem, vals, env$$10) {
  const env$$11 = (0, _Map.FSharpMap$$get_IsEmpty)(vals) ? env$$10 : new TcEnv(AddValMapToNameEnv(vals, env$$10.eNameResEnv), (0, _illib.NameMapModule$$$foldBackRange)(function ($arg$$2, eUngeneralizableItems$$3) {
    return addFreeItemOfTy((0, _tast.typeOfVal)($arg$$2), eUngeneralizableItems$$3);
  }, vals, env$$10.eUngeneralizableItems), env$$10.ePath, env$$10.eCompPath, env$$10.eAccessPath, env$$10.eAccessRights, env$$10.eInternalsVisibleCompPaths, env$$10.eModuleOrNamespaceTypeAccumulator, env$$10.eContextInfo, env$$10.eFamilyType, env$$10.eCtorInfo, env$$10.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink, scopem, TcEnv$$get_NameEnv(env$$11), env$$11.eAccessRights);
  return env$$11;
}

function AddLocalVals(tcSink$$1, scopem$$1, vals$$1, env$$12) {
  const env$$13 = vals$$1.tail == null ? env$$12 : new TcEnv(AddValListToNameEnv(vals$$1, env$$12.eNameResEnv), (0, _List.foldBack)(function ($arg$$3, eUngeneralizableItems$$4) {
    return addFreeItemOfTy((0, _tast.typeOfVal)($arg$$3), eUngeneralizableItems$$4);
  }, vals$$1, env$$12.eUngeneralizableItems), env$$12.ePath, env$$12.eCompPath, env$$12.eAccessPath, env$$12.eAccessRights, env$$12.eInternalsVisibleCompPaths, env$$12.eModuleOrNamespaceTypeAccumulator, env$$12.eContextInfo, env$$12.eFamilyType, env$$12.eCtorInfo, env$$12.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink$$1, scopem$$1, TcEnv$$get_NameEnv(env$$13), env$$13.eAccessRights);
  return env$$13;
}

function AddLocalVal(tcSink$$2, scopem$$2, v$$5, env$$14) {
  const env$$15 = new TcEnv((0, _NameResolution.AddValRefToNameEnv)(env$$14.eNameResEnv, (0, _tast.mkLocalValRef)(v$$5)), addFreeItemOfTy((0, _tast.Val$$get_Type)(v$$5), env$$14.eUngeneralizableItems), env$$14.ePath, env$$14.eCompPath, env$$14.eAccessPath, env$$14.eAccessRights, env$$14.eInternalsVisibleCompPaths, env$$14.eModuleOrNamespaceTypeAccumulator, env$$14.eContextInfo, env$$14.eFamilyType, env$$14.eCtorInfo, env$$14.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink$$2, scopem$$2, TcEnv$$get_NameEnv(env$$15), env$$15.eAccessRights);
  return env$$15;
}

function AddLocalExnDefnAndReport(tcSink$$3, scopem$$3, env$$16, exnc) {
  const env$$17 = new TcEnv((0, _NameResolution.AddExceptionDeclsToNameEnv)(new _NameResolution.BulkAdd(1, "No"), env$$16.eNameResEnv, (0, _tast.mkLocalEntityRef)(exnc)), env$$16.eUngeneralizableItems, env$$16.ePath, env$$16.eCompPath, env$$16.eAccessPath, env$$16.eAccessRights, env$$16.eInternalsVisibleCompPaths, env$$16.eModuleOrNamespaceTypeAccumulator, env$$16.eContextInfo, env$$16.eFamilyType, env$$16.eCtorInfo, env$$16.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink$$3, (0, _tast.Entity$$get_Range)(exnc), TcEnv$$get_NameEnv(env$$17), env$$17.eAccessRights);
  (0, _NameResolution.CallEnvSink)(tcSink$$3, scopem$$3, TcEnv$$get_NameEnv(env$$17), env$$17.eAccessRights);
  return env$$17;
}

function AddLocalTyconRefs(ownDefinition, g$$3, amap, m$$1, tcrefs, env$$18) {
  if (tcrefs.tail == null) {
    return env$$18;
  } else {
    return new TcEnv((0, _NameResolution.AddTyconRefsToNameEnv)(new _NameResolution.BulkAdd(1, "No"), ownDefinition, g$$3, amap, m$$1, false, env$$18.eNameResEnv, tcrefs), env$$18.eUngeneralizableItems, env$$18.ePath, env$$18.eCompPath, env$$18.eAccessPath, env$$18.eAccessRights, env$$18.eInternalsVisibleCompPaths, env$$18.eModuleOrNamespaceTypeAccumulator, env$$18.eContextInfo, env$$18.eFamilyType, env$$18.eCtorInfo, env$$18.eCallerMemberName);
  }
}

function AddLocalTycons(g$$4, amap$$1, m$$2, tycons, env$$19) {
  if (tycons.tail == null) {
    return env$$19;
  } else {
    return AddLocalTyconRefs(false, g$$4, amap$$1, m$$2, (0, _List.map)(_tast.mkLocalTyconRef, tycons), env$$19);
  }
}

function AddLocalTyconsAndReport(tcSink$$4, scopem$$4, g$$5, amap$$2, m$$3, tycons$$1, env$$21) {
  const env$$22 = AddLocalTycons(g$$5, amap$$2, m$$3, tycons$$1, env$$21);
  (0, _NameResolution.CallEnvSink)(tcSink$$4, scopem$$4, TcEnv$$get_NameEnv(env$$22), env$$22.eAccessRights);
  return env$$22;
}

function OpenModulesOrNamespaces(tcSink$$5, g$$6, amap$$3, scopem$$5, root, env$$23, mvvs, openDeclaration) {
  const env$$24 = mvvs.tail == null ? env$$23 : new TcEnv((0, _NameResolution.AddModulesAndNamespacesContentsToNameEnv)(g$$6, amap$$3, env$$23.eAccessRights, scopem$$5, root, env$$23.eNameResEnv, mvvs), env$$23.eUngeneralizableItems, env$$23.ePath, env$$23.eCompPath, env$$23.eAccessPath, env$$23.eAccessRights, env$$23.eInternalsVisibleCompPaths, env$$23.eModuleOrNamespaceTypeAccumulator, env$$23.eContextInfo, env$$23.eFamilyType, env$$23.eCtorInfo, env$$23.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink$$5, scopem$$5, TcEnv$$get_NameEnv(env$$24), env$$24.eAccessRights);
  (0, _NameResolution.CallOpenDeclarationSink)(tcSink$$5, openDeclaration);
  return env$$24;
}

function AddRootModuleOrNamespaceRefs(g$$7, amap$$4, m$$4, env$$25, modrefs) {
  if (modrefs.tail == null) {
    return env$$25;
  } else {
    return new TcEnv((0, _NameResolution.AddModuleOrNamespaceRefsToNameEnv)(g$$7, amap$$4, m$$4, true, env$$25.eAccessRights, env$$25.eNameResEnv, modrefs), env$$25.eUngeneralizableItems, env$$25.ePath, env$$25.eCompPath, env$$25.eAccessPath, env$$25.eAccessRights, env$$25.eInternalsVisibleCompPaths, env$$25.eModuleOrNamespaceTypeAccumulator, env$$25.eContextInfo, env$$25.eFamilyType, env$$25.eCtorInfo, env$$25.eCallerMemberName);
  }
}

function AddNonLocalCcu(g$$8, amap$$5, scopem$$6, env$$26, assemblyName, ccu$$1, internalsVisibleToAttributes) {
  const internalsVisible = (0, _List.exists)(function predicate(visibleTo) {
    try {
      return (0, _adapters.System$002EReflection$002EAssemblyName$$get_Name)((0, _adapters.System$002EReflection$002EAssemblyName$$$$002Ector$$Z721C83C5)(visibleTo)) === assemblyName;
    } catch (e) {
      (0, _ErrorLogger.warning)(new InvalidInternalsVisibleToAssemblyName(visibleTo, (0, _tast.CcuThunk$$get_FileName)(ccu$$1)));
      return false;
    }
  }, internalsVisibleToAttributes);
  const env$$27 = internalsVisible ? addInternalsAccessibility(env$$26, ccu$$1) : env$$26;
  const modrefs$$1 = (0, _List.map)(function mapping(x$$1) {
    return (0, _tast.mkNonLocalCcuRootEntityRef)(ccu$$1, x$$1);
  }, (0, _tast.CcuThunk$$get_RootModulesAndNamespaces)(ccu$$1));
  const tcrefs$$2 = (0, _List.map)(function mapping$$1(x$$2) {
    return (0, _tast.mkNonLocalCcuRootEntityRef)(ccu$$1, x$$2);
  }, (0, _tast.CcuThunk$$get_RootTypeAndExceptionDefinitions)(ccu$$1));
  const env$$28 = AddRootModuleOrNamespaceRefs(g$$8, amap$$5, scopem$$6, env$$27, modrefs$$1);
  const env$$29 = tcrefs$$2.tail == null ? env$$28 : new TcEnv((0, _NameResolution.AddTyconRefsToNameEnv)(new _NameResolution.BulkAdd(0, "Yes"), false, g$$8, amap$$5, scopem$$6, true, env$$28.eNameResEnv, tcrefs$$2), env$$28.eUngeneralizableItems, env$$28.ePath, env$$28.eCompPath, env$$28.eAccessPath, env$$28.eAccessRights, env$$28.eInternalsVisibleCompPaths, env$$28.eModuleOrNamespaceTypeAccumulator, env$$28.eContextInfo, env$$28.eFamilyType, env$$28.eCtorInfo, env$$28.eCallerMemberName);
  return env$$29;
}

function AddLocalRootModuleOrNamespace(tcSink$$6, g$$9, amap$$6, scopem$$7, env$$30, mtyp$$1) {
  const modrefs$$2 = (0, _List.map)(_tast.mkLocalModRef, (0, _tast.ModuleOrNamespaceType$$get_ModuleAndNamespaceDefinitions)(mtyp$$1));
  const tcrefs$$3 = (0, _List.map)(_tast.mkLocalTyconRef, (0, _tast.ModuleOrNamespaceType$$get_TypeAndExceptionDefinitions)(mtyp$$1));
  const env$$31 = AddRootModuleOrNamespaceRefs(g$$9, amap$$6, scopem$$7, env$$30, modrefs$$2);
  const env$$32 = new TcEnv(tcrefs$$3.tail == null ? env$$31.eNameResEnv : (0, _NameResolution.AddTyconRefsToNameEnv)(new _NameResolution.BulkAdd(1, "No"), false, g$$9, amap$$6, scopem$$7, true, env$$31.eNameResEnv, tcrefs$$3), addFreeItemOfModuleTy(mtyp$$1, env$$31.eUngeneralizableItems), env$$31.ePath, env$$31.eCompPath, env$$31.eAccessPath, env$$31.eAccessRights, env$$31.eInternalsVisibleCompPaths, env$$31.eModuleOrNamespaceTypeAccumulator, env$$31.eContextInfo, env$$31.eFamilyType, env$$31.eCtorInfo, env$$31.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink$$6, scopem$$7, TcEnv$$get_NameEnv(env$$32), env$$32.eAccessRights);
  return env$$32;
}

function AddModuleAbbreviationAndReport(tcSink$$7, scopem$$8, id, modrefs$$3, env$$33) {
  const env$$34 = modrefs$$3.tail == null ? env$$33 : new TcEnv((0, _NameResolution.AddModuleAbbrevToNameEnv)(id, env$$33.eNameResEnv, modrefs$$3), env$$33.eUngeneralizableItems, env$$33.ePath, env$$33.eCompPath, env$$33.eAccessPath, env$$33.eAccessRights, env$$33.eInternalsVisibleCompPaths, env$$33.eModuleOrNamespaceTypeAccumulator, env$$33.eContextInfo, env$$33.eFamilyType, env$$33.eCtorInfo, env$$33.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(tcSink$$7, scopem$$8, TcEnv$$get_NameEnv(env$$34), env$$34.eAccessRights);
  const item$$4 = new _NameResolution.Item(18, "ModuleOrNamespaces", modrefs$$3);
  (0, _NameResolution.CallNameResolutionSink)(tcSink$$7, (0, _ast.Ident$$get_idRange)(id), TcEnv$$get_NameEnv(env$$34), item$$4, item$$4, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$34), env$$34.eAccessRights);
  return env$$34;
}

function AddLocalSubModule(g$$10, amap$$7, m$$5, env$$35, modul) {
  const env$$36 = new TcEnv((0, _NameResolution.AddModuleOrNamespaceRefToNameEnv)(g$$10, amap$$7, m$$5, false, env$$35.eAccessRights, env$$35.eNameResEnv, (0, _tast.mkLocalModRef)(modul)), addFreeItemOfModuleTy((0, _tast.Entity$$get_ModuleOrNamespaceType)(modul), env$$35.eUngeneralizableItems), env$$35.ePath, env$$35.eCompPath, env$$35.eAccessPath, env$$35.eAccessRights, env$$35.eInternalsVisibleCompPaths, env$$35.eModuleOrNamespaceTypeAccumulator, env$$35.eContextInfo, env$$35.eFamilyType, env$$35.eCtorInfo, env$$35.eCallerMemberName);
  return env$$36;
}

function AddLocalSubModuleAndReport(tcSink$$8, scopem$$9, g$$11, amap$$8, m$$6, env$$37, modul$$1) {
  const env$$38 = AddLocalSubModule(g$$11, amap$$8, m$$6, env$$37, modul$$1);
  (0, _NameResolution.CallEnvSink)(tcSink$$8, scopem$$9, TcEnv$$get_NameEnv(env$$38), env$$38.eAccessRights);
  return env$$38;
}

function AddDeclaredTypars(check, typars, env$$39) {
  if (typars.tail == null) {
    return env$$39;
  } else {
    const env$$40 = new TcEnv((0, _NameResolution.AddDeclaredTyparsToNameEnv)(check, env$$39.eNameResEnv, typars), env$$39.eUngeneralizableItems, env$$39.ePath, env$$39.eCompPath, env$$39.eAccessPath, env$$39.eAccessRights, env$$39.eInternalsVisibleCompPaths, env$$39.eModuleOrNamespaceTypeAccumulator, env$$39.eContextInfo, env$$39.eFamilyType, env$$39.eCtorInfo, env$$39.eCallerMemberName);
    return new TcEnv(env$$40.eNameResEnv, (0, _List.foldBack)(function ($arg$$4, eUngeneralizableItems$$5) {
      return addFreeItemOfTy((0, _tast.mkTyparTy)($arg$$4), eUngeneralizableItems$$5);
    }, typars, env$$40.eUngeneralizableItems), env$$40.ePath, env$$40.eCompPath, env$$40.eAccessPath, env$$40.eAccessRights, env$$40.eInternalsVisibleCompPaths, env$$40.eModuleOrNamespaceTypeAccumulator, env$$40.eContextInfo, env$$40.eFamilyType, env$$40.eCtorInfo, env$$40.eCallerMemberName);
  }
}

const cenv = (0, _Types.declare)(function cenv(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18) {
  this.g = arg1;
  this.recUses = arg2;
  this.postInferenceChecks = arg3;
  this.createsGeneratedProvidedTypes = arg4;
  this.isScript = arg5;
  this.amap = arg6;
  this.synArgNameGenerator = arg7;
  this.tcSink = arg8;
  this.topCcu = arg9;
  this.css = arg10;
  this.compilingCanonicalFslibModuleType = arg11;
  this.isSig = arg12;
  this.haveSig = arg13;
  this.niceNameGen = arg14;
  this.infoReader = arg15;
  this.nameResolver = arg16;
  this.conditionalDefines = arg17;
  this.isInternalTestSpanStackReferring = arg18;
}, _Types.Record);
exports.cenv = cenv;

function cenv$$$Create$$Z24644A4C(g$$12, isScript, niceNameGen, amap$$9, topCcu, isSig, haveSig, conditionalDefines, tcSink$$9, tcVal, isInternalTestSpanStackReferring) {
  const infoReader = (0, _InfoReader.InfoReader$$$$002Ector$$Z11454F64)(g$$12, amap$$9);
  const instantiationGenerator = _ConstraintSolver.FreshenTypars;
  const nameResolver = (0, _NameResolution.NameResolver$$$$002Ector$$Z19B36E82)(g$$12, amap$$9, infoReader, instantiationGenerator);
  return new cenv(g$$12, (0, _TastOps.ValMultiMap$00601$$$get_Empty)(), [], false, isScript, amap$$9, (0, _ast.SynArgNameGenerator$$$$002Ector)(), tcSink$$9, topCcu, (0, _ConstraintSolver.ConstraintSolverState$$$New$$1E2891C6)(g$$12, amap$$9, infoReader, tcVal), (isSig ? true : !haveSig) ? (0, _TcGlobals.TcGlobals$$get_compilingFslib)(g$$12) : false, isSig, haveSig, niceNameGen, infoReader, nameResolver, conditionalDefines, isInternalTestSpanStackReferring);
}

cenv.prototype.toString = function () {
  return "cenv(...)";
};

function CopyAndFixupTypars(m$$8, rigid, tpsorig$$1) {
  return (0, _ConstraintSolver.FreshenAndFixupTypars)(m$$8, rigid, (0, _Types.L)(), (0, _Types.L)(), tpsorig$$1);
}

function UnifyTypes(cenv$$1, env$$41, m$$9, actualTy, expectedTy) {
  (0, _ConstraintSolver.AddCxTypeEqualsType)(env$$41.eContextInfo, TcEnv$$get_DisplayEnv(env$$41), cenv$$1.css, m$$9, (0, _TastOps.tryNormalizeMeasureInType)(cenv$$1.g, actualTy), (0, _TastOps.tryNormalizeMeasureInType)(cenv$$1.g, expectedTy));
}

function MakeInitialEnv(env$$42) {
  const mtypeAcc = new _Types.FSharpRef((0, _tast.NewEmptyModuleOrNamespaceType)(new _tast.ModuleOrNamespaceKind(2, "Namespace")));
  return [new TcEnv(env$$42.eNameResEnv, env$$42.eUngeneralizableItems, env$$42.ePath, env$$42.eCompPath, env$$42.eAccessPath, env$$42.eAccessRights, env$$42.eInternalsVisibleCompPaths, mtypeAcc, env$$42.eContextInfo, env$$42.eFamilyType, env$$42.eCtorInfo, env$$42.eCallerMemberName), mtypeAcc];
}

function MakeInnerEnvWithAcc(env$$43, nm, mtypeAcc$$1, modKind) {
  const path = (0, _List.append)(env$$43.ePath, (0, _Types.L)(nm, (0, _Types.L)()));
  const cpath$$1 = (0, _tast.CompilationPath$$NestedCompPath)(env$$43.eCompPath, (0, _ast.Ident$$get_idText)(nm), modKind);
  return new TcEnv(new _NameResolution.NameResolutionEnv((0, _TastOps.DisplayEnv$$AddOpenPath$$1334CEF1)(TcEnv$$get_DisplayEnv(env$$43), (0, _ast.pathOfLid)(path)), env$$43.eNameResEnv.eUnqualifiedItems, env$$43.eNameResEnv.ePatItems, env$$43.eNameResEnv.eModulesAndNamespaces, env$$43.eNameResEnv.eFullyQualifiedModulesAndNamespaces, env$$43.eNameResEnv.eFieldLabels, env$$43.eNameResEnv.eTyconsByAccessNames, env$$43.eNameResEnv.eFullyQualifiedTyconsByAccessNames, env$$43.eNameResEnv.eTyconsByDemangledNameAndArity, env$$43.eNameResEnv.eFullyQualifiedTyconsByDemangledNameAndArity, env$$43.eNameResEnv.eIndexedExtensionMembers, env$$43.eNameResEnv.eUnindexedExtensionMembers, env$$43.eNameResEnv.eTypars), env$$43.eUngeneralizableItems, path, cpath$$1, cpath$$1, computeAccessRights(cpath$$1, env$$43.eInternalsVisibleCompPaths, env$$43.eFamilyType), env$$43.eInternalsVisibleCompPaths, mtypeAcc$$1, env$$43.eContextInfo, env$$43.eFamilyType, env$$43.eCtorInfo, env$$43.eCallerMemberName);
}

function MakeInnerEnv(env$$44, nm$$1, modKind$$1) {
  const mtypeAcc$$2 = new _Types.FSharpRef((0, _tast.NewEmptyModuleOrNamespaceType)(modKind$$1));
  return [MakeInnerEnvWithAcc(env$$44, nm$$1, mtypeAcc$$2, modKind$$1), mtypeAcc$$2];
}

function MakeInnerEnvForTyconRef(env$$45, tcref$$1, isExtrinsicExtension) {
  if (isExtrinsicExtension) {
    return env$$45;
  } else {
    const env$$46 = EnterFamilyRegion(tcref$$1, env$$45);
    const eAccessPath$$1 = (0, _tast.CompilationPath$$NestedCompPath)(env$$46.eCompPath, (0, _tast.EntityRef$$get_LogicalName)(tcref$$1), new _tast.ModuleOrNamespaceKind(1, "ModuleOrType"));
    return new TcEnv(env$$46.eNameResEnv, env$$46.eUngeneralizableItems, env$$46.ePath, env$$46.eCompPath, eAccessPath$$1, computeAccessRights(eAccessPath$$1, env$$46.eInternalsVisibleCompPaths, env$$46.eFamilyType), env$$46.eInternalsVisibleCompPaths, env$$46.eModuleOrNamespaceTypeAccumulator, env$$46.eContextInfo, env$$46.eFamilyType, env$$46.eCtorInfo, env$$46.eCallerMemberName);
  }
}

function MakeInnerEnvForMember(env$$47, v$$7) {
  if ((0, _tast.Val$$get_MemberInfo)(v$$7) != null) {
    return MakeInnerEnvForTyconRef(env$$47, (0, _tast.Val$$get_MemberApparentEntity)(v$$7), (0, _tast.Val$$get_IsExtensionMember)(v$$7));
  } else {
    return env$$47;
  }
}

function GetCurrAccumulatedModuleOrNamespaceType(env$$48) {
  return env$$48.eModuleOrNamespaceTypeAccumulator.contents;
}

function SetCurrAccumulatedModuleOrNamespaceType(env$$49, x$$4) {
  env$$49.eModuleOrNamespaceTypeAccumulator.contents = x$$4;
}

function LocateEnv(ccu$$2, env$$50, enclosingNamespacePath) {
  const cpath$$2 = (0, _tast.compPathOfCcu)(ccu$$2);
  const env$$51 = new TcEnv(env$$50.eNameResEnv, env$$50.eUngeneralizableItems, (0, _Types.L)(), cpath$$2, cpath$$2, computeAccessRights(cpath$$2, env$$50.eInternalsVisibleCompPaths, env$$50.eFamilyType), env$$50.eInternalsVisibleCompPaths, env$$50.eModuleOrNamespaceTypeAccumulator, env$$50.eContextInfo, env$$50.eFamilyType, env$$50.eCtorInfo, env$$50.eCallerMemberName);
  const env$$53 = (0, _List.fold)(function (env$$52, id$$1) {
    return MakeInnerEnv(env$$52, id$$1, new _tast.ModuleOrNamespaceKind(2, "Namespace"))[0];
  }, env$$51, enclosingNamespacePath);
  return env$$53;
}

function BuildRootModuleType(enclosingNamespacePath$$1, cpath$$3, mtyp$$2) {
  const tupledArg$$1 = (0, _List.foldBack)(function folder(id$$2, tupledArg) {
    const patternInput = (0, _TastOps.wrapModuleOrNamespaceTypeInNamespace)(id$$2, (0, _tast.CompilationPath$$get_ParentCompPath)(tupledArg[0]), tupledArg[1][0]);
    return [(0, _tast.CompilationPath$$get_ParentCompPath)(tupledArg[0]), [patternInput[0], (0, _Types.L)(patternInput[1], tupledArg[1][1])]];
  }, enclosingNamespacePath$$1, [cpath$$3, [mtyp$$2, (0, _Types.L)()]]);
  return [tupledArg$$1[1][0], (0, _List.reverse)(tupledArg$$1[1][1])];
}

function BuildRootModuleExpr(enclosingNamespacePath$$2, cpath$$5, mexpr) {
  return (0, _List.foldBack)(function folder$$1(id$$3, tupledArg$$2) {
    return [(0, _tast.CompilationPath$$get_ParentCompPath)(tupledArg$$2[0]), (0, _TastOps.wrapModuleOrNamespaceExprInNamespace)(id$$3, (0, _tast.CompilationPath$$get_ParentCompPath)(tupledArg$$2[0]), tupledArg$$2[1])];
  }, enclosingNamespacePath$$2, [cpath$$5, mexpr])[1];
}

function TryStripPrefixPath(g$$14, enclosingNamespacePath$$3) {
  var rest, p;
  var $target$$156, p$$1, rest$$1;

  if (enclosingNamespacePath$$3.tail != null) {
    if (rest = enclosingNamespacePath$$3.tail, (p = enclosingNamespacePath$$3.head, (((0, _TcGlobals.TcGlobals$$get_isInteractive)(g$$14) ? !(rest.tail == null) : false) ? (0, _String.startsWith)((0, _ast.Ident$$get_idText)(p), _ast.FsiDynamicModulePrefix, 4) : false) ? (0, _Seq.forAll)(_Char.isDigit, (0, _ast.Ident$$get_idText)(p).slice(_ast.FsiDynamicModulePrefix.length, (0, _ast.Ident$$get_idText)(p).length).split("")) : false)) {
      $target$$156 = 0;
      p$$1 = enclosingNamespacePath$$3.head;
      rest$$1 = enclosingNamespacePath$$3.tail;
    } else {
      $target$$156 = 1;
    }
  } else {
    $target$$156 = 1;
  }

  switch ($target$$156) {
    case 0:
      {
        return [p$$1, rest$$1];
      }

    case 1:
      {
        return null;
      }
  }
}

function ImplicitlyOpenOwnNamespace(tcSink$$10, g$$15, amap$$10, scopem$$10, enclosingNamespacePath$$4, env$$54) {
  if (enclosingNamespacePath$$4.tail == null) {
    return env$$54;
  } else {
    let enclosingNamespacePathToOpen;
    const matchValue$$6 = TryStripPrefixPath(g$$15, enclosingNamespacePath$$4);

    if (matchValue$$6 == null) {
      enclosingNamespacePathToOpen = enclosingNamespacePath$$4;
    } else {
      const rest$$2 = matchValue$$6[1];
      enclosingNamespacePathToOpen = rest$$2;
    }

    if (enclosingNamespacePathToOpen.tail != null) {
      const rest$$3 = enclosingNamespacePathToOpen.tail;
      const id$$4 = enclosingNamespacePathToOpen.head;
      const ad = env$$54.eAccessRights;
      const matchValue$$7 = (0, _NameResolution.ResolveLongIndentAsModuleOrNamespace)(tcSink$$10, new _NameResolution.ResultCollectionSettings(0, "AllResults"), amap$$10, scopem$$10, true, new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$54.eNameResEnv, ad, id$$4, rest$$3, true);

      if (matchValue$$7.tag === 1) {
        return env$$54;
      } else {
        const modrefs$$4 = matchValue$$7.fields[0];
        const modrefs$$5 = (0, _List.map)(function (tupledArg$$3) {
          return (0, _lib.p23)(tupledArg$$3[0], tupledArg$$3[1], tupledArg$$3[2]);
        }, modrefs$$4);
        const openDecl = (0, _NameResolution.OpenDeclaration$$$Create$$722A02CA)(enclosingNamespacePathToOpen, modrefs$$5, scopem$$10, true);
        return OpenModulesOrNamespaces(tcSink$$10, g$$15, amap$$10, scopem$$10, false, env$$54, modrefs$$5, openDecl);
      }
    } else {
      return env$$54;
    }
  }
}

function ShrinkContext(env$$55, oldRange, newRange) {
  var $target$$157;

  if (env$$55.eContextInfo.tag === 4) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 5) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 7) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 8) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 9) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 10) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 13) {
    $target$$157 = 0;
  } else if (env$$55.eContextInfo.tag === 6) {
    $target$$157 = 1;
  } else if (env$$55.eContextInfo.tag === 11) {
    $target$$157 = 2;
  } else if (env$$55.eContextInfo.tag === 12) {
    $target$$157 = 3;
  } else if (env$$55.eContextInfo.tag === 1) {
    $target$$157 = 4;
  } else if (env$$55.eContextInfo.tag === 2) {
    $target$$157 = 5;
  } else if (env$$55.eContextInfo.tag === 3) {
    $target$$157 = 6;
  } else {
    $target$$157 = 0;
  }

  switch ($target$$157) {
    case 0:
      {
        return env$$55;
      }

    case 1:
      {
        const m$$10 = env$$55.eContextInfo.fields[1];
        const b$$1 = env$$55.eContextInfo.fields[0];

        if (!(0, _Util.equals)(m$$10, oldRange)) {
          return env$$55;
        } else {
          return new TcEnv(env$$55.eNameResEnv, env$$55.eUngeneralizableItems, env$$55.ePath, env$$55.eCompPath, env$$55.eAccessPath, env$$55.eAccessRights, env$$55.eInternalsVisibleCompPaths, env$$55.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(6, "CollectionElement", b$$1, newRange), env$$55.eFamilyType, env$$55.eCtorInfo, env$$55.eCallerMemberName);
        }
      }

    case 2:
      {
        const m$$11 = env$$55.eContextInfo.fields[0];

        if (!(0, _Util.equals)(m$$11, oldRange)) {
          return env$$55;
        } else {
          return new TcEnv(env$$55.eNameResEnv, env$$55.eUngeneralizableItems, env$$55.ePath, env$$55.eCompPath, env$$55.eAccessPath, env$$55.eAccessRights, env$$55.eInternalsVisibleCompPaths, env$$55.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(11, "FollowingPatternMatchClause", newRange), env$$55.eFamilyType, env$$55.eCtorInfo, env$$55.eCallerMemberName);
        }
      }

    case 3:
      {
        const m$$12 = env$$55.eContextInfo.fields[0];

        if (!(0, _Util.equals)(m$$12, oldRange)) {
          return env$$55;
        } else {
          return new TcEnv(env$$55.eNameResEnv, env$$55.eUngeneralizableItems, env$$55.ePath, env$$55.eCompPath, env$$55.eAccessPath, env$$55.eAccessRights, env$$55.eInternalsVisibleCompPaths, env$$55.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(12, "PatternMatchGuard", newRange), env$$55.eFamilyType, env$$55.eCtorInfo, env$$55.eCallerMemberName);
        }
      }

    case 4:
      {
        const m$$13 = env$$55.eContextInfo.fields[0];

        if (!(0, _Util.equals)(m$$13, oldRange)) {
          return env$$55;
        } else {
          return new TcEnv(env$$55.eNameResEnv, env$$55.eUngeneralizableItems, env$$55.ePath, env$$55.eCompPath, env$$55.eAccessPath, env$$55.eAccessRights, env$$55.eInternalsVisibleCompPaths, env$$55.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(1, "IfExpression", newRange), env$$55.eFamilyType, env$$55.eCtorInfo, env$$55.eCallerMemberName);
        }
      }

    case 5:
      {
        const m$$14 = env$$55.eContextInfo.fields[0];

        if (!(0, _Util.equals)(m$$14, oldRange)) {
          return env$$55;
        } else {
          return new TcEnv(env$$55.eNameResEnv, env$$55.eUngeneralizableItems, env$$55.ePath, env$$55.eCompPath, env$$55.eAccessPath, env$$55.eAccessRights, env$$55.eInternalsVisibleCompPaths, env$$55.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(2, "OmittedElseBranch", newRange), env$$55.eFamilyType, env$$55.eCtorInfo, env$$55.eCallerMemberName);
        }
      }

    case 6:
      {
        const m$$15 = env$$55.eContextInfo.fields[0];

        if (!(0, _Util.equals)(m$$15, oldRange)) {
          return env$$55;
        } else {
          return new TcEnv(env$$55.eNameResEnv, env$$55.eUngeneralizableItems, env$$55.ePath, env$$55.eCompPath, env$$55.eAccessPath, env$$55.eAccessRights, env$$55.eInternalsVisibleCompPaths, env$$55.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(3, "ElseBranchResult", newRange), env$$55.eFamilyType, env$$55.eCtorInfo, env$$55.eCallerMemberName);
        }
      }
  }
}

function UnifyRefTupleType(contextInfo, cenv$$2, denv, m$$16, ty$$6, ps) {
  let ptys$$1;

  if ((0, _TastOps.isRefTupleTy)(cenv$$2.g, ty$$6)) {
    const ptys = (0, _TastOps.destRefTupleTy)(cenv$$2.g, ty$$6);
    ptys$$1 = (0, _List.length)(ps) === (0, _List.length)(ptys) ? ptys : (0, _ConstraintSolver.NewInferenceTypes)(ps);
  } else {
    ptys$$1 = (0, _ConstraintSolver.NewInferenceTypes)(ps);
  }

  const contextInfo$$1 = contextInfo.tag === 4 ? new _ConstraintSolver.ContextInfo(5, "TupleInRecordFields") : contextInfo;
  (0, _ConstraintSolver.AddCxTypeEqualsType)(contextInfo$$1, denv, cenv$$2.css, m$$16, ty$$6, new _tast.TType(2, "TType_tuple", _tast.tupInfoRef, ptys$$1));
  return ptys$$1;
}

function UnifyStructTupleType(contextInfo$$2, cenv$$3, denv$$1, m$$17, ty$$7, ps$$1) {
  let ptys$$3;

  if ((0, _TastOps.isStructTupleTy)(cenv$$3.g, ty$$7)) {
    const ptys$$2 = (0, _TastOps.destStructTupleTy)(cenv$$3.g, ty$$7);
    ptys$$3 = (0, _List.length)(ps$$1) === (0, _List.length)(ptys$$2) ? ptys$$2 : (0, _ConstraintSolver.NewInferenceTypes)(ps$$1);
  } else {
    ptys$$3 = (0, _ConstraintSolver.NewInferenceTypes)(ps$$1);
  }

  (0, _ConstraintSolver.AddCxTypeEqualsType)(contextInfo$$2, denv$$1, cenv$$3.css, m$$17, ty$$7, new _tast.TType(2, "TType_tuple", _tast.tupInfoStruct, ptys$$3));
  return ptys$$3;
}

function UnifyFunctionTypeUndoIfFailed(cenv$$4, denv$$2, m$$18, ty$$8) {
  const matchValue$$9 = (0, _TastOps.tryDestFunTy)(cenv$$4.g, ty$$8);

  if (matchValue$$9 == null) {
    const domainTy = (0, _ConstraintSolver.NewInferenceType)();
    const resultTy = (0, _ConstraintSolver.NewInferenceType)();

    if ((0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(denv$$2, cenv$$4.css, m$$18, ty$$8, (0, _TastOps.op_MinusMinusGreater)(domainTy, resultTy))) {
      return [domainTy, resultTy];
    } else {
      return null;
    }
  } else {
    const r = matchValue$$9;
    return r;
  }
}

function UnifyFunctionType(extraInfo, cenv$$5, denv$$3, mFunExpr, ty$$9) {
  const matchValue$$10 = UnifyFunctionTypeUndoIfFailed(cenv$$5, denv$$3, mFunExpr, ty$$9);

  if (matchValue$$10 == null) {
    if (extraInfo == null) {
      return (0, _ErrorLogger.error)(new FunctionExpected(denv$$3, ty$$9, mFunExpr));
    } else {
      const argm = extraInfo;
      return (0, _ErrorLogger.error)(new NotAFunction(denv$$3, ty$$9, mFunExpr, argm));
    }
  } else {
    const res = matchValue$$10;
    return res;
  }
}

function ReportImplicitlyIgnoredBoolExpression(denv$$4, m$$19, ty$$10, expr) {
  const checkExpr = function checkExpr(m$$20, expr$$1) {
    var vf$$2, methodRef, vf, exprs;
    var $target$$158, exprs$$1, vf$$1;

    if (expr$$1.tag === 5) {
      if (expr$$1.fields[0].tag === 1) {
        if (vf = expr$$1.fields[0].fields[0], (exprs = expr$$1.fields[3], (0, _tast.ValRef$$get_LogicalName)(vf) === _PrettyNaming.opNameEquals)) {
          $target$$158 = 0;
          exprs$$1 = expr$$1.fields[3];
          vf$$1 = expr$$1.fields[0].fields[0];
        } else {
          $target$$158 = 1;
        }
      } else {
        $target$$158 = 1;
      }
    } else {
      $target$$158 = 1;
    }

    switch ($target$$158) {
      case 0:
        {
          var $target$$159, propRef, vf$$3, methodRef$$1, vf$$4;

          if (exprs$$1.tail != null) {
            if (exprs$$1.head.tag === 5) {
              if (exprs$$1.head.fields[0].tag === 1) {
                if (exprs$$1.head.fields[3].tail != null) {
                  if (exprs$$1.head.fields[3].head.tag === 1) {
                    $target$$159 = 0;
                    propRef = exprs$$1.head.fields[0].fields[0];
                    vf$$3 = exprs$$1.head.fields[3].head.fields[0];
                  } else {
                    $target$$159 = 2;
                  }
                } else {
                  $target$$159 = 2;
                }
              } else {
                $target$$159 = 2;
              }
            } else if (exprs$$1.head.tag === 11) {
              if (exprs$$1.head.fields[0].tag === 31) {
                if (exprs$$1.head.fields[2].tail != null) {
                  if (exprs$$1.head.fields[2].head.tag === 1) {
                    if (vf$$2 = exprs$$1.head.fields[2].head.fields[0], (methodRef = exprs$$1.head.fields[0].fields[7], (0, _String.startsWith)((0, _il.ILMethodRef$$get_Name)(methodRef), "get_", 4))) {
                      $target$$159 = 1;
                      methodRef$$1 = exprs$$1.head.fields[0].fields[7];
                      vf$$4 = exprs$$1.head.fields[2].head.fields[0];
                    } else {
                      $target$$159 = 2;
                    }
                  } else {
                    $target$$159 = 2;
                  }
                } else {
                  $target$$159 = 2;
                }
              } else {
                $target$$159 = 2;
              }
            } else {
              $target$$159 = 2;
            }
          } else {
            $target$$159 = 2;
          }

          switch ($target$$159) {
            case 0:
              {
                if ((0, _tast.ValRef$$get_IsPropertyGetterMethod)(propRef)) {
                  const propertyName = (0, _tast.ValRef$$get_PropertyName)(propRef);
                  let hasCorrespondingSetter;
                  const matchValue$$11 = (0, _tast.ValRef$$get_DeclaringEntity)(propRef);

                  if (matchValue$$11.tag === 0) {
                    const entityRef = matchValue$$11.fields[0];
                    hasCorrespondingSetter = (0, _List.exists)(function predicate$$2(valRef) {
                      if ((0, _tast.ValRef$$get_IsPropertySetterMethod)(valRef)) {
                        return (0, _tast.ValRef$$get_PropertyName)(valRef) === propertyName;
                      } else {
                        return false;
                      }
                    }, (0, _tast.EntityRef$$get_MembersOfFSharpTyconSorted)(entityRef));
                  } else {
                    hasCorrespondingSetter = false;
                  }

                  if (hasCorrespondingSetter) {
                    return new UnitTypeExpectedWithPossiblePropertySetter(denv$$4, ty$$10, (0, _tast.ValRef$$get_DisplayName)(vf$$3), propertyName, m$$20);
                  } else {
                    return new UnitTypeExpectedWithEquality(denv$$4, ty$$10, m$$20);
                  }
                } else {
                  return new UnitTypeExpectedWithEquality(denv$$4, ty$$10, m$$20);
                }
              }

            case 1:
              {
                return new UnitTypeExpectedWithPossiblePropertySetter(denv$$4, ty$$10, (0, _tast.ValRef$$get_DisplayName)(vf$$4), (0, _PrettyNaming.ChopPropertyName)((0, _il.ILMethodRef$$get_Name)(methodRef$$1)), m$$20);
              }

            case 2:
              {
                var $target$$160, vf$$5;

                if (exprs$$1.tail != null) {
                  if (exprs$$1.head.tag === 1) {
                    $target$$160 = 0;
                    vf$$5 = exprs$$1.head.fields[0];
                  } else {
                    $target$$160 = 1;
                  }
                } else {
                  $target$$160 = 1;
                }

                switch ($target$$160) {
                  case 0:
                    {
                      return new UnitTypeExpectedWithPossibleAssignment(denv$$4, ty$$10, (0, _tast.ValRef$$get_IsMutable)(vf$$5), (0, _tast.ValRef$$get_DisplayName)(vf$$5), m$$20);
                    }

                  case 1:
                    {
                      return new UnitTypeExpectedWithEquality(denv$$4, ty$$10, m$$20);
                    }
                }
              }
          }
        }

      case 1:
        {
          return new UnitTypeExpected(denv$$4, ty$$10, m$$20);
        }
    }
  };

  var $target$$161, inner, expr$$3;

  if (expr.tag === 7) {
    if (expr.fields[1].tag === 2) {
      $target$$161 = 0;
      inner = expr.fields[1].fields[1];
    } else {
      $target$$161 = 1;
      expr$$3 = expr;
    }
  } else if (expr.tag === 2) {
    $target$$161 = 0;
    inner = expr.fields[1];
  } else {
    $target$$161 = 1;
    expr$$3 = expr;
  }

  switch ($target$$161) {
    case 0:
      {
        const extractNext = function extractNext(expr$$2) {
          extractNext: while (true) {
            if (expr$$2.tag === 2) {
              const inner$$1 = expr$$2.fields[1];
              expr$$2 = inner$$1;
              continue extractNext;
            } else {
              return checkExpr((0, _TastOps.Expr$002Eget_Range)(expr$$2), expr$$2);
            }
          }
        };

        return extractNext(inner);
      }

    case 1:
      {
        return checkExpr(m$$19, expr$$3);
      }
  }
}

function UnifyUnitType(cenv$$6, env$$56, m$$21, ty$$11, expr$$4) {
  const denv$$5 = TcEnv$$get_DisplayEnv(env$$56);

  if ((0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(denv$$5, cenv$$6.css, m$$21, ty$$11, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$6.g))) {
    return true;
  } else {
    const domainTy$$1 = (0, _ConstraintSolver.NewInferenceType)();
    const resultTy$$1 = (0, _ConstraintSolver.NewInferenceType)();

    if ((0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(denv$$5, cenv$$6.css, m$$21, ty$$11, (0, _TastOps.op_MinusMinusGreater)(domainTy$$1, resultTy$$1))) {
      (0, _ErrorLogger.warning)(new FunctionValueUnexpected(denv$$5, ty$$11, m$$21));
    } else {
      const reportImplicitlyDiscardError = function reportImplicitlyDiscardError() {
        if ((0, _TastOps.typeEquiv)(cenv$$6.g, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$6.g), ty$$11)) {
          (0, _ErrorLogger.warning)(ReportImplicitlyIgnoredBoolExpression(denv$$5, m$$21, ty$$11, expr$$4));
        } else {
          (0, _ErrorLogger.warning)(new UnitTypeExpected(denv$$5, ty$$11, m$$21));
        }
      };

      if (env$$56.eContextInfo.tag === 13) {
        const seqTy = env$$56.eContextInfo.fields[0];
        const lifted = (0, _TastOps.mkSeqTy)(cenv$$6.g, ty$$11);

        if ((0, _TastOps.typeEquiv)(cenv$$6.g, seqTy, lifted)) {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$implicitlyDiscardedInSequenceExpression$$Z721C83C5)((0, _NicePrint.prettyStringOfTy)(denv$$5, ty$$11)), m$$21));
        } else if (((0, _TastOps.isListTy)(cenv$$6.g, ty$$11) ? true : (0, _TastOps.isArrayTy)(cenv$$6.g, ty$$11)) ? true : (0, _TastOps.typeEquiv)(cenv$$6.g, seqTy, ty$$11)) {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$implicitlyDiscardedSequenceInSequenceExpression$$Z721C83C5)((0, _NicePrint.prettyStringOfTy)(denv$$5, ty$$11)), m$$21));
        } else {
          reportImplicitlyDiscardError();
        }
      } else {
        reportImplicitlyDiscardError();
      }
    }

    return false;
  }
}

const AttributeTargets$$$FieldDecl = 256 | 128;
exports.AttributeTargets$$$FieldDecl = AttributeTargets$$$FieldDecl;
const AttributeTargets$$$FieldDeclRestricted = 256;
exports.AttributeTargets$$$FieldDeclRestricted = AttributeTargets$$$FieldDeclRestricted;
const AttributeTargets$$$UnionCaseDecl = 64 | 128;
exports.AttributeTargets$$$UnionCaseDecl = AttributeTargets$$$UnionCaseDecl;
const AttributeTargets$$$TyconDecl = 4 | 1024 | 4096 | 8 | 16;
exports.AttributeTargets$$$TyconDecl = AttributeTargets$$$TyconDecl;
const AttributeTargets$$$ExnDecl = 4;
exports.AttributeTargets$$$ExnDecl = AttributeTargets$$$ExnDecl;
const AttributeTargets$$$ModuleDecl = 4;
exports.AttributeTargets$$$ModuleDecl = AttributeTargets$$$ModuleDecl;
const AttributeTargets$$$Top = 1 | 2 | 64;
exports.AttributeTargets$$$Top = AttributeTargets$$$Top;

function ForNewConstructors(tcSink$$11, env$$57, mObjTy, methodName, meths) {
  const origItem = new _NameResolution.Item(11, "CtorGroup", methodName, meths);

  const callSink = function callSink(tupledArg$$4) {
    (0, _NameResolution.CallNameResolutionSink)(tcSink$$11, mObjTy, TcEnv$$get_NameEnv(env$$57), tupledArg$$4[0], origItem, tupledArg$$4[1], new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$57), env$$57.eAccessRights);
  };

  const sendToSink = function sendToSink(minst$$1, refinedMeths) {
    callSink([new _NameResolution.Item(11, "CtorGroup", methodName, refinedMeths), minst$$1]);
  };

  if (meths.tail != null) {
    if (meths.tail.tail == null) {
      sendToSink(_TastOps.emptyTyparInst, meths);
      return new _NameResolution.AfterResolution(0, "DoNothing");
    } else {
      return new _NameResolution.AfterResolution(1, "RecordResolution", null, function (tpinst) {
        callSink([origItem, tpinst]);
      }, function (tupledArg$$5) {
        sendToSink(tupledArg$$5[2], (0, _Types.L)(tupledArg$$5[0], (0, _Types.L)()));
      }, function () {
        callSink([origItem, _TastOps.emptyTyparInst]);
      });
    }
  } else {
    return new _NameResolution.AfterResolution(0, "DoNothing");
  }
}

function TcSynRationalConst(c) {
  switch (c.tag) {
    case 2:
      {
        const c$0027 = c.fields[0];
        return (0, _rational.NegRational)(TcSynRationalConst(c$0027));
      }

    case 1:
      {
        const q = c.fields[1] | 0;
        const p$$2 = c.fields[0] | 0;
        return (0, _rational.DivRational)((0, _rational.intToRational)(p$$2), (0, _rational.intToRational)(q));
      }

    default:
      {
        const i = c.fields[0] | 0;
        return (0, _rational.intToRational)(i);
      }
  }
}

function TcConst(cenv$$7, ty$$12, m$$22, env$$58, c$$1) {
  const tcMeasure = function tcMeasure(ms) {
    var $target$$162, m$$23, tc, exponent, ms$$1, ms1, ms2, m$$24, ms1$$1, ms2$$1, ms1$$2, ms2$$2, mss, m$$25;

    if (ms.tag === 0) {
      $target$$162 = 1;
      m$$23 = ms.fields[1];
      tc = ms.fields[0];
    } else if (ms.tag === 4) {
      $target$$162 = 2;
      exponent = ms.fields[1];
      ms$$1 = ms.fields[0];
    } else if (ms.tag === 1) {
      $target$$162 = 3;
      ms1 = ms.fields[0];
      ms2 = ms.fields[1];
    } else if (ms.tag === 3) {
      if (ms.fields[1].tag === 2) {
        if (ms.fields[1].fields[0].tail != null) {
          if (ms.fields[1].fields[0].tail.tail != null) {
            $target$$162 = 4;
            m$$24 = ms.fields[2];
            ms1$$1 = ms.fields[0];
            ms2$$1 = ms.fields[1];
          } else {
            $target$$162 = 5;
            ms1$$2 = ms.fields[0];
            ms2$$2 = ms.fields[1];
          }
        } else {
          $target$$162 = 5;
          ms1$$2 = ms.fields[0];
          ms2$$2 = ms.fields[1];
        }
      } else {
        $target$$162 = 5;
        ms1$$2 = ms.fields[0];
        ms2$$2 = ms.fields[1];
      }
    } else if (ms.tag === 2) {
      $target$$162 = 6;
      mss = ms.fields[0];
    } else if (ms.tag === 6) {
      $target$$162 = 7;
    } else if (ms.tag === 7) {
      $target$$162 = 8;
      m$$25 = ms.fields[1];
    } else {
      $target$$162 = 0;
    }

    switch ($target$$162) {
      case 0:
        {
          return new _tast.Measure(4, "One");
        }

      case 1:
        {
          const ad$$1 = env$$58.eAccessRights;
          const tcref$$2 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)((0, _NameResolution.ResolveTypeLongIdent)(cenv$$7.tcSink, cenv$$7.nameResolver, new _NameResolution.ItemOccurence(1, "Use"), new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$58.eNameResEnv, ad$$1, tc, (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$get_DefiniteEmpty)(), new _NameResolution.PermitDirectReferenceToGeneratedType(1, "No")));

          if ((0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$2).tag === 1) {
            return new _tast.Measure(1, "Con", tcref$$2);
          } else {
            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedUnitOfMeasureNotType)(), m$$23));
          }
        }

      case 2:
        {
          return new _tast.Measure(5, "RationalPower", tcMeasure(ms$$1), TcSynRationalConst(exponent));
        }

      case 3:
        {
          return new _tast.Measure(2, "Prod", tcMeasure(ms1), tcMeasure(ms2));
        }

      case 4:
        {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcImplicitMeasureFollowingSlash)(), m$$24));
          return new _tast.Measure(2, "Prod", tcMeasure(ms1$$1), new _tast.Measure(3, "Inv", tcMeasure(ms2$$1)));
        }

      case 5:
        {
          return new _tast.Measure(2, "Prod", tcMeasure(ms1$$2), new _tast.Measure(3, "Inv", tcMeasure(ms2$$2)));
        }

      case 6:
        {
          return (0, _TastOps.ProdMeasures)((0, _List.map)(tcMeasure, mss));
        }

      case 7:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedMeasureAnon)(), m$$22));
        }

      case 8:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNonZeroConstantCannotHaveGenericUnit)(), m$$25));
        }
    }
  };

  const unif = function unif(expected) {
    UnifyTypes(cenv$$7, env$$58, m$$22, ty$$12, expected);
  };

  const unifyMeasureArg = function unifyMeasureArg(iszero, tcr, c$$2) {
    const measureTy = c$$2.tag === 20 ? c$$2.fields[1].tag === 6 ? (0, _TastOps.mkAppTy)(tcr, (0, _Types.L)(new _tast.TType(6, "TType_measure", new _tast.Measure(0, "Var", (0, _ConstraintSolver.NewAnonTypar)(new _tast.TyparKind(1, "Measure"), m$$22, new _tast.TyparRigidity(4, "Anon"), iszero ? new _ast.TyparStaticReq(0, "NoStaticReq") : new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), new _tast.TyparDynamicReq(0, "No")))), (0, _Types.L)())) : (0, _TastOps.mkAppTy)(tcr, (0, _Types.L)(new _tast.TType(6, "TType_measure", tcMeasure(c$$2.fields[1])), (0, _Types.L)())) : (0, _TastOps.mkAppTy)(tcr, (0, _Types.L)(new _tast.TType(6, "TType_measure", new _tast.Measure(4, "One")), (0, _Types.L)()));
    unif(measureTy);
  };

  var $target$$163, i$$1, i$$2, i$$3, i$$4, i$$5, i$$6, i$$7, i$$8, i$$9, i$$10, i$$11, f$$1, f$$2, s, i$$12, i$$13, i$$14, i$$15, c$$3, s$$1;

  if (c$$1.tag === 1) {
    $target$$163 = 1;
    i$$1 = c$$1.fields[0];
  } else if (c$$1.tag === 2) {
    $target$$163 = 2;
    i$$2 = c$$1.fields[0];
  } else if (c$$1.tag === 4) {
    $target$$163 = 3;
    i$$3 = c$$1.fields[0];
  } else if (c$$1.tag === 6) {
    $target$$163 = 4;
    i$$4 = c$$1.fields[0];
  } else if (c$$1.tag === 8) {
    $target$$163 = 5;
    i$$5 = c$$1.fields[0];
  } else if (c$$1.tag === 10) {
    $target$$163 = 6;
    i$$6 = c$$1.fields[0];
  } else if (c$$1.tag === 3) {
    $target$$163 = 7;
    i$$7 = c$$1.fields[0];
  } else if (c$$1.tag === 5) {
    $target$$163 = 8;
    i$$8 = c$$1.fields[0];
  } else if (c$$1.tag === 7) {
    $target$$163 = 9;
    i$$9 = c$$1.fields[0];
  } else if (c$$1.tag === 9) {
    $target$$163 = 10;
    i$$10 = c$$1.fields[0];
  } else if (c$$1.tag === 11) {
    $target$$163 = 11;
    i$$11 = c$$1.fields[0];
  } else if (c$$1.tag === 20) {
    if (c$$1.fields[0].tag === 12) {
      $target$$163 = 12;
      f$$1 = c$$1.fields[0].fields[0];
    } else if (c$$1.fields[0].tag === 13) {
      $target$$163 = 13;
      f$$2 = c$$1.fields[0].fields[0];
    } else if (c$$1.fields[0].tag === 15) {
      $target$$163 = 14;
      s = c$$1.fields[0].fields[0];
    } else if (c$$1.fields[0].tag === 2) {
      $target$$163 = 15;
      i$$12 = c$$1.fields[0].fields[0];
    } else if (c$$1.fields[0].tag === 4) {
      $target$$163 = 16;
      i$$13 = c$$1.fields[0].fields[0];
    } else if (c$$1.fields[0].tag === 6) {
      $target$$163 = 17;
      i$$14 = c$$1.fields[0].fields[0];
    } else if (c$$1.fields[0].tag === 8) {
      $target$$163 = 18;
      i$$15 = c$$1.fields[0].fields[0];
    } else {
      $target$$163 = 22;
    }
  } else if (c$$1.tag === 12) {
    $target$$163 = 12;
    f$$1 = c$$1.fields[0];
  } else if (c$$1.tag === 13) {
    $target$$163 = 13;
    f$$2 = c$$1.fields[0];
  } else if (c$$1.tag === 15) {
    $target$$163 = 14;
    s = c$$1.fields[0];
  } else if (c$$1.tag === 14) {
    $target$$163 = 19;
    c$$3 = c$$1.fields[0];
  } else if (c$$1.tag === 17) {
    $target$$163 = 20;
    s$$1 = c$$1.fields[0];
  } else if (c$$1.tag === 16) {
    $target$$163 = 21;
  } else if (c$$1.tag === 19) {
    $target$$163 = 23;
  } else if (c$$1.tag === 18) {
    $target$$163 = 24;
  } else {
    $target$$163 = 0;
  }

  switch ($target$$163) {
    case 0:
      {
        unif((0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$7.g));
        return new _tast.Const(16, "Unit");
      }

    case 1:
      {
        unif((0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$7.g));
        return new _tast.Const(0, "Bool", i$$1);
      }

    case 2:
      {
        unif((0, _TcGlobals.TcGlobals$$get_sbyte_ty)(cenv$$7.g));
        return new _tast.Const(1, "SByte", i$$2);
      }

    case 3:
      {
        unif((0, _TcGlobals.TcGlobals$$get_int16_ty)(cenv$$7.g));
        return new _tast.Const(3, "Int16", i$$3);
      }

    case 4:
      {
        unif((0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$7.g));
        return new _tast.Const(5, "Int32", i$$4);
      }

    case 5:
      {
        unif((0, _TcGlobals.TcGlobals$$get_int64_ty)(cenv$$7.g));
        return new _tast.Const(7, "Int64", i$$5);
      }

    case 6:
      {
        unif((0, _TcGlobals.TcGlobals$$get_nativeint_ty)(cenv$$7.g));
        return new _tast.Const(9, "IntPtr", i$$6);
      }

    case 7:
      {
        unif((0, _TcGlobals.TcGlobals$$get_byte_ty)(cenv$$7.g));
        return new _tast.Const(2, "Byte", i$$7);
      }

    case 8:
      {
        unif((0, _TcGlobals.TcGlobals$$get_uint16_ty)(cenv$$7.g));
        return new _tast.Const(4, "UInt16", i$$8);
      }

    case 9:
      {
        unif((0, _TcGlobals.TcGlobals$$get_uint32_ty)(cenv$$7.g));
        return new _tast.Const(6, "UInt32", i$$9);
      }

    case 10:
      {
        unif((0, _TcGlobals.TcGlobals$$get_uint64_ty)(cenv$$7.g));
        return new _tast.Const(8, "UInt64", i$$10);
      }

    case 11:
      {
        unif((0, _TcGlobals.TcGlobals$$get_unativeint_ty)(cenv$$7.g));
        return new _tast.Const(10, "UIntPtr", i$$11);
      }

    case 12:
      {
        unifyMeasureArg(f$$1 === Math.fround(0), (0, _TcGlobals.TcGlobals$$get_pfloat32_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(11, "Single", f$$1);
      }

    case 13:
      {
        unifyMeasureArg(f$$2 === 0, (0, _TcGlobals.TcGlobals$$get_pfloat_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(12, "Double", f$$2);
      }

    case 14:
      {
        unifyMeasureArg(false, (0, _TcGlobals.TcGlobals$$get_pdecimal_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(15, "Decimal", s);
      }

    case 15:
      {
        unifyMeasureArg(i$$12 === 0, (0, _TcGlobals.TcGlobals$$get_pint8_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(1, "SByte", i$$12);
      }

    case 16:
      {
        unifyMeasureArg(i$$13 === 0, (0, _TcGlobals.TcGlobals$$get_pint16_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(3, "Int16", i$$13);
      }

    case 17:
      {
        unifyMeasureArg(i$$14 === 0, (0, _TcGlobals.TcGlobals$$get_pint_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(5, "Int32", i$$14);
      }

    case 18:
      {
        unifyMeasureArg((0, _Long.equals)(i$$15, (0, _Long.fromBits)(0, 0, false)), (0, _TcGlobals.TcGlobals$$get_pint64_tcr)(cenv$$7.g), c$$1);
        return new _tast.Const(7, "Int64", i$$15);
      }

    case 19:
      {
        unif((0, _TcGlobals.TcGlobals$$get_char_ty)(cenv$$7.g));
        return new _tast.Const(13, "Char", c$$3);
      }

    case 20:
      {
        unif((0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$7.g));
        return new _tast.Const(14, "String", s$$1);
      }

    case 21:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError((0, _FSComp.SR$$$tcUnexpectedBigRationalConstant)(), m$$22));
      }

    case 22:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidTypeForUnitsOfMeasure)(), m$$22));
      }

    case 23:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError((0, _FSComp.SR$$$tcUnexpectedConstUint16Array)(), m$$22));
      }

    case 24:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError((0, _FSComp.SR$$$tcUnexpectedConstByteArray)(), m$$22));
      }
  }
}

function TcFieldInit(_m, lit) {
  return (0, _PatternMatchCompilation.ilFieldToTastConst)(lit);
}

function AdjustValSynInfoInSignature(g$$16, ty$$13, _arg1$$3) {
  const sigMD = _arg1$$3;
  const retData = sigMD.fields[1];
  const argsData = sigMD.fields[0];

  if ((((0, _List.length)(argsData) === 1 ? (0, _List.length)((0, _List.head)(argsData)) === 1 : false) ? (0, _TastOps.isFunTy)(g$$16, ty$$13) : false) ? (0, _TastOps.typeEquiv)(g$$16, (0, _TcGlobals.TcGlobals$$get_unit_ty)(g$$16), (0, _TastOps.domainOfFunTy)(g$$16, ty$$13)) : false) {
    return new _ast.SynValInfo(0, "SynValInfo", (0, _Types.L)((0, _List.tail)((0, _List.head)(argsData)), (0, _List.tail)(argsData)), retData);
  } else {
    return sigMD;
  }
}

const PartialValReprInfo = (0, _Types.declare)(function PartialValReprInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.PartialValReprInfo = PartialValReprInfo;

function TranslateTopArgSynInfo(isArg, m$$26, tcAttributes, _arg1$$4) {
  const nm$$2 = _arg1$$4.fields[2];
  const isOpt = _arg1$$4.fields[1];
  const attrs = _arg1$$4.fields[0];
  const optAttrs = isOpt ? (0, _Types.L)(new _ast.SynAttribute(new _ast.LongIdentWithDots(0, "LongIdentWithDots", (0, _ast.pathToSynLid)(m$$26, (0, _Types.L)("Microsoft", (0, _Types.L)("FSharp", (0, _Types.L)("Core", (0, _Types.L)("OptionalArgument", (0, _Types.L)()))))), (0, _Types.L)()), (0, _ast.mkSynUnit)(m$$26), null, false, m$$26), (0, _Types.L)()) : (0, _Types.L)();

  if ((isArg ? !(attrs.tail == null) : false) ? nm$$2 == null : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcParameterRequiresName)(), m$$26));
  }

  if (!isArg ? nm$$2 != null : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcReturnValuesCannotHaveNames)(), m$$26));
  }

  const attribs = tcAttributes((0, _List.append)(optAttrs, attrs));
  return new _tast.ArgReprInfo(attribs, nm$$2);
}

function TranslateTopValSynInfo(m$$27, tcAttributes$$1, _arg1$$5) {
  const retData$$1 = _arg1$$5.fields[1];
  const argsData$$1 = _arg1$$5.fields[0];
  return new PartialValReprInfo(0, "PartialValReprInfo", (0, _illib.List$$$mapSquared)(function f$$3(arg30$0040) {
    return TranslateTopArgSynInfo(true, m$$27, (0, _Util.partialApply)(1, tcAttributes$$1, [2048]), arg30$0040);
  }, argsData$$1), TranslateTopArgSynInfo(false, m$$27, (0, _Util.partialApply)(1, tcAttributes$$1, [8192]), retData$$1));
}

function TranslatePartialArity(tps, _arg1$$6) {
  const retData$$2 = _arg1$$6.fields[1];
  const argsData$$2 = _arg1$$6.fields[0];
  return new _tast.ValReprInfo(0, "ValReprInfo", (0, _tast.ValReprInfoModule$$$InferTyparInfo)(tps), argsData$$2, retData$$2);
}

function ComputeLogicalName(id$$5, memberFlags) {
  if (memberFlags.MemberKind.tag === 1) {
    return ".ctor";
  } else if (memberFlags.MemberKind.tag === 2) {
    const matchValue$$15 = (0, _ast.Ident$$get_idText)(id$$5);
    var $target$$171, r$$1;

    switch (matchValue$$15) {
      case ".ctor":
        $target$$171 = 0;
        r$$1 = matchValue$$15;
        break;

      case ".cctor":
        $target$$171 = 0;
        r$$1 = matchValue$$15;
        break;

      default:
        $target$$171 = 1;
    }

    switch ($target$$171) {
      case 0:
        {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidMemberNameCtor)(), (0, _ast.Ident$$get_idRange)(id$$5)));
          return r$$1;
        }

      case 1:
        {
          const r$$2 = matchValue$$15;
          return r$$2;
        }
    }
  } else if (memberFlags.MemberKind.tag === 5) {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError((0, _FSComp.SR$$$tcMemberKindPropertyGetSetNotExpected)(), (0, _ast.Ident$$get_idRange)(id$$5)));
  } else if (memberFlags.MemberKind.tag === 3) {
    return "get_" + (0, _ast.Ident$$get_idText)(id$$5);
  } else if (memberFlags.MemberKind.tag === 4) {
    return "set_" + (0, _ast.Ident$$get_idText)(id$$5);
  } else {
    return ".cctor";
  }
}

const ValMemberInfoTransient = (0, _Types.declare)(function ValMemberInfoTransient(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ValMemberInfoTransient = ValMemberInfoTransient;

function MakeMemberDataAndMangledNameForMemberVal(g$$17, tcref$$3, isExtrinsic, attrs$$1, optImplSlotTys, memberFlags$$1, valSynData, id$$6, isCompGen) {
  const logicalName = ComputeLogicalName(id$$6, memberFlags$$1);
  const optIntfSlotTys = (0, _List.forAll)(function predicate$$3(arg10$0040) {
    return (0, _TastOps.isInterfaceTy)(g$$17, arg10$0040);
  }, optImplSlotTys) ? optImplSlotTys : (0, _Types.L)();
  const memberInfo = new _tast.ValMemberInfo(tcref$$3, (0, _List.map)(function mapping$$2(ity) {
    return new _tast.SlotSig(0, "TSlotSig", logicalName, ity, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(), null);
  }, optImplSlotTys), false, memberFlags$$1);
  const isInstance = (0, _TastOps.MemberIsCompiledAsInstance)(g$$17, tcref$$3, isExtrinsic, memberInfo, attrs$$1);

  if (memberFlags$$1.IsDispatchSlot ? true : !(optIntfSlotTys.tail == null)) {
    if (!isInstance) {
      (0, _ErrorLogger.errorR)(new VirtualAugmentationOnNullValuedType((0, _ast.Ident$$get_idRange)(id$$6)));
    }
  } else if (!memberFlags$$1.IsOverrideOrExplicitImpl ? memberFlags$$1.IsInstance : false) {
    if (!isExtrinsic ? !isInstance : false) {
      (0, _ErrorLogger.warning)(new NonVirtualAugmentationOnNullValuedType((0, _ast.Ident$$get_idRange)(id$$6)));
    }
  }

  let compiledName;

  if (isExtrinsic) {
    const tname = (0, _tast.EntityRef$$get_LogicalName)(tcref$$3);
    const text = tname + "." + logicalName;
    const text$$1 = ((!(0, _Util.equals)(memberFlags$$1.MemberKind, new _ast.MemberKind(1, "Constructor")) ? !(0, _Util.equals)(memberFlags$$1.MemberKind, new _ast.MemberKind(0, "ClassConstructor")) : false) ? !memberFlags$$1.IsInstance : false) ? text + ".Static" : text;
    const text$$2 = memberFlags$$1.IsOverrideOrExplicitImpl ? text$$1 + ".Override" : text$$1;
    compiledName = text$$2;
  } else {
    compiledName = (0, _List.foldBack)(function ($arg$$5, arg10$0040$$2) {
      return (0, _TastOps.qualifiedMangledNameOfTyconRef)((0, _TastOps.tcrefOfAppTy)(g$$17, $arg$$5), arg10$0040$$2);
    }, optIntfSlotTys, logicalName);
  }

  if ((!isCompGen ? (0, _PrettyNaming.IsMangledOpName)((0, _ast.Ident$$get_idText)(id$$6)) : false) ? (0, _PrettyNaming.IsInfixOperator)((0, _ast.Ident$$get_idText)(id$$6)) : false) {
    const m$$28 = (0, _ast.Ident$$get_idRange)(id$$6);
    const name = (0, _PrettyNaming.DecompileOpName)((0, _ast.Ident$$get_idText)(id$$6));
    const matchValue$$16 = (0, _ast.SynInfo$$$AritiesOfArgs)(valSynData);
    var $target$$172, n, otherArgs;

    if (matchValue$$16.tail != null) {
      if (matchValue$$16.head === 0) {
        if (matchValue$$16.tail.tail == null) {
          $target$$172 = 0;
        } else {
          $target$$172 = 1;
          n = matchValue$$16.head;
          otherArgs = matchValue$$16.tail;
        }
      } else {
        $target$$172 = 1;
        n = matchValue$$16.head;
        otherArgs = matchValue$$16.tail;
      }
    } else {
      $target$$172 = 0;
    }

    switch ($target$$172) {
      case 0:
        {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$memberOperatorDefinitionWithNoArguments$$Z721C83C5)(name), m$$28));
          break;
        }

      case 1:
        {
          const opTakesThreeArgs = (0, _PrettyNaming.IsTernaryOperator)(name);

          if (n !== 2 ? !opTakesThreeArgs : false) {
            (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$memberOperatorDefinitionWithNonPairArgument$$Z18115A39)(name, n), m$$28));
          }

          if (n !== 3 ? opTakesThreeArgs : false) {
            (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$memberOperatorDefinitionWithNonTripleArgument$$Z18115A39)(name, n), m$$28));
          }

          if (!(otherArgs.tail == null)) {
            (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$memberOperatorDefinitionWithCurriedArguments$$Z721C83C5)(name), m$$28));
          }

          break;
        }
    }
  }

  if (isExtrinsic ? (0, _PrettyNaming.IsMangledOpName)((0, _ast.Ident$$get_idText)(id$$6)) : false) {
    (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMemberOperatorDefinitionInExtrinsic)(), (0, _ast.Ident$$get_idRange)(id$$6)));
  }

  return new ValMemberInfoTransient(0, "ValMemberInfoTransient", memberInfo, logicalName, compiledName);
}

const OverridesOK = (0, _Types.declare)(function OverridesOK(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.OverridesOK = OverridesOK;
const ExplicitTyparInfo = (0, _Types.declare)(function ExplicitTyparInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ExplicitTyparInfo = ExplicitTyparInfo;
const permitInferTypars = new ExplicitTyparInfo(0, "ExplicitTyparInfo", (0, _Types.L)(), (0, _Types.L)(), true);
exports.permitInferTypars = permitInferTypars;
const dontInferTypars = new ExplicitTyparInfo(0, "ExplicitTyparInfo", (0, _Types.L)(), (0, _Types.L)(), false);
exports.dontInferTypars = dontInferTypars;
const ArgAndRetAttribs = (0, _Types.declare)(function ArgAndRetAttribs(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ArgAndRetAttribs = ArgAndRetAttribs;
const noArgOrRetAttribs = new ArgAndRetAttribs(0, "ArgAndRetAttribs", (0, _Types.L)(), (0, _Types.L)());
exports.noArgOrRetAttribs = noArgOrRetAttribs;
const DeclKind = (0, _Types.declare)(function DeclKind(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.DeclKind = DeclKind;

function DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD(x$$7) {
  switch (x$$7.tag) {
    case 1:
      {
        return true;
      }

    case 2:
      {
        return true;
      }

    case 3:
      {
        return false;
      }

    case 4:
      {
        return false;
      }

    case 5:
      {
        return false;
      }

    default:
      {
        return true;
      }
  }
}

function DeclKind$$$MustHaveArity$$Z6CE1C8BD(x$$8) {
  return DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD(x$$8);
}

function DeclKind$$get_CanBeDllImport(x$$9) {
  switch (x$$9.tag) {
    case 1:
      {
        return true;
      }

    case 2:
      {
        return true;
      }

    case 3:
      {
        return true;
      }

    case 4:
      {
        return false;
      }

    case 5:
      {
        return false;
      }

    default:
      {
        return true;
      }
  }
}

function DeclKind$$$IsAccessModifierPermitted$$Z6CE1C8BD(x$$10) {
  return DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD(x$$10);
}

function DeclKind$$$ImplicitlyStatic$$Z6CE1C8BD(x$$11) {
  return DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD(x$$11);
}

function DeclKind$$$AllowedAttribTargets(memberFlagsOpt, x$$12) {
  var flags$$6, flags$$4, flags$$2, flags;
  var $target$$173;

  switch (x$$12.tag) {
    case 4:
      $target$$173 = 0;
      break;

    case 1:
      $target$$173 = 1;
      break;

    case 2:
      $target$$173 = 2;
      break;

    case 3:
      $target$$173 = 3;
      break;

    case 5:
      $target$$173 = 4;
      break;

    default:
      $target$$173 = 0;
  }

  switch ($target$$173) {
    case 0:
      {
        var $target$$174, flags$$1;

        if (memberFlagsOpt != null) {
          if (flags = memberFlagsOpt, (0, _Util.equals)(flags.MemberKind, new _ast.MemberKind(1, "Constructor"))) {
            $target$$174 = 0;
            flags$$1 = memberFlagsOpt;
          } else {
            $target$$174 = 1;
          }
        } else {
          $target$$174 = 1;
        }

        switch ($target$$174) {
          case 0:
            {
              return 32;
            }

          case 1:
            {
              var $target$$175, flags$$3;

              if (memberFlagsOpt != null) {
                if (flags$$2 = memberFlagsOpt, (0, _Util.equals)(flags$$2.MemberKind, new _ast.MemberKind(5, "PropertyGetSet"))) {
                  $target$$175 = 0;
                  flags$$3 = memberFlagsOpt;
                } else {
                  $target$$175 = 1;
                }
              } else {
                $target$$175 = 1;
              }

              switch ($target$$175) {
                case 0:
                  {
                    return 512 | 128 | 0;
                  }

                case 1:
                  {
                    var $target$$176, flags$$5;

                    if (memberFlagsOpt != null) {
                      if (flags$$4 = memberFlagsOpt, (0, _Util.equals)(flags$$4.MemberKind, new _ast.MemberKind(3, "PropertyGet"))) {
                        $target$$176 = 0;
                        flags$$5 = memberFlagsOpt;
                      } else {
                        $target$$176 = 1;
                      }
                    } else {
                      $target$$176 = 1;
                    }

                    switch ($target$$176) {
                      case 0:
                        {
                          return 512 | 128 | 0;
                        }

                      case 1:
                        {
                          var $target$$177, flags$$7;

                          if (memberFlagsOpt != null) {
                            if (flags$$6 = memberFlagsOpt, (0, _Util.equals)(flags$$6.MemberKind, new _ast.MemberKind(4, "PropertySet"))) {
                              $target$$177 = 0;
                              flags$$7 = memberFlagsOpt;
                            } else {
                              $target$$177 = 1;
                            }
                          } else {
                            $target$$177 = 1;
                          }

                          switch ($target$$177) {
                            case 0:
                              {
                                return 128;
                              }

                            case 1:
                              {
                                if (memberFlagsOpt == null) {
                                  return 256 | 64 | 128 | 0;
                                } else {
                                  return 64;
                                }
                              }
                          }
                        }
                    }
                  }
              }
            }
        }
      }

    case 1:
      {
        return 64 | 128 | 0;
      }

    case 2:
      {
        return 64 | 128 | 0;
      }

    case 3:
      {
        return 256 | 64 | 0;
      }

    case 4:
      {
        return 0;
      }
  }
}

function DeclKind$$$CanGeneralizeConstrainedTypars$$Z6CE1C8BD(x$$13) {
  switch (x$$13.tag) {
    case 1:
      {
        return true;
      }

    case 2:
      {
        return true;
      }

    case 3:
      {
        return true;
      }

    case 4:
      {
        return true;
      }

    case 5:
      {
        return true;
      }

    default:
      {
        return true;
      }
  }
}

function DeclKind$$$ConvertToLinearBindings$$Z6CE1C8BD(x$$14) {
  switch (x$$14.tag) {
    case 1:
      {
        return true;
      }

    case 2:
      {
        return true;
      }

    case 3:
      {
        return true;
      }

    case 4:
      {
        return true;
      }

    case 5:
      {
        return false;
      }

    default:
      {
        return true;
      }
  }
}

function DeclKind$$$CanOverrideOrImplement$$Z6CE1C8BD(x$$15) {
  switch (x$$15.tag) {
    case 1:
      {
        return new OverridesOK(1, "WarnOnOverrides");
      }

    case 2:
      {
        return new OverridesOK(2, "ErrorOnOverrides");
      }

    case 3:
      {
        return new OverridesOK(2, "ErrorOnOverrides");
      }

    case 4:
      {
        return new OverridesOK(0, "OverridesOK");
      }

    case 5:
      {
        return new OverridesOK(2, "ErrorOnOverrides");
      }

    default:
      {
        return new OverridesOK(0, "OverridesOK");
      }
  }
}

const PrelimValScheme1 = (0, _Types.declare)(function PrelimValScheme1(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.PrelimValScheme1 = PrelimValScheme1;

function PrelimValScheme1$$get_Type(x$$16) {
  const ty$$14 = x$$16.fields[2];
  return ty$$14;
}

function PrelimValScheme1$$get_Ident(x$$17) {
  const id$$7 = x$$17.fields[0];
  return id$$7;
}

const PrelimValScheme2 = (0, _Types.declare)(function PrelimValScheme2(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.PrelimValScheme2 = PrelimValScheme2;
const ValScheme = (0, _Types.declare)(function ValScheme(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ValScheme = ValScheme;

function ValScheme$$get_GeneralizedTypars(x$$18) {
  const gtps = x$$18.fields[1].fields[0];
  return gtps;
}

function ValScheme$$get_TypeScheme(x$$19) {
  const ts = x$$19.fields[1];
  return ts;
}

const TcPatPhase2Input = (0, _Types.declare)(function TcPatPhase2Input(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.TcPatPhase2Input = TcPatPhase2Input;

function TcPatPhase2Input$$get_RightPath(x$$20) {
  const a$$1 = x$$20.fields[0];
  return new TcPatPhase2Input(0, "TcPatPhase2Input", a$$1, false);
}

const CheckedBindingInfo = (0, _Types.declare)(function CheckedBindingInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.CheckedBindingInfo = CheckedBindingInfo;

function CheckedBindingInfo$$get_Expr(x$$21) {
  const expr$$5 = x$$21.fields[6];
  return expr$$5;
}

function CheckedBindingInfo$$get_SeqPoint(x$$22) {
  const spBind = x$$22.fields[10];
  return spBind;
}

function GeneralizedTypeForTypeScheme(typeScheme) {
  const tau = typeScheme.fields[1];
  const generalizedTypars = typeScheme.fields[0];
  return (0, _TastOps.mkForallTyIfNeeded)(generalizedTypars, tau);
}

function NonGenericTypeScheme(ty$$15) {
  return new _TastOps.TypeScheme(0, "TypeScheme", (0, _Types.L)(), ty$$15);
}

function UpdateAccModuleOrNamespaceType(cenv$$8, env$$59, f$$4) {
  if (cenv$$8.compilingCanonicalFslibModuleType) {
    const nleref = (0, _tast.mkNonLocalEntityRef)(cenv$$8.topCcu, (0, _ast.arrPathOfLid)(env$$59.ePath));
    const modul$$2 = (0, _tast.NonLocalEntityRef$$get_Deref)(nleref);
    modul$$2.entity_modul_contents = new _tast.MaybeLazy$00601(0, "Strict", f$$4(true, (0, _tast.Entity$$get_ModuleOrNamespaceType)(modul$$2)));
  }

  SetCurrAccumulatedModuleOrNamespaceType(env$$59, f$$4(false, GetCurrAccumulatedModuleOrNamespaceType(env$$59)));
}

function PublishModuleDefn(cenv$$9, env$$60, mspec) {
  UpdateAccModuleOrNamespaceType(cenv$$9, env$$60, function (intoFslibCcu, mty) {
    return intoFslibCcu ? mty : (0, _tast.ModuleOrNamespaceType$$AddEntity$$Z52A308BB)(mty, mspec);
  });
  const item$$6 = new _NameResolution.Item(18, "ModuleOrNamespaces", (0, _Types.L)((0, _tast.mkLocalModRef)(mspec), (0, _Types.L)()));
  (0, _NameResolution.CallNameResolutionSink)(cenv$$9.tcSink, (0, _tast.Entity$$get_Range)(mspec), TcEnv$$get_NameEnv(env$$60), item$$6, item$$6, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$60), env$$60.eAccessRights);
}

function PublishTypeDefn(cenv$$10, env$$61, tycon) {
  UpdateAccModuleOrNamespaceType(cenv$$10, env$$61, function (_arg1$$7, mty$$1) {
    return (0, _tast.ModuleOrNamespaceType$$AddEntity$$Z52A308BB)(mty$$1, tycon);
  });
}

function PublishValueDefnPrim(cenv$$11, env$$62, vspec) {
  UpdateAccModuleOrNamespaceType(cenv$$11, env$$62, function (_arg1$$8, mty$$2) {
    return (0, _tast.ModuleOrNamespaceType$$AddVal$$7D0CFEA5)(mty$$2, vspec);
  });
}

function PublishValueDefn(cenv$$12, env$$63, declKind, vspec$$1) {
  if (((0, _Util.equals)(declKind, new DeclKind(0, "ModuleOrMemberBinding")) ? (0, _Util.equals)((0, _tast.ModuleOrNamespaceType$$get_ModuleOrNamespaceKind)(GetCurrAccumulatedModuleOrNamespaceType(env$$63)), new _tast.ModuleOrNamespaceKind(2, "Namespace")) : false) ? (0, _tast.Val$$get_MemberInfo)(vspec$$1) == null : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.NumberedError((0, _FSComp.SR$$$tcNamespaceCannotContainValues)(), (0, _tast.Val$$get_Range)(vspec$$1)));
  }

  if ((0, _Util.equals)(declKind, new DeclKind(2, "ExtrinsicExtensionBinding")) ? (0, _Util.equals)((0, _tast.ModuleOrNamespaceType$$get_ModuleOrNamespaceKind)(GetCurrAccumulatedModuleOrNamespaceType(env$$63)), new _tast.ModuleOrNamespaceKind(2, "Namespace")) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNamespaceCannotContainExtensionMembers)(), (0, _tast.Val$$get_Range)(vspec$$1)));
  }

  var $target$$181;

  switch (declKind.tag) {
    case 0:
    case 2:
    case 1:
      $target$$181 = 0;
      break;

    default:
      $target$$181 = 1;
  }

  switch ($target$$181) {
    case 0:
      {
        PublishValueDefnPrim(cenv$$12, env$$63, vspec$$1);
        break;
      }
  }

  var $target$$182;

  if ((0, _tast.Val$$get_MemberInfo)(vspec$$1) != null) {
    if (!(0, _tast.Val$$get_IsCompilerGenerated)(vspec$$1) ? !(0, _Util.equals)(declKind, new DeclKind(2, "ExtrinsicExtensionBinding")) : false) {
      $target$$182 = 0;
    } else {
      $target$$182 = 1;
    }
  } else {
    $target$$182 = 1;
  }

  switch ($target$$182) {
    case 0:
      {
        const tcaug = (0, _tast.EntityRef$$get_TypeContents)((0, _tast.Val$$get_MemberApparentEntity)(vspec$$1));
        const vref = (0, _tast.mkLocalValRef)(vspec$$1);
        tcaug.tcaug_adhoc = (0, _illib.NameMultiMapModule$$$add)((0, _tast.Val$$get_LogicalName)(vspec$$1), vref, tcaug.tcaug_adhoc);
        tcaug.tcaug_adhoc_list.push([(0, _TastOps.ValRefIsExplicitImpl)(cenv$$12.g, vref), vref]);
        break;
      }
  }
}

function CombineVisibilityAttribs(vis1, vis2, m$$29) {
  if (vis1 != null) {
    if (vis2 != null) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMultipleVisibilityAttributes)(), m$$29));
    }

    return vis1;
  } else {
    return vis2;
  }
}

function ComputeAccessAndCompPath(env$$64, declKindOpt, m$$30, vis, overrideVis, actualParent) {
  var v$$8;
  const accessPath = env$$64.eAccessPath;
  let accessModPermitted;

  if (declKindOpt != null) {
    const declKind$$1 = declKindOpt;
    accessModPermitted = DeclKind$$$IsAccessModifierPermitted$$Z6CE1C8BD(declKind$$1);
  } else {
    accessModPermitted = true;
  }

  if (vis != null ? !accessModPermitted : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMultipleVisibilityAttributesWithLet)(), m$$30));
  }

  let vis$$1;
  const matchValue$$18 = [overrideVis, vis];
  vis$$1 = matchValue$$18[0] != null ? (v$$8 = matchValue$$18[0], v$$8) : matchValue$$18[1] != null ? matchValue$$18[1].tag === 2 ? (0, _tast.taccessPrivate)(accessPath) : matchValue$$18[1].tag === 1 ? _tast.taccessInternal : _tast.taccessPublic : _tast.taccessPublic;
  let vis$$2;

  if (actualParent.tag === 0) {
    const tcref$$4 = actualParent.fields[0];
    vis$$2 = (0, _tast.combineAccess)(vis$$1, (0, _tast.EntityRef$$get_Accessibility)(tcref$$4));
  } else {
    vis$$2 = vis$$1;
  }

  const cpath$$7 = accessModPermitted ? env$$64.eCompPath : null;
  return [vis$$2, cpath$$7];
}

function CheckForAbnormalOperatorNames(cenv$$13, idRange, coreDisplayName, memberInfoOpt) {
  if ((0, _range.range$$get_EndColumn)(idRange) - (0, _range.range$$get_StartColumn)(idRange) <= 5 ? !(0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$13.g) : false) {
    const opName = (0, _PrettyNaming.DecompileOpName)(coreDisplayName);
    const isMember = memberInfoOpt != null;
    const activePatternResult46229 = (0, _PrettyNaming.$007CControl$007CEquality$007CRelational$007CIndexer$007CFixedTypes$007COther$007C)(opName);

    if (activePatternResult46229.tag === 1) {
      if (isMember) {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidMethodNameForEquality$$Z384F8060)(opName, coreDisplayName), idRange));
      } else {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidOperatorDefinitionEquality$$Z721C83C5)(opName), idRange));
      }
    } else if (activePatternResult46229.tag === 0) {
      if (isMember) {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidMemberName$$Z384F8060)(opName, coreDisplayName), idRange));
      } else {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidOperatorDefinition$$Z721C83C5)(opName), idRange));
      }
    } else if (activePatternResult46229.tag === 3) {
      if (!isMember) {
        (0, _ErrorLogger.error)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidIndexOperatorDefinition$$Z721C83C5)(opName), idRange));
      }
    } else if (activePatternResult46229.tag === 4) {
      if (isMember) {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidMemberNameFixedTypes$$Z721C83C5)(opName), idRange));
      }
    } else if (activePatternResult46229.tag === 5) {} else {
      if (isMember) {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidMethodNameForRelationalOperator$$Z384F8060)(opName, coreDisplayName), idRange));
      } else {
        (0, _ErrorLogger.warning)(new StandardOperatorRedefinitionWarning((0, _FSComp.SR$$$tcInvalidOperatorDefinitionRelational$$Z721C83C5)(opName), idRange));
      }
    }
  }
}

function MakeAndPublishVal(cenv$$14, env$$65, altActualParent, inSig, declKind$$2, vrec, _arg1$$9, attrs$$2, doc, konst, isGeneratedEventVal) {
  var memberInfo$$1;
  const vis$$3 = _arg1$$9.fields[7];
  const typeScheme$$1 = _arg1$$9.fields[1];
  const topValData = _arg1$$9.fields[2];
  const memberInfoOpt$$1 = _arg1$$9.fields[3];
  const isTyFunc = _arg1$$9.fields[10];
  const isMutable = _arg1$$9.fields[4];
  const isIncrClass = _arg1$$9.fields[9];
  const inlineFlag = _arg1$$9.fields[5];
  const id$$8 = _arg1$$9.fields[0];
  const hasDeclaredTypars = _arg1$$9.fields[11];
  const compgen = _arg1$$9.fields[8];
  const baseOrThis = _arg1$$9.fields[6];
  const ty$$16 = GeneralizedTypeForTypeScheme(typeScheme$$1);
  const m$$31 = (0, _ast.Ident$$get_idRange)(id$$8);
  const isTopBinding = declKind$$2.tag === 0 ? true : declKind$$2.tag === 2 ? true : declKind$$2.tag === 1 ? true : false;
  const isExtrinsic$$1 = (0, _Util.equals)(declKind$$2, new DeclKind(2, "ExtrinsicExtensionBinding"));
  let patternInput$$1;
  var $target$$183, memberInfo$$2;

  if (memberInfoOpt$$1 != null) {
    if (memberInfo$$1 = memberInfoOpt$$1.fields[0], !isExtrinsic$$1) {
      $target$$183 = 0;
      memberInfo$$2 = memberInfoOpt$$1.fields[0];
    } else {
      $target$$183 = 1;
    }
  } else {
    $target$$183 = 1;
  }

  switch ($target$$183) {
    case 0:
      {
        if ((0, _tast.EntityRef$$get_IsModuleOrNamespace)(memberInfo$$2.ApparentEnclosingEntity)) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError((0, _FSComp.SR$$$tcExpectModuleOrNamespaceParent$$Z721C83C5)((0, _ast.Ident$$get_idText)(id$$8)), m$$31));
        }

        let vis$$4;

        if ((0, _TastOps.MemberIsExplicitImpl)(cenv$$14.g, memberInfo$$2)) {
          const slotSig = (0, _List.head)(memberInfo$$2.ImplementedSlotSigs);
          const matchValue$$19 = (0, _tast.SlotSig$$get_ImplementedType)(slotSig);

          if (matchValue$$19.tag === 1) {
            const tyconref = matchValue$$19.fields[0];
            vis$$4 = (0, _tast.EntityRef$$get_Accessibility)(tyconref);
          } else {
            vis$$4 = null;
          }
        } else {
          vis$$4 = null;
        }

        patternInput$$1 = [new _tast.ParentRef(0, "Parent", memberInfo$$2.ApparentEnclosingEntity), vis$$4];
        break;
      }

    case 1:
      {
        patternInput$$1 = [altActualParent, null];
        break;
      }
  }

  const patternInput$$2 = ComputeAccessAndCompPath(env$$65, declKind$$2, (0, _ast.Ident$$get_idRange)(id$$8), vis$$3, patternInput$$1[1], patternInput$$1[0]);
  let inlineFlag$$1;

  if ((0, _TastOps.HasFSharpAttributeOpt)(cenv$$14.g, (0, _TcGlobals.TcGlobals$$get_attrib_DllImportAttribute)(cenv$$14.g), attrs$$2)) {
    if ((0, _Util.equals)(inlineFlag, new _tast.ValInline(0, "PseudoVal")) ? true : (0, _Util.equals)(inlineFlag, new _tast.ValInline(1, "Always"))) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDllImportStubsCannotBeInlined)(), m$$31));
    }

    inlineFlag$$1 = new _tast.ValInline(3, "Never");
  } else {
    let implflags;
    const matchValue$$20 = (0, _TastOps.TryFindFSharpAttribute)(cenv$$14.g, (0, _TcGlobals.TcGlobals$$get_attrib_MethodImplAttribute)(cenv$$14.g), attrs$$2);
    var $target$$184, flags$$8;

    if (matchValue$$20 != null) {
      if (matchValue$$20.fields[2].tail != null) {
        const activePatternResult46234 = (0, _TastOps.$007CAttribInt32Arg$007C_$007C)(matchValue$$20.fields[2].head);

        if (activePatternResult46234 != null) {
          if (matchValue$$20.fields[2].tail.tail == null) {
            $target$$184 = 0;
            flags$$8 = activePatternResult46234;
          } else {
            $target$$184 = 1;
          }
        } else {
          $target$$184 = 1;
        }
      } else {
        $target$$184 = 1;
      }
    } else {
      $target$$184 = 1;
    }

    switch ($target$$184) {
      case 0:
        {
          implflags = flags$$8;
          break;
        }

      case 1:
        {
          implflags = 0;
          break;
        }
    }

    const NO_INLINING = 8;
    inlineFlag$$1 = (implflags & NO_INLINING) !== 0 ? new _tast.ValInline(3, "Never") : inlineFlag;
  }

  const compiledNameAttrib = (0, _TastOps.TryFindFSharpStringAttribute)(cenv$$14.g, (0, _TcGlobals.TcGlobals$$get_attrib_CompiledNameAttribute)(cenv$$14.g), attrs$$2);

  if (compiledNameAttrib != null) {
    if (memberInfoOpt$$1 == null) {
      if (altActualParent.tag === 1) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCompiledNameAttributeMisused)(), m$$31));
      }
    } else {
      const memberInfo$$3 = memberInfoOpt$$1.fields[0];

      if (memberInfo$$3.MemberFlags.IsDispatchSlot ? true : memberInfo$$3.MemberFlags.IsOverrideOrExplicitImpl) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCompiledNameAttributeMisused)(), m$$31));
      }
    }
  }

  let compiledNameIsOnProp;

  if (memberInfoOpt$$1 != null) {
    const memberInfo$$4 = memberInfoOpt$$1.fields[0];
    compiledNameIsOnProp = ((0, _Util.equals)(memberInfo$$4.MemberFlags.MemberKind, new _ast.MemberKind(3, "PropertyGet")) ? true : (0, _Util.equals)(memberInfo$$4.MemberFlags.MemberKind, new _ast.MemberKind(4, "PropertySet"))) ? true : (0, _Util.equals)(memberInfo$$4.MemberFlags.MemberKind, new _ast.MemberKind(5, "PropertyGetSet"));
  } else {
    compiledNameIsOnProp = false;
  }

  let compiledName$$2;
  var $target$$185;

  if (compiledNameAttrib != null) {
    if (!compiledNameIsOnProp) {
      $target$$185 = 0;
    } else {
      $target$$185 = 1;
    }
  } else {
    $target$$185 = 1;
  }

  switch ($target$$185) {
    case 0:
      {
        compiledName$$2 = compiledNameAttrib;
        break;
      }

    case 1:
      {
        if (memberInfoOpt$$1 == null) {
          compiledName$$2 = null;
        } else {
          const compiledName$$1 = memberInfoOpt$$1.fields[2];
          compiledName$$2 = compiledName$$1;
        }

        break;
      }
  }

  let logicalName$$2;

  if (memberInfoOpt$$1 == null) {
    logicalName$$2 = (0, _ast.Ident$$get_idText)(id$$8);
  } else {
    const logicalName$$1 = memberInfoOpt$$1.fields[1];
    logicalName$$2 = logicalName$$1;
  }

  let memberInfoOpt$$2;

  if (memberInfoOpt$$1 == null) {
    memberInfoOpt$$2 = null;
  } else {
    const memberInfo$$5 = memberInfoOpt$$1.fields[0];
    memberInfoOpt$$2 = memberInfo$$5;
  }

  const vspec$$2 = (0, _tast.NewVal)(logicalName$$2, (0, _ast.Ident$$get_idRange)(id$$8), compiledName$$2, ty$$16, isMutable ? new _tast.ValMutability(1, "Mutable") : new _tast.ValMutability(0, "Immutable"), compgen, topValData, patternInput$$2[0], vrec, memberInfoOpt$$2, baseOrThis, attrs$$2, inlineFlag$$1, doc, isTopBinding, isExtrinsic$$1, isIncrClass, isTyFunc, hasDeclaredTypars ? true : inSig, isGeneratedEventVal, konst, patternInput$$1[0]);
  CheckForAbnormalOperatorNames(cenv$$14, (0, _ast.Ident$$get_idRange)(id$$8), (0, _tast.Val$$get_CoreDisplayName)(vspec$$2), memberInfoOpt$$2);
  PublishValueDefn(cenv$$14, env$$65, declKind$$2, vspec$$2);

  if (cenv$$14.tcSink.CurrentSink != null) {
    if (!(0, _tast.Val$$get_IsCompilerGenerated)(vspec$$2)) {
      var $target$$186;

      if ((0, _tast.Val$$get_MemberInfo)(vspec$$2) == null) {
        if ((0, _Util.equals)((0, _tast.Val$$get_BaseOrThisInfo)(vspec$$2), new _tast.ValBaseOrThisInfo(3, "MemberThisVal")) ? (0, _tast.Val$$get_LogicalName)(vspec$$2) === "__" : false) {
          $target$$186 = 0;
        } else {
          $target$$186 = 1;
        }
      } else {
        $target$$186 = 1;
      }

      switch ($target$$186) {
        case 1:
          {
            const nenv$$4 = (0, _NameResolution.AddFakeNamedValRefToNameEnv)((0, _tast.Val$$get_DisplayName)(vspec$$2), TcEnv$$get_NameEnv(env$$65), (0, _tast.mkLocalValRef)(vspec$$2));
            (0, _NameResolution.CallEnvSink)(cenv$$14.tcSink, (0, _tast.Val$$get_Range)(vspec$$2), nenv$$4, env$$65.eAccessRights);
            const item$$7 = new _NameResolution.Item(0, "Value", (0, _tast.mkLocalValRef)(vspec$$2));
            (0, _NameResolution.CallNameResolutionSink)(cenv$$14.tcSink, (0, _tast.Val$$get_Range)(vspec$$2), nenv$$4, item$$7, item$$7, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$65), env$$65.eAccessRights);
            break;
          }
      }
    }
  }

  return vspec$$2;
}

function MakeAndPublishVals(cenv$$15, env$$66, altActualParent$$1, inSig$$1, declKind$$3, vrec$$1, valSchemes, attrs$$3, doc$$1, konst$$1) {
  return (0, _Map.foldBack)(function (name$$1, valscheme, values) {
    return (0, _Map.add)(name$$1, [MakeAndPublishVal(cenv$$15, env$$66, altActualParent$$1, inSig$$1, declKind$$3, vrec$$1, valscheme, attrs$$3, doc$$1, konst$$1, false), ValScheme$$get_TypeScheme(valscheme)], values);
  }, valSchemes, (0, _Map.empty)({
    Compare: _Util.compare
  }));
}

function MakeAndPublishBaseVal(cenv$$16, env$$67, baseIdOpt, ty$$17) {
  return (0, _Option.defaultArg)(baseIdOpt, null, function mapping$$3(id$$9) {
    const valscheme$$1 = new ValScheme(0, "ValScheme", id$$9, NonGenericTypeScheme(ty$$17), null, null, false, new _tast.ValInline(3, "Never"), new _tast.ValBaseOrThisInfo(1, "BaseVal"), null, false, false, false, false);
    return MakeAndPublishVal(cenv$$16, env$$67, new _tast.ParentRef(1, "ParentNone"), false, new DeclKind(5, "ExpressionBinding"), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), valscheme$$1, (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), null, false);
  });
}

function InstanceMembersNeedSafeInitCheck(cenv$$17, m$$32, thisTy) {
  return (0, _infos.ExistsInEntireHierarchyOfType)(function (ty$$18) {
    var tcref$$5;

    if (!(0, _TastOps.isStructTy)(cenv$$17.g, ty$$18)) {
      const matchValue$$23 = (0, _TastOps.tryDestAppTy)(cenv$$17.g, ty$$18);
      var $target$$187, tcref$$6;

      if (matchValue$$23 != null) {
        if (tcref$$5 = matchValue$$23, (0, _tast.EntityRef$$get_HasSelfReferentialConstructor)(tcref$$5)) {
          $target$$187 = 0;
          tcref$$6 = matchValue$$23;
        } else {
          $target$$187 = 1;
        }
      } else {
        $target$$187 = 1;
      }

      switch ($target$$187) {
        case 0:
          {
            return true;
          }

        case 1:
          {
            return false;
          }
      }
    } else {
      return false;
    }
  }, cenv$$17.g, cenv$$17.amap, m$$32, new _infos.AllowMultiIntfInstantiations(0, "Yes"), thisTy);
}

function MakeSafeInitField(g$$18, env$$68, m$$33, isStatic) {
  const id$$10 = (0, _ast.ident)((0, _ast.NiceNameGenerator$$FreshCompilerGeneratedName$$7EA1AB7)(_tast.globalNng, "init", m$$33), m$$33);
  const taccess = new _tast.Accessibility(0, "TAccess", (0, _Types.L)(env$$68.eAccessPath, (0, _Types.L)()));
  return (0, _tast.NewRecdField)(isStatic, null, id$$10, false, (0, _TcGlobals.TcGlobals$$get_int_ty)(g$$18), true, true, (0, _Types.L)(), (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), taccess, true);
}

function ComputeInstanceSafeInitInfo(cenv$$18, env$$69, m$$34, thisTy$$1) {
  if (InstanceMembersNeedSafeInitCheck(cenv$$18, m$$34, thisTy$$1)) {
    const rfield = MakeSafeInitField(cenv$$18.g, env$$69, m$$34, false);
    const tcref$$7 = (0, _TastOps.tcrefOfAppTy)(cenv$$18.g, thisTy$$1);
    return new SafeInitData(0, "SafeInitField", (0, _tast.mkRecdFieldRef)(tcref$$7, (0, _tast.RecdField$$get_Name)(rfield)), rfield);
  } else {
    return new SafeInitData(1, "NoSafeInitInfo");
  }
}

function MakeAndPublishSafeThisVal(cenv$$19, env$$70, thisIdOpt, thisTy$$2) {
  if (thisIdOpt == null) {
    return null;
  } else {
    const thisId = thisIdOpt;

    if (!(0, _TastOps.isFSharpObjModelTy)(cenv$$19.g, thisTy$$2)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructsCanOnlyBindThisAtMemberDeclaration)(), (0, _ast.Ident$$get_idRange)(thisId)));
    }

    const valScheme = new ValScheme(0, "ValScheme", thisId, NonGenericTypeScheme((0, _TastOps.mkRefCellTy)(cenv$$19.g, thisTy$$2)), null, null, false, new _tast.ValInline(3, "Never"), new _tast.ValBaseOrThisInfo(0, "CtorThisVal"), null, false, false, false, false);
    return MakeAndPublishVal(cenv$$19, env$$70, new _tast.ParentRef(1, "ParentNone"), false, new DeclKind(5, "ExpressionBinding"), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), valScheme, (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), null, false);
  }
}

function AdjustAndForgetUsesOfRecValue(cenv$$20, vrefTgt, valScheme$$1) {
  const generalizedTypars$$1 = ValScheme$$get_TypeScheme(valScheme$$1).fields[0];
  const fty = GeneralizedTypeForTypeScheme(ValScheme$$get_TypeScheme(valScheme$$1));
  const lvrefTgt = (0, _tast.ValRef$$get_Deref)(vrefTgt);

  if (!(generalizedTypars$$1.tail == null)) {
    const recUses$$1 = (0, _TastOps.ValMultiMap$00601$$Find$$7D0CFEA5)(cenv$$20.recUses, lvrefTgt);
    (0, _List.iterate)(function action(tupledArg$$6) {
      if (!tupledArg$$6[2]) {
        let fixedUpExpr;
        let patternInput$$4;
        const matchValue$$24 = tupledArg$$6[0].contents;
        var $target$$188, tyargs0, vrefFlags, vrefFlags$$1;

        if (matchValue$$24.tag === 5) {
          if (matchValue$$24.fields[0].tag === 1) {
            if (matchValue$$24.fields[3].tail == null) {
              $target$$188 = 0;
              tyargs0 = matchValue$$24.fields[2];
              vrefFlags = matchValue$$24.fields[0].fields[1];
            } else {
              $target$$188 = 2;
            }
          } else {
            $target$$188 = 2;
          }
        } else if (matchValue$$24.tag === 1) {
          $target$$188 = 1;
          vrefFlags$$1 = matchValue$$24.fields[1];
        } else {
          $target$$188 = 2;
        }

        switch ($target$$188) {
          case 0:
            {
              patternInput$$4 = [vrefFlags, tyargs0];
              break;
            }

          case 1:
            {
              patternInput$$4 = [vrefFlags$$1, (0, _Types.L)()];
              break;
            }

          case 2:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedExprAtRecInfPoint)(), tupledArg$$6[1]));
              patternInput$$4 = [new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)()];
              break;
            }
        }

        const ityargs = (0, _TastOps.generalizeTypars)((0, _illib.List$$$drop)((0, _List.length)(patternInput$$4[1]), generalizedTypars$$1));
        fixedUpExpr = (0, _TastOps.primMkApp)([new _tast.Expr(1, "Val", vrefTgt, patternInput$$4[0], tupledArg$$6[1]), fty], (0, _List.append)(patternInput$$4[1], ityargs), (0, _Types.L)(), tupledArg$$6[1]);
        tupledArg$$6[0].contents = fixedUpExpr;
      }
    }, recUses$$1);
  }

  (0, _tast.Val$$SetValRec$$342B737B)((0, _tast.ValRef$$get_Deref)(vrefTgt), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"));
  cenv$$20.recUses = (0, _TastOps.ValMultiMap$00601$$Remove$$7D0CFEA5)(cenv$$20.recUses, (0, _tast.ValRef$$get_Deref)(vrefTgt));
}

function AdjustRecType(_cenv, vspec$$3, _arg1$$10) {
  const typeScheme$$2 = _arg1$$10.fields[1];
  const topValData$$1 = _arg1$$10.fields[2];
  const fty$$1 = GeneralizedTypeForTypeScheme(typeScheme$$2);
  (0, _tast.Val$$SetType$$ZB53B58E)(vspec$$3, fty$$1);
  (0, _tast.Val$$SetValReprInfo$$Z35BE7615)(vspec$$3, topValData$$1);
  (0, _tast.Val$$SetValRec$$342B737B)(vspec$$3, new _tast.ValRecursiveScopeInfo(0, "ValInRecScope", true));
}

function RecordUseOfRecValue(cenv$$21, vrec$$2, vrefTgt$$1, vexp, m$$36) {
  if (vrec$$2.tag === 1) {
    return vexp;
  } else {
    const isComplete$$1 = vrec$$2.fields[0];
    const fixupPoint$$1 = new _Types.FSharpRef(vexp);
    cenv$$21.recUses = (0, _TastOps.ValMultiMap$00601$$Add$$1EAE66D0)(cenv$$21.recUses, (0, _tast.ValRef$$get_Deref)(vrefTgt$$1), [fixupPoint$$1, m$$36, isComplete$$1]);
    return new _tast.Expr(14, "Link", fixupPoint$$1);
  }
}

const RecursiveUseFixupPoints = (0, _Types.declare)(function RecursiveUseFixupPoints(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.RecursiveUseFixupPoints = RecursiveUseFixupPoints;

function GetAllUsesOfRecValue(cenv$$22, vrefTgt$$2) {
  return new RecursiveUseFixupPoints(0, "RecursiveUseFixupPoints", (0, _List.map)(function mapping$$4(tupledArg$$7) {
    return [tupledArg$$7[0], tupledArg$$7[1]];
  }, (0, _TastOps.ValMultiMap$00601$$Find$$7D0CFEA5)(cenv$$22.recUses, vrefTgt$$2)));
}

function ChooseCanonicalDeclaredTyparsAfterInference(g$$19, denv$$6, declaredTypars, m$$38) {
  (0, _List.iterate)(function action$$1(tp$$1) {
    const ty$$19 = (0, _tast.mkTyparTy)(tp$$1);

    if (!(0, _TastOps.isAnyParTy)(g$$19, ty$$19)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLessGenericBecauseOfAnnotation$$Z384F8060)((0, _tast.Typar$$get_Name)(tp$$1), (0, _NicePrint.prettyStringOfTy)(denv$$6, ty$$19)), (0, _tast.Typar$$get_Range)(tp$$1)));
    }
  }, declaredTypars);
  const declaredTypars$$1 = (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(g$$19, declaredTypars);

  if ((0, _lib.ListSet$$$hasDuplicates)(_tast.typarEq, declaredTypars$$1)) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstrainedTypeVariableCannotBeGeneralized)(), m$$38));
  }

  return declaredTypars$$1;
}

function ChooseCanonicalValSchemeAfterInference(g$$20, denv$$7, valscheme$$2, m$$39) {
  const vis$$6 = valscheme$$2.fields[7];
  const typeScheme$$3 = valscheme$$2.fields[1];
  const memberInfoOpt$$3 = valscheme$$2.fields[3];
  const isTyFunc$$1 = valscheme$$2.fields[10];
  const isMutable$$1 = valscheme$$2.fields[4];
  const isIncrClass$$1 = valscheme$$2.fields[9];
  const inlineFlag$$2 = valscheme$$2.fields[5];
  const id$$11 = valscheme$$2.fields[0];
  const hasDeclaredTypars$$1 = valscheme$$2.fields[11];
  const compgen$$1 = valscheme$$2.fields[8];
  const baseOrThis$$1 = valscheme$$2.fields[6];
  const arityInfo = valscheme$$2.fields[2];
  const ty$$20 = typeScheme$$3.fields[1];
  const generalizedTypars$$2 = typeScheme$$3.fields[0];
  const generalizedTypars$$3 = ChooseCanonicalDeclaredTyparsAfterInference(g$$20, denv$$7, generalizedTypars$$2, m$$39);
  const typeScheme$$4 = new _TastOps.TypeScheme(0, "TypeScheme", generalizedTypars$$3, ty$$20);
  const valscheme$$3 = new ValScheme(0, "ValScheme", id$$11, typeScheme$$4, arityInfo, memberInfoOpt$$3, isMutable$$1, inlineFlag$$2, baseOrThis$$1, vis$$6, compgen$$1, isIncrClass$$1, isTyFunc$$1, hasDeclaredTypars$$1);
  return valscheme$$3;
}

function PlaceTyparsInDeclarationOrder(declaredTypars$$2, generalizedTypars$$4) {
  return (0, _List.append)(declaredTypars$$2, (0, _List.filter)(function predicate$$4(tp$$2) {
    return !(0, _List.exists)(function f$$5(lv1$$1) {
      return function (lv2$$1) {
        return (0, _tast.typarEq)(lv1$$1, lv2$$1);
      };
    }(tp$$2), declaredTypars$$2);
  }, generalizedTypars$$4));
}

function SetTyparRigid(_g, denv$$8, m$$40, tp$$3) {
  const matchValue$$25 = (0, _tast.Typar$$get_Solution)(tp$$3);

  if (matchValue$$25 != null) {
    const ty$$21 = matchValue$$25;

    if ((0, _tast.Typar$$get_IsCompilerGenerated)(tp$$3)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcGenericParameterHasBeenConstrained$$Z721C83C5)((0, _NicePrint.prettyStringOfTy)(denv$$8, ty$$21)), m$$40));
    } else {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParameterHasBeenConstrained$$Z721C83C5)((0, _NicePrint.prettyStringOfTy)(denv$$8, ty$$21)), (0, _tast.Typar$$get_Range)(tp$$3)));
    }
  }

  (0, _tast.Typar$$SetRigidity$$Z10E5307B)(tp$$3, new _tast.TyparRigidity(0, "Rigid"));
}

function GeneralizeVal(cenv$$23, denv$$9, enclosingDeclaredTypars, generalizedTyparsForThisBinding, _arg1$$12) {
  const vis$$7 = _arg1$$12.fields[9];
  const ty$$22 = _arg1$$12.fields[2];
  const partialValReprInfo = _arg1$$12.fields[3];
  const memberInfoOpt$$4 = _arg1$$12.fields[4];
  const isMutable$$2 = _arg1$$12.fields[5];
  const inlineFlag$$3 = _arg1$$12.fields[6];
  const iflex = _arg1$$12.fields[1];
  const id$$12 = _arg1$$12.fields[0];
  const compgen$$2 = _arg1$$12.fields[10];
  const baseOrThis$$2 = _arg1$$12.fields[7];
  const argAttribs = _arg1$$12.fields[8];
  const declaredTypars$$3 = iflex.fields[1];
  const _rigidCopyOfDeclaredTypars = iflex.fields[0];
  const m$$41 = (0, _ast.Ident$$get_idRange)(id$$12);
  const allDeclaredTypars = (0, _List.append)(enclosingDeclaredTypars, declaredTypars$$3);
  const allDeclaredTypars$$1 = ChooseCanonicalDeclaredTyparsAfterInference(cenv$$23.g, denv$$9, allDeclaredTypars, m$$41);

  const computeRelevantTypars = function computeRelevantTypars(thruFlag) {
    const ftps = (0, _TastOps.freeInTypeLeftToRight)(cenv$$23.g, thruFlag, ty$$22);
    const generalizedTypars$$5 = (0, _List.filter)(function predicate$$5(tp$$4) {
      return (0, _List.exists)(function f$$6(lv1$$2) {
        return function (lv2$$2) {
          return (0, _tast.typarEq)(lv1$$2, lv2$$2);
        };
      }(tp$$4), ftps);
    }, generalizedTyparsForThisBinding);
    const generalizedTypars$$6 = PlaceTyparsInDeclarationOrder(allDeclaredTypars$$1, generalizedTypars$$5);
    return generalizedTypars$$6;
  };

  const generalizedTypars$$7 = computeRelevantTypars(false);
  const generalizedTyparsLookingThroughTypeAbbreviations = computeRelevantTypars(true);

  if (!((0, _List.length)(generalizedTypars$$7) === (0, _List.length)(generalizedTyparsLookingThroughTypeAbbreviations) ? (0, _List.forAll2)(_tast.typarEq, generalizedTypars$$7, generalizedTyparsLookingThroughTypeAbbreviations) : false)) {
    (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParametersInferredAreNotStable)(), m$$41));
  }

  const hasDeclaredTypars$$2 = !(declaredTypars$$3.tail == null);
  const tyScheme = new _TastOps.TypeScheme(0, "TypeScheme", generalizedTypars$$7, ty$$22);
  return new PrelimValScheme2(0, "PrelimValScheme2", id$$12, tyScheme, partialValReprInfo, memberInfoOpt$$4, isMutable$$2, inlineFlag$$3, baseOrThis$$2, argAttribs, vis$$7, compgen$$2, hasDeclaredTypars$$2);
}

function GeneralizeVals(cenv$$24, denv$$10, enclosingDeclaredTypars$$1, generalizedTypars$$8, types) {
  return (0, _illib.NameMapModule$$$map)(function (arg40$0040) {
    return GeneralizeVal(cenv$$24, denv$$10, enclosingDeclaredTypars$$1, generalizedTypars$$8, arg40$0040);
  }, types);
}

function DontGeneralizeVals(types$$1) {
  const dontGeneralizeVal = function dontGeneralizeVal(_arg1$$13) {
    const vis$$8 = _arg1$$13.fields[9];
    const ty$$23 = _arg1$$13.fields[2];
    const partialValReprInfoOpt = _arg1$$13.fields[3];
    const memberInfoOpt$$5 = _arg1$$13.fields[4];
    const isMutable$$3 = _arg1$$13.fields[5];
    const inlineFlag$$4 = _arg1$$13.fields[6];
    const id$$13 = _arg1$$13.fields[0];
    const compgen$$3 = _arg1$$13.fields[10];
    const baseOrThis$$3 = _arg1$$13.fields[7];
    const argAttribs$$1 = _arg1$$13.fields[8];
    return new PrelimValScheme2(0, "PrelimValScheme2", id$$13, NonGenericTypeScheme(ty$$23), partialValReprInfoOpt, memberInfoOpt$$5, isMutable$$3, inlineFlag$$4, baseOrThis$$3, argAttribs$$1, vis$$8, compgen$$3, false);
  };

  return (0, _illib.NameMapModule$$$map)(dontGeneralizeVal, types$$1);
}

function InferGenericArityFromTyScheme(_arg1$$14, partialValReprInfo$$1) {
  const generalizedTypars$$9 = _arg1$$14.fields[0];
  return TranslatePartialArity(generalizedTypars$$9, partialValReprInfo$$1);
}

function ComputeIsTyFunc(id$$14, hasDeclaredTypars$$3, arityInfo$$1) {
  if (hasDeclaredTypars$$3) {
    if (arityInfo$$1 != null) {
      const info = arityInfo$$1;
      return (0, _tast.ValReprInfo$$get_NumCurriedArgs)(info) === 0;
    } else {
      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExplicitTypeParameterInvalid)(), (0, _ast.Ident$$get_idRange)(id$$14)));
    }
  } else {
    return false;
  }
}

function UseSyntacticArity(declKind$$4, typeScheme$$5, partialValReprInfo$$2) {
  if (DeclKind$$$MustHaveArity$$Z6CE1C8BD(declKind$$4)) {
    return InferGenericArityFromTyScheme(typeScheme$$5, partialValReprInfo$$2);
  } else {
    return null;
  }
}

function CombineSyntacticAndInferredArities(g$$21, declKind$$5, rhsExpr, prelimScheme) {
  const typeScheme$$6 = prelimScheme.fields[1];
  const retAttribs = prelimScheme.fields[7].fields[1];
  const partialValReprInfoOpt$$1 = prelimScheme.fields[2];
  const memberInfoOpt$$6 = prelimScheme.fields[3];
  const isMutable$$4 = prelimScheme.fields[4];
  const argAttribs$$2 = prelimScheme.fields[7].fields[0];
  const matchValue$$26 = [partialValReprInfoOpt$$1, DeclKind$$$MustHaveArity$$Z6CE1C8BD(declKind$$5)];

  if (matchValue$$26[1]) {
    if (matchValue$$26[0] == null) {
      return new PartialValReprInfo(0, "PartialValReprInfo", (0, _Types.L)(), _tast.ValReprInfoModule$$$unnamedRetVal);
    } else if (memberInfoOpt$$6 != null) {
      return partialValReprInfoOpt$$1;
    } else {
      var $target$$189, partialValReprInfoFromSyntax;

      if (matchValue$$26[0] != null) {
        if (matchValue$$26[1]) {
          $target$$189 = 0;
          partialValReprInfoFromSyntax = matchValue$$26[0];
        } else {
          $target$$189 = 1;
        }
      } else {
        $target$$189 = 1;
      }

      switch ($target$$189) {
        case 0:
          {
            const retInfoFromSyntax = partialValReprInfoFromSyntax.fields[1];
            const curriedArgInfosFromSyntax = partialValReprInfoFromSyntax.fields[0];
            let partialArityInfo;

            if (isMutable$$4) {
              partialArityInfo = new PartialValReprInfo(0, "PartialValReprInfo", (0, _Types.L)(), retInfoFromSyntax);
            } else {
              const curriedArgInfosFromExpression = (0, _TastOps.InferArityOfExpr)(g$$21, new _TastOps.AllowTypeDirectedDetupling(0, "Yes"), GeneralizedTypeForTypeScheme(typeScheme$$6), argAttribs$$2, retAttribs, rhsExpr).fields[1];

              const choose = function choose(ai1, ai2) {
                const matchValue$$27 = [ai1, ai2];

                if (matchValue$$27[0].tail == null) {
                  return (0, _Types.L)();
                } else if (matchValue$$27[1].tail == null) {
                  return matchValue$$27[0];
                } else if ((0, _List.length)(ai1) < (0, _List.length)(ai2)) {
                  return ai2;
                } else {
                  return ai1;
                }
              };

              const loop = function loop(ais1, ais2) {
                const matchValue$$28 = [ais1, ais2];
                var $target$$190, ais, h1, h2, t1, t2;

                if (matchValue$$28[0].tail != null) {
                  if (matchValue$$28[1].tail != null) {
                    $target$$190 = 1;
                    h1 = matchValue$$28[0].head;
                    h2 = matchValue$$28[1].head;
                    t1 = matchValue$$28[0].tail;
                    t2 = matchValue$$28[1].tail;
                  } else {
                    $target$$190 = 0;
                    ais = matchValue$$28[0];
                  }
                } else {
                  $target$$190 = 0;
                  ais = matchValue$$28[1];
                }

                switch ($target$$190) {
                  case 0:
                    {
                      return ais;
                    }

                  case 1:
                    {
                      return (0, _Types.L)(choose(h1, h2), loop(t1, t2));
                    }
                }
              };

              const curriedArgInfos = loop(curriedArgInfosFromSyntax, curriedArgInfosFromExpression);
              partialArityInfo = new PartialValReprInfo(0, "PartialValReprInfo", curriedArgInfos, retInfoFromSyntax);
            }

            return partialArityInfo;
          }

        case 1:
          {
            throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 1742, 10);
          }
      }
    }
  } else {
    return null;
  }
}

function BuildValScheme(declKind$$6, partialArityInfoOpt, prelimScheme$$1) {
  const vis$$9 = prelimScheme$$1.fields[8];
  const typeScheme$$7 = prelimScheme$$1.fields[1];
  const memberInfoOpt$$7 = prelimScheme$$1.fields[3];
  const isMutable$$5 = prelimScheme$$1.fields[4];
  const inlineFlag$$5 = prelimScheme$$1.fields[5];
  const id$$15 = prelimScheme$$1.fields[0];
  const hasDeclaredTypars$$4 = prelimScheme$$1.fields[10];
  const compgen$$4 = prelimScheme$$1.fields[9];
  const baseOrThis$$4 = prelimScheme$$1.fields[6];
  const topValInfo = DeclKind$$$MustHaveArity$$Z6CE1C8BD(declKind$$6) ? (0, _Option.defaultArg)(partialArityInfoOpt, null, function (partialValReprInfo$$3) {
    return InferGenericArityFromTyScheme(typeScheme$$7, partialValReprInfo$$3);
  }) : null;
  const isTyFunc$$2 = ComputeIsTyFunc(id$$15, hasDeclaredTypars$$4, topValInfo);
  return new ValScheme(0, "ValScheme", id$$15, typeScheme$$7, topValInfo, memberInfoOpt$$7, isMutable$$5, inlineFlag$$5, baseOrThis$$4, vis$$9, compgen$$4, false, isTyFunc$$2, hasDeclaredTypars$$4);
}

function UseCombinedArity(g$$22, declKind$$7, rhsExpr$$1, prelimScheme$$2) {
  const partialArityInfoOpt$$1 = CombineSyntacticAndInferredArities(g$$22, declKind$$7, rhsExpr$$1, prelimScheme$$2);
  return BuildValScheme(declKind$$7, partialArityInfoOpt$$1, prelimScheme$$2);
}

function UseNoArity(prelimScheme$$3) {
  return BuildValScheme(new DeclKind(5, "ExpressionBinding"), null, prelimScheme$$3);
}

function MakeSimpleVals(cenv$$25, env$$71, names) {
  const tyschemes = DontGeneralizeVals(names);
  const valSchemes$$1 = (0, _illib.NameMapModule$$$map)(UseNoArity, tyschemes);
  const values$$1 = MakeAndPublishVals(cenv$$25, env$$71, new _tast.ParentRef(1, "ParentNone"), false, new DeclKind(5, "ExpressionBinding"), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), valSchemes$$1, (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), null);
  const vspecMap = (0, _illib.NameMapModule$$$map)(function (tuple$$2) {
    return tuple$$2[0];
  }, values$$1);
  return [values$$1, vspecMap];
}

function MakeAndPublishSimpleVals(cenv$$26, env$$72, m$$42, names$$1, mergeNamesInOneNameresEnv) {
  let patternInput$$9;

  if (!mergeNamesInOneNameresEnv) {
    patternInput$$9 = MakeSimpleVals(cenv$$26, env$$72, names$$1);
  } else {
    const nameResolutions = [];
    let patternInput$$6;
    const sink = {
      NotifyEnvWithScope(_arg1$$15, _arg2$$1, _arg3$$1) {},

      NotifyNameResolution(pos, item$$8, itemGroup, itemTyparInst, occurence, denv$$11, nenv$$5, ad$$2, m$$43, replacing) {
        if (!(0, _range.range$$get_IsSynthetic)(m$$43)) {
          nameResolutions.push([pos, item$$8, itemGroup, itemTyparInst, occurence, denv$$11, nenv$$5, ad$$2, m$$43, replacing]);
        }
      },

      NotifyExprHasType(_arg4, _arg5, _arg6, _arg7, _arg8, _arg9) {},

      NotifyFormatSpecifierLocation(_arg10, _arg11) {},

      NotifyOpenDeclaration(_arg12) {},

      get CurrentSource() {
        return null;
      },

      get FormatStringCheckContext() {
        return null;
      }

    };

    const _h = (0, _NameResolution.WithNewTypecheckResultsSink)(sink, cenv$$26.tcSink);

    try {
      patternInput$$6 = MakeSimpleVals(cenv$$26, env$$72, names$$1);
    } finally {
      if ((0, _Util.isDisposable)(_h)) {
        _h.Dispose();
      }
    }

    if ((0, _Util.count)(nameResolutions) !== 0) {
      const patternInput$$7 = nameResolutions[0];
      let patternInput$$8;
      const tupledArg$$10 = [TcEnv$$get_NameEnv(env$$72), patternInput$$7[8]];
      patternInput$$8 = (0, _Seq.fold)(function folder$$2(tupledArg$$8, tupledArg$$9) {
        let item$$11;

        if (tupledArg$$9[1].tag === 0) {
          const item$$10 = tupledArg$$9[1].fields[0];
          item$$11 = item$$10;
        } else {
          throw new Error("impossible");
        }

        return [(0, _NameResolution.AddFakeNamedValRefToNameEnv)((0, _tast.ValRef$$get_DisplayName)(item$$11), tupledArg$$8[0], item$$11), (0, _range.unionRanges)(tupledArg$$9[8], tupledArg$$8[1])];
      }, [tupledArg$$10[0], tupledArg$$10[1]], nameResolutions);
      (0, _NameResolution.CallEnvSink)(cenv$$26.tcSink, patternInput$$8[1], patternInput$$8[0], patternInput$$7[7]);
      (0, _Seq.iterate)(function (forLoopVar) {
        (0, _NameResolution.CallNameResolutionSink)(cenv$$26.tcSink, forLoopVar[8], patternInput$$8[0], forLoopVar[1], forLoopVar[2], forLoopVar[3], forLoopVar[4], forLoopVar[5], forLoopVar[7]);
      }, nameResolutions);
    }

    patternInput$$9 = [patternInput$$6[0], patternInput$$6[1]];
  }

  const envinner = AddLocalValMap(cenv$$26.tcSink, m$$42, patternInput$$9[1], env$$72);
  return [envinner, patternInput$$9[0], patternInput$$9[1]];
}

function FreshenTyconRef(m$$46, rigid$$1, tcref$$8, declaredTyconTypars) {
  const tpsorig$$2 = declaredTyconTypars;
  const tps$$1 = (0, _tast.copyTypars)(tpsorig$$2);

  if (!(0, _Util.equals)(rigid$$1, new _tast.TyparRigidity(0, "Rigid"))) {
    (0, _List.iterate)(function action$$2(tp$$5) {
      (0, _tast.Typar$$SetRigidity$$Z10E5307B)(tp$$5, rigid$$1);
    }, tps$$1);
  }

  const patternInput$$10 = (0, _infos.FixupNewTypars)(m$$46, (0, _Types.L)(), (0, _Types.L)(), tpsorig$$2, tps$$1);
  return [new _tast.TType(1, "TType_app", tcref$$8, (0, _List.map)(_tast.mkTyparTy, tpsorig$$2)), tps$$1, patternInput$$10[0], new _tast.TType(1, "TType_app", tcref$$8, patternInput$$10[1])];
}

function FreshenPossibleForallTy(g$$23, m$$47, rigid$$2, ty$$24) {
  const patternInput$$11 = (0, _TastOps.tryDestForallTy)(g$$23, ty$$24);

  if (patternInput$$11[0].tail == null) {
    return [(0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(), patternInput$$11[1]];
  } else {
    const tpsorig$$4 = (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(g$$23, patternInput$$11[0]);
    const patternInput$$12 = CopyAndFixupTypars(m$$47, rigid$$2, tpsorig$$4);
    return [tpsorig$$4, patternInput$$12[0], patternInput$$12[2], (0, _TastOps.instType)(patternInput$$12[1], patternInput$$11[1])];
  }
}

function infoOfTyconRef(m$$48, tcref$$9) {
  const patternInput$$13 = (0, _ConstraintSolver.FreshenTypeInst)(m$$48, (0, _tast.EntityRef$$Typars$$4DB9192C)(tcref$$9, m$$48));
  return [patternInput$$13[0], patternInput$$13[1], patternInput$$13[2], new _tast.TType(1, "TType_app", tcref$$9, patternInput$$13[2])];
}

function FreshenAbstractSlot(g$$24, amap$$11, m$$49, synTyparDecls, absMethInfo) {
  let typarsFromAbsSlotAreRigid;
  const synTypars = synTyparDecls.fields[0];
  const infer = synTyparDecls.fields[1];

  if (infer ? !(synTypars.tail == null) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOverridingMethodRequiresAllOrNoTypeParameters)(), m$$49));
  }

  typarsFromAbsSlotAreRigid = synTypars.tail == null;
  const patternInput$$14 = (0, _infos.CompiledSigOfMeth)(g$$24, amap$$11, m$$49, absMethInfo);
  const retTy = patternInput$$14.fields[1];
  const fmtps = patternInput$$14.fields[2];
  const argtys = patternInput$$14.fields[0];
  let patternInput$$15;
  const ttps = (0, _infos.MethInfo$$GetFormalTyparsOfDeclaringType$$4DB9192C)(absMethInfo, m$$49);
  const ttinst = (0, _TastOps.argsOfAppTy)(g$$24, (0, _infos.MethInfo$$get_ApparentEnclosingType)(absMethInfo));
  const rigid$$3 = typarsFromAbsSlotAreRigid ? new _tast.TyparRigidity(0, "Rigid") : new _tast.TyparRigidity(3, "Flexible");
  patternInput$$15 = (0, _ConstraintSolver.FreshenAndFixupTypars)(m$$49, rigid$$3, ttps, ttinst, fmtps);
  const argTysFromAbsSlot = (0, _illib.List$$$mapSquared)(function f$$7(arg10$0040$$3) {
    return (0, _TastOps.instType)(patternInput$$15[1], arg10$0040$$3);
  }, argtys);
  const retTyFromAbsSlot = (0, _TastOps.instType)(patternInput$$15[1], (0, _TastOps.GetFSharpViewOfReturnType)(g$$24, retTy));
  return [typarsFromAbsSlotAreRigid, patternInput$$15[0], argTysFromAbsSlot, retTyFromAbsSlot];
}

function BuildFieldMap(cenv$$27, env$$73, isPartial, ty$$25, flds, m$$50) {
  const ad$$5 = env$$73.eAccessRights;

  if (flds.tail == null) {
    throw new Error("BuildFieldMap" + "\\nParameter name: " + "flds");
  }

  let frefSets;
  const allFields = (0, _List.map)(function mapping$$5(tupledArg$$11) {
    return tupledArg$$11[0][1];
  }, flds);
  frefSets = (0, _List.map)(function mapping$$6(tupledArg$$12) {
    const frefSet = (0, _NameResolution.ResolveField)(cenv$$27.tcSink, cenv$$27.nameResolver, env$$73.eNameResEnv, ad$$5, ty$$25, tupledArg$$12[0][0], tupledArg$$12[0][1], allFields);
    return [tupledArg$$12[0], frefSet, tupledArg$$12[1]];
  }, flds);
  const relevantTypeSets = (0, _List.map)(function mapping$$8(tupledArg$$13) {
    return (0, _List.map)(function mapping$$7(_arg3$$3) {
      const rfref = _arg3$$3.fields[0];
      return (0, _tast.RecdFieldRef$$get_TyconRef)(rfref);
    }, tupledArg$$13[1]);
  }, frefSets);
  let tcref$$12;
  const matchValue$$29 = (0, _List.fold)(function (l1, l2) {
    return (0, _lib.ListSet$$$intersect)(function f$$8(arg10$0040$$7, arg20$0040$$1) {
      return (0, _TastOps.tyconRefEq)(cenv$$27.g, arg10$0040$$7, arg20$0040$$1);
    }, l1, l2);
  }, (0, _List.head)(relevantTypeSets), (0, _List.tail)(relevantTypeSets));
  var $target$$191, tcref$$10, tcrefs$$4;

  if (matchValue$$29.tail != null) {
    if (matchValue$$29.tail.tail == null) {
      $target$$191 = 0;
      tcref$$10 = matchValue$$29.head;
    } else {
      $target$$191 = 1;
      tcrefs$$4 = matchValue$$29;
    }
  } else {
    $target$$191 = 1;
    tcrefs$$4 = matchValue$$29;
  }

  switch ($target$$191) {
    case 0:
      {
        tcref$$12 = tcref$$10;
        break;
      }

    case 1:
      {
        if (isPartial) {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldsDoNotDetermineUniqueRecordType)(), m$$50));
        }

        const matchValue$$30 = (0, _List.tryFind)(function predicate$$6(tc$$1) {
          return (0, _List.length)((0, _tast.EntityRef$$get_TrueFieldsAsList)(tc$$1)) === (0, _List.length)(flds);
        }, tcrefs$$4);

        if (matchValue$$30 != null) {
          const tcref$$11 = matchValue$$30;
          tcref$$12 = tcref$$11;
        } else {
          const patternInput$$16 = (0, _List.head)(frefSets);
          const fref1 = (0, _List.head)(patternInput$$16[1]).fields[0];
          tcref$$12 = (0, _tast.RecdFieldRef$$get_TyconRef)(fref1);
        }

        break;
      }
  }

  const patternInput$$20 = (0, _List.fold)(function folder$$3(tupledArg$$14, tupledArg$$15) {
    var copyOfStruct;
    const matchValue$$31 = (0, _List.filter)(function predicate$$7(_arg6$$2) {
      const fref2 = _arg6$$2.fields[0];
      return (0, _TastOps.tyconRefEq)(cenv$$27.g, tcref$$12, (0, _tast.RecdFieldRef$$get_TyconRef)(fref2));
    }, tupledArg$$15[1]);
    var $target$$192, fref2$$1, showDeprecated;

    if (matchValue$$31.tail != null) {
      if (matchValue$$31.tail.tail == null) {
        $target$$192 = 0;
        fref2$$1 = matchValue$$31.head.fields[0];
        showDeprecated = matchValue$$31.head.fields[1];
      } else {
        $target$$192 = 1;
      }
    } else {
      $target$$192 = 1;
    }

    switch ($target$$192) {
      case 0:
        {
          const item$$13 = (0, _NameResolution.FreshenRecdFieldRef)(cenv$$27.nameResolver, m$$50, fref2$$1);
          (0, _NameResolution.CallNameResolutionSink)(cenv$$27.tcSink, (copyOfStruct = tupledArg$$15[0][1], (0, _ast.Ident$$get_idRange)(copyOfStruct)), TcEnv$$get_NameEnv(env$$73), item$$13, item$$13, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$73), ad$$5);
          (0, _AccessibilityLogic.CheckRecdFieldAccessible)(cenv$$27.amap, m$$50, env$$73.eAccessRights, fref2$$1);
          (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckFSharpAttributes)(cenv$$27.g, (0, _tast.RecdFieldRef$$get_PropertyAttribs)(fref2$$1), m$$50));

          if ((0, _Map.containsKey)((0, _tast.RecdFieldRef$$get_FieldName)(fref2$$1), tupledArg$$14[0])) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldAppearsTwiceInRecord$$Z721C83C5)((0, _tast.RecdFieldRef$$get_FieldName)(fref2$$1)), m$$50));
          }

          if (showDeprecated) {
            (0, _ErrorLogger.warning)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$nrRecordTypeNeedsQualifiedAccess$$Z384F8060)((0, _tast.RecdFieldRef$$get_FieldName)(fref2$$1), (0, _tast.Entity$$get_DisplayName)((0, _tast.RecdFieldRef$$get_Tycon)(fref2$$1)))[1], m$$50));
          }

          if (!(0, _TastOps.tyconRefEq)(cenv$$27.g, tcref$$12, (0, _tast.RecdFieldRef$$get_TyconRef)(fref2$$1))) {
            const patternInput$$18 = (0, _List.head)(frefSets);
            const fref1$$1 = (0, _List.head)(patternInput$$18[1]).fields[0];
            (0, _ErrorLogger.errorR)(new FieldsFromDifferentTypes(TcEnv$$get_DisplayEnv(env$$73), fref1$$1, fref2$$1, m$$50));
            return [tupledArg$$14[0], tupledArg$$14[1]];
          } else {
            return [(0, _Map.add)((0, _tast.RecdFieldRef$$get_FieldName)(fref2$$1), tupledArg$$15[2], tupledArg$$14[0]), (0, _Types.L)([(0, _tast.RecdFieldRef$$get_FieldName)(fref2$$1), tupledArg$$15[2]], tupledArg$$14[1])];
          }
        }

      case 1:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRecordFieldInconsistentTypes)(), m$$50));
        }
    }
  }, [(0, _Map.empty)({
    Compare: _Util.comparePrimitives
  }), (0, _Types.L)()], frefSets);
  return [tcref$$12, patternInput$$20[0], (0, _List.reverse)(patternInput$$20[1])];
}

function ApplyUnionCaseOrExn(makerForUnionCase, makerForExnTag, m$$51, cenv$$28, env$$74, overallTy, item$$14) {
  const ad$$6 = env$$74.eAccessRights;

  switch (item$$14.tag) {
    case 4:
      {
        const ecref = item$$14.fields[0];
        (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckEntityAttributes)(cenv$$28.g, ecref, m$$51));
        UnifyTypes(cenv$$28, env$$74, m$$51, overallTy, (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$28.g));
        (0, _AccessibilityLogic.CheckTyconAccessible)(cenv$$28.amap, m$$51, ad$$6, ecref);
        const mkf = makerForExnTag(ecref);
        return [mkf, (0, _TastOps.recdFieldTysOfExnDefRef)(ecref), (0, _List.ofSeq)((0, _Seq.delay)(function () {
          return (0, _Seq.map)(function (f$$9) {
            return (0, _tast.RecdField$$get_Id)(f$$9);
          }, (0, _TastOps.recdFieldsOfExnDefRef)(ecref));
        }))];
      }

    case 1:
      {
        const ucinfo = item$$14.fields[0];
        const showDeprecated$$1 = item$$14.fields[1];

        if (showDeprecated$$1) {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$nrUnionTypeNeedsQualifiedAccess$$Z384F8060)((0, _infos.UnionCaseInfo$$get_Name)(ucinfo), (0, _tast.Entity$$get_DisplayName)((0, _infos.UnionCaseInfo$$get_Tycon)(ucinfo)))[1], m$$51));
        }

        const ucref = (0, _infos.UnionCaseInfo$$get_UnionCaseRef)(ucinfo);
        (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckUnionCaseAttributes)(cenv$$28.g, ucref, m$$51));
        (0, _AccessibilityLogic.CheckUnionCaseAccessible)(cenv$$28.amap, m$$51, ad$$6, ucref);
        const gtyp2 = (0, _TastOps.actualResultTyOfUnionCase)((0, _infos.UnionCaseInfo$$get_TypeInst)(ucinfo), ucref);
        const inst = (0, _TastOps.mkTyparInst)((0, _tast.EntityRef$$get_TyparsNoRange)((0, _tast.UnionCaseRef$$get_TyconRef)(ucref)), (0, _infos.UnionCaseInfo$$get_TypeInst)(ucinfo));
        UnifyTypes(cenv$$28, env$$74, m$$51, overallTy, gtyp2);
        const mkf$$1 = makerForUnionCase([ucref, (0, _infos.UnionCaseInfo$$get_TypeInst)(ucinfo)]);
        return [mkf$$1, (0, _TastOps.actualTysOfUnionCaseFields)(inst, ucref), (0, _List.ofSeq)((0, _Seq.delay)(function () {
          return (0, _Seq.map)(function (f$$10) {
            return (0, _tast.RecdField$$get_Id)(f$$10);
          }, (0, _tast.UnionCaseRef$$get_AllFieldsAsList)(ucref));
        }))];
      }

    default:
      {
        throw new Error("not a union case or exception reference" + "\\nParameter name: " + "item");
      }
  }
}

function ApplyUnionCaseOrExnTypes(m$$52, cenv$$29, env$$75, overallTy$$1, c$$4) {
  return ApplyUnionCaseOrExn(function (tupledArg$$16) {
    return function (mArgs) {
      return function (args) {
        return (0, _TastOps.mkUnionCaseExpr)(tupledArg$$16[0], tupledArg$$16[1], args, (0, _range.unionRanges)(m$$52, mArgs));
      };
    };
  }, function (a$$3) {
    return function (mArgs$$1) {
      return function (args$$1) {
        return (0, _TastOps.mkExnExpr)(a$$3, args$$1, (0, _range.unionRanges)(m$$52, mArgs$$1));
      };
    };
  }, m$$52, cenv$$29, env$$75, overallTy$$1, c$$4);
}

function ApplyUnionCaseOrExnTypesForPat(m$$53, cenv$$30, env$$76, overallTy$$2, c$$5) {
  return ApplyUnionCaseOrExn(function (tupledArg$$17) {
    return function (mArgs$$2) {
      return function (args$$2) {
        return new _PatternMatchCompilation.Pattern(6, "TPat_unioncase", tupledArg$$17[0], tupledArg$$17[1], args$$2, (0, _range.unionRanges)(m$$53, mArgs$$2));
      };
    };
  }, function (a$$5) {
    return function (mArgs$$3) {
      return function (args$$3) {
        return new _PatternMatchCompilation.Pattern(7, "TPat_exnconstr", a$$5, args$$3, (0, _range.unionRanges)(m$$53, mArgs$$3));
      };
    };
  }, m$$53, cenv$$30, env$$76, overallTy$$2, c$$5);
}

function UnionCaseOrExnCheck(env$$77, nargtys, nargs, m$$54) {
  if (nargs !== nargtys) {
    (0, _ErrorLogger.error)(new UnionCaseWrongArguments(TcEnv$$get_DisplayEnv(env$$77), nargtys, nargs, m$$54));
  }
}

function TcUnionCaseOrExnField(cenv$$31, env$$78, ty1, m$$55, c$$6, n$$1, funcs_0, funcs_1) {
  const funcs = [funcs_0, funcs_1];
  const ad$$7 = env$$78.eAccessRights;
  let patternInput$$21;
  const matchValue$$32 = (0, _NameResolution.ResolvePatternLongIdent)(cenv$$31.tcSink, cenv$$31.nameResolver, new _NameResolution.WarnOnUpperFlag(1, "AllIdsOK"), false, m$$55, ad$$7, env$$78.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), c$$6);
  var $target$$208, item$$15;

  switch (matchValue$$32.tag) {
    case 1:
      $target$$208 = 0;
      item$$15 = matchValue$$32;
      break;

    case 4:
      $target$$208 = 0;
      item$$15 = matchValue$$32;
      break;

    default:
      $target$$208 = 1;
  }

  switch ($target$$208) {
    case 0:
      {
        patternInput$$21 = ApplyUnionCaseOrExn(funcs[0], funcs[1], m$$55, cenv$$31, env$$78, ty1, item$$15);
        break;
      }

    case 1:
      {
        patternInput$$21 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnknownUnion)(), m$$55));
        break;
      }
  }

  const argstysLength = (0, _List.length)(patternInput$$21[1]) | 0;

  if (n$$1 >= argstysLength) {
    (0, _ErrorLogger.error)(new UnionCaseWrongNumberOfArgs(TcEnv$$get_DisplayEnv(env$$78), argstysLength, n$$1, m$$55));
  }

  const ty2 = (0, _List.item)(n$$1, patternInput$$21[1]);
  return [patternInput$$21[0], ty2];
}

const SyntacticUnscopedTyparEnv = (0, _Types.declare)(function SyntacticUnscopedTyparEnv(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.SyntacticUnscopedTyparEnv = SyntacticUnscopedTyparEnv;
const emptyUnscopedTyparEnv = new SyntacticUnscopedTyparEnv(0, "UnscopedTyparEnv", (0, _Map.empty)({
  Compare: _Util.comparePrimitives
}));
exports.emptyUnscopedTyparEnv = emptyUnscopedTyparEnv;

function AddUnscopedTypar(n$$2, p$$3, _arg1$$18) {
  const tab = _arg1$$18.fields[0];
  return new SyntacticUnscopedTyparEnv(0, "UnscopedTyparEnv", (0, _Map.add)(n$$2, p$$3, tab));
}

function TryFindUnscopedTypar(n$$3, _arg1$$19) {
  const tab$$1 = _arg1$$19.fields[0];
  return (0, _Map.tryFind)(n$$3, tab$$1);
}

function HideUnscopedTypars(typars$$1, _arg1$$20) {
  const tab$$2 = _arg1$$20.fields[0];
  return new SyntacticUnscopedTyparEnv(0, "UnscopedTyparEnv", (0, _List.fold)(function (acc, tp$$7) {
    return (0, _Map.remove)((0, _tast.Typar$$get_Name)(tp$$7), acc);
  }, tab$$2, typars$$1));
}

const GeneralizeConstrainedTyparOptions = (0, _Types.declare)(function GeneralizeConstrainedTyparOptions(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.GeneralizeConstrainedTyparOptions = GeneralizeConstrainedTyparOptions;

function GeneralizationHelpers$$$ComputeUngeneralizableTypars(env$$79) {
  const acc$$1 = [];
  (0, _Seq.iterate)(function (item$$16) {
    if (!UngeneralizableItem$$get_WillNeverHaveFreeTypars(item$$16)) {
      const ftps$$1 = UngeneralizableItem$$GetFreeTyvars(item$$16).FreeTypars;

      if (!(0, _TaggedCollections.Set$00602$$get_IsEmpty)(ftps$$1)) {
        (0, _Seq.iterate)(function (ftp) {
          acc$$1.push(ftp);
        }, ftps$$1);
      }
    }
  }, env$$79.eUngeneralizableItems);
  return (0, _TaggedCollections.Set$00602$$$Create$$E23F2E)(_TastOps.typarOrder, acc$$1);
}

function GeneralizationHelpers$$$ComputeUnabstractableTycons(env$$80) {
  const acc_in_free_item = function acc_in_free_item(acc$$2, item$$17) {
    let ftycs;

    if (UngeneralizableItem$$get_WillNeverHaveFreeTypars(item$$17)) {
      ftycs = UngeneralizableItem$$get_CachedFreeLocalTycons(item$$17);
    } else {
      const ftyvs = UngeneralizableItem$$GetFreeTyvars(item$$17);
      ftycs = ftyvs.FreeTycons;
    }

    if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(ftycs)) {
      return acc$$2;
    } else {
      return (0, _TastOps.unionFreeTycons)(ftycs, acc$$2);
    }
  };

  return (0, _List.fold)(acc_in_free_item, _TastOps.emptyFreeTycons, env$$80.eUngeneralizableItems);
}

function GeneralizationHelpers$$$ComputeUnabstractableTraitSolutions(env$$81) {
  const acc_in_free_item$$1 = function acc_in_free_item$$1(acc$$3, item$$18) {
    let ftycs$$1;

    if (UngeneralizableItem$$get_WillNeverHaveFreeTypars(item$$18)) {
      ftycs$$1 = UngeneralizableItem$$get_CachedFreeTraitSolutions(item$$18);
    } else {
      const ftyvs$$1 = UngeneralizableItem$$GetFreeTyvars(item$$18);
      ftycs$$1 = ftyvs$$1.FreeTraitSolutions;
    }

    if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(ftycs$$1)) {
      return acc$$3;
    } else {
      return (0, _TastOps.unionFreeLocals)(ftycs$$1, acc$$3);
    }
  };

  return (0, _List.fold)(acc_in_free_item$$1, _TastOps.emptyFreeLocals, env$$81.eUngeneralizableItems);
}

function GeneralizationHelpers$$$IsGeneralizableValue(g$$25, t) {
  var vref$$2, inputTy, e1, actualTy$$1;

  GeneralizationHelpers$$$IsGeneralizableValue: while (true) {
    var $target$$209, m$$56, vref$$1, actualTy$$2, e1$$1, inputTy$$1;

    if (t.tag === 3) {
      $target$$209 = 0;
    } else if (t.tag === 4) {
      $target$$209 = 0;
    } else if (t.tag === 0) {
      $target$$209 = 0;
    } else if (t.tag === 1) {
      $target$$209 = 1;
      m$$56 = t.fields[2];
      vref$$1 = t.fields[0];
    } else if (t.tag === 11) {
      if (t.fields[0].tag === 24) {
        if (t.fields[1].tail != null) {
          if (t.fields[1].tail.tail != null) {
            if (t.fields[1].tail.tail.tail == null) {
              if (t.fields[2].tail != null) {
                if (t.fields[2].tail.tail == null) {
                  if (inputTy = t.fields[1].head, (e1 = t.fields[2].head, (actualTy$$1 = t.fields[1].tail.head, (0, _TastOps.isFunTy)(g$$25, actualTy$$1) ? (0, _TastOps.isFunTy)(g$$25, inputTy) : false))) {
                    $target$$209 = 2;
                    actualTy$$2 = t.fields[1].tail.head;
                    e1$$1 = t.fields[2].head;
                    inputTy$$1 = t.fields[1].head;
                  } else {
                    $target$$209 = 3;
                  }
                } else {
                  $target$$209 = 3;
                }
              } else {
                $target$$209 = 3;
              }
            } else {
              $target$$209 = 3;
            }
          } else {
            $target$$209 = 3;
          }
        } else {
          $target$$209 = 3;
        }
      } else {
        $target$$209 = 3;
      }
    } else {
      $target$$209 = 3;
    }

    switch ($target$$209) {
      case 0:
        {
          return true;
        }

      case 1:
        {
          return !(0, _TastOps.isByrefLikeTy)(g$$25, m$$56, (0, _tast.ValRef$$get_Type)(vref$$1));
        }

      case 2:
        {
          g$$25 = g$$25;
          t = e1$$1;
          continue GeneralizationHelpers$$$IsGeneralizableValue;
        }

      case 3:
        {
          var $target$$210, args$$4, op, binds, body, bind, body$$1, vref$$3;

          if (t.tag === 11) {
            $target$$210 = 0;
            args$$4 = t.fields[2];
            op = t.fields[0];
          } else if (t.tag === 6) {
            $target$$210 = 1;
            binds = t.fields[0];
            body = t.fields[1];
          } else if (t.tag === 7) {
            $target$$210 = 2;
            bind = t.fields[0];
            body$$1 = t.fields[1];
          } else if (t.tag === 5) {
            if (t.fields[0].tag === 1) {
              if (t.fields[3].tail == null) {
                if (vref$$2 = t.fields[0].fields[0], (0, _tast.ValRef$$get_IsTypeFunction)(vref$$2)) {
                  $target$$210 = 3;
                  vref$$3 = t.fields[0].fields[0];
                } else {
                  $target$$210 = 4;
                }
              } else {
                $target$$210 = 4;
              }
            } else {
              $target$$210 = 4;
            }
          } else {
            $target$$210 = 4;
          }

          switch ($target$$210) {
            case 0:
              {
                const canGeneralizeOp = op.tag === 2 ? true : op.tag === 0 ? !(0, _TastOps.isUnionCaseRefDefinitelyMutable)(op.fields[0]) : op.tag === 10 ? op.fields[0].tag === 0 ? false : !(0, _TastOps.isRecdOrUnionOrStructTyconRefDefinitelyMutable)(op.fields[1]) : op.tag === 3 ? args$$4.tail == null : op.tag === 1 ? !(0, _TastOps.isExnDefinitelyMutable)(op.fields[0]) : op.tag === 22 ? op.fields[0].tail == null ? true : false : false;

                if (canGeneralizeOp) {
                  return (0, _List.forAll)(function (t$$1) {
                    return GeneralizationHelpers$$$IsGeneralizableValue(g$$25, t$$1);
                  }, args$$4);
                } else {
                  return false;
                }
              }

            case 1:
              {
                if ((0, _List.forAll)(function predicate$$8(b$$4) {
                  return !(0, _tast.Val$$get_IsMutable)((0, _tast.Binding$$get_Var)(b$$4));
                }, binds) ? (0, _List.forAll)(function predicate$$9(b$$5) {
                  return GeneralizationHelpers$$$IsGeneralizableValue(g$$25, (0, _tast.Binding$$get_Expr)(b$$5));
                }, binds) : false) {
                  g$$25 = g$$25;
                  t = body;
                  continue GeneralizationHelpers$$$IsGeneralizableValue;
                } else {
                  return false;
                }
              }

            case 2:
              {
                if (!(0, _tast.Val$$get_IsMutable)((0, _tast.Binding$$get_Var)(bind)) ? GeneralizationHelpers$$$IsGeneralizableValue(g$$25, (0, _tast.Binding$$get_Expr)(bind)) : false) {
                  g$$25 = g$$25;
                  t = body$$1;
                  continue GeneralizationHelpers$$$IsGeneralizableValue;
                } else {
                  return false;
                }
              }

            case 3:
              {
                return (0, _TastOps.HasFSharpAttribute)(g$$25, (0, _TcGlobals.TcGlobals$$get_attrib_GeneralizableValueAttribute)(g$$25), (0, _tast.ValRef$$get_Attribs)(vref$$3));
              }

            case 4:
              {
                var $target$$211, e1$$2, b$$6, ty$$26, eref;

                if (t.tag === 5) {
                  if (t.fields[3].tail == null) {
                    $target$$211 = 0;
                    e1$$2 = t.fields[0];
                  } else {
                    $target$$211 = 4;
                  }
                } else if (t.tag === 13) {
                  $target$$211 = 1;
                  b$$6 = t.fields[1];
                } else if (t.tag === 8) {
                  $target$$211 = 2;
                  ty$$26 = t.fields[1];
                } else if (t.tag === 14) {
                  $target$$211 = 3;
                  eref = t.fields[0];
                } else {
                  $target$$211 = 4;
                }

                switch ($target$$211) {
                  case 0:
                    {
                      g$$25 = g$$25;
                      t = e1$$2;
                      continue GeneralizationHelpers$$$IsGeneralizableValue;
                    }

                  case 1:
                    {
                      g$$25 = g$$25;
                      t = b$$6;
                      continue GeneralizationHelpers$$$IsGeneralizableValue;
                    }

                  case 2:
                    {
                      if ((0, _TastOps.isInterfaceTy)(g$$25, ty$$26)) {
                        return true;
                      } else {
                        return (0, _TastOps.isDelegateTy)(g$$25, ty$$26);
                      }
                    }

                  case 3:
                    {
                      g$$25 = g$$25;
                      t = eref.contents;
                      continue GeneralizationHelpers$$$IsGeneralizableValue;
                    }

                  case 4:
                    {
                      return false;
                    }
                }
              }
          }
        }
    }
  }
}

function GeneralizationHelpers$$$CanGeneralizeConstrainedTyparsForDecl(declKind$$8) {
  if (DeclKind$$$CanGeneralizeConstrainedTypars$$Z6CE1C8BD(declKind$$8)) {
    return new GeneralizeConstrainedTyparOptions(0, "CanGeneralizeConstrainedTypars");
  } else {
    return new GeneralizeConstrainedTyparOptions(1, "DoNotGeneralizeConstrainedTypars");
  }
}

function GeneralizationHelpers$$$TrimUngeneralizableTypars(genConstrainedTyparFlag, inlineFlag$$6, generalizedTypars$$10, freeInEnv) {
  GeneralizationHelpers$$$TrimUngeneralizableTypars: while (true) {
    const patternInput$$22 = (0, _Util.equals)(inlineFlag$$6, new _tast.ValInline(0, "PseudoVal")) ? [generalizedTypars$$10, (0, _Types.L)()] : (0, _List.partition)(function predicate$$10(tp$$8) {
      return (0, _Util.equals)((0, _tast.Typar$$get_StaticReq)(tp$$8), new _ast.TyparStaticReq(0, "NoStaticReq"));
    }, generalizedTypars$$10);
    const patternInput$$23 = (0, _List.partition)(function (x$$25) {
      return !(0, _zset.ZsetModule$$$contains)(x$$25, freeInEnv);
    }, patternInput$$22[0]);
    const patternInput$$24 = (0, _List.partition)(function predicate$$11(tp$$9) {
      if ((0, _Util.equals)(genConstrainedTyparFlag, new GeneralizeConstrainedTyparOptions(0, "CanGeneralizeConstrainedTypars")) ? true : (0, _tast.Typar$$get_Constraints)(tp$$9).tail == null) {
        return !(0, _tast.Typar$$get_IsCompatFlex)(tp$$9);
      } else {
        return false;
      }
    }, patternInput$$23[0]);

    if ((patternInput$$22[1].tail == null ? patternInput$$23[1].tail == null : false) ? patternInput$$24[1].tail == null : false) {
      return [patternInput$$24[0], freeInEnv];
    } else {
      const freeInEnv$$1 = (0, _TastOps.unionFreeTypars)((0, _TastOps.accFreeInTypars)(_TastOps.CollectAllNoCaching, patternInput$$22[1], (0, _TastOps.accFreeInTypars)(_TastOps.CollectAllNoCaching, patternInput$$23[1], (0, _TastOps.accFreeInTypars)(_TastOps.CollectAllNoCaching, patternInput$$24[1], _TastOps.emptyFreeTyvars))).FreeTypars, freeInEnv);
      genConstrainedTyparFlag = genConstrainedTyparFlag;
      inlineFlag$$6 = inlineFlag$$6;
      generalizedTypars$$10 = patternInput$$24[0];
      freeInEnv = freeInEnv$$1;
      continue GeneralizationHelpers$$$TrimUngeneralizableTypars;
    }
  }
}

function GeneralizationHelpers$$$CondenseTypars(cenv$$32, denv$$13, generalizedTypars$$14, tauTy, m$$57) {
  const patternInput$$25 = (0, _TastOps.stripFunTy)(cenv$$32.g, tauTy);
  const allUntupledArgTys = (0, _List.collect)(function mapping$$9(arg10$0040$$8) {
    return (0, _TastOps.tryDestRefTupleTy)(cenv$$32.g, arg10$0040$$8);
  }, patternInput$$25[0]);
  const returnTypeFreeTypars = (0, _TastOps.freeInTypeLeftToRight)(cenv$$32.g, false, patternInput$$25[1]);
  const allUntupledArgTysWithFreeVars = (0, _List.map)(function mapping$$10(ty$$27) {
    return [ty$$27, (0, _TastOps.freeInTypeLeftToRight)(cenv$$32.g, false, ty$$27)];
  }, allUntupledArgTys);

  const relevantUniqueSubtypeConstraint = function relevantUniqueSubtypeConstraint(tp$$10) {
    const matchValue$$33 = (0, _List.partition)(function predicate$$12(_arg1$$21) {
      if (_arg1$$21.tag === 0) {
        return true;
      } else {
        return false;
      }
    }, (0, _tast.Typar$$get_Constraints)(tp$$10));
    var $target$$212, cxty, others;

    if (matchValue$$33[0].tail != null) {
      if (matchValue$$33[0].head.tag === 0) {
        if (matchValue$$33[0].tail.tail == null) {
          $target$$212 = 0;
          cxty = matchValue$$33[0].head.fields[0];
          others = matchValue$$33[1];
        } else {
          $target$$212 = 1;
        }
      } else {
        $target$$212 = 1;
      }
    } else {
      $target$$212 = 1;
    }

    switch ($target$$212) {
      case 0:
        {
          if ((0, _List.exists)(function predicate$$13(_arg2$$4) {
            if (_arg2$$4.tag === 2) {
              return !(0, _TastOps.TypeSatisfiesNullConstraint)(cenv$$32.g, m$$57, cxty);
            } else {
              return true;
            }
          }, others)) {
            return null;
          } else {
            return cxty;
          }
        }

      case 1:
        {
          return null;
        }
    }
  };

  const lhsConstraintTypars = (0, _List.collect)(function mapping$$11(ty$$28) {
    const matchValue$$34 = (0, _TastOps.tryDestTyparTy)(cenv$$32.g, ty$$28);

    if (matchValue$$34 == null) {
      return (0, _Types.L)();
    } else {
      const tp$$11 = matchValue$$34;
      const matchValue$$35 = relevantUniqueSubtypeConstraint(tp$$11);

      if (matchValue$$35 == null) {
        return (0, _Types.L)();
      } else {
        const cxty$$1 = matchValue$$35;
        return (0, _TastOps.freeInTypeLeftToRight)(cenv$$32.g, false, cxty$$1);
      }
    }
  }, allUntupledArgTys);

  const IsCondensationTypar = function IsCondensationTypar(tp$$12) {
    if ((((0, _Util.equals)((0, _tast.Typar$$get_DynamicReq)(tp$$12), new _tast.TyparDynamicReq(0, "No")) ? relevantUniqueSubtypeConstraint(tp$$12) != null : false) ? !(0, _List.exists)(function f$$11(lv1$$4) {
      return function (lv2$$4) {
        return (0, _tast.typarEq)(lv1$$4, lv2$$4);
      };
    }(tp$$12), returnTypeFreeTypars) : false) ? !(0, _List.exists)(function f$$12(lv1$$5) {
      return function (lv2$$5) {
        return (0, _tast.typarEq)(lv1$$5, lv2$$5);
      };
    }(tp$$12), lhsConstraintTypars) : false) {
      const matchValue$$37 = (0, _List.partition)(function predicate$$14(tupledArg$$18) {
        const matchValue$$36 = (0, _TastOps.tryDestTyparTy)(cenv$$32.g, tupledArg$$18[0]);

        if (matchValue$$36 != null) {
          const destTypar = matchValue$$36;
          return (0, _tast.typarEq)(destTypar, tp$$12);
        } else {
          return false;
        }
      }, allUntupledArgTysWithFreeVars);
      var $target$$213, rest$$4;

      if (matchValue$$37[0].tail != null) {
        if (matchValue$$37[0].tail.tail == null) {
          $target$$213 = 0;
          rest$$4 = matchValue$$37[1];
        } else {
          $target$$213 = 1;
        }
      } else {
        $target$$213 = 1;
      }

      switch ($target$$213) {
        case 0:
          {
            return !(0, _List.exists)(function predicate$$15(tupledArg$$19) {
              return (0, _List.exists)(function f$$13(lv1$$6) {
                return function (lv2$$6) {
                  return (0, _tast.typarEq)(lv1$$6, lv2$$6);
                };
              }(tp$$12), tupledArg$$19[1]);
            }, rest$$4);
          }

        case 1:
          {
            return false;
          }
      }
    } else {
      return false;
    }
  };

  const patternInput$$26 = (0, _List.partition)(IsCondensationTypar, generalizedTypars$$14);
  (0, _List.iterate)(function action$$3(tp$$13) {
    (0, _ConstraintSolver.ChooseTyparSolutionAndSolve)(cenv$$32.css, denv$$13, tp$$13);
  }, patternInput$$26[0]);
  return patternInput$$26[1];
}

function GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$33, denv$$14, m$$58, tps$$4) {
  const csenv = (0, _ConstraintSolver.MakeConstraintSolverEnv)(new _ConstraintSolver.ContextInfo(0, "NoContext"), cenv$$33.css, m$$58, denv$$14);
  (0, _ErrorLogger.RaiseOperationResult)((0, _ErrorLogger.TryD)(function () {
    return (0, _ConstraintSolver.CanonicalizeRelevantMemberConstraints)(csenv, 0, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), tps$$4);
  }, function (res$$4) {
    return (0, _ErrorLogger.ErrorD)(new _ConstraintSolver.ErrorFromAddingConstraint(denv$$14, res$$4, m$$58));
  }));
}

function GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars(cenv$$34, denv$$15, m$$59, freeInEnv$$2, canInferTypars, genConstrainedTyparFlag$$1, inlineFlag$$7, exprOpt, allDeclaredTypars$$2, maxInferredTypars, tauTy$$1, resultFirst) {
  var e$$1;
  const allDeclaredTypars$$3 = (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$34.g, allDeclaredTypars$$2);
  const typarsToAttemptToGeneralize = (exprOpt != null ? (e$$1 = exprOpt, GeneralizationHelpers$$$IsGeneralizableValue(cenv$$34.g, e$$1)) : true) ? (0, _lib.ListSet$$$unionFavourLeft)(_tast.typarEq, allDeclaredTypars$$3, maxInferredTypars) : allDeclaredTypars$$3;
  const patternInput$$27 = GeneralizationHelpers$$$TrimUngeneralizableTypars(genConstrainedTyparFlag$$1, inlineFlag$$7, typarsToAttemptToGeneralize, freeInEnv$$2);
  (0, _List.iterate)(function action$$4(tp$$14) {
    if ((0, _zset.ZsetModule$$$memberOf)(patternInput$$27[1], tp$$14)) {
      const ty$$30 = (0, _tast.mkTyparTy)(tp$$14);
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNotSufficientlyGenericBecauseOfScope$$Z721C83C5)((0, _NicePrint.prettyStringOfTy)(denv$$15, ty$$30)), m$$59));
    }
  }, allDeclaredTypars$$3);
  const generalizedTypars$$17 = GeneralizationHelpers$$$CondenseTypars(cenv$$34, denv$$15, patternInput$$27[0], tauTy$$1, m$$59);
  const generalizedTypars$$18 = canInferTypars ? generalizedTypars$$17 : (0, _List.filter)(function predicate$$16(tp$$15) {
    return (0, _List.exists)(function f$$14(lv1$$8) {
      return function (lv2$$8) {
        return (0, _tast.typarEq)(lv1$$8, lv2$$8);
      };
    }(tp$$15), allDeclaredTypars$$3);
  }, generalizedTypars$$17);
  const allConstraints = (0, _List.collect)(function (tp$$16) {
    return (0, _tast.Typar$$get_Constraints)(tp$$16);
  }, generalizedTypars$$18);
  const generalizedTypars$$19 = (0, _ConstraintSolver.SimplifyMeasuresInTypeScheme)(cenv$$34.g, resultFirst, generalizedTypars$$18, tauTy$$1, allConstraints);
  (0, _List.iterate)(function action$$5(tp$$17) {
    SetTyparRigid(cenv$$34.g, denv$$15, m$$59, tp$$17);
  }, generalizedTypars$$19);
  const csenv$$1 = (0, _ConstraintSolver.MakeConstraintSolverEnv)(new _ConstraintSolver.ContextInfo(0, "NoContext"), cenv$$34.css, m$$59, denv$$15);
  (0, _ConstraintSolver.EliminateConstraintsForGeneralizedTypars)(csenv$$1, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), generalizedTypars$$19);
  return generalizedTypars$$19;
}

function GeneralizationHelpers$$$CheckDeclaredTyparsPermitted(memFlagsOpt, declaredTypars$$4, m$$60) {
  if (memFlagsOpt != null) {
    const memberFlags$$2 = memFlagsOpt;
    var $target$$214;

    if (memberFlags$$2.MemberKind.tag === 3) {
      $target$$214 = 0;
    } else if (memberFlags$$2.MemberKind.tag === 4) {
      $target$$214 = 0;
    } else if (memberFlags$$2.MemberKind.tag === 1) {
      $target$$214 = 1;
    } else {
      $target$$214 = 2;
    }

    switch ($target$$214) {
      case 0:
        {
          if (!(declaredTypars$$4.tail == null)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyRequiresExplicitTypeParameters)(), m$$60));
          }

          break;
        }

      case 1:
        {
          if (!(declaredTypars$$4.tail == null)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorCannotHaveTypeParameters)(), m$$60));
          }

          break;
        }
    }
  }
}

function GeneralizationHelpers$$$ComputeCanInferExtraGeneralizableTypars(parentRef, canInferTypars$$1, memFlagsOpt$$1) {
  var memberFlags$$3;

  if (canInferTypars$$1 ? memFlagsOpt$$1 != null ? (memberFlags$$3 = memFlagsOpt$$1, memberFlags$$3.MemberKind.tag === 3 ? false : memberFlags$$3.MemberKind.tag === 4 ? false : memberFlags$$3.MemberKind.tag === 0 ? false : memberFlags$$3.MemberKind.tag === 1 ? false : true) : true : false) {
    if (parentRef.tag === 0) {
      const tcref$$14 = parentRef.fields[0];
      return !(0, _tast.EntityRef$$get_IsFSharpDelegateTycon)(tcref$$14);
    } else {
      return true;
    }
  } else {
    return false;
  }
}

function ComputeInlineFlag(memFlagsOption, isInline, isMutable$$6, m$$61) {
  var x$$30;
  const inlineFlag$$8 = (isMutable$$6 ? true : memFlagsOption != null ? (x$$30 = memFlagsOption, ((0, _Util.equals)(x$$30.MemberKind, new _ast.MemberKind(1, "Constructor")) ? true : x$$30.IsDispatchSlot) ? true : x$$30.IsOverrideOrExplicitImpl) : false) ? new _tast.ValInline(3, "Never") : isInline ? new _tast.ValInline(0, "PseudoVal") : new _tast.ValInline(2, "Optional");

  if (isInline ? !(0, _Util.equals)(inlineFlag$$8, new _tast.ValInline(0, "PseudoVal")) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcThisValueMayNotBeInlined)(), m$$61));
  }

  return inlineFlag$$8;
}

const NormalizedBindingRhs = (0, _Types.declare)(function NormalizedBindingRhs(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.NormalizedBindingRhs = NormalizedBindingRhs;

function PushOnePatternToRhs(cenv$$35, isMember$$1, p$$4, _arg1$$23) {
  const spatsL = _arg1$$23.fields[0];
  const rtyOpt = _arg1$$23.fields[1];
  const rhsExpr$$2 = _arg1$$23.fields[2];
  const patternInput$$28 = (0, _ast.PushPatternToExpr)(cenv$$35.synArgNameGenerator, isMember$$1, p$$4, rhsExpr$$2);
  return new NormalizedBindingRhs(0, "NormalizedBindingRhs", (0, _Types.L)(patternInput$$28[0], spatsL), rtyOpt, patternInput$$28[1]);
}

const NormalizedBindingPatternInfo = (0, _Types.declare)(function NormalizedBindingPatternInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.NormalizedBindingPatternInfo = NormalizedBindingPatternInfo;
const NormalizedBinding = (0, _Types.declare)(function NormalizedBinding(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.NormalizedBinding = NormalizedBinding;
const IsObjExprBinding = (0, _Types.declare)(function IsObjExprBinding(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.IsObjExprBinding = IsObjExprBinding;

function BindingNormalization$$$PushMultiplePatternsToRhs(cenv$$36, isMember$$2, ps$$2, _arg1$$24) {
  const spatsL$$1 = _arg1$$24.fields[0];
  const rtyOpt$$1 = _arg1$$24.fields[1];
  const rhsExpr$$4 = _arg1$$24.fields[2];
  const patternInput$$29 = (0, _ast.PushCurriedPatternsToExpr)(cenv$$36.synArgNameGenerator, (0, _ast.SynExpr$$get_Range)(rhsExpr$$4), isMember$$2, ps$$2, rhsExpr$$4);
  return new NormalizedBindingRhs(0, "NormalizedBindingRhs", (0, _List.append)(patternInput$$29[0], spatsL$$1), rtyOpt$$1, patternInput$$29[1]);
}

function BindingNormalization$$$MakeNormalizedStaticOrValBinding(cenv$$37, isObjExprBinding, id$$16, vis$$10, typars$$2, args$$5, rhsExpr$$6, valSynData$$1) {
  const memberFlagsOpt$$1 = valSynData$$1.fields[0];
  return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", (0, _ast.mkSynPatVar)(vis$$10, id$$16), BindingNormalization$$$PushMultiplePatternsToRhs(cenv$$37, (0, _Util.equals)(isObjExprBinding, new IsObjExprBinding(0, "ObjExprBinding")) ? true : memberFlagsOpt$$1 != null, args$$5, rhsExpr$$6), valSynData$$1, typars$$2);
}

function BindingNormalization$$$MakeNormalizedInstanceMemberBinding(cenv$$38, thisId$$1, memberId, toolId, vis$$11, m$$62, typars$$3, args$$6, rhsExpr$$7, valSynData$$2) {
  return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", new _ast.SynPat(18, "InstanceMember", thisId$$1, memberId, toolId, vis$$11, m$$62), BindingNormalization$$$PushMultiplePatternsToRhs(cenv$$38, true, args$$6, rhsExpr$$7), valSynData$$2, typars$$3);
}

function BindingNormalization$$$NormalizeStaticMemberBinding(cenv$$39, memberFlags$$4, valSynData$$3, id$$17, vis$$12, typars$$4, args$$7, m$$63, rhsExpr$$8) {
  const valSynInfo = valSynData$$3.fields[1];
  const thisIdOpt$$1 = valSynData$$3.fields[2];

  if (memberFlags$$4.IsInstance) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInstanceMemberRequiresTarget)(), m$$63));
  }

  const matchValue$$40 = [args$$7, memberFlags$$4.MemberKind];
  var $target$$215;

  if (matchValue$$40[1].tag === 5) {
    $target$$215 = 0;
  } else if (matchValue$$40[1].tag === 0) {
    if (matchValue$$40[0].tail != null) {
      if (matchValue$$40[0].tail.tail == null) {
        $target$$215 = 3;
      } else {
        $target$$215 = 5;
      }
    } else {
      $target$$215 = 1;
    }
  } else if (matchValue$$40[1].tag === 1) {
    if (matchValue$$40[0].tail != null) {
      if (matchValue$$40[0].tail.tail == null) {
        $target$$215 = 3;
      } else {
        $target$$215 = 5;
      }
    } else {
      $target$$215 = 2;
    }
  } else if (matchValue$$40[1].tag === 2) {
    if (matchValue$$40[0].tail == null) {
      $target$$215 = 4;
    } else {
      $target$$215 = 5;
    }
  } else {
    $target$$215 = 5;
  }

  switch ($target$$215) {
    case 0:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedPropertyInSyntaxTree)(), m$$63));
      }

    case 1:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticInitializerRequiresArgument)(), m$$63));
      }

    case 2:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectConstructorRequiresArgument)(), m$$63));
      }

    case 3:
      {
        return BindingNormalization$$$MakeNormalizedStaticOrValBinding(cenv$$39, new IsObjExprBinding(1, "ValOrMemberBinding"), id$$17, vis$$12, typars$$4, args$$7, rhsExpr$$8, valSynData$$3);
      }

    case 4:
      {
        const memberFlags$$5 = new _ast.MemberFlags(memberFlags$$4.IsInstance, memberFlags$$4.IsDispatchSlot, memberFlags$$4.IsOverrideOrExplicitImpl, memberFlags$$4.IsFinal, new _ast.MemberKind(3, "PropertyGet"));
        const valSynData$$4 = new _ast.SynValData(0, "SynValData", memberFlags$$5, valSynInfo, thisIdOpt$$1);
        return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", (0, _ast.mkSynPatVar)(vis$$12, id$$17), PushOnePatternToRhs(cenv$$39, true, new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), m$$63), rhsExpr$$8), valSynData$$4, typars$$4);
      }

    case 5:
      {
        return BindingNormalization$$$MakeNormalizedStaticOrValBinding(cenv$$39, new IsObjExprBinding(1, "ValOrMemberBinding"), id$$17, vis$$12, typars$$4, args$$7, rhsExpr$$8, valSynData$$3);
      }
  }
}

function BindingNormalization$$$NormalizeInstanceMemberBinding(cenv$$40, memberFlags$$6, valSynData$$5, thisId$$2, memberId$$1, toolId$$1, vis$$13, typars$$5, args$$8, m$$64, rhsExpr$$9) {
  const valSynInfo$$1 = valSynData$$5.fields[1];
  const thisIdOpt$$2 = valSynData$$5.fields[2];

  if (!memberFlags$$6.IsInstance) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticMemberShouldNotHaveThis)(), m$$64));
  }

  const matchValue$$41 = [args$$8, memberFlags$$6.MemberKind];
  var $target$$216;

  if (matchValue$$41[1].tag === 0) {
    $target$$216 = 0;
  } else if (matchValue$$41[1].tag === 1) {
    $target$$216 = 1;
  } else if (matchValue$$41[1].tag === 5) {
    $target$$216 = 2;
  } else if (matchValue$$41[1].tag === 2) {
    if (matchValue$$41[0].tail == null) {
      $target$$216 = 3;
    } else {
      $target$$216 = 4;
    }
  } else {
    $target$$216 = 4;
  }

  switch ($target$$216) {
    case 0:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExplicitStaticInitializerSyntax)(), m$$64));
      }

    case 1:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExplicitObjectConstructorSyntax)(), m$$64));
      }

    case 2:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedPropertySpec)(), m$$64));
      }

    case 3:
      {
        const memberFlags$$7 = new _ast.MemberFlags(memberFlags$$6.IsInstance, memberFlags$$6.IsDispatchSlot, memberFlags$$6.IsOverrideOrExplicitImpl, memberFlags$$6.IsFinal, new _ast.MemberKind(3, "PropertyGet"));
        return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", new _ast.SynPat(18, "InstanceMember", thisId$$2, memberId$$1, toolId$$1, vis$$13, m$$64), PushOnePatternToRhs(cenv$$40, true, new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), m$$64), rhsExpr$$9), new _ast.SynValData(0, "SynValData", memberFlags$$7, valSynInfo$$1, thisIdOpt$$2), typars$$5);
      }

    case 4:
      {
        return BindingNormalization$$$MakeNormalizedInstanceMemberBinding(cenv$$40, thisId$$2, memberId$$1, toolId$$1, vis$$13, m$$64, typars$$5, args$$8, rhsExpr$$9, valSynData$$5);
      }
  }
}

function BindingNormalization$$$NormalizeBindingPattern(cenv$$41, nameResolver$$1, isObjExprBinding$$1, env$$82, valSynData$$6, pat, rhsExpr$$10) {
  const ad$$8 = env$$82.eAccessRights;
  const memberFlagsOpt$$2 = valSynData$$6.fields[0];

  const normPattern = function normPattern(pat$$1) {
    var vis$$14, m$$65, id$$18, memberFlags$$8;

    normPattern: while (true) {
      var $target$$217, p$$5, args$$9, longId, m$$66, toolId$$2, tyargs, vis$$15, id$$20, m$$67, vis$$16;

      if (pat$$1.tag === 19) {
        $target$$217 = 0;
        p$$5 = pat$$1.fields[0];
      } else if (pat$$1.tag === 7) {
        if (pat$$1.fields[3].tag === 0) {
          $target$$217 = 1;
          args$$9 = pat$$1.fields[3].fields[0];
          longId = pat$$1.fields[0].fields[0];
          m$$66 = pat$$1.fields[5];
          toolId$$2 = pat$$1.fields[1];
          tyargs = pat$$1.fields[2];
          vis$$15 = pat$$1.fields[4];
        } else {
          $target$$217 = 3;
        }
      } else if (pat$$1.tag === 2) {
        if (pat$$1.fields[0].tag === 1) {
          if (pat$$1.fields[2]) {
            $target$$217 = 3;
          } else if (vis$$14 = pat$$1.fields[3], (m$$65 = pat$$1.fields[4], (id$$18 = pat$$1.fields[1], memberFlagsOpt$$2 != null ? (memberFlags$$8 = memberFlagsOpt$$2, !(0, _Util.equals)(memberFlags$$8.MemberKind, new _ast.MemberKind(1, "Constructor")) ? !(0, _Util.equals)(memberFlags$$8.MemberKind, new _ast.MemberKind(0, "ClassConstructor")) : false) : false))) {
            $target$$217 = 2;
            id$$20 = pat$$1.fields[1];
            m$$67 = pat$$1.fields[4];
            vis$$16 = pat$$1.fields[3];
          } else {
            $target$$217 = 3;
          }
        } else {
          $target$$217 = 3;
        }
      } else {
        $target$$217 = 3;
      }

      switch ($target$$217) {
        case 0:
          {
            pat$$1 = p$$5;
            continue normPattern;
          }

        case 1:
          {
            let typars$$7;

            if (tyargs != null) {
              const typars$$6 = tyargs;
              typars$$7 = typars$$6;
            } else {
              typars$$7 = _ast.inferredTyparDecls;
            }

            if (memberFlagsOpt$$2 != null) {
              const memberFlags$$9 = memberFlagsOpt$$2;
              var $target$$218, memberId$$2, thisId$$3, memberId$$3;

              if (longId.tail != null) {
                if (longId.tail.tail == null) {
                  $target$$218 = 1;
                  memberId$$3 = longId.head;
                } else if (longId.tail.tail.tail == null) {
                  $target$$218 = 0;
                  memberId$$2 = longId.tail.head;
                  thisId$$3 = longId.head;
                } else {
                  $target$$218 = 2;
                }
              } else {
                $target$$218 = 2;
              }

              switch ($target$$218) {
                case 0:
                  {
                    return BindingNormalization$$$NormalizeInstanceMemberBinding(cenv$$41, memberFlags$$9, valSynData$$6, thisId$$3, memberId$$2, toolId$$2, vis$$15, typars$$7, args$$9, m$$66, rhsExpr$$10);
                  }

                case 1:
                  {
                    return BindingNormalization$$$NormalizeStaticMemberBinding(cenv$$41, memberFlags$$9, valSynData$$6, memberId$$3, vis$$15, typars$$7, args$$9, m$$66, rhsExpr$$10);
                  }

                case 2:
                  {
                    return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", pat$$1, rhsExpr$$10, valSynData$$6, typars$$7);
                  }
              }
            } else {
              const matchValue$$42 = (0, _NameResolution.ResolvePatternLongIdent)(cenv$$41.tcSink, nameResolver$$1, new _NameResolution.WarnOnUpperFlag(1, "AllIdsOK"), true, m$$66, ad$$8, env$$82.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), longId);

              if (matchValue$$42.tag === 6) {
                const id$$19 = matchValue$$42.fields[0];

                if ((0, _ast.Ident$$get_idText)(id$$19) === _PrettyNaming.opNameCons) {
                  return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", pat$$1, rhsExpr$$10, valSynData$$6, typars$$7);
                } else {
                  if ((0, _Util.equals)(isObjExprBinding$$1, new IsObjExprBinding(0, "ObjExprBinding"))) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcObjectExpressionFormDeprecated)(), m$$66));
                  }

                  return BindingNormalization$$$MakeNormalizedStaticOrValBinding(cenv$$41, isObjExprBinding$$1, id$$19, vis$$15, typars$$7, args$$9, rhsExpr$$10, valSynData$$6);
                }
              } else {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidDeclaration)(), m$$66));
              }
            }
          }

        case 2:
          {
            return BindingNormalization$$$NormalizeStaticMemberBinding(cenv$$41, memberFlagsOpt$$2, valSynData$$6, id$$20, vis$$16, _ast.inferredTyparDecls, (0, _Types.L)(), m$$67, rhsExpr$$10);
          }

        case 3:
          {
            switch (pat$$1.tag) {
              case 3:
                {
                  const y$$1 = pat$$1.fields[2];
                  const x$$31 = pat$$1.fields[1];
                  const pat$0027 = pat$$1.fields[0];
                  const patternInput$$30 = normPattern(pat$0027);
                  const valSynData$$7 = patternInput$$30.fields[2];
                  const typars$$8 = patternInput$$30.fields[3];
                  const pat$0027$0027 = patternInput$$30.fields[0];
                  const e$0027$0027 = patternInput$$30.fields[1];
                  return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", new _ast.SynPat(3, "Typed", pat$0027$0027, x$$31, y$$1), e$0027$0027, valSynData$$7, typars$$8);
                }

              case 4:
                {
                  const m$$68 = pat$$1.fields[2];
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributesInvalidInPatterns)(), m$$68));
                }

              default:
                {
                  return new NormalizedBindingPatternInfo(0, "NormalizedBindingPat", pat$$1, rhsExpr$$10, valSynData$$6, _ast.inferredTyparDecls);
                }
            }
          }
      }
    }
  };

  return normPattern(pat);
}

function BindingNormalization$$$NormalizeBinding(isObjExprBinding$$2, cenv$$42, env$$83, b$$7) {
  const vis$$17 = b$$7.fields[0];
  const valSynData$$8 = b$$7.fields[6];
  const spBind$$1 = b$$7.fields[11];
  const rhsExpr$$11 = b$$7.fields[9];
  const retInfo = b$$7.fields[8];
  const p$$6 = b$$7.fields[7];
  const mBinding = b$$7.fields[10];
  const isMutable$$7 = b$$7.fields[3];
  const isInline$$1 = b$$7.fields[2];
  const doc$$2 = b$$7.fields[5];
  const bkind = b$$7.fields[1];
  const attrs$$4 = b$$7.fields[4];
  const patternInput$$31 = BindingNormalization$$$NormalizeBindingPattern(cenv$$42, cenv$$42.nameResolver, isObjExprBinding$$2, env$$83, valSynData$$8, p$$6, new NormalizedBindingRhs(0, "NormalizedBindingRhs", (0, _Types.L)(), retInfo, rhsExpr$$11));
  const valSynData$$9 = patternInput$$31.fields[2];
  const typars$$9 = patternInput$$31.fields[3];
  const rhsExpr$$12 = patternInput$$31.fields[1];
  const pat$$2 = patternInput$$31.fields[0];
  return new NormalizedBinding(0, "NormalizedBinding", vis$$17, bkind, isInline$$1, isMutable$$7, attrs$$4, (0, _ast.PreXmlDoc$$ToXmlDoc)(doc$$2), typars$$9, valSynData$$9, pat$$2, rhsExpr$$12, mBinding, spBind$$1);
}

function EventDeclarationNormalization$$$ConvertSynInfo(m$$69, _arg1$$25) {
  const retInfo$$1 = _arg1$$25.fields[1];
  const argInfos = _arg1$$25.fields[0];
  const argInfos$$1 = argInfos.tail != null ? argInfos.head.tail == null ? argInfos.tail.tail == null ? (0, _Types.L)(_ast.SynInfo$$$unnamedTopArg, (0, _Types.L)()) : (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$69)) : argInfos.head.tail.tail == null ? argInfos.tail.tail != null ? argInfos.tail.head.tail == null ? argInfos.tail.tail.tail == null ? (0, _Types.L)((0, _Types.L)(argInfos.head.head, (0, _Types.L)()), (0, _Types.L)(_ast.SynInfo$$$unnamedTopArg, (0, _Types.L)())) : (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$69)) : (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$69)) : (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$69)) : (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$69)) : (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$69));
  return new _ast.SynValInfo(0, "SynValInfo", argInfos$$1, retInfo$$1);
}

function EventDeclarationNormalization$$$ConvertMemberFlags(memberFlags$$10) {
  return new _ast.MemberFlags(memberFlags$$10.IsInstance, memberFlags$$10.IsDispatchSlot, memberFlags$$10.IsOverrideOrExplicitImpl, memberFlags$$10.IsFinal, new _ast.MemberKind(2, "Member"));
}

function EventDeclarationNormalization$$$ConvertMemberFlagsOpt(m$$70, memberFlagsOpt$$3) {
  if (memberFlagsOpt$$3 != null) {
    const memberFlags$$11 = memberFlagsOpt$$3;
    return EventDeclarationNormalization$$$ConvertMemberFlags(memberFlags$$11);
  } else {
    return (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$70));
  }
}

function EventDeclarationNormalization$$$ConvertSynData(m$$71, valSynData$$10) {
  const valSynInfo$$2 = valSynData$$10.fields[1];
  const thisIdOpt$$3 = valSynData$$10.fields[2];
  const memberFlagsOpt$$4 = valSynData$$10.fields[0];
  const memberFlagsOpt$$5 = EventDeclarationNormalization$$$ConvertMemberFlagsOpt(m$$71, memberFlagsOpt$$4);
  const valSynInfo$$3 = EventDeclarationNormalization$$$ConvertSynInfo(m$$71, valSynInfo$$2);
  return new _ast.SynValData(0, "SynValData", memberFlagsOpt$$5, valSynInfo$$3, thisIdOpt$$3);
}

function EventDeclarationNormalization$$$RenameBindingPattern($arg$$219, $arg$$220) {
  EventDeclarationNormalization$$$RenameBindingPattern: while (true) {
    const f$$15 = $arg$$219,
          declPattern = $arg$$220;
    var $target$$221, p$$7, pat$0027$$1, id$$21, m$$72, m1$$1, vis2$$1, x2, id$$22, m$$73, thisId$$4, toolId$$3, vis2$$2;

    if (declPattern.tag === 19) {
      $target$$221 = 0;
      p$$7 = declPattern.fields[0];
    } else if (declPattern.tag === 3) {
      $target$$221 = 1;
      pat$0027$$1 = declPattern.fields[0];
    } else if (declPattern.tag === 2) {
      if (declPattern.fields[0].tag === 1) {
        $target$$221 = 2;
        id$$21 = declPattern.fields[1];
        m$$72 = declPattern.fields[4];
        m1$$1 = declPattern.fields[0].fields[0];
        vis2$$1 = declPattern.fields[3];
        x2 = declPattern.fields[2];
      } else {
        $target$$221 = 4;
      }
    } else if (declPattern.tag === 18) {
      $target$$221 = 3;
      id$$22 = declPattern.fields[1];
      m$$73 = declPattern.fields[4];
      thisId$$4 = declPattern.fields[0];
      toolId$$3 = declPattern.fields[2];
      vis2$$2 = declPattern.fields[3];
    } else {
      $target$$221 = 4;
    }

    switch ($target$$221) {
      case 0:
        {
          $arg$$219 = f$$15;
          $arg$$220 = p$$7;
          continue EventDeclarationNormalization$$$RenameBindingPattern;
        }

      case 1:
        {
          $arg$$219 = f$$15;
          $arg$$220 = pat$0027$$1;
          continue EventDeclarationNormalization$$$RenameBindingPattern;
        }

      case 2:
        {
          return new _ast.SynPat(2, "Named", new _ast.SynPat(1, "Wild", m1$$1), (0, _ast.ident)(f$$15((0, _ast.Ident$$get_idText)(id$$21)), (0, _ast.Ident$$get_idRange)(id$$21)), x2, vis2$$1, m$$72);
        }

      case 3:
        {
          return new _ast.SynPat(18, "InstanceMember", thisId$$4, (0, _ast.ident)(f$$15((0, _ast.Ident$$get_idText)(id$$22)), (0, _ast.Ident$$get_idRange)(id$$22)), toolId$$3, vis2$$2, m$$73);
        }

      case 4:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlySimplePatternsInLetRec)(), (0, _ast.SynPat$$get_Range)(declPattern)));
        }
    }
  }
}

function EventDeclarationNormalization$$$GenerateExtraBindings(cenv$$43, bindingAttribs, binding) {
  const vis1$$1 = binding.fields[0];
  const valSynData$$11 = binding.fields[7];
  const spBind$$2 = binding.fields[11];
  const mBinding$$1 = binding.fields[10];
  const isMutable$$8 = binding.fields[3];
  const isInline$$2 = binding.fields[2];
  const declPattern$$1 = binding.fields[8];
  const bindingXmlDoc = binding.fields[5];
  const bindingRhs = binding.fields[9];
  const bindingKind = binding.fields[1];
  const _synTyparDecls = binding.fields[6];

  if ((0, _TastOps.CompileAsEvent)(cenv$$43.g, bindingAttribs)) {
    const MakeOne = function MakeOne(tupledArg$$20) {
      const declPattern$$2 = EventDeclarationNormalization$$$RenameBindingPattern(function (s$$2) {
        return tupledArg$$20[0] + s$$2;
      }, declPattern$$1);
      const argName = "handler";
      let patternInput$$32;
      const rhsExpr$$13 = bindingRhs.fields[2];
      const m$$74 = (0, _ast.SynExpr$$get_Range)(rhsExpr$$13);
      const valSynData$$12 = EventDeclarationNormalization$$$ConvertSynData(m$$74, valSynData$$11);
      var $target$$222, m$$75, trueRhsExpr;

      if (rhsExpr$$13.tag === 15) {
        if (rhsExpr$$13.fields[2].tag === 0) {
          if (rhsExpr$$13.fields[2].fields[0].tail == null) {
            $target$$222 = 0;
            m$$75 = rhsExpr$$13.fields[4];
            trueRhsExpr = rhsExpr$$13.fields[3];
          } else {
            $target$$222 = 1;
          }
        } else {
          $target$$222 = 1;
        }
      } else {
        $target$$222 = 1;
      }

      switch ($target$$222) {
        case 0:
          {
            const rhsExpr$$14 = (0, _ast.mkSynApp1)(new _ast.SynExpr(31, "DotGet", new _ast.SynExpr(0, "Paren", trueRhsExpr, _range.range0, null, m$$75), _range.range0, new _ast.LongIdentWithDots(0, "LongIdentWithDots", (0, _Types.L)((0, _ast.ident)(tupledArg$$20[1], m$$75), (0, _Types.L)()), (0, _Types.L)()), m$$75), new _ast.SynExpr(28, "Ident", (0, _ast.ident)(argName, m$$75)), m$$75);
            const bindingRhs$$1 = new NormalizedBindingRhs(0, "NormalizedBindingRhs", (0, _Types.L)(), null, rhsExpr$$14);
            const bindingRhs$$2 = PushOnePatternToRhs(cenv$$43, true, (0, _ast.mkSynPatVar)(null, (0, _ast.ident)(argName, mBinding$$1)), bindingRhs$$1);
            patternInput$$32 = [bindingRhs$$2, valSynData$$12];
            break;
          }

        case 1:
          {
            patternInput$$32 = (0, _ErrorLogger.error)(new _infos.BadEventTransformation(m$$74));
            break;
          }
      }

      return new NormalizedBinding(0, "NormalizedBinding", vis1$$1, bindingKind, isInline$$2, isMutable$$8, (0, _Types.L)(), bindingXmlDoc, _ast.noInferredTypars, patternInput$$32[1], declPattern$$2, patternInput$$32[0], mBinding$$1, spBind$$2);
    };

    return (0, _Types.L)(MakeOne(["add_", "AddHandler"]), (0, _Types.L)(MakeOne(["remove_", "RemoveHandler"]), (0, _Types.L)()));
  } else {
    return (0, _Types.L)();
  }
}

function FreshenObjectArgType(cenv$$44, m$$76, rigid$$4, tcref$$15, isExtrinsic$$2, declaredTyconTypars$$1) {
  const patternInput$$33 = FreshenTyconRef(m$$76, rigid$$4, tcref$$15, declaredTyconTypars$$1);
  const thisTy$$3 = (!isExtrinsic$$2 ? (0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref$$15) : false) ? (0, _TastOps.isRecdOrStructTyReadOnly)(cenv$$44.g, m$$76, patternInput$$33[3]) ? (0, _TastOps.mkInByrefTy)(cenv$$44.g, patternInput$$33[3]) : (0, _TastOps.mkByrefTy)(cenv$$44.g, patternInput$$33[3]) : patternInput$$33[3];
  return [patternInput$$33[0], patternInput$$33[1], patternInput$$33[2], patternInput$$33[3], thisTy$$3];
}

function TcValEarlyGeneralizationConsistencyCheck(cenv$$45, env$$84, v$$9, vrec$$3, tinst$$3, vty, tau$$2, m$$77) {
  var isComplete$$2;
  var $target$$223, isComplete$$3;

  if (vrec$$3.tag === 0) {
    if (isComplete$$2 = vrec$$3.fields[0], isComplete$$2 ? !(tinst$$3.tail == null) : false) {
      $target$$223 = 0;
      isComplete$$3 = vrec$$3.fields[0];
    } else {
      $target$$223 = 1;
    }
  } else {
    $target$$223 = 1;
  }

  switch ($target$$223) {
    case 0:
      {
        cenv$$45.postInferenceChecks.push(function () {
          const patternInput$$34 = (0, _TastOps.tryDestForallTy)(cenv$$45.g, vty);

          if (!(patternInput$$34[0].tail == null)) {
            const tpsorig$$6 = (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$45.g, patternInput$$34[0]);
            const tau3 = (0, _TastOps.instType)((0, _TastOps.mkTyparInst)(tpsorig$$6, tinst$$3), patternInput$$34[1]);

            if (!(0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$84), cenv$$45.css, m$$77, tau$$2, tau3)) {
              const txt = (0, _lib.bufs)(function (buf) {
                (0, _NicePrint.outputQualifiedValSpec)(TcEnv$$get_DisplayEnv(env$$84), buf, v$$9);
              });
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInferredGenericTypeGivesRiseToInconsistency$$Z384F8060)((0, _tast.Val$$get_DisplayName)(v$$9), txt), m$$77));
            }
          }
        });
        break;
      }
  }
}

function TcVal(checkAttributes, cenv$$46, env$$85, tpenv, vref$$4, optInst, optAfterResolution, m$$78) {
  let res$$7;
  const v$$10 = (0, _tast.ValRef$$get_Deref)(vref$$4);
  const vrec$$4 = (0, _tast.Val$$get_RecursiveValInfo)(v$$10);
  (0, _tast.Val$$SetHasBeenReferenced)(v$$10);
  (0, _AccessibilityLogic.CheckValAccessible)(m$$78, env$$85.eAccessRights, vref$$4);

  if (checkAttributes) {
    (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckValAttributes)(cenv$$46.g, vref$$4, m$$78));
  }

  const vty$$1 = (0, _tast.ValRef$$get_Type)(vref$$4);

  if ((0, _TastOps.isByrefTy)(cenv$$46.g, vty$$1)) {
    const isSpecial = true;
    res$$7 = [(0, _Types.L)(), (0, _TastOps.mkAddrGet)(m$$78, vref$$4), isSpecial, (0, _TastOps.destByrefTy)(cenv$$46.g, vty$$1), (0, _Types.L)(), tpenv];
  } else {
    const matchValue$$43 = (0, _tast.Val$$get_LiteralValue)(v$$10);

    if (matchValue$$43 == null) {
      if ((0, _Util.equals)((0, _tast.Val$$get_BaseOrThisInfo)(v$$10), new _tast.ValBaseOrThisInfo(0, "CtorThisVal")) ? (0, _TastOps.isRefCellTy)(cenv$$46.g, vty$$1) : false) {
        const exprForVal = (0, _TastOps.exprForValRef)(m$$78, vref$$4);
        const ty$$31 = (0, _TastOps.destRefCellTy)(cenv$$46.g, vty$$1);
        const isSpecial$$2 = true;
        res$$7 = [(0, _Types.L)(), (0, _TastOps.mkCallCheckThis)(cenv$$46.g, m$$78, ty$$31, (0, _TastOps.mkRefCellGet)(cenv$$46.g, m$$78, ty$$31, exprForVal)), isSpecial$$2, ty$$31, (0, _Types.L)(), tpenv];
      } else {
        let patternInput$$42;

        if (optInst != null) {
          const vrefFlags$$3 = optInst[0];
          const checkTys = optInst[1];

          const checkInst = function checkInst(tinst$$7) {
            if (((!(0, _tast.Val$$get_IsMember)(v$$10) ? !(0, _tast.Val$$get_PermitsExplicitTypeInstantiation)(v$$10) : false) ? !(tinst$$7.tail == null) : false) ? !((0, _tast.Val$$get_Typars)(v$$10).tail == null) : false) {
              (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDoesNotAllowExplicitTypeArguments$$Z721C83C5)((0, _tast.Val$$get_DisplayName)(v$$10)), m$$78));
            }
          };

          var $target$$224;

          if (vrec$$4.tag === 1) {
            $target$$224 = 1;
          } else if (vrec$$4.fields[0]) {
            $target$$224 = 1;
          } else {
            $target$$224 = 0;
          }

          switch ($target$$224) {
            case 0:
              {
                const patternInput$$38 = (0, _tast.ValRef$$get_TypeScheme)(vref$$4);
                const patternInput$$39 = checkTys(tpenv)((0, _List.map)(function mapping$$12(tp$$19) {
                  return (0, _tast.Typar$$get_Kind)(tp$$19);
                }, patternInput$$38[0]));
                checkInst(patternInput$$39[0]);

                if ((0, _List.length)(patternInput$$38[0]) !== (0, _List.length)(patternInput$$39[0])) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParameterArityMismatch$$Z37302880)((0, _List.length)(patternInput$$38[0]), (0, _List.length)(patternInput$$39[0])), m$$78));
                }

                const tau2$$1 = (0, _TastOps.instType)((0, _TastOps.mkTyparInst)(patternInput$$38[0], patternInput$$39[0]), patternInput$$38[1]);
                (0, _List.iterate2)(function action$$6(tp$$20, ty$$32) {
                  try {
                    UnifyTypes(cenv$$46, env$$85, m$$78, (0, _tast.mkTyparTy)(tp$$20), ty$$32);
                  } catch (matchValue$$44) {
                    (0, _ErrorLogger.error)(new Recursion(TcEnv$$get_DisplayEnv(env$$85), (0, _tast.Val$$get_Id)(v$$10), tau2$$1, patternInput$$38[1], m$$78));
                  }
                }, patternInput$$38[0], patternInput$$39[0]);
                patternInput$$42 = [patternInput$$38[0], vrefFlags$$3, patternInput$$39[0], tau2$$1, patternInput$$39[1]];
                break;
              }

            case 1:
              {
                const patternInput$$40 = FreshenPossibleForallTy(cenv$$46.g, m$$78, new _tast.TyparRigidity(3, "Flexible"), vty$$1);
                const patternInput$$41 = checkTys(tpenv)((0, _List.map)(function mapping$$13(tp$$21) {
                  return (0, _tast.Typar$$get_Kind)(tp$$21);
                }, patternInput$$40[1]));
                checkInst(patternInput$$41[0]);

                if ((0, _List.length)(patternInput$$40[2]) !== (0, _List.length)(patternInput$$41[0])) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParameterArityMismatch$$Z37302880)((0, _List.length)(patternInput$$40[1]), (0, _List.length)(patternInput$$41[0])), m$$78));
                }

                (0, _List.iterate2)(function (actualTy$$3, expectedTy$$1) {
                  UnifyTypes(cenv$$46, env$$85, m$$78, actualTy$$3, expectedTy$$1);
                }, patternInput$$40[2], patternInput$$41[0]);
                TcValEarlyGeneralizationConsistencyCheck(cenv$$46, env$$85, v$$10, vrec$$4, patternInput$$41[0], vty$$1, patternInput$$40[3], m$$78);
                patternInput$$42 = [patternInput$$40[0], vrefFlags$$3, patternInput$$41[0], patternInput$$40[3], patternInput$$41[1]];
                break;
              }
          }
        } else {
          if ((0, _TastOps.HasFSharpAttribute)(cenv$$46.g, (0, _TcGlobals.TcGlobals$$get_attrib_RequiresExplicitTypeArgumentsAttribute)(cenv$$46.g), (0, _tast.Val$$get_Attribs)(v$$10))) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFunctionRequiresExplicitTypeArguments$$Z721C83C5)((0, _tast.Val$$get_DisplayName)(v$$10)), m$$78));
          }

          var $target$$225;

          if (vrec$$4.tag === 1) {
            $target$$225 = 1;
          } else if (vrec$$4.fields[0]) {
            $target$$225 = 1;
          } else {
            $target$$225 = 0;
          }

          switch ($target$$225) {
            case 0:
              {
                const patternInput$$36 = (0, _tast.ValRef$$get_TypeScheme)(vref$$4);
                const tinst$$5 = (0, _List.map)(_tast.mkTyparTy, patternInput$$36[0]);
                patternInput$$42 = [patternInput$$36[0], new _tast.ValUseFlag(1, "NormalValUse"), tinst$$5, patternInput$$36[1], tpenv];
                break;
              }

            case 1:
              {
                const patternInput$$37 = FreshenPossibleForallTy(cenv$$46.g, m$$78, new _tast.TyparRigidity(3, "Flexible"), vty$$1);
                patternInput$$42 = [patternInput$$37[0], new _tast.ValUseFlag(1, "NormalValUse"), patternInput$$37[2], patternInput$$37[3], tpenv];
                break;
              }
          }
        }

        const exprForVal$$1 = new _tast.Expr(1, "Val", vref$$4, patternInput$$42[1], m$$78);
        const exprForVal$$2 = (0, _TastOps.mkTyAppExpr)(m$$78, exprForVal$$1, vty$$1, patternInput$$42[2]);
        const isSpecial$$3 = ((patternInput$$42[1].tag === 1 ? false : patternInput$$42[1].tag === 0 ? false : true) ? true : (0, _TastOps.valRefEq)(cenv$$46.g, vref$$4, (0, _TcGlobals.TcGlobals$$get_splice_expr_vref)(cenv$$46.g))) ? true : (0, _TastOps.valRefEq)(cenv$$46.g, vref$$4, (0, _TcGlobals.TcGlobals$$get_splice_raw_expr_vref)(cenv$$46.g));
        const exprForVal$$3 = RecordUseOfRecValue(cenv$$46, vrec$$4, vref$$4, exprForVal$$2, m$$78);
        res$$7 = [patternInput$$42[0], exprForVal$$3, isSpecial$$3, patternInput$$42[3], patternInput$$42[2], patternInput$$42[4]];
      }
    } else {
      const c$$7 = matchValue$$43;
      const isSpecial$$1 = true;
      const patternInput$$35 = FreshenPossibleForallTy(cenv$$46.g, m$$78, new _tast.TyparRigidity(3, "Flexible"), vty$$1);
      res$$7 = [patternInput$$35[0], new _tast.Expr(0, "Const", c$$7, m$$78, patternInput$$35[3]), isSpecial$$1, patternInput$$35[3], patternInput$$35[2], tpenv];
    }
  }

  const tpsorig$$13 = res$$7[0];
  const tinst$$11 = res$$7[4];
  var $target$$226, callSink$$1;

  if (optAfterResolution == null) {
    $target$$226 = 1;
  } else if (optAfterResolution.tag === 0) {
    $target$$226 = 1;
  } else {
    $target$$226 = 0;
    callSink$$1 = optAfterResolution.fields[1];
  }

  switch ($target$$226) {
    case 0:
      {
        callSink$$1((0, _TastOps.mkTyparInst)(tpsorig$$13, tinst$$11));
        break;
      }
  }

  return res$$7;
}

function LightweightTcValForUsingInBuildMethodCall(g$$26, vref$$5, vrefFlags$$5, vrefTypeInst, m$$79) {
  const v$$11 = (0, _tast.ValRef$$get_Deref)(vref$$5);
  const vty$$2 = (0, _tast.ValRef$$get_Type)(vref$$5);

  if ((0, _TastOps.isByrefTy)(g$$26, vty$$2)) {
    return [(0, _TastOps.mkAddrGet)(m$$79, vref$$5), (0, _TastOps.destByrefTy)(g$$26, vty$$2)];
  } else {
    const matchValue$$45 = (0, _tast.Val$$get_LiteralValue)(v$$11);

    if (matchValue$$45 == null) {
      let tau$$11;
      const patternInput$$44 = FreshenPossibleForallTy(g$$26, m$$79, new _tast.TyparRigidity(3, "Flexible"), vty$$2);

      if ((0, _List.length)(patternInput$$44[2]) !== (0, _List.length)(vrefTypeInst)) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParameterArityMismatch$$Z37302880)((0, _List.length)(patternInput$$44[1]), (0, _List.length)(vrefTypeInst)), m$$79));
      }

      tau$$11 = (0, _TastOps.instType)((0, _TastOps.mkTyparInst)(patternInput$$44[1], vrefTypeInst), patternInput$$44[3]);
      const exprForVal$$4 = new _tast.Expr(1, "Val", vref$$5, vrefFlags$$5, m$$79);
      const exprForVal$$5 = (0, _TastOps.mkTyAppExpr)(m$$79, exprForVal$$4, vty$$2, vrefTypeInst);
      return [exprForVal$$5, tau$$11];
    } else {
      const c$$8 = matchValue$$45;
      const patternInput$$43 = FreshenPossibleForallTy(g$$26, m$$79, new _tast.TyparRigidity(3, "Flexible"), vty$$2);
      return [new _tast.Expr(0, "Const", c$$8, m$$79, patternInput$$43[3]), patternInput$$43[3]];
    }
  }
}

const ApplicableExpr = (0, _Types.declare)(function ApplicableExpr(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ApplicableExpr = ApplicableExpr;

function ApplicableExpr$$get_Range(x$$32) {
  const e$$2 = x$$32.fields[1];
  return (0, _TastOps.Expr$002Eget_Range)(e$$2);
}

function ApplicableExpr$$get_Type(x$$33) {
  const e$$3 = x$$33.fields[1];
  const cenv$$47 = x$$33.fields[0];
  return (0, _TastOps.tyOfExpr)(cenv$$47.g, e$$3);
}

function ApplicableExpr$$SupplyArgument$$Z47F331B3(x$$34, e2, m$$80) {
  var tyargs1, e1ty, e1m, e1$$3, args1;
  const first = x$$34.fields[2];
  const fe = x$$34.fields[1];
  const cenv$$48 = x$$34.fields[0];
  const combinedExpr = fe.tag === 5 ? (tyargs1 = fe.fields[2], (e1ty = fe.fields[1], (e1m = fe.fields[4], (e1$$3 = fe.fields[0], (args1 = fe.fields[3], (!first ? true : args1.tail == null) ? !(0, _TastOps.isForallTy)(cenv$$48.g, e1ty) ? true : (0, _TastOps.isFunTy)(cenv$$48.g, (0, _TastOps.applyTys)(cenv$$48.g, e1ty, tyargs1, args1)) : false))))) ? new _tast.Expr(5, "App", fe.fields[0], fe.fields[1], fe.fields[2], (0, _List.append)(fe.fields[3], (0, _Types.L)(e2, (0, _Types.L)())), (0, _range.unionRanges)(fe.fields[4], m$$80)) : new _tast.Expr(5, "App", fe, (0, _TastOps.tyOfExpr)(cenv$$48.g, fe), (0, _Types.L)(), (0, _Types.L)(e2, (0, _Types.L)()), m$$80) : new _tast.Expr(5, "App", fe, (0, _TastOps.tyOfExpr)(cenv$$48.g, fe), (0, _Types.L)(), (0, _Types.L)(e2, (0, _Types.L)()), m$$80);
  return new ApplicableExpr(0, "ApplicableExpr", cenv$$48, combinedExpr, false);
}

function ApplicableExpr$$get_Expr(x$$35) {
  const e$$4 = x$$35.fields[1];
  return e$$4;
}

function MakeApplicableExprNoFlex(cenv$$49, expr$$6) {
  return new ApplicableExpr(0, "ApplicableExpr", cenv$$49, expr$$6, true);
}

function MakeApplicableExprWithFlex(cenv$$50, env$$86, expr$$7) {
  const exprTy = (0, _TastOps.tyOfExpr)(cenv$$50.g, expr$$7);
  const m$$81 = (0, _TastOps.Expr$002Eget_Range)(expr$$7);

  const isNonFlexibleType = function isNonFlexibleType(ty$$33) {
    return (0, _TastOps.isSealedTy)(cenv$$50.g, ty$$33);
  };

  const patternInput$$45 = (0, _TastOps.stripFunTy)(cenv$$50.g, exprTy);
  const curriedActualTypes = (0, _List.map)(function mapping$$14(arg10$0040$$9) {
    return (0, _TastOps.tryDestRefTupleTy)(cenv$$50.g, arg10$0040$$9);
  }, patternInput$$45[0]);

  if ((curriedActualTypes.tail == null ? true : (0, _List.exists)(function predicate$$18(list$$43) {
    return (0, _List.exists)(function predicate$$17(arg10$0040$$10) {
      return (0, _TastOps.isByrefTy)(cenv$$50.g, arg10$0040$$10);
    }, list$$43);
  }, curriedActualTypes)) ? true : (0, _List.forAll)(function predicate$$19(list$$45) {
    return (0, _List.forAll)(isNonFlexibleType, list$$45);
  }, curriedActualTypes)) {
    return new ApplicableExpr(0, "ApplicableExpr", cenv$$50, expr$$7, true);
  } else {
    const curriedFlexibleTypes = (0, _illib.List$$$mapSquared)(function f$$16(actualType) {
      if (isNonFlexibleType(actualType)) {
        return actualType;
      } else {
        const flexibleType = (0, _ConstraintSolver.NewInferenceType)();
        (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$86), cenv$$50.css, m$$81, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), actualType, flexibleType);
        return flexibleType;
      }
    }, curriedActualTypes);
    const expr$$8 = (0, _TastOps.mkCoerceExpr)(expr$$7, (0, _TastOps.mkIteratedFunTy)((0, _List.map)(function (arg10$0040$$11) {
      return (0, _TastOps.mkRefTupledTy)(cenv$$50.g, arg10$0040$$11);
    }, curriedFlexibleTypes), patternInput$$45[1]), m$$81, exprTy);
    return new ApplicableExpr(0, "ApplicableExpr", cenv$$50, expr$$8, true);
  }
}

function TcRuntimeTypeTest(isCast, isOperator, cenv$$51, denv$$16, m$$82, tgty, srcTy) {
  if ((0, _TypeRelations.TypeDefinitelySubsumesTypeNoCoercion)(0, cenv$$51.g, cenv$$51.amap, m$$82, tgty, srcTy)) {
    (0, _ErrorLogger.warning)(new TypeTestUnnecessary(m$$82));
  }

  if ((0, _TastOps.isTyparTy)(cenv$$51.g, srcTy) ? !(0, _tast.Typar$$get_IsCompatFlex)((0, _TastOps.destTyparTy)(cenv$$51.g, srcTy)) : false) {
    (0, _ErrorLogger.error)(new IndeterminateRuntimeCoercion(denv$$16, srcTy, tgty, m$$82));
  }

  if ((0, _TastOps.isSealedTy)(cenv$$51.g, srcTy)) {
    (0, _ErrorLogger.error)(new RuntimeCoercionSourceSealed(denv$$16, srcTy, m$$82));
  }

  if (((0, _TastOps.isSealedTy)(cenv$$51.g, tgty) ? true : (0, _TastOps.isTyparTy)(cenv$$51.g, tgty)) ? true : !(0, _TastOps.isInterfaceTy)(cenv$$51.g, srcTy)) {
    if (isCast) {
      (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(9, "RuntimeTypeTest", isOperator), denv$$16, cenv$$51.css, m$$82, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), srcTy, tgty);
    } else {
      (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), denv$$16, cenv$$51.css, m$$82, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), srcTy, tgty);
    }
  }

  if ((0, _TastOps.isErasedType)(cenv$$51.g, tgty)) {
    if (isCast) {
      (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeCastErased$$Z384F8060)((0, _NicePrint.minimalStringOfType)(denv$$16, tgty), (0, _NicePrint.minimalStringOfType)(denv$$16, (0, _TastOps.stripTyEqnsWrtErasure)(new _TastOps.Erasure(0, "EraseAll"), cenv$$51.g, tgty))), m$$82));
    } else {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeTestErased$$Z384F8060)((0, _NicePrint.minimalStringOfType)(denv$$16, tgty), (0, _NicePrint.minimalStringOfType)(denv$$16, (0, _TastOps.stripTyEqnsWrtErasure)(new _TastOps.Erasure(0, "EraseAll"), cenv$$51.g, tgty))), m$$82));
    }
  } else {
    (0, _List.iterate)(function action$$7(ety) {
      if ((0, _TastOps.isMeasureTy)(cenv$$51.g, ety)) {
        (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeTestLosesMeasures$$Z721C83C5)((0, _NicePrint.minimalStringOfType)(denv$$16, ety)), m$$82));
      } else {
        (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeTestLossy$$Z384F8060)((0, _NicePrint.minimalStringOfType)(denv$$16, ety), (0, _NicePrint.minimalStringOfType)(denv$$16, (0, _TastOps.stripTyEqnsWrtErasure)(new _TastOps.Erasure(0, "EraseAll"), cenv$$51.g, ety))), m$$82));
      }
    }, (0, _TastOps.getErasedTypes)(cenv$$51.g, tgty));
  }
}

function TcStaticUpcast(cenv$$52, denv$$17, m$$83, tgty$$1, srcTy$$1) {
  if ((0, _TastOps.isTyparTy)(cenv$$52.g, tgty$$1)) {
    if (!(0, _tast.Typar$$get_IsCompatFlex)((0, _TastOps.destTyparTy)(cenv$$52.g, tgty$$1))) {
      (0, _ErrorLogger.error)(new IndeterminateStaticCoercion(denv$$17, srcTy$$1, tgty$$1, m$$83));
    }
  }

  if ((0, _TastOps.isSealedTy)(cenv$$52.g, tgty$$1) ? !(0, _TastOps.isTyparTy)(cenv$$52.g, tgty$$1) : false) {
    (0, _ErrorLogger.warning)(new CoercionTargetSealed(denv$$17, tgty$$1, m$$83));
  }

  if ((0, _TastOps.typeEquiv)(cenv$$52.g, srcTy$$1, tgty$$1)) {
    (0, _ErrorLogger.warning)(new UpcastUnnecessary(m$$83));
  }

  (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), denv$$17, cenv$$52.css, m$$83, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), tgty$$1, srcTy$$1);
}

function BuildPossiblyConditionalMethodCall(cenv$$53, env$$87, isMutable$$9, m$$84, isProp, minfo$$1, valUseFlags, minst$$3, objArgs, args$$10) {
  var d;
  const conditionalCallDefineOpt = (0, _AttributeChecking.TryFindMethInfoStringAttribute)(cenv$$53.g, m$$84, (0, _TcGlobals.TcGlobals$$get_attrib_ConditionalAttribute)(cenv$$53.g), minfo$$1);
  var $target$$227, d$$1;

  if (conditionalCallDefineOpt != null) {
    if (d = conditionalCallDefineOpt, !(0, _List.contains)(d, cenv$$53.conditionalDefines, {
      Equals($x$$12, $y$$13) {
        return $x$$12 === $y$$13;
      },

      GetHashCode: _Util.structuralHash
    })) {
      $target$$227 = 0;
      d$$1 = conditionalCallDefineOpt;
    } else {
      $target$$227 = 1;
    }
  } else {
    $target$$227 = 1;
  }

  switch ($target$$227) {
    case 0:
      {
        UnifyTypes(cenv$$53, env$$87, m$$84, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$53.g), (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(minfo$$1, cenv$$53.amap, m$$84, minst$$3));
        return [(0, _TastOps.mkUnit)(cenv$$53.g, m$$84), (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$53.g)];
      }

    case 1:
      {
        const tcVal$$1 = function tcVal$$1(valref, valUse, ttypes, m$$85) {
          const patternInput$$46 = TcVal(true, cenv$$53, env$$87, emptyUnscopedTyparEnv, valref, [valUse, function (x$$36) {
            return function (_arg1$$26) {
              return [ttypes, x$$36];
            };
          }], null, m$$85);
          return [patternInput$$46[1], patternInput$$46[3]];
        };

        return (0, _MethodCalls.BuildMethodCall)(tcVal$$1, cenv$$53.g, cenv$$53.amap, isMutable$$9, m$$84, isProp, minfo$$1, valUseFlags, minst$$3, objArgs, args$$10);
      }
  }
}

function TryFindIntrinsicOrExtensionMethInfo(cenv$$54, env$$88, m$$86, ad$$9, nm$$3, ty$$34) {
  return (0, _NameResolution.AllMethInfosOfTypeInScope)(cenv$$54.infoReader, TcEnv$$get_NameEnv(env$$88), nm$$3, ad$$9, new _InfoReader.FindMemberFlag(0, "IgnoreOverrides"), m$$86, ty$$34);
}

function BuildDisposableCleanup(cenv$$55, env$$89, m$$87, v$$12) {
  (0, _tast.Val$$SetHasBeenReferenced)(v$$12);
  const ad$$10 = env$$89.eAccessRights;
  let disposeMethod;
  const matchValue$$46 = TryFindIntrinsicOrExtensionMethInfo(cenv$$55, env$$89, m$$87, ad$$10, "Dispose", (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$55.g));
  var $target$$228, x$$37;

  if (matchValue$$46.tail != null) {
    if (matchValue$$46.tail.tail == null) {
      $target$$228 = 0;
      x$$37 = matchValue$$46.head;
    } else {
      $target$$228 = 1;
    }
  } else {
    $target$$228 = 1;
  }

  switch ($target$$228) {
    case 0:
      {
        disposeMethod = x$$37;
        break;
      }

    case 1:
      {
        disposeMethod = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError((0, _FSComp.SR$$$tcCouldNotFindIDisposable)(), m$$87));
        break;
      }
  }

  if ((0, _TastOps.isStructTy)(cenv$$55.g, (0, _tast.Val$$get_Type)(v$$12))) {
    if ((0, _TypeRelations.TypeFeasiblySubsumesType)(0, cenv$$55.g, cenv$$55.amap, m$$87, (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$55.g), new _TypeRelations.CanCoerce(0, "CanCoerce"), (0, _tast.Val$$get_Type)(v$$12))) {
      const patternInput$$47 = BuildPossiblyConditionalMethodCall(cenv$$55, env$$89, new _TastOps.Mutates(3, "NeverMutates"), m$$87, false, disposeMethod, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), (0, _Types.L)((0, _TastOps.exprForVal)((0, _tast.Val$$get_Range)(v$$12), v$$12), (0, _Types.L)()), (0, _Types.L)());
      return patternInput$$47[0];
    } else {
      return (0, _TastOps.mkUnit)(cenv$$55.g, m$$87);
    }
  } else {
    const patternInput$$48 = (0, _TastOps.mkCompGenLocal)(m$$87, "objectToDispose", (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$55.g));
    const patternInput$$49 = BuildPossiblyConditionalMethodCall(cenv$$55, env$$89, new _TastOps.Mutates(2, "PossiblyMutates"), m$$87, false, disposeMethod, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), (0, _Types.L)(patternInput$$48[1], (0, _Types.L)()), (0, _Types.L)());
    const inpe = (0, _TastOps.mkCoerceExpr)((0, _TastOps.exprForVal)((0, _tast.Val$$get_Range)(v$$12), v$$12), (0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$55.g), m$$87, (0, _tast.Val$$get_Type)(v$$12));
    return (0, _TastOps.mkIsInstConditional)(cenv$$55.g, m$$87, (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$55.g), inpe, patternInput$$48[0], patternInput$$49[0], (0, _TastOps.mkUnit)(cenv$$55.g, m$$87));
  }
}

function BuildOffsetToStringData(cenv$$56, env$$90, m$$88) {
  const ad$$11 = env$$90.eAccessRights;
  let offsetToStringDataMethod;
  const matchValue$$47 = TryFindIntrinsicOrExtensionMethInfo(cenv$$56, env$$90, m$$88, ad$$11, "get_OffsetToStringData", (0, _TcGlobals.TcGlobals$$get_system_RuntimeHelpers_ty)(cenv$$56.g));
  var $target$$229, x$$38;

  if (matchValue$$47.tail != null) {
    if (matchValue$$47.tail.tail == null) {
      $target$$229 = 0;
      x$$38 = matchValue$$47.head;
    } else {
      $target$$229 = 1;
    }
  } else {
    $target$$229 = 1;
  }

  switch ($target$$229) {
    case 0:
      {
        offsetToStringDataMethod = x$$38;
        break;
      }

    case 1:
      {
        offsetToStringDataMethod = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCouldNotFindOffsetToStringData)(), m$$88));
        break;
      }
  }

  const patternInput$$50 = BuildPossiblyConditionalMethodCall(cenv$$56, env$$90, new _TastOps.Mutates(3, "NeverMutates"), m$$88, false, offsetToStringDataMethod, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)());
  return patternInput$$50[0];
}

function BuildILFieldGet(g$$27, amap$$12, m$$89, objExpr, finfo) {
  const fref = (0, _infos.ILFieldInfo$$get_ILFieldRef)(finfo);
  const isValueType = (0, _infos.ILFieldInfo$$get_IsValueType)(finfo);
  const valu = isValueType ? new _il.ILBoxity(1, "AsValue") : new _il.ILBoxity(0, "AsObject");
  const tinst$$12 = (0, _infos.ILFieldInfo$$get_TypeInst)(finfo);
  const fieldType = (0, _infos.ILFieldInfo$$FieldType$$73F6E43C)(finfo, amap$$12, m$$89);
  const patternInput$$51 = (0, _TastOps.mkExprAddrOfExpr)(g$$27, isValueType, false, new _TastOps.Mutates(3, "NeverMutates"), objExpr, null, m$$89);
  const fspec = (0, _il.mkILFieldSpec)(fref, (0, _il.mkILNamedTy)(valu, fref.DeclaringTypeRef, (0, _Types.L)()));
  return patternInput$$51[0]((0, _TastOps.mkAsmExpr)((0, _List.append)((0, _Types.L)((0, _il.mkNormalLdfld)(fspec), (0, _Types.L)()), (0, _infos.ILFieldInfo$$get_IsInitOnly)(finfo) ? (0, _Types.L)(new _il.ILInstr(33, "AI_nop"), (0, _Types.L)()) : (0, _Types.L)()), tinst$$12, (0, _Types.L)(patternInput$$51[1], (0, _Types.L)()), (0, _Types.L)(fieldType, (0, _Types.L)()), m$$89));
}

function BuildILFieldSet(g$$28, m$$90, objExpr$$2, finfo$$1, argExpr) {
  const fref$$1 = (0, _infos.ILFieldInfo$$get_ILFieldRef)(finfo$$1);
  const isValueType$$1 = (0, _infos.ILFieldInfo$$get_IsValueType)(finfo$$1);
  const valu$$1 = isValueType$$1 ? new _il.ILBoxity(1, "AsValue") : new _il.ILBoxity(0, "AsObject");
  const tinst$$13 = (0, _infos.ILFieldInfo$$get_TypeInst)(finfo$$1);
  const fspec$$1 = (0, _il.mkILFieldSpec)(fref$$1, (0, _il.mkILNamedTy)(valu$$1, fref$$1.DeclaringTypeRef, (0, _Types.L)()));

  if ((0, _infos.ILFieldInfo$$get_IsInitOnly)(finfo$$1)) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsReadonly)(), m$$90));
  }

  const patternInput$$52 = (0, _TastOps.mkExprAddrOfExpr)(g$$28, isValueType$$1, false, new _TastOps.Mutates(1, "DefinitelyMutates"), objExpr$$2, null, m$$90);
  return patternInput$$52[0]((0, _TastOps.mkAsmExpr)((0, _Types.L)((0, _il.mkNormalStfld)(fspec$$1), (0, _Types.L)()), tinst$$13, (0, _Types.L)(patternInput$$52[1], (0, _Types.L)(argExpr, (0, _Types.L)())), (0, _Types.L)(), m$$90));
}

function BuildILStaticFieldSet(m$$91, finfo$$2, argExpr$$1) {
  const fref$$2 = (0, _infos.ILFieldInfo$$get_ILFieldRef)(finfo$$2);
  const isValueType$$2 = (0, _infos.ILFieldInfo$$get_IsValueType)(finfo$$2);
  const valu$$2 = isValueType$$2 ? new _il.ILBoxity(1, "AsValue") : new _il.ILBoxity(0, "AsObject");
  const tinst$$14 = (0, _infos.ILFieldInfo$$get_TypeInst)(finfo$$2);
  const fspec$$2 = (0, _il.mkILFieldSpec)(fref$$2, (0, _il.mkILNamedTy)(valu$$2, fref$$2.DeclaringTypeRef, (0, _Types.L)()));

  if ((0, _infos.ILFieldInfo$$get_IsInitOnly)(finfo$$2)) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsReadonly)(), m$$91));
  }

  return (0, _TastOps.mkAsmExpr)((0, _Types.L)((0, _il.mkNormalStsfld)(fspec$$2), (0, _Types.L)()), tinst$$14, (0, _Types.L)(argExpr$$1, (0, _Types.L)()), (0, _Types.L)(), m$$91);
}

function BuildRecdFieldSet(g$$29, m$$92, objExpr$$4, rfinfo, argExpr$$2) {
  const tgty$$2 = (0, _infos.RecdFieldInfo$$get_DeclaringType)(rfinfo);
  const valu$$3 = (0, _TastOps.isStructTy)(g$$29, tgty$$2);
  const objExpr$$5 = valu$$3 ? objExpr$$4 : (0, _TastOps.mkCoerceExpr)(objExpr$$4, tgty$$2, m$$92, (0, _TastOps.tyOfExpr)(g$$29, objExpr$$4));
  const patternInput$$53 = (0, _TastOps.mkExprAddrOfExpr)(g$$29, valu$$3, false, new _TastOps.Mutates(1, "DefinitelyMutates"), objExpr$$5, null, m$$92);
  return patternInput$$53[0]((0, _TastOps.mkRecdFieldSetViaExprAddr)(patternInput$$53[1], (0, _infos.RecdFieldInfo$$get_RecdFieldRef)(rfinfo), (0, _infos.RecdFieldInfo$$get_TypeInst)(rfinfo), argExpr$$2, m$$92));
}

function $007CBinOpExpr$007C_$007C(e$$5) {
  var $target$$230, a$$7, b$$9, opId;

  if (e$$5.tag === 20) {
    if (e$$5.fields[2].tag === 20) {
      const activePatternResult46716 = (0, _ast.$007CSingleIdent$007C_$007C)(e$$5.fields[2].fields[2]);

      if (activePatternResult46716 != null) {
        $target$$230 = 0;
        a$$7 = e$$5.fields[2].fields[3];
        b$$9 = e$$5.fields[3];
        opId = activePatternResult46716;
      } else {
        $target$$230 = 1;
      }
    } else {
      $target$$230 = 1;
    }
  } else {
    $target$$230 = 1;
  }

  switch ($target$$230) {
    case 0:
      {
        return [opId, a$$7, b$$9];
      }

    case 1:
      {
        return null;
      }
  }
}

function $007CSimpleEqualsExpr$007C_$007C(e$$6) {
  var opId$$1, b$$10, a$$8;
  var $target$$231, a$$9, b$$11, opId$$2;
  const activePatternResult46718 = $007CBinOpExpr$007C_$007C(e$$6);

  if (activePatternResult46718 != null) {
    if (opId$$1 = activePatternResult46718[0], (b$$10 = activePatternResult46718[2], (a$$8 = activePatternResult46718[1], (0, _ast.Ident$$get_idText)(opId$$1) === _PrettyNaming.opNameEquals))) {
      $target$$231 = 0;
      a$$9 = activePatternResult46718[1];
      b$$11 = activePatternResult46718[2];
      opId$$2 = activePatternResult46718[0];
    } else {
      $target$$231 = 1;
    }
  } else {
    $target$$231 = 1;
  }

  switch ($target$$231) {
    case 0:
      {
        return [a$$9, b$$11];
      }

    case 1:
      {
        return null;
      }
  }
}

function $007CJoinRelation$007C_$007C(cenv$$57, env$$91, e$$7) {
  var opId$$9, b$$19, a$$17, opId$$7, b$$16, a$$15, opId$$5, b$$14, a$$12, opId$$3, b$$12, a$$10;
  const m$$93 = (0, _ast.SynExpr$$get_Range)(e$$7);
  const ad$$12 = env$$91.eAccessRights;

  const isOpName = function isOpName(opName$$1, vref$$6, s$$3) {
    if (s$$3 === opName$$1) {
      const matchValue$$48 = (0, _NameResolution.ResolveExprLongIdent)(cenv$$57.tcSink, cenv$$57.nameResolver, m$$93, ad$$12, env$$91.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), (0, _Types.L)((0, _ast.ident)(opName$$1, m$$93), (0, _Types.L)()));
      var $target$$232, vref2;

      if (matchValue$$48[0].tag === 0) {
        if (matchValue$$48[1].tail == null) {
          $target$$232 = 0;
          vref2 = matchValue$$48[0].fields[0];
        } else {
          $target$$232 = 1;
        }
      } else {
        $target$$232 = 1;
      }

      switch ($target$$232) {
        case 0:
          {
            return (0, _TastOps.valRefEq)(cenv$$57.g, vref$$6, vref2);
          }

        case 1:
          {
            return false;
          }
      }
    } else {
      return false;
    }
  };

  var $target$$233, a$$11, b$$13, opId$$4;
  const activePatternResult46726 = $007CBinOpExpr$007C_$007C(e$$7);

  if (activePatternResult46726 != null) {
    if (opId$$3 = activePatternResult46726[0], (b$$12 = activePatternResult46726[2], (a$$10 = activePatternResult46726[1], isOpName(_PrettyNaming.opNameEquals, (0, _TcGlobals.TcGlobals$$get_equals_operator_vref)(cenv$$57.g), (0, _ast.Ident$$get_idText)(opId$$3))))) {
      $target$$233 = 0;
      a$$11 = activePatternResult46726[1];
      b$$13 = activePatternResult46726[2];
      opId$$4 = activePatternResult46726[0];
    } else {
      $target$$233 = 1;
    }
  } else {
    $target$$233 = 1;
  }

  switch ($target$$233) {
    case 0:
      {
        return [a$$11, b$$13];
      }

    case 1:
      {
        var $target$$234, a$$13, b$$15, opId$$6;
        const activePatternResult46725 = $007CBinOpExpr$007C_$007C(e$$7);

        if (activePatternResult46725 != null) {
          if (opId$$5 = activePatternResult46725[0], (b$$14 = activePatternResult46725[2], (a$$12 = activePatternResult46725[1], isOpName(_PrettyNaming.opNameEqualsNullable, (0, _TcGlobals.TcGlobals$$get_equals_nullable_operator_vref)(cenv$$57.g), (0, _ast.Ident$$get_idText)(opId$$5))))) {
            $target$$234 = 0;
            a$$13 = activePatternResult46725[1];
            b$$15 = activePatternResult46725[2];
            opId$$6 = activePatternResult46725[0];
          } else {
            $target$$234 = 1;
          }
        } else {
          $target$$234 = 1;
        }

        switch ($target$$234) {
          case 0:
            {
              const a$$14 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)((0, _ast.SynExpr$$get_Range)(a$$13), (0, _Types.L)("`global`", (0, _Types.L)("System", (0, _Types.L)())), "Nullable"), a$$13, (0, _ast.SynExpr$$get_Range)(a$$13));
              return [a$$14, b$$15];
            }

          case 1:
            {
              var $target$$235, a$$16, b$$17, opId$$8;
              const activePatternResult46724 = $007CBinOpExpr$007C_$007C(e$$7);

              if (activePatternResult46724 != null) {
                if (opId$$7 = activePatternResult46724[0], (b$$16 = activePatternResult46724[2], (a$$15 = activePatternResult46724[1], isOpName(_PrettyNaming.opNameNullableEquals, (0, _TcGlobals.TcGlobals$$get_nullable_equals_operator_vref)(cenv$$57.g), (0, _ast.Ident$$get_idText)(opId$$7))))) {
                  $target$$235 = 0;
                  a$$16 = activePatternResult46724[1];
                  b$$17 = activePatternResult46724[2];
                  opId$$8 = activePatternResult46724[0];
                } else {
                  $target$$235 = 1;
                }
              } else {
                $target$$235 = 1;
              }

              switch ($target$$235) {
                case 0:
                  {
                    const b$$18 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)((0, _ast.SynExpr$$get_Range)(b$$17), (0, _Types.L)("`global`", (0, _Types.L)("System", (0, _Types.L)())), "Nullable"), b$$17, (0, _ast.SynExpr$$get_Range)(b$$17));
                    return [a$$16, b$$18];
                  }

                case 1:
                  {
                    var $target$$236, a$$18, b$$20, opId$$10;
                    const activePatternResult46723 = $007CBinOpExpr$007C_$007C(e$$7);

                    if (activePatternResult46723 != null) {
                      if (opId$$9 = activePatternResult46723[0], (b$$19 = activePatternResult46723[2], (a$$17 = activePatternResult46723[1], isOpName(_PrettyNaming.opNameNullableEqualsNullable, (0, _TcGlobals.TcGlobals$$get_nullable_equals_nullable_operator_vref)(cenv$$57.g), (0, _ast.Ident$$get_idText)(opId$$9))))) {
                        $target$$236 = 0;
                        a$$18 = activePatternResult46723[1];
                        b$$20 = activePatternResult46723[2];
                        opId$$10 = activePatternResult46723[0];
                      } else {
                        $target$$236 = 1;
                      }
                    } else {
                      $target$$236 = 1;
                    }

                    switch ($target$$236) {
                      case 0:
                        {
                          return [a$$18, b$$20];
                        }

                      case 1:
                        {
                          return null;
                        }
                    }
                  }
              }
            }
        }
      }
  }
}

function TryGetNamedArg(e$$8) {
  var $target$$237, a$$19, b$$21, isOpt$$1;
  const activePatternResult46730 = $007CSimpleEqualsExpr$007C_$007C(e$$8);

  if (activePatternResult46730 != null) {
    const activePatternResult46731 = (0, _ast.$007CLongOrSingleIdent$007C_$007C)(activePatternResult46730[0]);

    if (activePatternResult46731 != null) {
      if (activePatternResult46731[1].fields[0].tail != null) {
        if (activePatternResult46731[1].fields[0].tail.tail == null) {
          if (activePatternResult46731[2] == null) {
            $target$$237 = 0;
            a$$19 = activePatternResult46731[1].fields[0].head;
            b$$21 = activePatternResult46730[1];
            isOpt$$1 = activePatternResult46731[0];
          } else {
            $target$$237 = 1;
          }
        } else {
          $target$$237 = 1;
        }
      } else {
        $target$$237 = 1;
      }
    } else {
      $target$$237 = 1;
    }
  } else {
    $target$$237 = 1;
  }

  switch ($target$$237) {
    case 0:
      {
        return [isOpt$$1, a$$19, b$$21];
      }

    case 1:
      {
        return null;
      }
  }
}

function GetMethodArgs(arg) {
  var activePatternResult46737, activePatternResult46736, activePatternResult46738, activePatternResult46739;
  const args$$12 = arg.tag === 2 ? arg.fields[0].tag === 0 ? (0, _Types.L)() : (activePatternResult46737 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46737 != null ? activePatternResult46737[0].tag === 4 ? activePatternResult46737[0].fields[0] : (activePatternResult46736 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46736 != null ? (0, _Types.L)(activePatternResult46736[0], (0, _Types.L)()) : (0, _Types.L)(arg, (0, _Types.L)())) : (activePatternResult46736 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46736 != null ? (0, _Types.L)(activePatternResult46736[0], (0, _Types.L)()) : (0, _Types.L)(arg, (0, _Types.L)()))) : arg.tag === 4 ? (activePatternResult46738 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46738 != null ? activePatternResult46738[0].tag === 4 ? activePatternResult46738[0].fields[0] : arg.fields[0] : arg.fields[0]) : (activePatternResult46739 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46739 != null ? activePatternResult46739[0].tag === 4 ? activePatternResult46739[0].fields[0] : (activePatternResult46736 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46736 != null ? (0, _Types.L)(activePatternResult46736[0], (0, _Types.L)()) : (0, _Types.L)(arg, (0, _Types.L)())) : (activePatternResult46736 = (0, _ast.$007CSynExprParen$007C_$007C)(arg), activePatternResult46736 != null ? (0, _Types.L)(activePatternResult46736[0], (0, _Types.L)()) : (0, _Types.L)(arg, (0, _Types.L)())));
  const patternInput$$54 = (0, _illib.List$$$takeUntil)(function (e$$9) {
    var activePatternResult46733, activePatternResult46734;
    return activePatternResult46733 = $007CSimpleEqualsExpr$007C_$007C(e$$9), activePatternResult46733 != null ? (activePatternResult46734 = (0, _ast.$007CLongOrSingleIdent$007C_$007C)(activePatternResult46733[0]), activePatternResult46734 != null ? activePatternResult46734[1].fields[0].tail != null ? activePatternResult46734[1].fields[0].tail.tail == null ? activePatternResult46734[2] == null ? true : false : false : false : false) : false;
  }, args$$12);
  const namedCallerArgs$$1 = (0, _List.choose)(function chooser(e$$11) {
    const matchValue$$49 = TryGetNamedArg(e$$11);

    if (matchValue$$49 == null) {
      if (e$$11.tag === 57) {
        return null;
      } else {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNameArgumentsMustAppearLast)(), (0, _ast.SynExpr$$get_Range)(e$$11)));
      }
    } else {
      const namedArg = matchValue$$49;
      return namedArg;
    }
  }, patternInput$$54[1]);
  return [patternInput$$54[0], namedCallerArgs$$1];
}

function CompilePatternForMatch(cenv$$58, env$$92, mExpr, matchm, warnOnUnused, actionOnFailure, v$$13, generalizedTypars$$20, clauses, inputTy$$2, resultTy$$2) {
  const patternInput$$55 = (0, _PatternMatchCompilation.CompilePattern)(cenv$$58.g, TcEnv$$get_DisplayEnv(env$$92), cenv$$58.amap, mExpr, matchm, warnOnUnused, actionOnFailure, v$$13, generalizedTypars$$20, clauses, inputTy$$2, resultTy$$2);
  return (0, _TastOps.mkAndSimplifyMatch)(new _ast.SequencePointInfoForBinding(4, "NoSequencePointAtInvisibleBinding"), mExpr, matchm, resultTy$$2, patternInput$$55[0], patternInput$$55[1]);
}

function CompilePatternForMatchClauses(cenv$$59, env$$93, mExpr$$1, matchm$$1, warnOnUnused$$1, actionOnFailure$$1, inputTy$$3, resultTy$$3, tclauses) {
  var $target$$238, e$$12, generalizedTypars$$21, m2, pat1, spTarget, v$$14, vs$$2;

  if (tclauses.tail != null) {
    if (tclauses.head.fields[0].tag === 2) {
      if (tclauses.head.fields[1] == null) {
        if (tclauses.tail.tail == null) {
          $target$$238 = 0;
          e$$12 = tclauses.head.fields[2].fields[1];
          generalizedTypars$$21 = tclauses.head.fields[0].fields[1].fields[1].fields[0];
          m2 = tclauses.head.fields[3];
          pat1 = tclauses.head.fields[0].fields[0];
          spTarget = tclauses.head.fields[2].fields[2];
          v$$14 = tclauses.head.fields[0].fields[1].fields[0];
          vs$$2 = tclauses.head.fields[2].fields[0];
        } else {
          $target$$238 = 1;
        }
      } else {
        $target$$238 = 1;
      }
    } else {
      $target$$238 = 1;
    }
  } else {
    $target$$238 = 1;
  }

  switch ($target$$238) {
    case 0:
      {
        const expr$$9 = CompilePatternForMatch(cenv$$59, env$$93, mExpr$$1, matchm$$1, warnOnUnused$$1, actionOnFailure$$1, v$$14, generalizedTypars$$21, (0, _Types.L)(new _PatternMatchCompilation.TypedMatchClause(0, "TClause", pat1, null, new _tast.DecisionTreeTarget(0, "TTarget", (0, _lib.ListSet$$$remove)(_tast.valEq, v$$14, vs$$2), e$$12, spTarget), m2), (0, _Types.L)()), inputTy$$3, resultTy$$3);
        return [v$$14, expr$$9];
      }

    case 1:
      {
        const patternInput$$56 = (0, _TastOps.mkCompGenLocal)(mExpr$$1, "matchValue", inputTy$$3);
        const expr$$10 = CompilePatternForMatch(cenv$$59, env$$93, mExpr$$1, matchm$$1, warnOnUnused$$1, actionOnFailure$$1, patternInput$$56[0], (0, _Types.L)(), tclauses, inputTy$$3, resultTy$$3);
        return [patternInput$$56[0], expr$$10];
      }
  }
}

function AnalyzeArbitraryExprAsEnumerable(cenv$$60, env$$94, localAlloc, m$$94, exprty, expr$$11) {
  const ad$$13 = env$$94.eAccessRights;

  const err = function err(k, ty$$35) {
    const txt$$1 = (0, _NicePrint.minimalStringOfType)(TcEnv$$get_DisplayEnv(env$$94), ty$$35);
    const msg = k ? (0, _FSComp.SR$$$tcTypeCannotBeEnumerated$$Z721C83C5)(txt$$1) : (0, _FSComp.SR$$$tcEnumTypeCannotBeEnumerated$$Z721C83C5)(txt$$1);
    return new _illib.ResultOrException$00601(1, "Exception", new _ErrorLogger.Error$(msg, m$$94));
  };

  const findMethInfo = function findMethInfo(k$$1, m$$95, nm$$4, ty$$36) {
    const matchValue$$50 = TryFindIntrinsicOrExtensionMethInfo(cenv$$60, env$$94, m$$95, ad$$13, nm$$4, ty$$36);

    if (matchValue$$50.tail != null) {
      const res$$8 = matchValue$$50.head;
      return new _illib.ResultOrException$00601(0, "Result", res$$8);
    } else {
      return err(k$$1, ty$$36);
    }
  };

  const hasArgs = function hasArgs(minfo$$2, minst$$4) {
    const matchValue$$51 = (0, _infos.MethInfo$$GetParamTypes$$Z5D984B3C)(minfo$$2, cenv$$60.amap, m$$94, minst$$4);
    var $target$$239;

    if (matchValue$$51.tail != null) {
      if (matchValue$$51.head.tail == null) {
        if (matchValue$$51.tail.tail == null) {
          $target$$239 = 0;
        } else {
          $target$$239 = 1;
        }
      } else {
        $target$$239 = 1;
      }
    } else {
      $target$$239 = 1;
    }

    switch ($target$$239) {
      case 0:
        {
          return false;
        }

      case 1:
        {
          return true;
        }
    }
  };

  const tryType = function tryType(tupledArg$$21) {
    var others$$4, minfo$$7, others$$2, minfo$$5;
    const matchValue$$52 = findMethInfo(true, m$$94, "GetEnumerator", tupledArg$$21[1]);

    if (matchValue$$52.tag === 0) {
      const getEnumerator_minfo = matchValue$$52.fields[0];
      const getEnumerator_minst = (0, _ConstraintSolver.FreshenMethInfo)(m$$94, getEnumerator_minfo);
      const retTypeOfGetEnumerator = (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(getEnumerator_minfo, cenv$$60.amap, m$$94, getEnumerator_minst);

      if (hasArgs(getEnumerator_minfo, getEnumerator_minst)) {
        return err(true, tupledArg$$21[1]);
      } else {
        const matchValue$$53 = findMethInfo(false, m$$94, "MoveNext", retTypeOfGetEnumerator);

        if (matchValue$$53.tag === 0) {
          const moveNext_minfo = matchValue$$53.fields[0];
          const moveNext_minst = (0, _ConstraintSolver.FreshenMethInfo)(m$$94, moveNext_minfo);
          const retTypeOfMoveNext = (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(moveNext_minfo, cenv$$60.amap, m$$94, moveNext_minst);

          if (!(0, _TastOps.typeEquiv)(cenv$$60.g, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$60.g), retTypeOfMoveNext)) {
            return err(false, retTypeOfGetEnumerator);
          } else if (hasArgs(moveNext_minfo, moveNext_minst)) {
            return err(false, retTypeOfGetEnumerator);
          } else {
            const matchValue$$54 = findMethInfo(false, m$$94, "get_Current", retTypeOfGetEnumerator);

            if (matchValue$$54.tag === 0) {
              const get_Current_minfo = matchValue$$54.fields[0];
              const get_Current_minst = (0, _ConstraintSolver.FreshenMethInfo)(m$$94, get_Current_minfo);

              if (hasArgs(get_Current_minfo, get_Current_minst)) {
                return err(false, retTypeOfGetEnumerator);
              } else {
                const enumElemTy = (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(get_Current_minfo, cenv$$60.amap, m$$94, get_Current_minst);
                let enumElemTy$$1;

                if ((0, _TastOps.isObjTy)(cenv$$60.g, enumElemTy)) {
                  const allEquivReturnTypes = function allEquivReturnTypes(minfo$$3, others$$1) {
                    const returnTy = (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(minfo$$3, cenv$$60.amap, m$$94, (0, _Types.L)());
                    return (0, _List.forAll)(function predicate$$20(other) {
                      return (0, _TastOps.typeEquiv)(cenv$$60.g, (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(other, cenv$$60.amap, m$$94, (0, _Types.L)()), returnTy);
                    }, others$$1);
                  };

                  const isInt32OrObjectIndexer = function isInt32OrObjectIndexer(minfo$$4) {
                    const matchValue$$55 = (0, _infos.MethInfo$$GetParamTypes$$Z5D984B3C)(minfo$$4, cenv$$60.amap, m$$94, (0, _Types.L)());
                    var $target$$240, ty$$37;

                    if (matchValue$$55.tail != null) {
                      if (matchValue$$55.head.tail != null) {
                        if (matchValue$$55.head.tail.tail == null) {
                          if (matchValue$$55.tail.tail == null) {
                            $target$$240 = 0;
                            ty$$37 = matchValue$$55.head.head;
                          } else {
                            $target$$240 = 1;
                          }
                        } else {
                          $target$$240 = 1;
                        }
                      } else {
                        $target$$240 = 1;
                      }
                    } else {
                      $target$$240 = 1;
                    }

                    switch ($target$$240) {
                      case 0:
                        {
                          if ((0, _TastOps.typeEquiv)(cenv$$60.g, (0, _TcGlobals.TcGlobals$$get_int32_ty)(cenv$$60.g), ty$$37)) {
                            return true;
                          } else {
                            return (0, _TastOps.typeEquiv)(cenv$$60.g, (0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$60.g), ty$$37);
                          }
                        }

                      case 1:
                        {
                          return false;
                        }
                    }
                  };

                  const matchValue$$56 = TryFindIntrinsicOrExtensionMethInfo(cenv$$60, env$$94, m$$94, ad$$13, "get_Item", tupledArg$$21[1]);
                  var $target$$241, minfo$$6, others$$3;

                  if (matchValue$$56.tail != null) {
                    if (others$$2 = matchValue$$56.tail, (minfo$$5 = matchValue$$56.head, allEquivReturnTypes(minfo$$5, others$$2) ? (0, _List.exists)(isInt32OrObjectIndexer, (0, _Types.L)(minfo$$5, others$$2)) : false)) {
                      $target$$241 = 0;
                      minfo$$6 = matchValue$$56.head;
                      others$$3 = matchValue$$56.tail;
                    } else {
                      $target$$241 = 1;
                    }
                  } else {
                    $target$$241 = 1;
                  }

                  switch ($target$$241) {
                    case 0:
                      {
                        enumElemTy$$1 = (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(minfo$$6, cenv$$60.amap, m$$94, (0, _Types.L)());
                        break;
                      }

                    case 1:
                      {
                        const matchValue$$57 = TryFindIntrinsicOrExtensionMethInfo(cenv$$60, env$$94, m$$94, ad$$13, "Item", tupledArg$$21[1]);
                        var $target$$242, minfo$$8, others$$5;

                        if (matchValue$$57.tail != null) {
                          if (others$$4 = matchValue$$57.tail, (minfo$$7 = matchValue$$57.head, allEquivReturnTypes(minfo$$7, others$$4) ? (0, _List.exists)(isInt32OrObjectIndexer, (0, _Types.L)(minfo$$7, others$$4)) : false)) {
                            $target$$242 = 0;
                            minfo$$8 = matchValue$$57.head;
                            others$$5 = matchValue$$57.tail;
                          } else {
                            $target$$242 = 1;
                          }
                        } else {
                          $target$$242 = 1;
                        }

                        switch ($target$$242) {
                          case 0:
                            {
                              enumElemTy$$1 = (0, _infos.MethInfo$$GetFSharpReturnTy$$Z5D984B3C)(minfo$$8, cenv$$60.amap, m$$94, (0, _Types.L)());
                              break;
                            }

                          case 1:
                            {
                              enumElemTy$$1 = enumElemTy;
                              break;
                            }
                        }

                        break;
                      }
                  }
                } else {
                  enumElemTy$$1 = enumElemTy;
                }

                const isEnumeratorTypeStruct = (0, _TastOps.isStructTy)(cenv$$60.g, retTypeOfGetEnumerator);
                const originalRetTypeOfGetEnumerator = retTypeOfGetEnumerator;
                let patternInput$$58;

                if (isEnumeratorTypeStruct) {
                  if (localAlloc) {
                    patternInput$$58 = [(0, _TastOps.mkMutableCompGenLocal)(m$$94, "enumerator", retTypeOfGetEnumerator), retTypeOfGetEnumerator];
                  } else {
                    const refCellTyForRetTypeOfGetEnumerator = (0, _TastOps.mkRefCellTy)(cenv$$60.g, retTypeOfGetEnumerator);
                    const patternInput$$57 = (0, _TastOps.mkMutableCompGenLocal)(m$$94, "enumerator", refCellTyForRetTypeOfGetEnumerator);
                    patternInput$$58 = [[patternInput$$57[0], (0, _TastOps.mkRefCellGet)(cenv$$60.g, m$$94, retTypeOfGetEnumerator, patternInput$$57[1])], refCellTyForRetTypeOfGetEnumerator];
                  }
                } else {
                  patternInput$$58 = [(0, _TastOps.mkCompGenLocal)(m$$94, "enumerator", retTypeOfGetEnumerator), retTypeOfGetEnumerator];
                }

                const enumeratorVar = patternInput$$58[0][0];
                const enumeratorExpr = patternInput$$58[0][1];
                let patternInput$$59;
                const res$$9 = BuildPossiblyConditionalMethodCall(cenv$$60, env$$94, new _TastOps.Mutates(2, "PossiblyMutates"), m$$94, false, getEnumerator_minfo, new _tast.ValUseFlag(1, "NormalValUse"), getEnumerator_minst, (0, _Types.L)(tupledArg$$21[0], (0, _Types.L)()), (0, _Types.L)());
                const getEnumTy = res$$9[1];
                const getEnumExpr = res$$9[0];

                if (!isEnumeratorTypeStruct ? true : localAlloc) {
                  patternInput$$59 = res$$9;
                } else {
                  const getEnumExpr$$1 = (0, _TastOps.mkRefCell)(cenv$$60.g, m$$94, originalRetTypeOfGetEnumerator, getEnumExpr);
                  const getEnumTy$$1 = (0, _TastOps.mkRefCellTy)(cenv$$60.g, getEnumTy);
                  patternInput$$59 = [getEnumExpr$$1, getEnumTy$$1];
                }

                const patternInput$$60 = BuildPossiblyConditionalMethodCall(cenv$$60, env$$94, new _TastOps.Mutates(1, "DefinitelyMutates"), m$$94, false, moveNext_minfo, new _tast.ValUseFlag(1, "NormalValUse"), moveNext_minst, (0, _Types.L)(enumeratorExpr, (0, _Types.L)()), (0, _Types.L)());
                const patternInput$$61 = BuildPossiblyConditionalMethodCall(cenv$$60, env$$94, new _TastOps.Mutates(1, "DefinitelyMutates"), m$$94, true, get_Current_minfo, new _tast.ValUseFlag(1, "NormalValUse"), get_Current_minst, (0, _Types.L)(enumeratorExpr, (0, _Types.L)()), (0, _Types.L)());
                const currentExpr$$1 = (0, _TastOps.mkCoerceExpr)(patternInput$$61[0], enumElemTy$$1, (0, _TastOps.Expr$002Eget_Range)(patternInput$$61[0]), patternInput$$61[1]);
                let patternInput$$63;

                if ((0, _TastOps.isByrefTy)(cenv$$60.g, enumElemTy$$1)) {
                  const patternInput$$62 = (0, _TastOps.mkCompGenLocal)(m$$94, "byrefReturn", enumElemTy$$1);
                  const expr$$12 = (0, _TastOps.mkCompGenLet)((0, _TastOps.Expr$002Eget_Range)(currentExpr$$1), patternInput$$62[0], currentExpr$$1, (0, _TastOps.mkAddrGet)(m$$94, (0, _tast.mkLocalValRef)(patternInput$$62[0])));
                  patternInput$$63 = [expr$$12, (0, _TastOps.destByrefTy)(cenv$$60.g, enumElemTy$$1)];
                } else {
                  patternInput$$63 = [currentExpr$$1, enumElemTy$$1];
                }

                return new _illib.ResultOrException$00601(0, "Result", [enumeratorVar, enumeratorExpr, patternInput$$58[1], patternInput$$63[1], patternInput$$59[0], patternInput$$59[1], patternInput$$60[0], patternInput$$60[1], patternInput$$63[0]]);
              }
            } else {
              const e$$15 = matchValue$$54.fields[0];
              return new _illib.ResultOrException$00601(1, "Exception", e$$15);
            }
          }
        } else {
          const e$$14 = matchValue$$53.fields[0];
          return new _illib.ResultOrException$00601(1, "Exception", e$$14);
        }
      }
    } else {
      const e$$13 = matchValue$$52.fields[0];
      return new _illib.ResultOrException$00601(1, "Exception", e$$13);
    }
  };

  const matchValue$$58 = (0, _TastOps.isArray1DTy)(cenv$$60.g, exprty) ? new _illib.ResultOrException$00601(1, "Exception", (0, _FSharp.Operators$$$Failure)("")) : tryType([expr$$11, exprty]);

  if (matchValue$$58.tag === 1) {
    const e$$17 = matchValue$$58.fields[0];

    const probe = function probe(ty$$38) {
      if ((0, _ConstraintSolver.AddCxTypeMustSubsumeTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$94), cenv$$60.css, m$$94, ty$$38, exprty)) {
        const matchValue$$59 = tryType([(0, _TastOps.mkCoerceExpr)(expr$$11, ty$$38, (0, _TastOps.Expr$002Eget_Range)(expr$$11), exprty), ty$$38]);

        if (matchValue$$59.tag === 1) {
          const e$$18 = matchValue$$59.fields[0];
          (0, _ErrorLogger.ErrorLoggerExtensions$$$PreserveStackTrace)(e$$18);
          throw e$$18;
        } else {
          const res$$11 = matchValue$$59.fields[0];
          return res$$11;
        }
      } else {
        return null;
      }
    };

    const enumElemTy$$3 = (0, _ConstraintSolver.NewInferenceType)();
    const exprTyAsSeq = (0, _TastOps.mkSeqTy)(cenv$$60.g, enumElemTy$$3);
    const matchValue$$60 = probe(exprTyAsSeq);

    if (matchValue$$60 == null) {
      const ienumerable = (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_tcref_System_Collections_IEnumerable)(cenv$$60.g), (0, _Types.L)());
      const matchValue$$61 = probe(ienumerable);

      if (matchValue$$61 == null) {
        (0, _ErrorLogger.ErrorLoggerExtensions$$$PreserveStackTrace)(e$$17);
        throw e$$17;
      } else {
        const res$$13 = matchValue$$61;
        return res$$13;
      }
    } else {
      const res$$12 = matchValue$$60;
      return res$$12;
    }
  } else {
    const res$$10 = matchValue$$58.fields[0];
    return res$$10;
  }
}

function ConvertArbitraryExprToEnumerable(cenv$$61, ty$$39, env$$95, expr$$13) {
  const m$$96 = (0, _TastOps.Expr$002Eget_Range)(expr$$13);
  const enumElemTy$$4 = (0, _ConstraintSolver.NewInferenceType)();

  if ((0, _ConstraintSolver.AddCxTypeMustSubsumeTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$95), cenv$$61.css, m$$96, (0, _TastOps.mkSeqTy)(cenv$$61.g, enumElemTy$$4), ty$$39)) {
    return [expr$$13, enumElemTy$$4];
  } else {
    const patternInput$$64 = (0, _TastOps.mkCompGenLocal)(m$$96, "inputSequence", ty$$39);
    const patternInput$$65 = AnalyzeArbitraryExprAsEnumerable(cenv$$61, env$$95, false, m$$96, ty$$39, patternInput$$64[1]);
    const expr$$14 = (0, _TastOps.mkCompGenLet)(m$$96, patternInput$$64[0], expr$$13, (0, _TastOps.mkCallSeqOfFunctions)(cenv$$61.g, m$$96, patternInput$$65[2], patternInput$$65[3], (0, _TastOps.mkUnitDelayLambda)(cenv$$61.g, m$$96, patternInput$$65[4]), (0, _TastOps.mkLambda)(m$$96, patternInput$$65[0], patternInput$$65[6], patternInput$$65[7]), (0, _TastOps.mkLambda)(m$$96, patternInput$$65[0], patternInput$$65[8], patternInput$$65[3])));
    return [expr$$14, patternInput$$65[3]];
  }
}

function mkSeqEmpty(cenv$$62, env$$96, m$$97, genTy) {
  const genResultTy = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$62, env$$96, m$$97, genTy, (0, _TastOps.mkSeqTy)(cenv$$62.g, genResultTy));
  return (0, _TastOps.mkCallSeqEmpty)(cenv$$62.g, m$$97, genResultTy);
}

function mkSeqCollect(cenv$$63, env$$97, m$$98, enumElemTy$$6, genTy$$1, lam, enumExpr) {
  const genResultTy$$1 = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$63, env$$97, m$$98, genTy$$1, (0, _TastOps.mkSeqTy)(cenv$$63.g, genResultTy$$1));
  const enumExpr$$1 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$63.g, (0, _TastOps.mkSeqTy)(cenv$$63.g, enumElemTy$$6), (0, _TastOps.tyOfExpr)(cenv$$63.g, enumExpr), enumExpr);
  return (0, _TastOps.mkCallSeqCollect)(cenv$$63.g, m$$98, enumElemTy$$6, genResultTy$$1, lam, enumExpr$$1);
}

function mkSeqUsing(cenv$$64, env$$98, m$$99, resourceTy, genTy$$2, resourceExpr, lam$$1) {
  (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$98), cenv$$64.css, m$$99, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$64.g), resourceTy);
  const genResultTy$$2 = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$64, env$$98, m$$99, genTy$$2, (0, _TastOps.mkSeqTy)(cenv$$64.g, genResultTy$$2));
  return (0, _TastOps.mkCallSeqUsing)(cenv$$64.g, m$$99, resourceTy, genResultTy$$2, resourceExpr, lam$$1);
}

function mkSeqDelay(cenv$$65, env$$99, m$$100, genTy$$3, lam$$2) {
  const genResultTy$$3 = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$65, env$$99, m$$100, genTy$$3, (0, _TastOps.mkSeqTy)(cenv$$65.g, genResultTy$$3));
  return (0, _TastOps.mkCallSeqDelay)(cenv$$65.g, m$$100, genResultTy$$3, (0, _TastOps.mkUnitDelayLambda)(cenv$$65.g, m$$100, lam$$2));
}

function mkSeqAppend(cenv$$66, env$$100, m$$101, genTy$$4, e1$$5, e2$$1) {
  const genResultTy$$4 = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$66, env$$100, m$$101, genTy$$4, (0, _TastOps.mkSeqTy)(cenv$$66.g, genResultTy$$4));
  const e1$$6 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$66.g, (0, _TastOps.mkSeqTy)(cenv$$66.g, genResultTy$$4), (0, _TastOps.tyOfExpr)(cenv$$66.g, e1$$5), e1$$5);
  const e2$$2 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$66.g, (0, _TastOps.mkSeqTy)(cenv$$66.g, genResultTy$$4), (0, _TastOps.tyOfExpr)(cenv$$66.g, e2$$1), e2$$1);
  return (0, _TastOps.mkCallSeqAppend)(cenv$$66.g, m$$101, genResultTy$$4, e1$$6, e2$$2);
}

function mkSeqFromFunctions(cenv$$67, env$$101, m$$102, genTy$$5, e1$$7, e2$$3) {
  const genResultTy$$5 = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$67, env$$101, m$$102, genTy$$5, (0, _TastOps.mkSeqTy)(cenv$$67.g, genResultTy$$5));
  const e2$$4 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$67.g, (0, _TastOps.mkSeqTy)(cenv$$67.g, genResultTy$$5), (0, _TastOps.tyOfExpr)(cenv$$67.g, e2$$3), e2$$3);
  return (0, _TastOps.mkCallSeqGenerated)(cenv$$67.g, m$$102, genResultTy$$5, e1$$7, e2$$4);
}

function mkSeqFinally(cenv$$68, env$$102, m$$103, genTy$$6, e1$$8, e2$$5) {
  const genResultTy$$6 = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$68, env$$102, m$$103, genTy$$6, (0, _TastOps.mkSeqTy)(cenv$$68.g, genResultTy$$6));
  const e1$$9 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$68.g, (0, _TastOps.mkSeqTy)(cenv$$68.g, genResultTy$$6), (0, _TastOps.tyOfExpr)(cenv$$68.g, e1$$8), e1$$8);
  return (0, _TastOps.mkCallSeqFinally)(cenv$$68.g, m$$103, genResultTy$$6, e1$$9, e2$$5);
}

function mkSeqExprMatchClauses(pat$0027$$2, vspecs, innerExpr) {
  return (0, _Types.L)(new _PatternMatchCompilation.TypedMatchClause(0, "TClause", pat$0027$$2, null, new _tast.DecisionTreeTarget(0, "TTarget", vspecs, innerExpr, new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), (0, _PatternMatchCompilation.Pattern$$get_Range)(pat$0027$$2)), (0, _Types.L)());
}

function compileSeqExprMatchClauses(cenv$$69, env$$103, inputExprMark, pat$0027$$3, vspecs$$1, innerExpr$$1, bindPatTy, genInnerTy) {
  const patMark = (0, _PatternMatchCompilation.Pattern$$get_Range)(pat$0027$$3);
  const tclauses$$1 = mkSeqExprMatchClauses(pat$0027$$3, vspecs$$1, innerExpr$$1);
  return CompilePatternForMatchClauses(cenv$$69, env$$103, inputExprMark, patMark, false, new _PatternMatchCompilation.ActionOnFailure(0, "ThrowIncompleteMatchException"), bindPatTy, genInnerTy, tclauses$$1);
}

function elimFastIntegerForLoop(spBind$$3, id$$23, start, dir, finish, innerExpr$$2, m$$104) {
  const pseudoEnumExpr = dir ? (0, _ast.mkSynInfix)(m$$104, start, "..", finish) : (0, _ast.mkSynTrifix)(m$$104, ".. ..", start, new _ast.SynExpr(2, "Const", new _ast.SynConst(6, "Int32", -1), (0, _ast.SynExpr$$get_Range)(start)), finish);
  return new _ast.SynExpr(12, "ForEach", spBind$$3, new _ast.SeqExprOnly(0, "SeqExprOnly", false), true, (0, _ast.mkSynPatVar)(null, id$$23), pseudoEnumExpr, innerExpr$$2, m$$104);
}

function $007CExprAsPat$007C_$007C(f$$17) {
  var $target$$243, v1;
  const activePatternResult46840 = (0, _ast.$007CSingleIdent$007C_$007C)(f$$17);

  if (activePatternResult46840 != null) {
    $target$$243 = 0;
    v1 = activePatternResult46840;
  } else {
    const activePatternResult46841 = (0, _ast.$007CSynExprParen$007C_$007C)(f$$17);

    if (activePatternResult46841 != null) {
      const activePatternResult46842 = (0, _ast.$007CSingleIdent$007C_$007C)(activePatternResult46841[0]);

      if (activePatternResult46842 != null) {
        $target$$243 = 0;
        v1 = activePatternResult46842;
      } else {
        $target$$243 = 1;
      }
    } else {
      $target$$243 = 1;
    }
  }

  switch ($target$$243) {
    case 0:
      {
        return (0, _ast.mkSynPatVar)(null, v1);
      }

    case 1:
      {
        var $target$$244, elems;
        const activePatternResult46839 = (0, _ast.$007CSynExprParen$007C_$007C)(f$$17);

        if (activePatternResult46839 != null) {
          if (activePatternResult46839[0].tag === 4) {
            $target$$244 = 0;
            elems = activePatternResult46839[0].fields[0];
          } else {
            $target$$244 = 1;
          }
        } else {
          $target$$244 = 1;
        }

        switch ($target$$244) {
          case 0:
            {
              const elems$$1 = (0, _List.map)(_ast.$007CSingleIdent$007C_$007C, elems);

              if ((0, _List.forAll)(function predicate$$21(x$$39) {
                return x$$39 != null;
              }, elems$$1)) {
                return new _ast.SynPat(8, "Tuple", (0, _List.map)(function mapping$$15(x$$40) {
                  return (0, _ast.mkSynPatVar)(null, x$$40);
                }, elems$$1), (0, _ast.SynExpr$$get_Range)(f$$17));
              } else {
                return null;
              }
            }

          case 1:
            {
              return null;
            }
        }
      }
  }
}

function $007CSimpleSemicolonSequence$007C_$007C(acceptDeprecated, c$$9) {
  const YieldFree = function YieldFree(expr$$15) {
    YieldFree: while (true) {
      var $target$$245, clauses$$2, body$$2;

      switch (expr$$15.tag) {
        case 26:
          $target$$245 = 0;
          break;

        case 27:
          $target$$245 = 1;
          break;

        case 23:
          $target$$245 = 2;
          break;

        case 17:
          $target$$245 = 3;
          clauses$$2 = expr$$15.fields[2];
          break;

        case 51:
          $target$$245 = 3;
          clauses$$2 = expr$$15.fields[2];
          break;

        case 11:
          $target$$245 = 4;
          body$$2 = expr$$15.fields[5];
          break;

        case 24:
          $target$$245 = 4;
          body$$2 = expr$$15.fields[0];
          break;

        case 22:
          $target$$245 = 4;
          body$$2 = expr$$15.fields[3];
          break;

        case 10:
          $target$$245 = 4;
          body$$2 = expr$$15.fields[2];
          break;

        case 12:
          $target$$245 = 4;
          body$$2 = expr$$15.fields[5];
          break;

        case 49:
        case 48:
        case 50:
        case 47:
        case 18:
          $target$$245 = 5;
          break;

        default:
          $target$$245 = 6;
      }

      switch ($target$$245) {
        case 0:
          {
            const e2$$6 = expr$$15.fields[3];
            const e1$$10 = expr$$15.fields[2];

            if (YieldFree(e1$$10)) {
              expr$$15 = e2$$6;
              continue YieldFree;
            } else {
              return false;
            }
          }

        case 1:
          {
            const e3opt = expr$$15.fields[2];
            const e2$$7 = expr$$15.fields[1];

            if (YieldFree(e2$$7)) {
              return (0, _Seq.forAll)(YieldFree, (0, _Option.defaultArg)(e3opt, [], function ($x$$14) {
                return [$x$$14];
              }));
            } else {
              return false;
            }
          }

        case 2:
          {
            const e1$$11 = expr$$15.fields[0];
            const clauses$$1 = expr$$15.fields[2];

            if (YieldFree(e1$$11)) {
              return (0, _List.forAll)(function predicate$$22(_arg1$$27) {
                const e$$19 = _arg1$$27.fields[2];
                return YieldFree(e$$19);
              }, clauses$$1);
            } else {
              return false;
            }
          }

        case 3:
          {
            return (0, _List.forAll)(function predicate$$23(_arg2$$6) {
              const e$$20 = _arg2$$6.fields[2];
              return YieldFree(e$$20);
            }, clauses$$2);
          }

        case 4:
          {
            expr$$15 = body$$2;
            continue YieldFree;
          }

        case 5:
          {
            return false;
          }

        case 6:
          {
            return true;
          }
      }
    }
  };

  const IsSimpleSemicolonSequenceElement = function IsSimpleSemicolonSequenceElement(expr$$16) {
    var $target$$246;

    if (expr$$16.tag === 27) {
      if (acceptDeprecated ? YieldFree(expr$$16) : false) {
        $target$$246 = 0;
      } else {
        $target$$246 = 1;
      }
    } else {
      $target$$246 = 1;
    }

    switch ($target$$246) {
      case 0:
        {
          return true;
        }

      case 1:
        {
          var $target$$247;

          switch (expr$$16.tag) {
            case 27:
            case 23:
            case 17:
            case 11:
            case 12:
            case 24:
            case 49:
            case 48:
            case 22:
            case 18:
            case 51:
            case 50:
            case 47:
            case 10:
              $target$$247 = 0;
              break;

            default:
              $target$$247 = 1;
          }

          switch ($target$$247) {
            case 0:
              {
                return false;
              }

            case 1:
              {
                return true;
              }
          }
        }
    }
  };

  const GetSimpleSemicolonSequenceOfComprehension = function GetSimpleSemicolonSequenceOfComprehension(expr$$17, acc$$4) {
    GetSimpleSemicolonSequenceOfComprehension: while (true) {
      var $target$$248, e1$$12, e2$$8, e$$21;

      if (expr$$17.tag === 26) {
        if (expr$$17.fields[1]) {
          $target$$248 = 0;
          e1$$12 = expr$$17.fields[2];
          e2$$8 = expr$$17.fields[3];
        } else {
          $target$$248 = 1;
          e$$21 = expr$$17;
        }
      } else {
        $target$$248 = 1;
        e$$21 = expr$$17;
      }

      switch ($target$$248) {
        case 0:
          {
            if (IsSimpleSemicolonSequenceElement(e1$$12)) {
              expr$$17 = e2$$8;
              acc$$4 = (0, _Types.L)(e1$$12, acc$$4);
              continue GetSimpleSemicolonSequenceOfComprehension;
            } else {
              return null;
            }
          }

        case 1:
          {
            if (IsSimpleSemicolonSequenceElement(e$$21)) {
              return (0, _List.reverse)((0, _Types.L)(e$$21, acc$$4));
            } else {
              return null;
            }
          }
      }
    }
  };

  if (YieldFree(c$$9)) {
    return GetSimpleSemicolonSequenceOfComprehension(c$$9, (0, _Types.L)());
  } else {
    return null;
  }
}

const MutRecShape$00605 = (0, _Types.declare)(function MutRecShape$00605(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecShape$00605 = MutRecShape$00605;

function MutRecShapes$$$map(f1, f2, f3, x$$41) {
  return (0, _List.map)(function mapping$$16(_arg1$$28) {
    switch (_arg1$$28.tag) {
      case 3:
        {
          const b$$22 = _arg1$$28.fields[0];
          return new MutRecShape$00605(3, "ModuleAbbrev", b$$22);
        }

      case 0:
        {
          const a$$21 = _arg1$$28.fields[0];
          return new MutRecShape$00605(0, "Tycon", f1(a$$21));
        }

      case 1:
        {
          const b$$23 = _arg1$$28.fields[0];
          return new MutRecShape$00605(1, "Lets", f2(b$$23));
        }

      case 2:
        {
          const d$$2 = _arg1$$28.fields[1];
          const c$$10 = _arg1$$28.fields[0];
          return new MutRecShape$00605(2, "Module", f3(c$$10), MutRecShapes$$$map(f1, f2, f3, d$$2));
        }

      default:
        {
          const a$$20 = _arg1$$28.fields[0];
          return new MutRecShape$00605(4, "Open", a$$20);
        }
    }
  }, x$$41);
}

function MutRecShapes$$$mapTycons(f1$$1, xs) {
  return MutRecShapes$$$map(f1$$1, function (x$$42) {
    return x$$42;
  }, function (x$$43) {
    return x$$43;
  }, xs);
}

function MutRecShapes$$$mapTyconsAndLets(f1$$2, f2$$1, xs$$1) {
  return MutRecShapes$$$map(f1$$2, f2$$1, function (x$$44) {
    return x$$44;
  }, xs$$1);
}

function MutRecShapes$$$mapLets(f2$$2, xs$$2) {
  return MutRecShapes$$$map(function (x$$45) {
    return x$$45;
  }, f2$$2, function (x$$46) {
    return x$$46;
  }, xs$$2);
}

function MutRecShapes$$$mapModules(f1$$3, xs$$3) {
  return MutRecShapes$$$map(function (x$$47) {
    return x$$47;
  }, function (x$$48) {
    return x$$48;
  }, f1$$3, xs$$3);
}

function MutRecShapes$$$mapWithEnv(fTycon, fLets, env$$104, x$$49) {
  return (0, _List.map)(function mapping$$17(_arg1$$29) {
    switch (_arg1$$29.tag) {
      case 3:
        {
          const a$$23 = _arg1$$29.fields[0];
          return new MutRecShape$00605(3, "ModuleAbbrev", a$$23);
        }

      case 0:
        {
          const a$$24 = _arg1$$29.fields[0];
          return new MutRecShape$00605(0, "Tycon", fTycon(env$$104, a$$24));
        }

      case 1:
        {
          const b$$24 = _arg1$$29.fields[0];
          return new MutRecShape$00605(1, "Lets", fLets(env$$104, b$$24));
        }

      case 2:
        {
          const env2 = _arg1$$29.fields[0][1];
          const d$$3 = _arg1$$29.fields[1];
          const c$$11 = _arg1$$29.fields[0][0];
          return new MutRecShape$00605(2, "Module", [c$$11, env2], MutRecShapes$$$mapWithEnv(fTycon, fLets, env2, d$$3));
        }

      default:
        {
          const a$$22 = _arg1$$29.fields[0];
          return new MutRecShape$00605(4, "Open", a$$22);
        }
    }
  }, x$$49);
}

function MutRecShapes$$$mapTyconsWithEnv(f1$$4, env$$105, xs$$4) {
  return MutRecShapes$$$mapWithEnv(f1$$4, function (_env, x$$50) {
    return x$$50;
  }, env$$105, xs$$4);
}

function MutRecShapes$$$mapWithParent(parent, f1$$5, f2$$3, f3$$1, xs$$5) {
  return (0, _List.map)(function mapping$$18(_arg1$$30) {
    switch (_arg1$$30.tag) {
      case 3:
        {
          const a$$26 = _arg1$$30.fields[0];
          return new MutRecShape$00605(3, "ModuleAbbrev", a$$26);
        }

      case 0:
        {
          const a$$27 = _arg1$$30.fields[0];
          return new MutRecShape$00605(0, "Tycon", f2$$3(parent, a$$27));
        }

      case 1:
        {
          const b$$25 = _arg1$$30.fields[0];
          return new MutRecShape$00605(1, "Lets", f3$$1(parent, b$$25));
        }

      case 2:
        {
          const d$$4 = _arg1$$30.fields[1];
          const c$$12 = _arg1$$30.fields[0];
          const patternInput$$66 = f1$$5(parent, c$$12, d$$4);
          return new MutRecShape$00605(2, "Module", patternInput$$66[0], MutRecShapes$$$mapWithParent(patternInput$$66[1], f1$$5, f2$$3, f3$$1, d$$4));
        }

      default:
        {
          const a$$25 = _arg1$$30.fields[0];
          return new MutRecShape$00605(4, "Open", a$$25);
        }
    }
  }, xs$$5);
}

function MutRecShapes$$$computeEnvs(f1$$6, f2$$4, env$$106, xs$$6) {
  const env$$107 = f2$$4(env$$106, xs$$6);
  return [env$$107, (0, _List.map)(function mapping$$19(_arg1$$31) {
    switch (_arg1$$31.tag) {
      case 3:
        {
          const a$$29 = _arg1$$31.fields[0];
          return new MutRecShape$00605(3, "ModuleAbbrev", a$$29);
        }

      case 0:
        {
          const a$$30 = _arg1$$31.fields[0];
          return new MutRecShape$00605(0, "Tycon", a$$30);
        }

      case 1:
        {
          const b$$26 = _arg1$$31.fields[0];
          return new MutRecShape$00605(1, "Lets", b$$26);
        }

      case 2:
        {
          const ds = _arg1$$31.fields[1];
          const c$$13 = _arg1$$31.fields[0];
          const env2$$1 = f1$$6(env$$107, c$$13);
          const patternInput$$67 = MutRecShapes$$$computeEnvs(f1$$6, f2$$4, env2$$1, ds);
          return new MutRecShape$00605(2, "Module", [c$$13, patternInput$$67[0]], patternInput$$67[1]);
        }

      default:
        {
          const a$$28 = _arg1$$31.fields[0];
          return new MutRecShape$00605(4, "Open", a$$28);
        }
    }
  }, xs$$6)];
}

function MutRecShapes$$$extendEnvs(f1$$7, env$$108, xs$$7) {
  const env$$109 = f1$$7(env$$108, xs$$7);
  return [env$$109, (0, _List.map)(function mapping$$20(_arg1$$32) {
    if (_arg1$$32.tag === 2) {
      const env$$110 = _arg1$$32.fields[0][1];
      const ds$$1 = _arg1$$32.fields[1];
      const c$$14 = _arg1$$32.fields[0][0];
      const patternInput$$68 = MutRecShapes$$$extendEnvs(f1$$7, env$$110, ds$$1);
      return new MutRecShape$00605(2, "Module", [c$$14, patternInput$$68[0]], patternInput$$68[1]);
    } else {
      const x$$51 = _arg1$$32;
      return x$$51;
    }
  }, xs$$7)];
}

function MutRecShapes$$$dropEnvs(xs$$8) {
  return MutRecShapes$$$mapModules(function f1$$8(tuple$$5) {
    return tuple$$5[0];
  }, xs$$8);
}

function MutRecShapes$$$expandTyconsWithEnv(f1$$9, env$$111, xs$$10) {
  const patternInput$$69 = (0, _List.unzip)((0, _List.map)(function mapping$$21(elem) {
    if (elem.tag === 0) {
      const a$$31 = elem.fields[0];
      return f1$$9(env$$111, a$$31);
    } else {
      return [(0, _Types.L)(), (0, _Types.L)()];
    }
  }, xs$$10));
  return (0, _List.append)((0, _Types.L)(new MutRecShape$00605(1, "Lets", (0, _List.concat)(patternInput$$69[0])), (0, _Types.L)()), (0, _List.append)((0, _List.map)(function mapping$$22(elem$$1) {
    if (elem$$1.tag === 2) {
      const env2$$3 = elem$$1.fields[0][1];
      const d$$5 = elem$$1.fields[1];
      const c$$15 = elem$$1.fields[0][0];
      return new MutRecShape$00605(2, "Module", [c$$15, env2$$3], MutRecShapes$$$expandTyconsWithEnv(f1$$9, env2$$3, d$$5));
    } else {
      return elem$$1;
    }
  }, xs$$10), (0, _Types.L)(new MutRecShape$00605(1, "Lets", (0, _List.concat)(patternInput$$69[1])), (0, _Types.L)())));
}

function MutRecShapes$$$mapFoldWithEnv(f1$$10, z, env$$112, xs$$11) {
  return (0, _List.mapFold)(function mapping$$23(z$$1, x$$52) {
    if (x$$52.tag === 2) {
      const env2$$4 = x$$52.fields[0][1];
      const ds$$2 = x$$52.fields[1];
      const c$$16 = x$$52.fields[0][0];
      const patternInput$$70 = MutRecShapes$$$mapFoldWithEnv(f1$$10, z$$1, env2$$4, ds$$2);
      return [new MutRecShape$00605(2, "Module", [c$$16, env2$$4], patternInput$$70[0]), patternInput$$70[1]];
    } else {
      const patternInput$$71 = f1$$10(z$$1, env$$112, x$$52);
      return [patternInput$$71[0], patternInput$$71[1]];
    }
  }, z, xs$$11);
}

function MutRecShapes$$$collectTycons(x$$53) {
  return (0, _List.collect)(function mapping$$24(_arg1$$33) {
    switch (_arg1$$33.tag) {
      case 0:
        {
          const a$$32 = _arg1$$33.fields[0];
          return (0, _Types.L)(a$$32, (0, _Types.L)());
        }

      case 2:
        {
          const d$$6 = _arg1$$33.fields[1];
          return MutRecShapes$$$collectTycons(d$$6);
        }

      default:
        {
          return (0, _Types.L)();
        }
    }
  }, x$$53);
}

function MutRecShapes$$$topTycons(x$$54) {
  return (0, _List.choose)(function chooser$$1(_arg1$$34) {
    if (_arg1$$34.tag === 0) {
      const a$$33 = _arg1$$34.fields[0];
      return (0, _Option.some)(a$$33);
    } else {
      return null;
    }
  }, x$$54);
}

function MutRecShapes$$$iter(f1$$11, f2$$5, f3$$2, f4, f5, x$$55) {
  (0, _List.iterate)(function action$$8(_arg1$$35) {
    switch (_arg1$$35.tag) {
      case 1:
        {
          const b$$27 = _arg1$$35.fields[0];
          f2$$5(b$$27);
          break;
        }

      case 2:
        {
          const d$$7 = _arg1$$35.fields[1];
          const c$$17 = _arg1$$35.fields[0];
          f3$$2(c$$17);
          MutRecShapes$$$iter(f1$$11, f2$$5, f3$$2, f4, f5, d$$7);
          break;
        }

      case 4:
        {
          const a$$35 = _arg1$$35.fields[0];
          f4(a$$35);
          break;
        }

      case 3:
        {
          const a$$36 = _arg1$$35.fields[0];
          f5(a$$36);
          break;
        }

      default:
        {
          const a$$34 = _arg1$$35.fields[0];
          f1$$11(a$$34);
        }
    }
  }, x$$55);
}

function MutRecShapes$$$iterTycons(f1$$12, x$$56) {
  MutRecShapes$$$iter(f1$$12, function (value$$5) {
    value$$5;
  }, function (value$$6) {
    value$$6;
  }, function (value$$7) {
    value$$7;
  }, function (value$$8) {
    value$$8;
  }, x$$56);
}

function MutRecShapes$$$iterTyconsAndLets(f1$$13, f2$$6, x$$57) {
  MutRecShapes$$$iter(f1$$13, f2$$6, function (value$$9) {
    value$$9;
  }, function (value$$10) {
    value$$10;
  }, function (value$$11) {
    value$$11;
  }, x$$57);
}

function MutRecShapes$$$iterModules(f1$$14, x$$58) {
  MutRecShapes$$$iter(function (value$$12) {
    value$$12;
  }, function (value$$13) {
    value$$13;
  }, f1$$14, function (value$$14) {
    value$$14;
  }, function (value$$15) {
    value$$15;
  }, x$$58);
}

function MutRecShapes$$$iterWithEnv(f1$$15, f2$$7, f3$$3, f4$$1, env$$113, x$$59) {
  (0, _List.iterate)(function action$$9(_arg1$$36) {
    switch (_arg1$$36.tag) {
      case 1:
        {
          const b$$28 = _arg1$$36.fields[0];
          f2$$7(env$$113, b$$28);
          break;
        }

      case 2:
        {
          const env$$114 = _arg1$$36.fields[0][1];
          const d$$8 = _arg1$$36.fields[1];
          MutRecShapes$$$iterWithEnv(f1$$15, f2$$7, f3$$3, f4$$1, env$$114, d$$8);
          break;
        }

      case 4:
        {
          const a$$38 = _arg1$$36.fields[0];
          f3$$3(env$$113, a$$38);
          break;
        }

      case 3:
        {
          const a$$39 = _arg1$$36.fields[0];
          f4$$1(env$$113, a$$39);
          break;
        }

      default:
        {
          const a$$37 = _arg1$$36.fields[0];
          f1$$15(env$$113, a$$37);
        }
    }
  }, x$$59);
}

function MutRecShapes$$$iterTyconsWithEnv(f1$$16, env$$115, xs$$12) {
  MutRecShapes$$$iterWithEnv(f1$$16, function (_env$$1, _x$$1) {}, function (_env$$2, _x$$2) {}, function (_env$$3, _x$$3) {}, env$$115, xs$$12);
}

const InitializationGraphAnalysisState = (0, _Types.declare)(function InitializationGraphAnalysisState(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.InitializationGraphAnalysisState = InitializationGraphAnalysisState;
const PreInitializationGraphEliminationBinding = (0, _Types.declare)(function PreInitializationGraphEliminationBinding(arg1, arg2) {
  this.FixupPoints = arg1;
  this.Binding = arg2;
}, _Types.Record);
exports.PreInitializationGraphEliminationBinding = PreInitializationGraphEliminationBinding;

function EliminateInitializationGraphs(getTyconBinds, morphTyconBinds, getLetBinds, morphLetBinds, g$$30, mustHaveArity, denv$$18, fixupsAndBindingsWithoutLaziness, bindsm) {
  let recursiveVals;
  const hash = (0, _TastOps.ValHash$00601$$$Create)();

  const add = function add(pgrbind) {
    const c$$18 = (0, _tast.Binding$$get_Var)(pgrbind.Binding);
    (0, _TastOps.ValHash$00601$$Add$$1EAE66D0)(hash, c$$18, c$$18);
  };

  MutRecShapes$$$iterTyconsAndLets(function f1$$17($arg$$15) {
    (0, _List.iterate)(add, getTyconBinds($arg$$15));
  }, function f2$$8($arg$$16) {
    (0, _List.iterate)(add, getLetBinds($arg$$16));
  }, fixupsAndBindingsWithoutLaziness);
  recursiveVals = hash;
  const outOfOrder = new _Types.FSharpRef(false);
  const runtimeChecks = new _Types.FSharpRef(false);
  const directRecursiveData = new _Types.FSharpRef(false);
  const reportedEager = new _Types.FSharpRef(false);
  const definiteDependencies = new _Types.FSharpRef((0, _Types.L)());

  const stripChooseAndExpr = function stripChooseAndExpr(e$$22) {
    stripChooseAndExpr: while (true) {
      const matchValue$$62 = (0, _TastOps.stripExpr)(e$$22);

      if (matchValue$$62.tag === 13) {
        const b$$29 = matchValue$$62.fields[1];
        e$$22 = b$$29;
        continue stripChooseAndExpr;
      } else {
        const e$$23 = matchValue$$62;
        return e$$23;
      }
    }
  };

  const availIfInOrder = (0, _TastOps.ValHash$00601$$$Create)();

  const check$$1 = function check$$1(boundv, expr$$18) {
    const strict = function strict(_arg1$$37) {
      var $target$$319;

      switch (_arg1$$37.tag) {
        case 4:
          $target$$319 = 1;
          break;

        case 0:
        case 2:
        case 1:
          $target$$319 = 2;
          break;

        default:
          $target$$319 = 0;
      }

      switch ($target$$319) {
        case 0:
          {
            return new InitializationGraphAnalysisState(3, "MaybeLazy");
          }

        case 1:
          {
            return new InitializationGraphAnalysisState(4, "DefinitelyLazy");
          }

        case 2:
          {
            return new InitializationGraphAnalysisState(2, "DefinitelyStrict");
          }
      }
    };

    const lzy = function lzy(_arg2$$7) {
      var $target$$320;

      switch (_arg2$$7.tag) {
        case 1:
        case 4:
          $target$$320 = 0;
          break;

        case 3:
        case 2:
          $target$$320 = 1;
          break;

        default:
          $target$$320 = 0;
      }

      switch ($target$$320) {
        case 0:
          {
            return new InitializationGraphAnalysisState(4, "DefinitelyLazy");
          }

        case 1:
          {
            return new InitializationGraphAnalysisState(3, "MaybeLazy");
          }
      }
    };

    const fixable = function fixable(_arg3$$4) {
      var $target$$321;

      switch (_arg3$$4.tag) {
        case 1:
          $target$$321 = 0;
          break;

        case 2:
          $target$$321 = 1;
          break;

        case 3:
          $target$$321 = 2;
          break;

        case 4:
          $target$$321 = 3;
          break;

        default:
          $target$$321 = 0;
      }

      switch ($target$$321) {
        case 0:
          {
            return new InitializationGraphAnalysisState(1, "InnerTop");
          }

        case 1:
          {
            return new InitializationGraphAnalysisState(2, "DefinitelyStrict");
          }

        case 2:
          {
            return new InitializationGraphAnalysisState(3, "MaybeLazy");
          }

        case 3:
          {
            return new InitializationGraphAnalysisState(4, "DefinitelyLazy");
          }
      }
    };

    const CheckExpr = function CheckExpr(st) {
      return function (e$$24) {
        const matchValue$$63 = stripChooseAndExpr(e$$24);
        var $target$$322, b$$30, b$$31, e$$25, extraImpls, overrides, ty$$40, m$$105, v$$17, args$$13, binds$$1, e$$30, bind$$1, e$$31, pt$$1, targets$$1, args$$14, e1$$13, e1$$14, e2$$9, args$$15, m$$106, op$$1, eref$$1, b$$32;

        if (matchValue$$63.tag === 4) {
          $target$$322 = 1;
          b$$31 = matchValue$$63.fields[2];
        } else if (matchValue$$63.tag === 8) {
          $target$$322 = 2;
          e$$25 = matchValue$$63.fields[3];
          extraImpls = matchValue$$63.fields[5];
          overrides = matchValue$$63.fields[4];
          ty$$40 = matchValue$$63.fields[1];
        } else if (matchValue$$63.tag === 1) {
          $target$$322 = 3;
          m$$105 = matchValue$$63.fields[2];
          v$$17 = matchValue$$63.fields[0];
        } else if (matchValue$$63.tag === 11) {
          if (matchValue$$63.fields[0].tag === 2) {
            $target$$322 = 4;
            args$$13 = matchValue$$63.fields[2];
          } else if (matchValue$$63.fields[0].tag === 0) {
            $target$$322 = 4;
            args$$13 = matchValue$$63.fields[2];
          } else if (matchValue$$63.fields[0].tag === 10) {
            $target$$322 = 4;
            args$$13 = matchValue$$63.fields[2];
          } else {
            $target$$322 = 11;
            args$$15 = matchValue$$63.fields[2];
            m$$106 = matchValue$$63.fields[3];
            op$$1 = matchValue$$63.fields[0];
          }
        } else if (matchValue$$63.tag === 0) {
          $target$$322 = 5;
        } else if (matchValue$$63.tag === 6) {
          $target$$322 = 6;
          binds$$1 = matchValue$$63.fields[0];
          e$$30 = matchValue$$63.fields[1];
        } else if (matchValue$$63.tag === 7) {
          $target$$322 = 7;
          bind$$1 = matchValue$$63.fields[0];
          e$$31 = matchValue$$63.fields[1];
        } else if (matchValue$$63.tag === 9) {
          $target$$322 = 8;
          pt$$1 = matchValue$$63.fields[2];
          targets$$1 = matchValue$$63.fields[3];
        } else if (matchValue$$63.tag === 5) {
          $target$$322 = 9;
          args$$14 = matchValue$$63.fields[3];
          e1$$13 = matchValue$$63.fields[0];
        } else if (matchValue$$63.tag === 2) {
          $target$$322 = 10;
          e1$$14 = matchValue$$63.fields[0];
          e2$$9 = matchValue$$63.fields[1];
        } else if (matchValue$$63.tag === 10) {
          $target$$322 = 10;
          e1$$14 = matchValue$$63.fields[1];
          e2$$9 = matchValue$$63.fields[2];
        } else if (matchValue$$63.tag === 14) {
          $target$$322 = 12;
          eref$$1 = matchValue$$63.fields[0];
        } else if (matchValue$$63.tag === 13) {
          $target$$322 = 13;
          b$$32 = matchValue$$63.fields[1];
        } else if (matchValue$$63.tag === 12) {
          $target$$322 = 14;
        } else {
          $target$$322 = 0;
          b$$30 = matchValue$$63.fields[4];
        }

        switch ($target$$322) {
          case 0:
            {
              checkDelayed(st)(b$$30);
              break;
            }

          case 1:
            {
              CheckExpr(st)(b$$31);
              break;
            }

          case 2:
            {
              if ((0, _TastOps.isInterfaceTy)(g$$30, ty$$40)) {
                (0, _List.iterate)(function (_arg1$$38) {
                  const e$$26 = _arg1$$38.fields[4];
                  checkDelayed(st)(e$$26);
                }, overrides);
                (0, _List.iterate)(function ($arg$$17) {
                  (0, _List.iterate)(function action$$10(_arg2$$8) {
                    const e$$27 = _arg2$$8.fields[4];
                    checkDelayed(st)(e$$27);
                  }, $arg$$17[1]);
                }, extraImpls);
              } else {
                CheckExpr(strict(st))(e$$25);
                (0, _List.iterate)(function (_arg3$$5) {
                  const e$$28 = _arg3$$5.fields[4];
                  CheckExpr(lzy(strict(st)))(e$$28);
                }, overrides);
                (0, _List.iterate)(function ($arg$$18) {
                  (0, _List.iterate)(function action$$11(_arg4$$3) {
                    const e$$29 = _arg4$$3.fields[4];
                    CheckExpr(lzy(strict(st)))(e$$29);
                  }, $arg$$18[1]);
                }, extraImpls);
              }

              break;
            }

          case 3:
            {
              CheckValRef(st)(v$$17)(m$$105);
              break;
            }

          case 4:
            {
              (0, _List.iterate)(CheckExpr(fixable(st)), args$$13);
              break;
            }

          case 6:
            {
              (0, _List.iterate)(CheckBinding(strict(st)), binds$$1);
              CheckExpr(strict(st))(e$$30);
              break;
            }

          case 7:
            {
              CheckBinding(strict(st))(bind$$1);
              CheckExpr(strict(st))(e$$31);
              break;
            }

          case 8:
            {
              CheckDecisionTree(strict(st))(pt$$1);
              targets$$1.forEach(CheckDecisionTreeTarget(strict(st)));
              break;
            }

          case 9:
            {
              CheckExpr(strict(st))(e1$$13);
              (0, _List.iterate)(CheckExpr(strict(st)), args$$14);
              break;
            }

          case 10:
            {
              CheckExpr(strict(st))(e1$$14);
              CheckExpr(strict(st))(e2$$9);
              break;
            }

          case 11:
            {
              CheckExprOp(st)(op$$1)(m$$106);
              (0, _List.iterate)(CheckExpr(strict(st)), args$$15);
              break;
            }

          case 12:
            {
              CheckExpr(st)(eref$$1.contents);
              break;
            }

          case 13:
            {
              CheckExpr(st)(b$$32);
              break;
            }
        }
      };
    };

    const CheckBinding = function CheckBinding(st$$1) {
      return function (_arg4$$4) {
        const e$$32 = _arg4$$4.fields[1];
        CheckExpr(st$$1)(e$$32);
      };
    };

    const CheckDecisionTree = function CheckDecisionTree(st$$2) {
      return function (_arg6$$3) {
        switch (_arg6$$3.tag) {
          case 1:
            {
              const es = _arg6$$3.fields[0];
              (0, _List.iterate)(CheckExpr(st$$2), es);
              break;
            }

          case 2:
            {
              const e$$33 = _arg6$$3.fields[1];
              const bind$$2 = _arg6$$3.fields[0];
              CheckBinding(st$$2)(bind$$2);
              CheckDecisionTree(st$$2)(e$$33);
              break;
            }

          default:
            {
              const e1$$15 = _arg6$$3.fields[0];
              const dflt = _arg6$$3.fields[2];
              const csl = _arg6$$3.fields[1];
              CheckExpr(st$$2)(e1$$15);
              (0, _List.iterate)(function (_arg5$$3) {
                const d$$9 = _arg5$$3.fields[1];
                CheckDecisionTree(st$$2)(d$$9);
              }, csl);
              (0, _Seq.iterate)(CheckDecisionTree(st$$2), (0, _Option.defaultArg)(dflt, [], function ($x$$19) {
                return [$x$$19];
              }));
            }
        }
      };
    };

    const CheckDecisionTreeTarget = function CheckDecisionTreeTarget(st$$3) {
      return function (_arg5$$4) {
        const e$$34 = _arg5$$4.fields[1];
        CheckExpr(st$$3)(e$$34);
      };
    };

    const CheckExprOp = function CheckExprOp(st$$4) {
      return function (op$$2) {
        return function (m$$107) {
          if (op$$2.tag === 30) {
            const lvr = op$$2.fields[1];
            CheckValRef(strict(st$$4))(lvr)(m$$107);
          }
        };
      };
    };

    const CheckValRef = function CheckValRef(st$$5) {
      return function (v$$18) {
        return function (m$$108) {
          var $target$$323;

          switch (st$$5.tag) {
            case 0:
            case 2:
              $target$$323 = 1;
              break;

            case 1:
              $target$$323 = 2;
              break;

            case 4:
              $target$$323 = 3;
              break;

            default:
              $target$$323 = 0;
          }

          switch ($target$$323) {
            case 0:
              {
                if ((0, _TastOps.ValHash$00601$$TryFind$$7D0CFEA5)(recursiveVals, (0, _tast.ValRef$$get_Deref)(v$$18)) != null) {
                  (0, _ErrorLogger.warning)(new RecursiveUseCheckedAtRuntime(denv$$18, v$$18, m$$108));

                  if (!reportedEager.contents) {
                    (0, _ErrorLogger.warning)(new LetRecCheckedAtRuntime(m$$108));
                    reportedEager.contents = true;
                  }

                  runtimeChecks.contents = true;
                }

                break;
              }

            case 1:
              {
                if ((0, _TastOps.ValHash$00601$$TryFind$$7D0CFEA5)(recursiveVals, (0, _tast.ValRef$$get_Deref)(v$$18)) != null) {
                  if ((0, _TastOps.ValHash$00601$$TryFind$$7D0CFEA5)(availIfInOrder, (0, _tast.ValRef$$get_Deref)(v$$18)) == null) {
                    (0, _ErrorLogger.warning)(new LetRecEvaluatedOutOfOrder(denv$$18, boundv, v$$18, m$$108));
                    outOfOrder.contents = true;

                    if (!reportedEager.contents) {
                      (0, _ErrorLogger.warning)(new LetRecCheckedAtRuntime(m$$108));
                      reportedEager.contents = true;
                    }
                  }

                  definiteDependencies.contents = (0, _Types.L)([boundv, v$$18], definiteDependencies.contents);
                }

                break;
              }

            case 2:
              {
                if ((0, _TastOps.ValHash$00601$$TryFind$$7D0CFEA5)(recursiveVals, (0, _tast.ValRef$$get_Deref)(v$$18)) != null) {
                  directRecursiveData.contents = true;
                }

                break;
              }
          }
        };
      };
    };

    const checkDelayed = function checkDelayed(st$$6) {
      return function (b$$33) {
        var $target$$324;

        switch (st$$6.tag) {
          case 2:
            $target$$324 = 0;
            break;

          case 4:
          case 0:
          case 1:
            $target$$324 = 1;
            break;

          default:
            $target$$324 = 0;
        }

        switch ($target$$324) {
          case 0:
            {
              CheckExpr(new InitializationGraphAnalysisState(3, "MaybeLazy"))(b$$33);
              break;
            }
        }
      };
    };

    CheckExpr(new InitializationGraphAnalysisState(0, "Top"))(expr$$18);
  };

  const checkBind = function checkBind(pgrbind$$1) {
    const v$$19 = pgrbind$$1.Binding.fields[0];
    const e$$35 = pgrbind$$1.Binding.fields[1];
    check$$1((0, _tast.mkLocalValRef)(v$$19), e$$35);
    (0, _TastOps.ValHash$00601$$Add$$1EAE66D0)(availIfInOrder, v$$19, 1);
  };

  MutRecShapes$$$iterTyconsAndLets(function f1$$18($arg$$20) {
    (0, _List.iterate)(checkBind, getTyconBinds($arg$$20));
  }, function f2$$9($arg$$21) {
    (0, _List.iterate)(checkBind, getLetBinds($arg$$21));
  }, fixupsAndBindingsWithoutLaziness);
  const ddgNodes = (0, _List.map)(_tast.mkLocalValRef, (0, _List.ofSeq)((0, _TastOps.ValHash$00601$$get_Values)(recursiveVals)));
  const ddg = (0, _lib.Graph$00602$$$$002Ector$$10CBBCD)(function (v$$21) {
    return (0, _tast.ValRef$$get_Stamp)(v$$21);
  }, ddgNodes, definiteDependencies.contents);
  (0, _lib.Graph$00602$$IterateCycles$$Z6F3E1F4B)(ddg, function (path$$1) {
    (0, _ErrorLogger.error)(new LetRecUnsound(denv$$18, path$$1, (0, _tast.ValRef$$get_Range)((0, _List.head)(path$$1))));
  });
  const requiresLazyBindings = runtimeChecks.contents ? true : outOfOrder.contents;

  if (directRecursiveData.contents ? requiresLazyBindings : false) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidMixtureOfRecursiveForms)(), bindsm));
  }

  if (requiresLazyBindings) {
    const morphBinding = function morphBinding(pgrbind$$2) {
      const fixupPoints = pgrbind$$2.FixupPoints.fields[0];
      const v$$22 = pgrbind$$2.Binding.fields[0];
      const seqPtOpt = pgrbind$$2.Binding.fields[2];
      const e$$36 = pgrbind$$2.Binding.fields[1];
      const matchValue$$64 = stripChooseAndExpr(e$$36);
      var $target$$325;

      switch (matchValue$$64.tag) {
        case 3:
        case 4:
          $target$$325 = 0;
          break;

        default:
          $target$$325 = 1;
      }

      switch ($target$$325) {
        case 0:
          {
            return [(0, _Types.L)(), (0, _Types.L)((0, _TastOps.mkInvisibleBind)(v$$22, e$$36), (0, _Types.L)())];
          }

        case 1:
          {
            const ty$$41 = (0, _tast.Val$$get_Type)(v$$22);
            const m$$109 = (0, _tast.Val$$get_Range)(v$$22);
            const vty$$3 = (0, _TastOps.mkLazyTy)(g$$30, ty$$41);
            const fty$$2 = (0, _TastOps.op_MinusMinusGreater)((0, _TcGlobals.TcGlobals$$get_unit_ty)(g$$30), ty$$41);
            const patternInput$$75 = (0, _TastOps.mkCompGenLocal)(m$$109, (0, _tast.Val$$get_LogicalName)(v$$22), fty$$2);
            const frhs = (0, _TastOps.mkUnitDelayLambda)(g$$30, m$$109, e$$36);

            if (mustHaveArity) {
              (0, _tast.Val$$SetValReprInfo$$Z35BE7615)(patternInput$$75[0], (0, _TastOps.InferArityOfExpr)(g$$30, new _TastOps.AllowTypeDirectedDetupling(0, "Yes"), fty$$2, (0, _Types.L)(), (0, _Types.L)(), frhs));
            }

            const patternInput$$76 = (0, _TastOps.mkCompGenLocal)(m$$109, (0, _tast.Val$$get_LogicalName)(v$$22), vty$$3);
            const vrhs = (0, _TastOps.mkLazyDelayed)(g$$30, m$$109, ty$$41, patternInput$$75[1]);

            if (mustHaveArity) {
              (0, _tast.Val$$SetValReprInfo$$Z35BE7615)(patternInput$$76[0], (0, _TastOps.InferArityOfExpr)(g$$30, new _TastOps.AllowTypeDirectedDetupling(0, "Yes"), vty$$3, (0, _Types.L)(), (0, _Types.L)(), vrhs));
            }

            (0, _List.iterate)(function action$$14(tupledArg$$22) {
              tupledArg$$22[0].contents = (0, _TastOps.mkLazyForce)(g$$30, (0, _TastOps.Expr$002Eget_Range)(tupledArg$$22[0].contents), ty$$41, patternInput$$76[1]);
            }, fixupPoints);
            return [(0, _Types.L)((0, _TastOps.mkInvisibleBind)(patternInput$$75[0], frhs), (0, _Types.L)((0, _TastOps.mkInvisibleBind)(patternInput$$76[0], vrhs), (0, _Types.L)())), (0, _Types.L)((0, _TastOps.mkBind)(seqPtOpt, v$$22, (0, _TastOps.mkLazyForce)(g$$30, m$$109, ty$$41, patternInput$$76[1])), (0, _Types.L)())];
          }
      }
    };

    const newTopBinds = [];

    const morphBindings = function morphBindings(pgrbinds) {
      const tupledArg$$23 = (0, _List.unzip)((0, _List.map)(morphBinding, pgrbinds));
      newTopBinds.push((0, _List.concat)(tupledArg$$23[0]));
      return (0, _List.concat)(tupledArg$$23[1]);
    };

    const res$$14 = MutRecShapes$$$map((0, _Util.partialApply)(1, morphTyconBinds, [morphBindings]), (0, _Util.partialApply)(1, morphLetBinds, [morphBindings]), function f3$$4(x$$62) {
      return x$$62;
    }, fixupsAndBindingsWithoutLaziness);

    if ((0, _Util.count)(newTopBinds) === 0) {
      return res$$14;
    } else {
      return (0, _Types.L)(new MutRecShape$00605(1, "Lets", (0, _List.concat)(newTopBinds)), res$$14);
    }
  } else {
    const noMorph = function noMorph(pgrbinds$$1) {
      return (0, _List.map)(function mapping$$25(pgrbind$$3) {
        return pgrbind$$3.Binding;
      }, pgrbinds$$1);
    };

    return MutRecShapes$$$map((0, _Util.partialApply)(1, morphTyconBinds, [noMorph]), (0, _Util.partialApply)(1, morphLetBinds, [noMorph]), function f3$$5(x$$64) {
      return x$$64;
    }, fixupsAndBindingsWithoutLaziness);
  }
}

function CheckAndRewriteObjectCtor(g$$31, env$$116, ctorLambaExpr) {
  const m$$110 = (0, _TastOps.Expr$002Eget_Range)(ctorLambaExpr);
  const patternInput$$77 = (0, _TastOps.stripTopLambda)(ctorLambaExpr, (0, _TastOps.tyOfExpr)(g$$31, ctorLambaExpr));

  const error = function error(expr$$19) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidObjectConstructionExpression)(), (0, _TastOps.Expr$002Eget_Range)(expr$$19)));
    return expr$$19;
  };

  const rewriteConstruction = function rewriteConstruction(recdExpr) {
    if (env$$116.eCtorInfo != null) {
      const ctorInfo$$6 = env$$116.eCtorInfo;
      let recdExpr$$1;

      if (ctorInfo$$6.safeThisValOpt != null) {
        const safeInitVal = ctorInfo$$6.safeThisValOpt;
        const ty$$42 = (0, _TastOps.tyOfExpr)(g$$31, recdExpr);
        const thisExpr = (0, _TastOps.mkGetArg0)(m$$110, ty$$42);
        const setExpr = (0, _TastOps.mkRefCellSet)(g$$31, m$$110, ty$$42, (0, _TastOps.exprForValRef)(m$$110, (0, _tast.mkLocalValRef)(safeInitVal)), thisExpr);
        recdExpr$$1 = new _tast.Expr(2, "Sequential", recdExpr, setExpr, new _tast.SequentialOpKind(1, "ThenDoSeq"), new _ast.SequencePointInfoForSeq(1, "SuppressSequencePointOnExprOfSequential"), m$$110);
      } else {
        recdExpr$$1 = recdExpr;
      }

      let recdExpr$$2;

      if (ctorInfo$$6.safeInitInfo.tag === 0) {
        const rfref$$1 = ctorInfo$$6.safeInitInfo.fields[0];
        const thisTy$$4 = (0, _TastOps.tyOfExpr)(g$$31, recdExpr$$1);
        const thisExpr$$1 = (0, _TastOps.mkGetArg0)(m$$110, thisTy$$4);
        const thisTyInst = (0, _TastOps.argsOfAppTy)(g$$31, thisTy$$4);
        const setExpr$$1 = (0, _TastOps.mkRecdFieldSetViaExprAddr)(thisExpr$$1, rfref$$1, thisTyInst, (0, _TastOps.mkOne)(g$$31, m$$110), m$$110);
        recdExpr$$2 = new _tast.Expr(2, "Sequential", recdExpr$$1, setExpr$$1, new _tast.SequentialOpKind(1, "ThenDoSeq"), new _ast.SequencePointInfoForSeq(1, "SuppressSequencePointOnExprOfSequential"), m$$110);
      } else {
        recdExpr$$2 = recdExpr$$1;
      }

      return recdExpr$$2;
    } else {
      return recdExpr;
    }
  };

  const checkAndRewrite = function checkAndRewrite(expr$$20) {
    var $target$$326, a$$41, b$$35, body$$4, spSeq, a$$42, b$$36, body$$5, spSeq$$1, bind$$3, body$$6, m$$111, a$$43, b$$37, c$$19, d$$10, spBind$$4, targets$$2, a$$44, body$$8, b$$38, c$$20, d$$11, f$$18, m$$112;

    if (expr$$20.tag === 11) {
      if (expr$$20.fields[0].tag === 10) {
        if (expr$$20.fields[0].fields[0].tag === 0) {
          $target$$326 = 0;
        } else {
          $target$$326 = 7;
        }
      } else {
        $target$$326 = 7;
      }
    } else if (expr$$20.tag === 2) {
      if (expr$$20.fields[2].tag === 1) {
        $target$$326 = 2;
        a$$42 = expr$$20.fields[1];
        b$$36 = expr$$20.fields[4];
        body$$5 = expr$$20.fields[0];
        spSeq$$1 = expr$$20.fields[3];
      } else {
        $target$$326 = 1;
        a$$41 = expr$$20.fields[0];
        b$$35 = expr$$20.fields[4];
        body$$4 = expr$$20.fields[1];
        spSeq = expr$$20.fields[3];
      }
    } else if (expr$$20.tag === 7) {
      $target$$326 = 3;
      bind$$3 = expr$$20.fields[0];
      body$$6 = expr$$20.fields[1];
      m$$111 = expr$$20.fields[2];
    } else if (expr$$20.tag === 9) {
      $target$$326 = 4;
      a$$43 = expr$$20.fields[1];
      b$$37 = expr$$20.fields[2];
      c$$19 = expr$$20.fields[4];
      d$$10 = expr$$20.fields[5];
      spBind$$4 = expr$$20.fields[0];
      targets$$2 = expr$$20.fields[3];
    } else if (expr$$20.tag === 6) {
      $target$$326 = 5;
      a$$44 = expr$$20.fields[0];
      body$$8 = expr$$20.fields[1];
    } else if (expr$$20.tag === 5) {
      $target$$326 = 6;
      b$$38 = expr$$20.fields[1];
      c$$20 = expr$$20.fields[2];
      d$$11 = expr$$20.fields[3];
      f$$18 = expr$$20.fields[0];
      m$$112 = expr$$20.fields[4];
    } else {
      $target$$326 = 7;
    }

    switch ($target$$326) {
      case 0:
        {
          return rewriteConstruction(expr$$20);
        }

      case 1:
        {
          return new _tast.Expr(2, "Sequential", a$$41, checkAndRewrite(body$$4), new _tast.SequentialOpKind(0, "NormalSeq"), spSeq, b$$35);
        }

      case 2:
        {
          return new _tast.Expr(2, "Sequential", checkAndRewrite(body$$5), a$$42, new _tast.SequentialOpKind(1, "ThenDoSeq"), spSeq$$1, b$$36);
        }

      case 3:
        {
          return (0, _TastOps.mkLetBind)(m$$111, bind$$3, checkAndRewrite(body$$6));
        }

      case 4:
        {
          return new _tast.Expr(9, "Match", spBind$$4, a$$43, b$$37, (0, _Array.map)(function mapping$$26(_arg1$$39) {
            const vs$$3 = _arg1$$39.fields[0];
            const spTarget$$1 = _arg1$$39.fields[2];
            const body$$7 = _arg1$$39.fields[1];
            return new _tast.DecisionTreeTarget(0, "TTarget", vs$$3, checkAndRewrite(body$$7), spTarget$$1);
          }, targets$$2, Array), c$$19, d$$10);
        }

      case 5:
        {
          return new _tast.Expr(6, "LetRec", a$$44, checkAndRewrite(body$$8), m$$110, (0, _tast.NewFreeVarsCache)());
        }

      case 6:
        {
          const f$$19 = checkAndRewriteCtorUsage(f$$18);
          const expr$$21 = new _tast.Expr(5, "App", f$$19, b$$38, c$$20, d$$11, m$$112);
          return rewriteConstruction(expr$$21);
        }

      case 7:
        {
          return error(expr$$20);
        }
    }
  };

  const checkAndRewriteCtorUsage = function checkAndRewriteCtorUsage(expr$$22) {
    var $target$$327, eref$$2, f$$20, fty$$3, m$$113, tyargs$$1, a$$45, vref$$7;

    if (expr$$22.tag === 14) {
      $target$$327 = 0;
      eref$$2 = expr$$22.fields[0];
    } else if (expr$$22.tag === 5) {
      if (expr$$22.fields[3].tail == null) {
        $target$$327 = 1;
        f$$20 = expr$$22.fields[0];
        fty$$3 = expr$$22.fields[1];
        m$$113 = expr$$22.fields[4];
        tyargs$$1 = expr$$22.fields[2];
      } else {
        $target$$327 = 3;
      }
    } else if (expr$$22.tag === 1) {
      if (expr$$22.fields[1].tag === 1) {
        $target$$327 = 2;
        a$$45 = expr$$22.fields[2];
        vref$$7 = expr$$22.fields[0];
      } else {
        $target$$327 = 3;
      }
    } else {
      $target$$327 = 3;
    }

    switch ($target$$327) {
      case 0:
        {
          const e$$37 = checkAndRewriteCtorUsage(eref$$2.contents);
          eref$$2.contents = e$$37;
          return expr$$22;
        }

      case 1:
        {
          const f$$21 = checkAndRewriteCtorUsage(f$$20);
          return new _tast.Expr(5, "App", f$$21, fty$$3, tyargs$$1, (0, _Types.L)(), m$$113);
        }

      case 2:
        {
          let isCtor;
          const matchValue$$68 = (0, _tast.ValRef$$get_MemberInfo)(vref$$7);

          if (matchValue$$68 != null) {
            const memberInfo$$6 = matchValue$$68;
            isCtor = (0, _Util.equals)(memberInfo$$6.MemberFlags.MemberKind, new _ast.MemberKind(1, "Constructor"));
          } else {
            isCtor = false;
          }

          if (!isCtor) {
            return error(expr$$22);
          } else {
            return new _tast.Expr(1, "Val", vref$$7, new _tast.ValUseFlag(3, "CtorValUsedAsSelfInit"), a$$45);
          }
        }

      case 3:
        {
          return error(expr$$22);
        }
    }
  };

  const body$$9 = checkAndRewrite(patternInput$$77[2]);
  return (0, _TastOps.mkMultiLambdas)(m$$110, patternInput$$77[0], patternInput$$77[1], body$$9, patternInput$$77[3]);
}

function buildApp(cenv$$70, expr$$23, resultTy$$4, arg$$2, m$$114) {
  var vf$$16, vf$$14, vf$$12, vf$$10, x0$$2, vf$$8, x0, vf$$6;
  const g$$32 = cenv$$70.g;
  const matchValue$$69 = [expr$$23, arg$$2];
  var $target$$328, vf$$7, x0$$1;

  if (matchValue$$69[0].fields[1].tag === 5) {
    if (matchValue$$69[0].fields[1].fields[0].tag === 1) {
      if (matchValue$$69[0].fields[1].fields[3].tail != null) {
        if (matchValue$$69[0].fields[1].fields[3].tail.tail == null) {
          if (x0 = matchValue$$69[0].fields[1].fields[3].head, (vf$$6 = matchValue$$69[0].fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(g$$32, vf$$6, (0, _TcGlobals.TcGlobals$$get_and_vref)(g$$32)) ? true : (0, _TastOps.valRefEq)(g$$32, vf$$6, (0, _TcGlobals.TcGlobals$$get_and2_vref)(g$$32)))) {
            $target$$328 = 0;
            vf$$7 = matchValue$$69[0].fields[1].fields[0].fields[0];
            x0$$1 = matchValue$$69[0].fields[1].fields[3].head;
          } else {
            $target$$328 = 1;
          }
        } else {
          $target$$328 = 1;
        }
      } else {
        $target$$328 = 1;
      }
    } else {
      $target$$328 = 1;
    }
  } else {
    $target$$328 = 1;
  }

  switch ($target$$328) {
    case 0:
      {
        return [MakeApplicableExprNoFlex(cenv$$70, (0, _TastOps.mkLazyAnd)(g$$32, m$$114, x0$$1, arg$$2)), resultTy$$4];
      }

    case 1:
      {
        var $target$$329, vf$$9, x0$$3;

        if (matchValue$$69[0].fields[1].tag === 5) {
          if (matchValue$$69[0].fields[1].fields[0].tag === 1) {
            if (matchValue$$69[0].fields[1].fields[3].tail != null) {
              if (matchValue$$69[0].fields[1].fields[3].tail.tail == null) {
                if (x0$$2 = matchValue$$69[0].fields[1].fields[3].head, (vf$$8 = matchValue$$69[0].fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(g$$32, vf$$8, (0, _TcGlobals.TcGlobals$$get_or_vref)(g$$32)) ? true : (0, _TastOps.valRefEq)(g$$32, vf$$8, (0, _TcGlobals.TcGlobals$$get_or2_vref)(g$$32)))) {
                  $target$$329 = 0;
                  vf$$9 = matchValue$$69[0].fields[1].fields[0].fields[0];
                  x0$$3 = matchValue$$69[0].fields[1].fields[3].head;
                } else {
                  $target$$329 = 1;
                }
              } else {
                $target$$329 = 1;
              }
            } else {
              $target$$329 = 1;
            }
          } else {
            $target$$329 = 1;
          }
        } else {
          $target$$329 = 1;
        }

        switch ($target$$329) {
          case 0:
            {
              return [MakeApplicableExprNoFlex(cenv$$70, (0, _TastOps.mkLazyOr)(g$$32, m$$114, x0$$3, arg$$2)), resultTy$$4];
            }

          case 1:
            {
              var $target$$330, vf$$11;

              if (matchValue$$69[0].fields[1].tag === 5) {
                if (matchValue$$69[0].fields[1].fields[0].tag === 1) {
                  if (matchValue$$69[0].fields[1].fields[3].tail == null) {
                    if (vf$$10 = matchValue$$69[0].fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(g$$32, vf$$10, (0, _TcGlobals.TcGlobals$$get_reraise_vref)(g$$32))) {
                      $target$$330 = 0;
                      vf$$11 = matchValue$$69[0].fields[1].fields[0].fields[0];
                    } else {
                      $target$$330 = 1;
                    }
                  } else {
                    $target$$330 = 1;
                  }
                } else {
                  $target$$330 = 1;
                }
              } else {
                $target$$330 = 1;
              }

              switch ($target$$330) {
                case 0:
                  {
                    return [MakeApplicableExprNoFlex(cenv$$70, (0, _TastOps.mkCompGenSequential)(m$$114, arg$$2, (0, _TastOps.mkReraise)(m$$114, resultTy$$4))), resultTy$$4];
                  }

                case 1:
                  {
                    var $target$$331, vf$$13;

                    if (matchValue$$69[0].fields[1].tag === 5) {
                      if (matchValue$$69[0].fields[1].fields[0].tag === 1) {
                        if (matchValue$$69[0].fields[1].fields[3].tail == null) {
                          if (vf$$12 = matchValue$$69[0].fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(g$$32, vf$$12, (0, _TcGlobals.TcGlobals$$get_nativeptr_tobyref_vref)(g$$32))) {
                            $target$$331 = 0;
                            vf$$13 = matchValue$$69[0].fields[1].fields[0].fields[0];
                          } else {
                            $target$$331 = 1;
                          }
                        } else {
                          $target$$331 = 1;
                        }
                      } else {
                        $target$$331 = 1;
                      }
                    } else {
                      $target$$331 = 1;
                    }

                    switch ($target$$331) {
                      case 0:
                        {
                          const argty = (0, _ConstraintSolver.NewInferenceType)();
                          const resultTy$$5 = (0, _TastOps.mkByrefTyWithInference)(g$$32, argty, (0, _ConstraintSolver.NewByRefKindInferenceType)(g$$32, m$$114));
                          return [ApplicableExpr$$SupplyArgument$$Z47F331B3(expr$$23, arg$$2, m$$114), resultTy$$5];
                        }

                      case 1:
                        {
                          var $target$$332, vf$$15;

                          if (matchValue$$69[0].fields[1].tag === 5) {
                            if (matchValue$$69[0].fields[1].fields[0].tag === 1) {
                              if (matchValue$$69[0].fields[1].fields[3].tail == null) {
                                if (vf$$14 = matchValue$$69[0].fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(g$$32, vf$$14, (0, _TcGlobals.TcGlobals$$get_addrof_vref)(g$$32))) {
                                  $target$$332 = 0;
                                  vf$$15 = matchValue$$69[0].fields[1].fields[0].fields[0];
                                } else {
                                  $target$$332 = 1;
                                }
                              } else {
                                $target$$332 = 1;
                              }
                            } else {
                              $target$$332 = 1;
                            }
                          } else {
                            $target$$332 = 1;
                          }

                          switch ($target$$332) {
                            case 0:
                              {
                                const patternInput$$78 = (0, _TastOps.mkExprAddrOfExpr)(g$$32, true, false, new _TastOps.Mutates(0, "AddressOfOp"), arg$$2, vf$$15, m$$114);
                                let resultTy$$6;
                                const argTy = (0, _TastOps.tyOfExpr)(g$$32, arg$$2);
                                resultTy$$6 = patternInput$$78[2] ? (0, _TastOps.mkInByrefTy)(g$$32, argTy) : (0, _TastOps.mkByrefTyWithInference)(g$$32, argTy, (0, _ConstraintSolver.NewByRefKindInferenceType)(g$$32, m$$114));
                                return [MakeApplicableExprNoFlex(cenv$$70, patternInput$$78[0](patternInput$$78[1])), resultTy$$6];
                              }

                            case 1:
                              {
                                var $target$$333, vf$$17;

                                if (matchValue$$69[0].fields[1].tag === 5) {
                                  if (matchValue$$69[0].fields[1].fields[0].tag === 1) {
                                    if (matchValue$$69[0].fields[1].fields[3].tail == null) {
                                      if (vf$$16 = matchValue$$69[0].fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(g$$32, vf$$16, (0, _TcGlobals.TcGlobals$$get_addrof2_vref)(g$$32))) {
                                        $target$$333 = 0;
                                        vf$$17 = matchValue$$69[0].fields[1].fields[0].fields[0];
                                      } else {
                                        $target$$333 = 1;
                                      }
                                    } else {
                                      $target$$333 = 1;
                                    }
                                  } else {
                                    $target$$333 = 1;
                                  }
                                } else {
                                  $target$$333 = 1;
                                }

                                switch ($target$$333) {
                                  case 0:
                                    {
                                      (0, _ErrorLogger.warning)(new UseOfAddressOfOperator(m$$114));
                                      const patternInput$$79 = (0, _TastOps.mkExprAddrOfExpr)(g$$32, true, false, new _TastOps.Mutates(0, "AddressOfOp"), arg$$2, vf$$17, m$$114);
                                      return [MakeApplicableExprNoFlex(cenv$$70, patternInput$$79[0](patternInput$$79[1])), resultTy$$4];
                                    }

                                  case 1:
                                    {
                                      if ((0, _TastOps.isByrefTy)(g$$32, resultTy$$4)) {
                                        const patternInput$$80 = (0, _TastOps.mkCompGenLocal)(m$$114, "byrefReturn", resultTy$$4);
                                        const expr$$24 = ApplicableExpr$$SupplyArgument$$Z47F331B3(expr$$23, arg$$2, m$$114);
                                        const expr$$25 = (0, _TastOps.mkCompGenLet)(m$$114, patternInput$$80[0], ApplicableExpr$$get_Expr(expr$$24), (0, _TastOps.mkAddrGet)(m$$114, (0, _tast.mkLocalValRef)(patternInput$$80[0])));
                                        const resultTy$$7 = (0, _TastOps.destByrefTy)(g$$32, resultTy$$4);
                                        return [MakeApplicableExprNoFlex(cenv$$70, expr$$25), resultTy$$7];
                                      } else {
                                        return [ApplicableExpr$$SupplyArgument$$Z47F331B3(expr$$23, arg$$2, m$$114), resultTy$$4];
                                      }
                                    }
                                }
                              }
                          }
                        }
                    }
                  }
              }
            }
        }
      }
  }
}

const DelayedItem = (0, _Types.declare)(function DelayedItem(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.DelayedItem = DelayedItem;

function MakeDelayedSet(e$$38, m$$115) {
  return new DelayedItem(4, "DelayedSet", new _ast.SynExpr(0, "Paren", e$$38, _range.range0, null, (0, _ast.SynExpr$$get_Range)(e$$38)), m$$115);
}

const NewSlotsOK = (0, _Types.declare)(function NewSlotsOK(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.NewSlotsOK = NewSlotsOK;
const ImplictlyBoundTyparsAllowed = (0, _Types.declare)(function ImplictlyBoundTyparsAllowed(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ImplictlyBoundTyparsAllowed = ImplictlyBoundTyparsAllowed;
const CheckConstraints = (0, _Types.declare)(function CheckConstraints(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.CheckConstraints = CheckConstraints;
const TypeRealizationPass = (0, _Types.declare)(function TypeRealizationPass(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.TypeRealizationPass = TypeRealizationPass;
const MemberOrValContainerInfo = (0, _Types.declare)(function MemberOrValContainerInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MemberOrValContainerInfo = MemberOrValContainerInfo;
const ContainerInfo = (0, _Types.declare)(function ContainerInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ContainerInfo = ContainerInfo;

function ContainerInfo$$get_ParentRef(x$$66) {
  const v$$24 = x$$66.fields[0];
  return v$$24;
}

const ExprContainerInfo = new ContainerInfo(0, "ContainerInfo", new _tast.ParentRef(1, "ParentNone"), null);
exports.ExprContainerInfo = ExprContainerInfo;

function ModuleOrNamespaceContainerInfo(modref) {
  return new ContainerInfo(0, "ContainerInfo", new _tast.ParentRef(0, "Parent", modref), new MemberOrValContainerInfo(0, "MemberOrValContainerInfo", modref, null, null, new SafeInitData(1, "NoSafeInitInfo"), (0, _Types.L)()));
}

function TyconContainerInfo(parent$$1, tcref$$16, declaredTyconTypars$$2, safeInitInfo$$1) {
  return new ContainerInfo(0, "ContainerInfo", parent$$1, new MemberOrValContainerInfo(0, "MemberOrValContainerInfo", tcref$$16, null, null, safeInitInfo$$1, declaredTyconTypars$$2));
}

const NormalizedRecBindingDefn = (0, _Types.declare)(function NormalizedRecBindingDefn(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.NormalizedRecBindingDefn = NormalizedRecBindingDefn;
const TyconBindingDefn = (0, _Types.declare)(function TyconBindingDefn(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.TyconBindingDefn = TyconBindingDefn;
const ValSpecResult = (0, _Types.declare)(function ValSpecResult(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.ValSpecResult = ValSpecResult;
const RecDefnBindingInfo = (0, _Types.declare)(function RecDefnBindingInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.RecDefnBindingInfo = RecDefnBindingInfo;
const MutRecDataForOpen = (0, _Types.declare)(function MutRecDataForOpen(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecDataForOpen = MutRecDataForOpen;
const MutRecDataForModuleAbbrev = (0, _Types.declare)(function MutRecDataForModuleAbbrev(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecDataForModuleAbbrev = MutRecDataForModuleAbbrev;
const MutRecDefnsPhase1DataForTycon = (0, _Types.declare)(function MutRecDefnsPhase1DataForTycon(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecDefnsPhase1DataForTycon = MutRecDefnsPhase1DataForTycon;
const MutRecDefnsPhase2DataForTycon = (0, _Types.declare)(function MutRecDefnsPhase2DataForTycon(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecDefnsPhase2DataForTycon = MutRecDefnsPhase2DataForTycon;
const MutRecDefnsPhase2DataForModule = (0, _Types.declare)(function MutRecDefnsPhase2DataForModule(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecDefnsPhase2DataForModule = MutRecDefnsPhase2DataForModule;
const MutRecDefnsPhase2InfoForTycon = (0, _Types.declare)(function MutRecDefnsPhase2InfoForTycon(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecDefnsPhase2InfoForTycon = MutRecDefnsPhase2InfoForTycon;
const RecursiveBindingInfo = (0, _Types.declare)(function RecursiveBindingInfo(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.RecursiveBindingInfo = RecursiveBindingInfo;

function RecursiveBindingInfo$$get_EnclosingDeclaredTypars(x$$67) {
  const enclosingDeclaredTypars$$3 = x$$67.fields[2];
  return enclosingDeclaredTypars$$3;
}

function RecursiveBindingInfo$$get_Val(x$$68) {
  const vspec$$4 = x$$68.fields[4];
  return vspec$$4;
}

function RecursiveBindingInfo$$get_ExplicitTyparInfo(x$$69) {
  const flex = x$$69.fields[5];
  return flex;
}

function RecursiveBindingInfo$$get_DeclaredTypars(x$$70) {
  const declaredTypars$$5 = RecursiveBindingInfo$$get_ExplicitTyparInfo(x$$70).fields[1];
  return declaredTypars$$5;
}

function RecursiveBindingInfo$$get_Index(x$$71) {
  const i$$16 = x$$71.fields[0] | 0;
  return i$$16 | 0;
}

function RecursiveBindingInfo$$get_ContainerInfo(x$$72) {
  const c$$21 = x$$72.fields[1];
  return c$$21;
}

function RecursiveBindingInfo$$get_DeclKind(x$$73) {
  const declKind$$9 = x$$73.fields[13];
  return declKind$$9;
}

const PreCheckingRecursiveBinding = (0, _Types.declare)(function PreCheckingRecursiveBinding(arg1, arg2) {
  this.SyntacticBinding = arg1;
  this.RecBindingInfo = arg2;
}, _Types.Record);
exports.PreCheckingRecursiveBinding = PreCheckingRecursiveBinding;
const PreGeneralizationRecursiveBinding = (0, _Types.declare)(function PreGeneralizationRecursiveBinding(arg1, arg2, arg3) {
  this.ExtraGeneralizableTypars = arg1;
  this.CheckedBinding = arg2;
  this.RecBindingInfo = arg3;
}, _Types.Record);
exports.PreGeneralizationRecursiveBinding = PreGeneralizationRecursiveBinding;
const PostGeneralizationRecursiveBinding = (0, _Types.declare)(function PostGeneralizationRecursiveBinding(arg1, arg2, arg3) {
  this.ValScheme = arg1;
  this.CheckedBinding = arg2;
  this.RecBindingInfo = arg3;
}, _Types.Record);
exports.PostGeneralizationRecursiveBinding = PostGeneralizationRecursiveBinding;

function PostGeneralizationRecursiveBinding$$get_GeneralizedTypars(x$$74) {
  return ValScheme$$get_GeneralizedTypars(x$$74.ValScheme);
}

const PostBindCtorThisVarRefCellRecursiveBinding = (0, _Types.declare)(function PostBindCtorThisVarRefCellRecursiveBinding(arg1, arg2) {
  this.ValScheme = arg1;
  this.Binding = arg2;
}, _Types.Record);
exports.PostBindCtorThisVarRefCellRecursiveBinding = PostBindCtorThisVarRefCellRecursiveBinding;

function CanInferExtraGeneralizedTyparsForRecBinding(pgrbind$$4) {
  const flex$$1 = RecursiveBindingInfo$$get_ExplicitTyparInfo(pgrbind$$4.RecBindingInfo);
  const canInferTypars$$2 = flex$$1.fields[2];
  const memFlagsOpt$$2 = (0, _Option.defaultArg)((0, _tast.Val$$get_MemberInfo)(RecursiveBindingInfo$$get_Val(pgrbind$$4.RecBindingInfo)), null, function mapping$$27(memInfo) {
    return memInfo.MemberFlags;
  });
  const canInferTypars$$3 = GeneralizationHelpers$$$ComputeCanInferExtraGeneralizableTypars(ContainerInfo$$get_ParentRef(RecursiveBindingInfo$$get_ContainerInfo(pgrbind$$4.RecBindingInfo)), canInferTypars$$2, memFlagsOpt$$2);
  return canInferTypars$$3;
}

function GetInstanceMemberThisVariable(v$$25, x$$75) {
  if ((0, _tast.Val$$get_IsInstanceMember)(v$$25)) {
    const firstArg = function firstArg(e$$39) {
      firstArg: while (true) {
        var $target$$334, b$$39, b$$40, v$$26;

        if (e$$39.tag === 4) {
          $target$$334 = 0;
          b$$39 = e$$39.fields[2];
        } else if (e$$39.tag === 13) {
          $target$$334 = 1;
          b$$40 = e$$39.fields[1];
        } else if (e$$39.tag === 3) {
          if (e$$39.fields[3].tail != null) {
            if (e$$39.fields[3].tail.tail == null) {
              $target$$334 = 2;
              v$$26 = e$$39.fields[3].head;
            } else {
              $target$$334 = 3;
            }
          } else {
            $target$$334 = 3;
          }
        } else {
          $target$$334 = 3;
        }

        switch ($target$$334) {
          case 0:
            {
              e$$39 = b$$39;
              continue firstArg;
            }

          case 1:
            {
              e$$39 = b$$40;
              continue firstArg;
            }

          case 2:
            {
              return v$$26;
            }

          case 3:
            {
              throw new Error("GetInstanceMemberThisVariable: instance member did not have expected internal form");
            }
        }
      }
    };

    return firstArg(x$$75);
  } else {
    return null;
  }
}

function TcTyparConstraint(ridx, cenv$$71, newOk, checkCxs, occ, env$$117, tpenv$$4, c$$22) {
  var ty$$45, returnTy$$2, objtys, memberFlags$$12, argtys$$2;

  const checkSimpleConstraint = function checkSimpleConstraint(tp$$22, m$$116, constraintAdder) {
    const patternInput$$82 = TcTypar(cenv$$71, env$$117, newOk, tpenv$$4, tp$$22);
    constraintAdder(TcEnv$$get_DisplayEnv(env$$117), cenv$$71.css, m$$116, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), (0, _tast.mkTyparTy)(patternInput$$82[0]));
    return patternInput$$82[1];
  };

  switch (c$$22.tag) {
    case 7:
      {
        const ty$$44 = c$$22.fields[1];
        const tp$$24 = c$$22.fields[0];
        const m$$118 = c$$22.fields[2];
        const patternInput$$85 = TcTypeAndRecover(cenv$$71, newOk, checkCxs, new _NameResolution.ItemOccurence(2, "UseInType"), env$$117, tpenv$$4, ty$$44);
        const patternInput$$86 = TcTypar(cenv$$71, env$$117, newOk, patternInput$$85[1], tp$$24);

        if ((0, _Util.equals)(newOk, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars")) ? (0, _TastOps.isSealedTy)(cenv$$71.g, patternInput$$85[0]) : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidConstraintTypeSealed)(), m$$118));
        }

        (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$117), cenv$$71.css, m$$118, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), patternInput$$85[0], (0, _tast.mkTyparTy)(patternInput$$86[0]));
        return patternInput$$86[1];
      }

    case 3:
      {
        const tp$$25 = c$$22.fields[0];
        const m$$119 = c$$22.fields[1];
        return checkSimpleConstraint(tp$$25, m$$119, _ConstraintSolver.AddCxTypeMustSupportNull);
      }

    case 4:
      {
        const tp$$26 = c$$22.fields[0];
        const m$$120 = c$$22.fields[1];
        return checkSimpleConstraint(tp$$26, m$$120, _ConstraintSolver.AddCxTypeMustSupportComparison);
      }

    case 5:
      {
        const tp$$27 = c$$22.fields[0];
        const m$$121 = c$$22.fields[1];
        return checkSimpleConstraint(tp$$27, m$$121, _ConstraintSolver.AddCxTypeMustSupportEquality);
      }

    case 1:
      {
        const tp$$28 = c$$22.fields[0];
        const m$$122 = c$$22.fields[1];
        return checkSimpleConstraint(tp$$28, m$$122, _ConstraintSolver.AddCxTypeIsReferenceType);
      }

    case 0:
      {
        const tp$$29 = c$$22.fields[0];
        const m$$123 = c$$22.fields[1];
        return checkSimpleConstraint(tp$$29, m$$123, _ConstraintSolver.AddCxTypeIsValueType);
      }

    case 2:
      {
        const tp$$30 = c$$22.fields[0];
        const m$$124 = c$$22.fields[1];
        return checkSimpleConstraint(tp$$30, m$$124, _ConstraintSolver.AddCxTypeIsUnmanaged);
      }

    case 9:
      {
        const tyargs$$2 = c$$22.fields[1];
        const tp$$31 = c$$22.fields[0];
        const m$$125 = c$$22.fields[2];
        const patternInput$$87 = TcTypar(cenv$$71, env$$117, newOk, tpenv$$4, tp$$31);
        let tpenv$$12;
        var $target$$338, underlying;

        if (tyargs$$2.tail != null) {
          if (tyargs$$2.tail.tail == null) {
            $target$$338 = 0;
            underlying = tyargs$$2.head;
          } else {
            $target$$338 = 1;
          }
        } else {
          $target$$338 = 1;
        }

        switch ($target$$338) {
          case 0:
            {
              const patternInput$$88 = TcTypeAndRecover(cenv$$71, newOk, checkCxs, new _NameResolution.ItemOccurence(2, "UseInType"), env$$117, patternInput$$87[1], underlying);
              (0, _ConstraintSolver.AddCxTypeIsEnum)(TcEnv$$get_DisplayEnv(env$$117), cenv$$71.css, m$$125, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), (0, _tast.mkTyparTy)(patternInput$$87[0]), patternInput$$88[0]);
              tpenv$$12 = patternInput$$88[1];
              break;
            }

          case 1:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidEnumConstraint)(), m$$125));
              tpenv$$12 = patternInput$$87[1];
              break;
            }
        }

        return tpenv$$12;
      }

    case 10:
      {
        const tyargs$$3 = c$$22.fields[1];
        const tp$$32 = c$$22.fields[0];
        const m$$126 = c$$22.fields[2];
        const patternInput$$89 = TcTypar(cenv$$71, env$$117, newOk, tpenv$$4, tp$$32);
        var $target$$339, a$$46, b$$41;

        if (tyargs$$3.tail != null) {
          if (tyargs$$3.tail.tail != null) {
            if (tyargs$$3.tail.tail.tail == null) {
              $target$$339 = 0;
              a$$46 = tyargs$$3.head;
              b$$41 = tyargs$$3.tail.head;
            } else {
              $target$$339 = 1;
            }
          } else {
            $target$$339 = 1;
          }
        } else {
          $target$$339 = 1;
        }

        switch ($target$$339) {
          case 0:
            {
              const patternInput$$90 = TcTypeAndRecover(cenv$$71, newOk, checkCxs, occ, env$$117, patternInput$$89[1], a$$46);
              const patternInput$$91 = TcTypeAndRecover(cenv$$71, newOk, checkCxs, occ, env$$117, patternInput$$90[1], b$$41);
              (0, _ConstraintSolver.AddCxTypeIsDelegate)(TcEnv$$get_DisplayEnv(env$$117), cenv$$71.css, m$$126, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), (0, _tast.mkTyparTy)(patternInput$$89[0]), patternInput$$90[0], patternInput$$91[0]);
              return patternInput$$91[1];
            }

          case 1:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidEnumConstraint)(), m$$126));
              return patternInput$$89[1];
            }
        }
      }

    case 8:
      {
        const tps$$8 = c$$22.fields[0];
        const memSpfn = c$$22.fields[1];
        const m$$127 = c$$22.fields[2];
        const patternInput$$92 = TcPseudoMemberSpec(cenv$$71, newOk, env$$117, tps$$8, tpenv$$4, memSpfn, m$$127);
        var $target$$340;

        if (patternInput$$92[0].fields[1] === ".ctor") {
          if (returnTy$$2 = patternInput$$92[0].fields[4], (objtys = patternInput$$92[0].fields[0], (memberFlags$$12 = patternInput$$92[0].fields[2], (argtys$$2 = patternInput$$92[0].fields[3], (0, _Util.equals)(memberFlags$$12.MemberKind, new _ast.MemberKind(1, "Constructor")))))) {
            $target$$340 = 0;
          } else {
            $target$$340 = 1;
          }
        } else {
          $target$$340 = 1;
        }

        switch ($target$$340) {
          case 0:
            {
              const returnTy$$3 = patternInput$$92[0].fields[4];
              const objtys$$1 = patternInput$$92[0].fields[0];
              const memberFlags$$13 = patternInput$$92[0].fields[2];
              const argtys$$3 = patternInput$$92[0].fields[3];
              const matchValue$$70 = [objtys$$1, argtys$$3];
              var $target$$341, ty$$46;

              if (matchValue$$70[0].tail != null) {
                if (matchValue$$70[0].tail.tail == null) {
                  if (matchValue$$70[1].tail == null) {
                    if (ty$$45 = matchValue$$70[0].head, (0, _TastOps.typeEquiv)(cenv$$71.g, ty$$45, (0, _TastOps.GetFSharpViewOfReturnType)(cenv$$71.g, returnTy$$3))) {
                      $target$$341 = 0;
                      ty$$46 = matchValue$$70[0].head;
                    } else {
                      $target$$341 = 1;
                    }
                  } else {
                    $target$$341 = 1;
                  }
                } else {
                  $target$$341 = 1;
                }
              } else {
                $target$$341 = 1;
              }

              switch ($target$$341) {
                case 0:
                  {
                    (0, _ConstraintSolver.AddCxTypeMustSupportDefaultCtor)(TcEnv$$get_DisplayEnv(env$$117), cenv$$71.css, m$$127, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), ty$$46);
                    return patternInput$$92[1];
                  }

                case 1:
                  {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidNewConstraint)(), m$$127));
                    return patternInput$$92[1];
                  }
              }
            }

          case 1:
            {
              (0, _ConstraintSolver.AddCxMethodConstraint)(TcEnv$$get_DisplayEnv(env$$117), cenv$$71.css, m$$127, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), patternInput$$92[0]);
              return patternInput$$92[1];
            }
        }
      }

    default:
      {
        const ty$$43 = c$$22.fields[1];
        const tp$$23 = c$$22.fields[0];
        const m$$117 = c$$22.fields[2];
        const patternInput$$83 = TcTypeAndRecover(cenv$$71, newOk, checkCxs, occ, env$$117, tpenv$$4, ty$$43);
        const patternInput$$84 = TcTypar(cenv$$71, env$$117, newOk, patternInput$$83[1], tp$$23);
        const csenv$$2 = (0, _ConstraintSolver.MakeConstraintSolverEnv)(env$$117.eContextInfo, cenv$$71.css, m$$117, TcEnv$$get_DisplayEnv(env$$117));
        (0, _ErrorLogger.CommitOperationResult)((0, _ConstraintSolver.AddConstraint)(csenv$$2, 0, m$$117, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), patternInput$$84[0], new _tast.TyparConstraint(1, "DefaultsTo", ridx, patternInput$$83[0], m$$117)));
        return patternInput$$84[1];
      }
  }
}

function TcPseudoMemberSpec(cenv$$72, newOk$$1, env$$118, synTypes, tpenv$$17, memSpfn$$1, m$$128) {
  const patternInput$$93 = (0, _List.mapFold)(function (tpenv$$18, ty$$47) {
    return TcTypeAndRecover(cenv$$72, newOk$$1, new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$118, tpenv$$18, ty$$47);
  }, tpenv$$17, synTypes);

  if (memSpfn$$1.tag === 0) {
    const valSpfn = memSpfn$$1.fields[0];
    const memberFlags$$14 = memSpfn$$1.fields[1];
    const m$$129 = memSpfn$$1.fields[2];
    const patternInput$$94 = TcValSpec(cenv$$72, env$$118, new DeclKind(0, "ModuleOrMemberBinding"), newOk$$1, ExprContainerInfo, memberFlags$$14, (0, _List.head)(patternInput$$93[0]), patternInput$$93[1], valSpfn, (0, _Types.L)());
    var $target$$342, id$$24, memberConstraintTy, partialValReprInfo$$4;

    if (patternInput$$94[0].tail != null) {
      if (patternInput$$94[0].tail.tail == null) {
        $target$$342 = 0;
        id$$24 = patternInput$$94[0].head.fields[2];
        memberConstraintTy = patternInput$$94[0].head.fields[5];
        partialValReprInfo$$4 = patternInput$$94[0].head.fields[6];
      } else {
        $target$$342 = 1;
      }
    } else {
      $target$$342 = 1;
    }

    switch ($target$$342) {
      case 0:
        {
          const patternInput$$95 = (0, _TastOps.tryDestForallTy)(cenv$$72.g, memberConstraintTy);
          const topValInfo$$1 = TranslatePartialArity(patternInput$$95[0], partialValReprInfo$$4);
          const patternInput$$96 = (0, _TastOps.GetTopValTypeInCompiledForm)(cenv$$72.g, topValInfo$$1, memberConstraintTy, m$$129);
          const argtys$$4 = (0, _List.concat)(patternInput$$96[1]);
          const argtys$$5 = (0, _List.map)(function (tuple$$8) {
            return tuple$$8[0];
          }, argtys$$4);
          const logicalCompiledName = ComputeLogicalName(id$$24, memberFlags$$14);
          const item$$19 = new _NameResolution.Item(20, "ArgName", id$$24, memberConstraintTy, null);
          (0, _NameResolution.CallNameResolutionSink)(cenv$$72.tcSink, (0, _ast.Ident$$get_idRange)(id$$24), TcEnv$$get_NameEnv(env$$118), item$$19, item$$19, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$118), env$$118.eAccessRights);
          return [new _tast.TraitConstraintInfo(0, "TTrait", patternInput$$93[0], logicalCompiledName, memberFlags$$14, argtys$$5, patternInput$$96[2], new _Types.FSharpRef(null)), patternInput$$94[1]];
        }

      case 1:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidConstraint)(), m$$129));
        }
    }
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidConstraint)(), m$$128));
  }
}

function TcValSpec(cenv$$73, env$$119, declKind$$10, newOk$$2, containerInfo, memFlagsOpt$$3, thisTyOpt, tpenv$$21, valSpfn$$1, attrs$$5) {
  const valSynInfo$$4 = valSpfn$$1.fields[4];
  const ty$$48 = valSpfn$$1.fields[3];
  const synTypars$$1 = valSpfn$$1.fields[2].fields[0];
  const synTyparConstraints = valSpfn$$1.fields[2].fields[2];
  const m$$130 = valSpfn$$1.fields[10];
  const id$$25 = valSpfn$$1.fields[1];
  const declaredTypars$$6 = TcTyparDecls(cenv$$73, env$$119, synTypars$$1);
  const tcrefContainerInfo = containerInfo.fields[1];
  const altActualParent$$2 = containerInfo.fields[0];
  let patternInput$$98;

  if (tcrefContainerInfo == null) {
    patternInput$$98 = [(0, _Types.L)(), null, thisTyOpt, new DeclKind(0, "ModuleOrMemberBinding")];
  } else {
    const tcref$$17 = tcrefContainerInfo.fields[0];
    const declaredTyconTypars$$3 = tcrefContainerInfo.fields[4];
    const isExtrinsic$$3 = (0, _Util.equals)(declKind$$10, new DeclKind(2, "ExtrinsicExtensionBinding"));
    const patternInput$$97 = FreshenObjectArgType(cenv$$73, m$$130, new _tast.TyparRigidity(0, "Rigid"), tcref$$17, isExtrinsic$$3, declaredTyconTypars$$3);
    patternInput$$98 = [patternInput$$97[1], tcref$$17, patternInput$$97[4], declKind$$10];
  }

  const allDeclaredTypars$$4 = (0, _List.append)(patternInput$$98[0], declaredTypars$$6);
  const envinner$$1 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(1, "NoCheckForDuplicateTypars"), allDeclaredTypars$$4, env$$119);
  const checkCxs$$2 = new CheckConstraints(0, "CheckCxs");
  const tpenv$$22 = TcTyparConstraints(cenv$$73, newOk$$2, checkCxs$$2, new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$1, tpenv$$21, synTyparConstraints);
  let tpenv$$23;

  if (ty$$48.tag === 9) {
    const wcs = ty$$48.fields[1];
    tpenv$$23 = TcTyparConstraints(cenv$$73, newOk$$2, checkCxs$$2, new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$1, tpenv$$22, wcs);
  } else {
    tpenv$$23 = tpenv$$22;
  }

  (0, _List.iterate)(function action$$15(tp$$33) {
    SetTyparRigid(cenv$$73.g, TcEnv$$get_DisplayEnv(env$$119), m$$130, tp$$33);
  }, allDeclaredTypars$$4);
  const patternInput$$99 = TcTypeAndRecover(cenv$$73, newOk$$2, checkCxs$$2, new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$1, tpenv$$23, ty$$48);
  const matchValue$$71 = [memFlagsOpt$$3, patternInput$$98[2]];
  var $target$$343, memberFlags$$15, thisTy$$6;

  if (matchValue$$71[0] != null) {
    if (matchValue$$71[1] != null) {
      $target$$343 = 0;
      memberFlags$$15 = matchValue$$71[0];
      thisTy$$6 = matchValue$$71[1];
    } else {
      $target$$343 = 1;
    }
  } else {
    $target$$343 = 1;
  }

  switch ($target$$343) {
    case 0:
      {
        const generateOneMember = function generateOneMember(memberFlags$$16) {
          let patternInput$$101;
          var $target$$344;

          if (memberFlags$$16.MemberKind.tag === 1) {
            $target$$344 = 0;
          } else if (memberFlags$$16.MemberKind.tag === 2) {
            $target$$344 = 0;
          } else if (memberFlags$$16.MemberKind.tag === 3) {
            $target$$344 = 1;
          } else if (memberFlags$$16.MemberKind.tag === 4) {
            $target$$344 = 1;
          } else if (memberFlags$$16.MemberKind.tag === 5) {
            $target$$344 = 2;
          } else {
            $target$$344 = 0;
          }

          switch ($target$$344) {
            case 0:
              {
                patternInput$$101 = [patternInput$$99[0], valSynInfo$$4];
                break;
              }

            case 1:
              {
                const fakeArgReprInfos = (0, _List.ofSeq)((0, _Seq.delay)(function () {
                  return (0, _Seq.map)(function (n$$4) {
                    return (0, _List.ofSeq)((0, _Seq.delay)(function () {
                      return (0, _Seq.collect)(function (matchValue$$73) {
                        return (0, _Seq.singleton)(_tast.ValReprInfoModule$$$unnamedTopArg1);
                      }, (0, _Seq.rangeNumber)(1, 1, n$$4));
                    }));
                  }, (0, _ast.SynInfo$$$AritiesOfArgs)(valSynInfo$$4));
                }));
                const patternInput$$100 = (0, _TastOps.GetTopTauTypeInFSharpForm)(cenv$$73.g, fakeArgReprInfos, patternInput$$99[0], m$$130);

                if ((0, _List.length)(patternInput$$100[0]) > 1) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidPropertyType)(), m$$130));
                }

                if (memberFlags$$16.MemberKind.tag === 3) {
                  patternInput$$101 = (0, _ast.SynInfo$$$HasNoArgs)(valSynInfo$$4) ? [(0, _TastOps.op_MinusMinusGreater)((0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$73.g), patternInput$$99[0]), (0, _ast.SynInfo$$$IncorporateEmptyTupledArgForPropertyGetter)(valSynInfo$$4)] : [patternInput$$99[0], valSynInfo$$4];
                } else {
                  const setterTy = (0, _TastOps.op_MinusMinusGreater)((0, _TastOps.mkRefTupledTy)(cenv$$73.g, (0, _List.append)((0, _List.map)(function (tuple$$9) {
                    return tuple$$9[0];
                  }, (0, _List.concat)(patternInput$$100[0])), (0, _Types.L)(patternInput$$100[1], (0, _Types.L)()))), (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$73.g));
                  const synInfo = (0, _ast.SynInfo$$$IncorporateSetterArg)(valSynInfo$$4);
                  patternInput$$101 = [setterTy, synInfo];
                }

                break;
              }

            case 2:
              {
                patternInput$$101 = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected MemberKind.PropertyGetSet from signature parsing", m$$130));
                break;
              }
          }

          const valSynInfo$$6 = AdjustValSynInfoInSignature(cenv$$73.g, patternInput$$101[0], patternInput$$101[1]);
          const patternInput$$102 = memberFlags$$16.IsInstance ? [(0, _TastOps.op_MinusMinusGreater)(thisTy$$6, patternInput$$101[0]), (0, _ast.SynInfo$$$IncorporateSelfArg)(valSynInfo$$6)] : [patternInput$$101[0], valSynInfo$$6];

          const reallyGenerateOneMember = function reallyGenerateOneMember(tupledArg$$24) {
            const partialValReprInfo$$5 = TranslateTopValSynInfo((0, _ast.Ident$$get_idRange)(tupledArg$$24[0]), function (attrTgt, synAttribs) {
              return TcAttributes(cenv$$73, env$$119, attrTgt, synAttribs);
            }, tupledArg$$24[1]);
            const argsData$$3 = partialValReprInfo$$5.fields[0];
            let ty$0027$$5;

            if ((0, _ast.SynInfo$$$HasOptionalArgs)(tupledArg$$24[1])) {
              const patternInput$$103 = (0, _TastOps.GetTopTauTypeInFSharpForm)(cenv$$73.g, argsData$$3, tupledArg$$24[2], m$$130);
              const argtysl$$1 = (0, _List.map)(function mapping$$29(tupledArg$$25) {
                return (0, _List.map)(function mapping$$28(tupledArg$$26) {
                  if ((0, _ast.SynInfo$$$IsOptionalArg)(tupledArg$$26[1])) {
                    return (0, _TastOps.mkOptionTy)(cenv$$73.g, tupledArg$$26[0]);
                  } else {
                    return tupledArg$$26[0];
                  }
                }, (0, _List.zip)(tupledArg$$25[0], tupledArg$$25[1]));
              }, (0, _List.zip)((0, _illib.List$$$mapSquared)(function (tuple$$10) {
                return tuple$$10[0];
              }, patternInput$$103[0]), (0, _ast.SynValInfo$$get_ArgInfos)(tupledArg$$24[1])));
              ty$0027$$5 = (0, _TastOps.mkIteratedFunTy)((0, _List.map)(function (arg10$0040$$18) {
                return (0, _TastOps.mkRefTupledTy)(cenv$$73.g, arg10$0040$$18);
              }, argtysl$$1), patternInput$$103[1]);
            } else {
              ty$0027$$5 = tupledArg$$24[2];
            }

            let memberInfoOpt$$8;

            if (patternInput$$98[1] == null) {
              memberInfoOpt$$8 = null;
            } else {
              const tcref$$18 = patternInput$$98[1];
              const isExtrinsic$$4 = (0, _Util.equals)(patternInput$$98[3], new DeclKind(2, "ExtrinsicExtensionBinding"));
              const memberInfoTransient = MakeMemberDataAndMangledNameForMemberVal(cenv$$73.g, tcref$$18, isExtrinsic$$4, attrs$$5, (0, _Types.L)(), tupledArg$$24[3], tupledArg$$24[1], tupledArg$$24[0], false);
              memberInfoOpt$$8 = memberInfoTransient;
            }

            return new ValSpecResult(0, "ValSpecResult", altActualParent$$2, memberInfoOpt$$8, tupledArg$$24[0], patternInput$$98[0], declaredTypars$$6, ty$0027$$5, partialValReprInfo$$5, patternInput$$98[3]);
          };

          return (0, _List.ofSeq)((0, _Seq.delay)(function () {
            return (0, _Seq.append)((0, _Seq.singleton)(reallyGenerateOneMember([id$$25, patternInput$$102[1], patternInput$$102[0], memberFlags$$16])), (0, _Seq.delay)(function () {
              if ((0, _TastOps.CompileAsEvent)(cenv$$73.g, attrs$$5)) {
                const valSynInfo$$9 = EventDeclarationNormalization$$$ConvertSynInfo((0, _ast.Ident$$get_idRange)(id$$25), patternInput$$102[1]);
                const memberFlags$$18 = EventDeclarationNormalization$$$ConvertMemberFlags(memberFlags$$16);
                const delTy = (0, _infos.FindDelegateTypeOfPropertyEvent)(cenv$$73.g, cenv$$73.amap, (0, _ast.Ident$$get_idText)(id$$25), (0, _ast.Ident$$get_idRange)(id$$25), patternInput$$99[0]);
                const ty$$49 = memberFlags$$18.IsInstance ? (0, _TastOps.op_MinusMinusGreater)(thisTy$$6, (0, _TastOps.op_MinusMinusGreater)(delTy, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$73.g))) : (0, _TastOps.op_MinusMinusGreater)(delTy, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$73.g));
                return (0, _Seq.append)((0, _Seq.singleton)(reallyGenerateOneMember([(0, _ast.ident)("add_" + (0, _ast.Ident$$get_idText)(id$$25), (0, _ast.Ident$$get_idRange)(id$$25)), valSynInfo$$9, ty$$49, memberFlags$$18])), (0, _Seq.delay)(function () {
                  return (0, _Seq.singleton)(reallyGenerateOneMember([(0, _ast.ident)("remove_" + (0, _ast.Ident$$get_idText)(id$$25), (0, _ast.Ident$$get_idRange)(id$$25)), valSynInfo$$9, ty$$49, memberFlags$$18]));
                }));
              } else {
                return (0, _Seq.empty)();
              }
            }));
          }));
        };

        var $target$$345;

        if (memberFlags$$15.MemberKind.tag === 1) {
          $target$$345 = 0;
        } else if (memberFlags$$15.MemberKind.tag === 2) {
          $target$$345 = 0;
        } else if (memberFlags$$15.MemberKind.tag === 3) {
          $target$$345 = 0;
        } else if (memberFlags$$15.MemberKind.tag === 4) {
          $target$$345 = 0;
        } else if (memberFlags$$15.MemberKind.tag === 5) {
          $target$$345 = 1;
        } else {
          $target$$345 = 0;
        }

        switch ($target$$345) {
          case 0:
            {
              return [generateOneMember(memberFlags$$15), patternInput$$99[1]];
            }

          case 1:
            {
              return [(0, _List.ofSeq)((0, _Seq.delay)(function () {
                return (0, _Seq.append)(generateOneMember(new _ast.MemberFlags(memberFlags$$15.IsInstance, memberFlags$$15.IsDispatchSlot, memberFlags$$15.IsOverrideOrExplicitImpl, memberFlags$$15.IsFinal, new _ast.MemberKind(3, "PropertyGet"))), (0, _Seq.delay)(function () {
                  return generateOneMember(new _ast.MemberFlags(memberFlags$$15.IsInstance, memberFlags$$15.IsDispatchSlot, memberFlags$$15.IsOverrideOrExplicitImpl, memberFlags$$15.IsFinal, new _ast.MemberKind(4, "PropertySet")));
                }));
              })), patternInput$$99[1]];
            }
        }
      }

    case 1:
      {
        const valSynInfo$$10 = AdjustValSynInfoInSignature(cenv$$73.g, patternInput$$99[0], valSynInfo$$4);
        const partialValReprInfo$$6 = TranslateTopValSynInfo((0, _ast.Ident$$get_idRange)(id$$25), function (attrTgt$$1, synAttribs$$1) {
          return TcAttributes(cenv$$73, env$$119, attrTgt$$1, synAttribs$$1);
        }, valSynInfo$$10);
        return [(0, _Types.L)(new ValSpecResult(0, "ValSpecResult", altActualParent$$2, null, id$$25, patternInput$$98[0], declaredTypars$$6, patternInput$$99[0], partialValReprInfo$$6, patternInput$$98[3]), (0, _Types.L)()), patternInput$$99[1]];
      }
  }
}

function TcTyparOrMeasurePar(optKind, cenv$$74, env$$120, newOk$$3, tpenv$$25, _arg1$$40) {
  var kind;
  const tp$$34 = _arg1$$40;
  const id$$27 = tp$$34.fields[0];

  const checkRes = function checkRes(res$$16) {
    const matchValue$$76 = [optKind, (0, _tast.Typar$$get_Kind)(res$$16)];
    var $target$$346;

    if (matchValue$$76[0] != null) {
      if (matchValue$$76[0].tag === 0) {
        if (matchValue$$76[1].tag === 1) {
          $target$$346 = 1;
        } else {
          $target$$346 = 2;
        }
      } else if (matchValue$$76[1].tag === 0) {
        $target$$346 = 0;
      } else {
        $target$$346 = 2;
      }
    } else {
      $target$$346 = 2;
    }

    switch ($target$$346) {
      case 0:
        {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedUnitOfMeasureMarkWithAttribute)(), (0, _ast.Ident$$get_idRange)(id$$27)));
          return [res$$16, tpenv$$25];
        }

      case 1:
        {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedTypeParameter)(), (0, _ast.Ident$$get_idRange)(id$$27)));
          return [res$$16, tpenv$$25];
        }

      case 2:
        {
          const item$$20 = new _NameResolution.Item(17, "TypeVar", (0, _ast.Ident$$get_idText)(id$$27), res$$16);
          (0, _NameResolution.CallNameResolutionSink)(cenv$$74.tcSink, (0, _ast.Ident$$get_idRange)(id$$27), TcEnv$$get_NameEnv(env$$120), item$$20, item$$20, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(2, "UseInType"), TcEnv$$get_DisplayEnv(env$$120), env$$120.eAccessRights);
          return [res$$16, tpenv$$25];
        }
    }
  };

  const key = (0, _ast.Ident$$get_idText)(id$$27);
  const matchValue$$77 = (0, _Map.FSharpMap$$TryFind$$2B595)(env$$120.eNameResEnv.eTypars, key);

  if (matchValue$$77 == null) {
    const matchValue$$78 = TryFindUnscopedTypar(key, tpenv$$25);

    if (matchValue$$78 == null) {
      if ((0, _Util.equals)(newOk$$3, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"))) {
        const predictTypeParameters = function predictTypeParameters() {
          const predictions1 = (0, _Seq.map)(function mapping$$30(p$$8) {
            return "'" + p$$8[0];
          }, env$$120.eNameResEnv.eTypars);
          let predictions2;
          const elements = tpenv$$25.fields[0];
          predictions2 = (0, _Seq.map)(function mapping$$31(p$$9) {
            return "'" + p$$9[0];
          }, elements);
          return new Set((0, _List.ofSeq)((0, _Seq.delay)(function () {
            return (0, _Seq.append)(predictions1, (0, _Seq.delay)(function () {
              return predictions2;
            }));
          })));
        };

        const reportedId = (0, _ast.Ident$$$$002Ector$$7EA1AB7)("'" + (0, _ast.Ident$$get_idText)(id$$27), (0, _ast.Ident$$get_idRange)(id$$27));
        (0, _ErrorLogger.error)(new _tast.UndefinedName(0, _FSComp.SR$$$undefinedNameTypeParameter$$Z721C83C5, reportedId, predictTypeParameters));
      }

      const tp$0027$$5 = (0, _tast.NewTypar)(optKind != null ? (kind = optKind, kind) : new _tast.TyparKind(0, "Type"), new _tast.TyparRigidity(2, "WarnIfNotRigid"), tp$$34, false, new _tast.TyparDynamicReq(1, "Yes"), (0, _Types.L)(), false, false);
      const item$$21 = new _NameResolution.Item(17, "TypeVar", (0, _ast.Ident$$get_idText)(id$$27), tp$0027$$5);
      (0, _NameResolution.CallNameResolutionSink)(cenv$$74.tcSink, (0, _ast.Ident$$get_idRange)(id$$27), TcEnv$$get_NameEnv(env$$120), item$$21, item$$21, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(2, "UseInType"), TcEnv$$get_DisplayEnv(env$$120), env$$120.eAccessRights);
      return [tp$0027$$5, AddUnscopedTypar(key, tp$0027$$5, tpenv$$25)];
    } else {
      const res$$18 = matchValue$$78;
      return checkRes(res$$18);
    }
  } else {
    const res$$17 = matchValue$$77;
    return checkRes(res$$17);
  }
}

function TcTypar(cenv$$75, env$$121, newOk$$4, tpenv$$26, tp$$35) {
  return TcTyparOrMeasurePar(new _tast.TyparKind(0, "Type"), cenv$$75, env$$121, newOk$$4, tpenv$$26, tp$$35);
}

function TcTyparDecl(cenv$$76, env$$122, _arg2$$9) {
  const synAttrs = _arg2$$9.fields[0];
  const stp = _arg2$$9.fields[1];
  const id$$28 = _arg2$$9.fields[1].fields[0];
  const attrs$$6 = TcAttributes(cenv$$76, env$$122, 16384, synAttrs);
  const hasMeasureAttr = (0, _TastOps.HasFSharpAttribute)(cenv$$76.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureAttribute)(cenv$$76.g), attrs$$6);
  const hasEqDepAttr = (0, _TastOps.HasFSharpAttribute)(cenv$$76.g, (0, _TcGlobals.TcGlobals$$get_attrib_EqualityConditionalOnAttribute)(cenv$$76.g), attrs$$6);
  const hasCompDepAttr = (0, _TastOps.HasFSharpAttribute)(cenv$$76.g, (0, _TcGlobals.TcGlobals$$get_attrib_ComparisonConditionalOnAttribute)(cenv$$76.g), attrs$$6);
  const attrs$$7 = (0, _List.filter)(function predicate$$24($arg$$22) {
    return !(0, _TastOps.IsMatchingFSharpAttribute)(cenv$$76.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureAttribute)(cenv$$76.g), $arg$$22);
  }, attrs$$6);
  const tp$$36 = (0, _tast.NewTypar)(hasMeasureAttr ? new _tast.TyparKind(1, "Measure") : new _tast.TyparKind(0, "Type"), new _tast.TyparRigidity(2, "WarnIfNotRigid"), stp, false, new _tast.TyparDynamicReq(1, "Yes"), attrs$$7, hasEqDepAttr, hasCompDepAttr);
  const matchValue$$79 = (0, _TastOps.TryFindFSharpStringAttribute)(cenv$$76.g, (0, _TcGlobals.TcGlobals$$get_attrib_CompiledNameAttribute)(cenv$$76.g), attrs$$7);

  if (matchValue$$79 == null) {} else {
    const compiledName$$3 = matchValue$$79;
    (0, _tast.Typar$$SetILName$$2297AD2E)(tp$$36, compiledName$$3);
  }

  const item$$22 = new _NameResolution.Item(17, "TypeVar", (0, _ast.Ident$$get_idText)(id$$28), tp$$36);
  (0, _NameResolution.CallNameResolutionSink)(cenv$$76.tcSink, (0, _ast.Ident$$get_idRange)(id$$28), TcEnv$$get_NameEnv(env$$122), item$$22, item$$22, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(2, "UseInType"), TcEnv$$get_DisplayEnv(env$$122), env$$122.eAccessRights);
  return tp$$36;
}

function TcTyparDecls(cenv$$77, env$$123, synTypars$$2) {
  return (0, _List.map)(function (arg20$0040$$9) {
    return TcTyparDecl(cenv$$77, env$$123, arg20$0040$$9);
  }, synTypars$$2);
}

function TcTypeOrMeasure(optKind$$1, cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, ty$$50) {
  var $target$$347, lidwd, tc$$2, _commas, args$$16, m$$132, postfix, tc$$3, _commas$$1, args$$17, longId$$1, ltyp, m$$133, args$$18, m$$134, args$$19, m$$135, domainTy$$2, resultTy$$8, elemTy, m$$136, n$$5, tp$$38, m$$137, ty$$51, wcs$$1, m$$138, ty$$52, c$$23, m$$139, m$$140, exponent$$1, m$$141, ty$$53, m$$142, typ1, typ2, _commas$$2, arg1, args$$20, m$$143, m1$$2, postfix$$1, m$$144;

  if (ty$$50.tag === 1) {
    if (ty$$50.fields[0].tag === 0) {
      $target$$347 = 2;
      _commas = ty$$50.fields[3];
      args$$16 = ty$$50.fields[2];
      m$$132 = ty$$50.fields[6];
      postfix = ty$$50.fields[5];
      tc$$3 = ty$$50.fields[0].fields[0].fields[0];
    } else if (ty$$50.fields[0].tag === 7) {
      $target$$347 = 16;
      _commas$$2 = ty$$50.fields[3];
      arg1 = ty$$50.fields[0];
      args$$20 = ty$$50.fields[2];
      m$$143 = ty$$50.fields[6];
      m1$$2 = ty$$50.fields[0].fields[1];
      postfix$$1 = ty$$50.fields[5];
    } else if (ty$$50.fields[0].tag === 12) {
      $target$$347 = 16;
      _commas$$2 = ty$$50.fields[3];
      arg1 = ty$$50.fields[0];
      args$$20 = ty$$50.fields[2];
      m$$143 = ty$$50.fields[6];
      m1$$2 = ty$$50.fields[0].fields[2];
      postfix$$1 = ty$$50.fields[5];
    } else {
      $target$$347 = 17;
      m$$144 = ty$$50.fields[6];
    }
  } else if (ty$$50.tag === 2) {
    $target$$347 = 3;
    _commas$$1 = ty$$50.fields[4];
    args$$17 = ty$$50.fields[3];
    longId$$1 = ty$$50.fields[1].fields[0];
    ltyp = ty$$50.fields[0];
    m$$133 = ty$$50.fields[6];
  } else if (ty$$50.tag === 3) {
    $target$$347 = 4;
    args$$18 = ty$$50.fields[0];
    m$$134 = ty$$50.fields[1];
  } else if (ty$$50.tag === 4) {
    $target$$347 = 5;
    args$$19 = ty$$50.fields[0];
    m$$135 = ty$$50.fields[1];
  } else if (ty$$50.tag === 6) {
    $target$$347 = 6;
    domainTy$$2 = ty$$50.fields[0];
    resultTy$$8 = ty$$50.fields[1];
  } else if (ty$$50.tag === 5) {
    $target$$347 = 7;
    elemTy = ty$$50.fields[1];
    m$$136 = ty$$50.fields[2];
    n$$5 = ty$$50.fields[0];
  } else if (ty$$50.tag === 7) {
    $target$$347 = 8;
    tp$$38 = ty$$50.fields[0];
  } else if (ty$$50.tag === 8) {
    $target$$347 = 9;
    m$$137 = ty$$50.fields[0];
  } else if (ty$$50.tag === 9) {
    $target$$347 = 10;
    ty$$51 = ty$$50.fields[0];
    wcs$$1 = ty$$50.fields[1];
  } else if (ty$$50.tag === 10) {
    $target$$347 = 11;
    m$$138 = ty$$50.fields[1];
    ty$$52 = ty$$50.fields[0];
  } else if (ty$$50.tag === 13) {
    $target$$347 = 12;
    c$$23 = ty$$50.fields[0];
    m$$139 = ty$$50.fields[1];
  } else if (ty$$50.tag === 15) {
    $target$$347 = 13;
    m$$140 = ty$$50.fields[2];
  } else if (ty$$50.tag === 14) {
    $target$$347 = 13;
    m$$140 = ty$$50.fields[1];
  } else if (ty$$50.tag === 12) {
    $target$$347 = 14;
    exponent$$1 = ty$$50.fields[1];
    m$$141 = ty$$50.fields[2];
    ty$$53 = ty$$50.fields[0];
  } else if (ty$$50.tag === 11) {
    $target$$347 = 15;
    m$$142 = ty$$50.fields[2];
    typ1 = ty$$50.fields[0];
    typ2 = ty$$50.fields[1];
  } else if (ty$$50.fields[0].fields[0].tail == null) {
    $target$$347 = 0;
  } else {
    $target$$347 = 1;
    lidwd = ty$$50.fields[0];
    tc$$2 = ty$$50.fields[0].fields[0];
  }

  switch ($target$$347) {
    case 0:
      {
        return [(0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$78.g), tpenv$$27];
      }

    case 1:
      {
        const m$$131 = (0, _ast.LongIdentWithDots$$get_Range)(lidwd);
        const ad$$14 = env$$124.eAccessRights;
        const tcref$$19 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)((0, _NameResolution.ResolveTypeLongIdent)(cenv$$78.tcSink, cenv$$78.nameResolver, occ$$2, new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$124.eNameResEnv, ad$$14, tc$$2, (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$get_DefiniteEmpty)(), new _NameResolution.PermitDirectReferenceToGeneratedType(1, "No")));
        const matchValue$$80 = [optKind$$1, (0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$19)];
        var $target$$348;

        if (matchValue$$80[0] != null) {
          if (matchValue$$80[0].tag === 1) {
            if (matchValue$$80[1].tag === 1) {
              $target$$348 = 2;
            } else {
              $target$$348 = 1;
            }
          } else if (matchValue$$80[1].tag === 0) {
            $target$$348 = 3;
          } else {
            $target$$348 = 0;
          }
        } else if (matchValue$$80[1].tag === 0) {
          $target$$348 = 3;
        } else {
          $target$$348 = 2;
        }

        switch ($target$$348) {
          case 0:
            {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedTypeNotUnitOfMeasure)(), m$$131));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }

          case 1:
            {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedUnitOfMeasureNotType)(), m$$131));
              return [new _tast.TType(6, "TType_measure", (0, _ConstraintSolver.NewErrorMeasure)()), tpenv$$27];
            }

          case 2:
            {
              return [new _tast.TType(6, "TType_measure", new _tast.Measure(1, "Con", tcref$$19)), tpenv$$27];
            }

          case 3:
            {
              return TcTypeApp(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, m$$131, tcref$$19, (0, _Types.L)(), (0, _Types.L)());
            }
        }
      }

    case 2:
      {
        const ad$$15 = env$$124.eAccessRights;
        const tcref$$20 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)((0, _NameResolution.ResolveTypeLongIdent)(cenv$$78.tcSink, cenv$$78.nameResolver, new _NameResolution.ItemOccurence(2, "UseInType"), new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$124.eNameResEnv, ad$$15, tc$$3, (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(args$$16)), new _NameResolution.PermitDirectReferenceToGeneratedType(1, "No")));
        const matchValue$$81 = [optKind$$1, (0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$20)];
        var $target$$349;

        if (matchValue$$81[0] != null) {
          if (matchValue$$81[0].tag === 1) {
            if (matchValue$$81[1].tag === 1) {
              $target$$349 = 3;
            } else {
              $target$$349 = 1;
            }
          } else if (matchValue$$81[1].tag === 0) {
            $target$$349 = 2;
          } else {
            $target$$349 = 0;
          }
        } else if (matchValue$$81[1].tag === 1) {
          $target$$349 = 3;
        } else {
          $target$$349 = 2;
        }

        switch ($target$$349) {
          case 0:
            {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedTypeNotUnitOfMeasure)(), m$$132));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }

          case 1:
            {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedUnitOfMeasureNotType)(), m$$132));
              return [new _tast.TType(6, "TType_measure", (0, _ConstraintSolver.NewErrorMeasure)()), tpenv$$27];
            }

          case 2:
            {
              if (postfix ? (0, _List.exists)(function predicate$$25(tp$$37) {
                if ((0, _tast.Typar$$get_Kind)(tp$$37).tag === 1) {
                  return true;
                } else {
                  return false;
                }
              }, (0, _tast.EntityRef$$Typars$$4DB9192C)(tcref$$20, m$$132)) : false) {
                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUnitsOfMeasurePrefix)(), m$$132));
              }

              return TcTypeApp(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, m$$132, tcref$$20, (0, _Types.L)(), args$$16);
            }

          case 3:
            {
              const matchValue$$83 = [args$$16, postfix];
              var $target$$350, arg$$3;

              if (matchValue$$83[0].tail != null) {
                if (matchValue$$83[0].tail.tail == null) {
                  if (matchValue$$83[1]) {
                    $target$$350 = 0;
                    arg$$3 = matchValue$$83[0].head;
                  } else {
                    $target$$350 = 1;
                  }
                } else {
                  $target$$350 = 1;
                }
              } else {
                $target$$350 = 1;
              }

              switch ($target$$350) {
                case 0:
                  {
                    const patternInput$$104 = TcMeasure(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, arg$$3, m$$132);
                    return [new _tast.TType(6, "TType_measure", new _tast.Measure(2, "Prod", new _tast.Measure(1, "Con", tcref$$20), patternInput$$104[0])), patternInput$$104[1]];
                  }

                case 1:
                  {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnitsOfMeasureInvalidInTypeConstructor)(), m$$132));
                    return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
                  }
              }
            }
        }
      }

    case 3:
      {
        const ad$$16 = env$$124.eAccessRights;
        const patternInput$$105 = TcType(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, ltyp);
        const activePatternResult47216 = (0, _TastOps.$007CAppTy$007C_$007C)(cenv$$78.g, patternInput$$105[0]);

        if (activePatternResult47216 != null) {
          const tcref$$22 = (0, _NameResolution.ResolveTypeLongIdentInTyconRef)(cenv$$78.tcSink, cenv$$78.nameResolver, env$$124.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$ResolveToTypeRefs$$ZAA5971B)((0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(args$$17))), ad$$16, m$$133, activePatternResult47216[0], longId$$1);
          return TcTypeApp(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, patternInput$$105[1], m$$133, tcref$$22, activePatternResult47216[1], args$$17);
        } else {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeHasNoNestedTypes)(), m$$133));
        }
      }

    case 4:
      {
        const isMeasure = optKind$$1 == null ? (0, _List.exists)(function (tupledArg$$27) {
          return tupledArg$$27[0];
        }, args$$18) : optKind$$1.tag === 1 ? true : false;

        if (isMeasure) {
          const patternInput$$106 = TcMeasuresAsTuple(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, args$$18, m$$134);
          return [new _tast.TType(6, "TType_measure", patternInput$$106[0]), patternInput$$106[1]];
        } else {
          const patternInput$$107 = TcTypesAsTuple(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, args$$18, m$$134);
          return [new _tast.TType(2, "TType_tuple", _tast.tupInfoRef, patternInput$$107[0]), patternInput$$107[1]];
        }
      }

    case 5:
      {
        const patternInput$$108 = TcTypesAsTuple(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, args$$19, m$$135);
        return [new _tast.TType(2, "TType_tuple", _tast.tupInfoStruct, patternInput$$108[0]), patternInput$$108[1]];
      }

    case 6:
      {
        const patternInput$$109 = TcTypeAndRecover(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, domainTy$$2);
        const patternInput$$110 = TcTypeAndRecover(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, patternInput$$109[1], resultTy$$8);
        return [(0, _TastOps.op_MinusMinusGreater)(patternInput$$109[0], patternInput$$110[0]), patternInput$$110[1]];
      }

    case 7:
      {
        const patternInput$$111 = TcTypeAndRecover(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, elemTy);
        return [(0, _TastOps.mkArrayTy)(cenv$$78.g, n$$5, patternInput$$111[0], m$$136), patternInput$$111[1]];
      }

    case 8:
      {
        const patternInput$$112 = TcTyparOrMeasurePar(optKind$$1, cenv$$78, env$$124, newOk$$5, tpenv$$27, tp$$38);

        if ((0, _tast.Typar$$get_Kind)(patternInput$$112[0]).tag === 0) {
          return [(0, _tast.mkTyparTy)(patternInput$$112[0]), patternInput$$112[1]];
        } else {
          return [new _tast.TType(6, "TType_measure", new _tast.Measure(0, "Var", patternInput$$112[0])), patternInput$$112[1]];
        }
      }

    case 9:
      {
        const tp$$39 = TcAnonTypeOrMeasure(optKind$$1, cenv$$78, new _tast.TyparRigidity(4, "Anon"), new _tast.TyparDynamicReq(0, "No"), newOk$$5, m$$137);

        if ((0, _tast.Typar$$get_Kind)(tp$$39).tag === 0) {
          return [(0, _tast.mkTyparTy)(tp$$39), tpenv$$27];
        } else {
          return [new _tast.TType(6, "TType_measure", new _tast.Measure(0, "Var", tp$$39)), tpenv$$27];
        }
      }

    case 10:
      {
        const patternInput$$113 = TcTypeAndRecover(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, ty$$51);
        const tpenv$$38 = TcTyparConstraints(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, patternInput$$113[1], wcs$$1);
        return [patternInput$$113[0], tpenv$$38];
      }

    case 11:
      {
        const tp$$40 = TcAnonTypeOrMeasure(new _tast.TyparKind(0, "Type"), cenv$$78, new _tast.TyparRigidity(2, "WarnIfNotRigid"), new _tast.TyparDynamicReq(1, "Yes"), newOk$$5, m$$138);
        const patternInput$$114 = TcTypeAndRecover(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, ty$$52);
        (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$124), cenv$$78.css, m$$138, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), patternInput$$114[0], (0, _tast.mkTyparTy)(tp$$40));
        return [(0, _tast.Typar$$get_AsType)(tp$$40), patternInput$$114[1]];
      }

    case 12:
      {
        const matchValue$$86 = [c$$23, optKind$$1];
        var $target$$351;

        if (matchValue$$86[1] != null) {
          if (matchValue$$86[1].tag === 0) {
            $target$$351 = 0;
          } else if (matchValue$$86[0].tag === 6) {
            if (matchValue$$86[0].fields[0] === 1) {
              $target$$351 = 1;
            } else {
              $target$$351 = 2;
            }
          } else {
            $target$$351 = 2;
          }
        } else if (matchValue$$86[0].tag === 6) {
          if (matchValue$$86[0].fields[0] === 1) {
            $target$$351 = 1;
          } else {
            $target$$351 = 2;
          }
        } else {
          $target$$351 = 2;
        }

        switch ($target$$351) {
          case 0:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$parsInvalidLiteralInType)(), m$$139));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }

          case 1:
            {
              return [new _tast.TType(6, "TType_measure", new _tast.Measure(4, "One")), tpenv$$27];
            }

          case 2:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$parsInvalidLiteralInType)(), m$$139));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }
        }
      }

    case 13:
      {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$parsInvalidLiteralInType)(), m$$140));
        return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
      }

    case 14:
      {
        var $target$$352;

        if (optKind$$1 != null) {
          if (optKind$$1.tag === 0) {
            $target$$352 = 0;
          } else {
            $target$$352 = 1;
          }
        } else {
          $target$$352 = 1;
        }

        switch ($target$$352) {
          case 0:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedSymbolInTypeExpression$$Z721C83C5)("^"), m$$141));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }

          case 1:
            {
              const patternInput$$115 = TcMeasure(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, ty$$53, m$$141);
              return [new _tast.TType(6, "TType_measure", new _tast.Measure(5, "RationalPower", patternInput$$115[0], TcSynRationalConst(exponent$$1))), patternInput$$115[1]];
            }
        }
      }

    case 15:
      {
        var $target$$353;

        if (optKind$$1 != null) {
          if (optKind$$1.tag === 0) {
            $target$$353 = 0;
          } else {
            $target$$353 = 1;
          }
        } else {
          $target$$353 = 1;
        }

        switch ($target$$353) {
          case 0:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedSymbolInTypeExpression$$Z721C83C5)("/"), m$$142));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }

          case 1:
            {
              const patternInput$$116 = TcMeasure(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, typ1, m$$142);
              const patternInput$$117 = TcMeasure(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, patternInput$$116[1], typ2, m$$142);
              return [new _tast.TType(6, "TType_measure", new _tast.Measure(2, "Prod", patternInput$$116[0], new _tast.Measure(3, "Inv", patternInput$$117[0]))), patternInput$$117[1]];
            }
        }
      }

    case 16:
      {
        const matchValue$$87 = [optKind$$1, args$$20, postfix$$1];
        var $target$$354, arg2;

        if (matchValue$$87[0] != null) {
          if (matchValue$$87[0].tag === 1) {
            if (matchValue$$87[1].tail != null) {
              if (matchValue$$87[1].tail.tail == null) {
                if (matchValue$$87[2]) {
                  $target$$354 = 0;
                  arg2 = matchValue$$87[1].head;
                } else {
                  $target$$354 = 1;
                }
              } else {
                $target$$354 = 1;
              }
            } else {
              $target$$354 = 1;
            }
          } else {
            $target$$354 = 1;
          }
        } else if (matchValue$$87[1].tail != null) {
          if (matchValue$$87[1].tail.tail == null) {
            if (matchValue$$87[2]) {
              $target$$354 = 0;
              arg2 = matchValue$$87[1].head;
            } else {
              $target$$354 = 1;
            }
          } else {
            $target$$354 = 1;
          }
        } else {
          $target$$354 = 1;
        }

        switch ($target$$354) {
          case 0:
            {
              const patternInput$$118 = TcMeasure(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, tpenv$$27, arg1, m1$$2);
              const patternInput$$119 = TcMeasure(cenv$$78, newOk$$5, checkCxs$$3, occ$$2, env$$124, patternInput$$118[1], arg2, m$$143);
              return [new _tast.TType(6, "TType_measure", new _tast.Measure(2, "Prod", patternInput$$118[0], patternInput$$119[0])), patternInput$$119[1]];
            }

          case 1:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParameterInvalidAsTypeConstructor)(), m$$143));
              return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
            }
        }
      }

    case 17:
      {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIllegalSyntaxInTypeExpression)(), m$$144));
        return [(0, _ConstraintSolver.NewErrorType)(), tpenv$$27];
      }
  }
}

function TcType(cenv$$79, newOk$$6, checkCxs$$4, occ$$3, env$$125, tpenv$$45, ty$$54) {
  return TcTypeOrMeasure(new _tast.TyparKind(0, "Type"), cenv$$79, newOk$$6, checkCxs$$4, occ$$3, env$$125, tpenv$$45, ty$$54);
}

function TcMeasure(cenv$$80, newOk$$7, checkCxs$$5, occ$$4, env$$126, tpenv$$46, ty$$55, m$$145) {
  if (ty$$55.tag === 8) {
    const m$$146 = ty$$55.fields[0];
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAnonymousUnitsOfMeasureCannotBeNested)(), m$$146));
    return [(0, _ConstraintSolver.NewErrorMeasure)(), tpenv$$46];
  } else {
    const matchValue$$88 = TcTypeOrMeasure(new _tast.TyparKind(1, "Measure"), cenv$$80, newOk$$7, checkCxs$$5, occ$$4, env$$126, tpenv$$46, ty$$55);

    if (matchValue$$88[0].tag === 6) {
      const ms$$6 = matchValue$$88[0].fields[0];
      return [ms$$6, matchValue$$88[1]];
    } else {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedUnitOfMeasureNotType)(), m$$145));
      return [(0, _ConstraintSolver.NewErrorMeasure)(), tpenv$$46];
    }
  }
}

function TcAnonTypeOrMeasure(optKind$$2, _cenv$$1, rigid$$5, dyn, newOk$$8, m$$147) {
  if ((0, _Util.equals)(newOk$$8, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"))) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAnonymousTypeInvalidInDeclaration)(), m$$147));
  }

  const rigid$$6 = ((0, _Util.equals)(rigid$$5, new _tast.TyparRigidity(4, "Anon")) ? (0, _Util.equals)(newOk$$8, new ImplictlyBoundTyparsAllowed(0, "NewTyparsOKButWarnIfNotRigid")) : false) ? new _tast.TyparRigidity(2, "WarnIfNotRigid") : rigid$$5;
  const kind$$1 = optKind$$2 != null ? optKind$$2.tag === 1 ? new _tast.TyparKind(1, "Measure") : new _tast.TyparKind(0, "Type") : new _tast.TyparKind(0, "Type");
  return (0, _ConstraintSolver.NewAnonTypar)(kind$$1, m$$147, rigid$$6, new _ast.TyparStaticReq(0, "NoStaticReq"), dyn);
}

function TcTypes(cenv$$81, newOk$$9, checkCxs$$6, occ$$5, env$$127, tpenv$$48, args$$21) {
  return (0, _List.mapFold)(function (tpenv$$49, ty$$56) {
    return TcTypeAndRecover(cenv$$81, newOk$$9, checkCxs$$6, occ$$5, env$$127, tpenv$$49, ty$$56);
  }, tpenv$$48, args$$21);
}

function TcTypesAsTuple(cenv$$82, newOk$$10, checkCxs$$7, occ$$6, env$$128, tpenv$$50, args$$22, m$$148) {
  if (args$$22.tail != null) {
    if (args$$22.tail.tail == null) {
      const patternInput$$120 = TcTypeAndRecover(cenv$$82, newOk$$10, checkCxs$$7, occ$$6, env$$128, tpenv$$50, args$$22.head[1]);
      return [(0, _Types.L)(patternInput$$120[0], (0, _Types.L)()), patternInput$$120[1]];
    } else {
      const patternInput$$121 = TcTypeAndRecover(cenv$$82, newOk$$10, checkCxs$$7, occ$$6, env$$128, tpenv$$50, args$$22.head[1]);
      const patternInput$$122 = TcTypesAsTuple(cenv$$82, newOk$$10, checkCxs$$7, occ$$6, env$$128, patternInput$$121[1], args$$22.tail, m$$148);

      if (args$$22.head[0]) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedSlashInType)(), m$$148));
      }

      return [(0, _Types.L)(patternInput$$121[0], patternInput$$122[0]), patternInput$$122[1]];
    }
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("empty tuple type", m$$148));
  }
}

function TcMeasuresAsTuple(cenv$$83, newOk$$11, checkCxs$$8, occ$$7, env$$129, tpenv$$54, args$$24, m$$149) {
  const gather = function gather(args$$25, tpenv$$55, isquot$$2, acc$$5) {
    gather: while (true) {
      if (args$$25.tail != null) {
        const ty$$61 = args$$25.head[1];
        const nextisquot = args$$25.head[0];
        const args$$26 = args$$25.tail;
        const patternInput$$123 = TcMeasure(cenv$$83, newOk$$11, checkCxs$$8, occ$$7, env$$129, tpenv$$55, ty$$61, m$$149);
        args$$25 = args$$26;
        tpenv$$55 = patternInput$$123[1];
        const $var$$355 = nextisquot;
        acc$$5 = isquot$$2 ? new _tast.Measure(2, "Prod", acc$$5, new _tast.Measure(3, "Inv", patternInput$$123[0])) : new _tast.Measure(2, "Prod", acc$$5, patternInput$$123[0]);
        isquot$$2 = $var$$355;
        continue gather;
      } else {
        return [acc$$5, tpenv$$55];
      }
    }
  };

  return gather(args$$24, tpenv$$54, false, new _tast.Measure(4, "One"));
}

function TcTypesOrMeasures(optKinds, cenv$$84, newOk$$12, checkCxs$$9, occ$$8, env$$130, tpenv$$57, args$$27, m$$150) {
  if (optKinds != null) {
    const kinds = optKinds;

    if ((0, _List.length)(kinds) === (0, _List.length)(args$$27)) {
      return (0, _List.mapFold)(function (tpenv$$59, tupledArg$$28) {
        return TcTypeOrMeasure(tupledArg$$28[1], cenv$$84, newOk$$12, checkCxs$$9, occ$$8, env$$130, tpenv$$59, tupledArg$$28[0]);
      }, tpenv$$57, (0, _List.zip)(args$$27, kinds));
    } else if (kinds.tail == null) {
      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedTypeArguments)(), m$$150));
    } else {
      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeParameterArityMismatch$$Z37302880)((0, _List.length)(kinds), (0, _List.length)(args$$27)), m$$150));
    }
  } else {
    return (0, _List.mapFold)(function (tpenv$$58, ty$$62) {
      return TcTypeOrMeasure(null, cenv$$84, newOk$$12, checkCxs$$9, occ$$8, env$$130, tpenv$$58, ty$$62);
    }, tpenv$$57, args$$27);
  }
}

function TcTyparConstraints(cenv$$85, newOk$$13, checkCxs$$10, occ$$9, env$$131, tpenv$$60, wcs$$2) {
  const patternInput$$124 = (0, _List.fold)(function (tupledArg$$29, tc$$4) {
    return [tupledArg$$29[0] - 1, TcTyparConstraint(tupledArg$$29[0], cenv$$85, newOk$$13, checkCxs$$10, occ$$9, env$$131, tupledArg$$29[1], tc$$4)];
  }, [(0, _List.length)(wcs$$2) - 1, tpenv$$60], wcs$$2);
  return patternInput$$124[1];
}

function TcTypeApp(cenv$$86, newOk$$14, checkCxs$$11, occ$$10, env$$132, tpenv$$63, m$$151, tcref$$23, pathTypeArgs, synArgTys) {
  (0, _AccessibilityLogic.CheckTyconAccessible)(cenv$$86.amap, m$$151, env$$132.eAccessRights, tcref$$23);
  (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckEntityAttributes)(cenv$$86.g, tcref$$23, m$$151));
  const patternInput$$125 = infoOfTyconRef(m$$151, tcref$$23);

  if ((0, _Util.equals)(checkCxs$$11, new CheckConstraints(1, "NoCheckCxs"))) {
    (0, _List.iterate)(function action$$16(tp$$41) {
      (0, _tast.Typar$$SetConstraints$$Z10399A1)(tp$$41, (0, _Types.L)());
    }, patternInput$$125[0]);
  }

  if ((0, _List.length)(patternInput$$125[2]) !== (0, _List.length)(pathTypeArgs) + (0, _List.length)(synArgTys)) {
    (0, _ErrorLogger.error)(new TyconBadArgs(TcEnv$$get_DisplayEnv(env$$132), tcref$$23, (0, _List.length)(pathTypeArgs) + (0, _List.length)(synArgTys), m$$151));
  }

  let patternInput$$126;
  const tpsForArgs = (0, _illib.List$$$drop)((0, _List.length)(patternInput$$125[0]) - (0, _List.length)(synArgTys), patternInput$$125[0]);
  const kindsForArgs = (0, _List.map)(function mapping$$32(tp$$42) {
    return (0, _tast.Typar$$get_Kind)(tp$$42);
  }, tpsForArgs);
  patternInput$$126 = TcTypesOrMeasures(kindsForArgs, cenv$$86, newOk$$14, checkCxs$$11, occ$$10, env$$132, tpenv$$63, synArgTys, m$$151);
  const actualArgTys = (0, _List.append)(pathTypeArgs, patternInput$$126[0]);

  if ((0, _Util.equals)(checkCxs$$11, new CheckConstraints(0, "CheckCxs"))) {
    (0, _List.iterate2)(function (actualTy$$4, expectedTy$$2) {
      UnifyTypes(cenv$$86, env$$132, m$$151, actualTy$$4, expectedTy$$2);
    }, patternInput$$125[2], actualArgTys);
  }

  const ty$$63 = (0, _TcGlobals.TcGlobals$$decompileType)(cenv$$86.g, tcref$$23, actualArgTys);
  return [ty$$63, patternInput$$126[1]];
}

function TcTypeOrMeasureAndRecover(optKind$$4, cenv$$87, newOk$$15, checkCxs$$12, occ$$11, env$$133, tpenv$$65, ty$$64) {
  try {
    return TcTypeOrMeasure(optKind$$4, cenv$$87, newOk$$15, checkCxs$$12, occ$$11, env$$133, tpenv$$65, ty$$64);
  } catch (e$$40) {
    (0, _ErrorLogger.errorRecovery)(e$$40, (0, _ast.SynType$$get_Range)(ty$$64));
    let rty;
    const matchValue$$89 = [optKind$$4, newOk$$15];
    var $target$$356;

    if (matchValue$$89[0] != null) {
      if (matchValue$$89[0].tag === 1) {
        if (matchValue$$89[1].tag === 2) {
          $target$$356 = 0;
        } else {
          $target$$356 = 1;
        }
      } else if (matchValue$$89[1].tag === 2) {
        $target$$356 = 2;
      } else {
        $target$$356 = 3;
      }
    } else if (matchValue$$89[1].tag === 2) {
      $target$$356 = 2;
    } else {
      $target$$356 = 3;
    }

    switch ($target$$356) {
      case 0:
        {
          rty = new _tast.TType(6, "TType_measure", new _tast.Measure(4, "One"));
          break;
        }

      case 1:
        {
          rty = new _tast.TType(6, "TType_measure", (0, _ConstraintSolver.NewErrorMeasure)());
          break;
        }

      case 2:
        {
          rty = (0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$87.g);
          break;
        }

      case 3:
        {
          rty = (0, _ConstraintSolver.NewErrorType)();
          break;
        }
    }

    return [rty, tpenv$$65];
  }
}

function TcTypeAndRecover(cenv$$88, newOk$$16, checkCxs$$13, occ$$12, env$$134, tpenv$$66, ty$$65) {
  return TcTypeOrMeasureAndRecover(new _tast.TyparKind(0, "Type"), cenv$$88, newOk$$16, checkCxs$$13, occ$$12, env$$134, tpenv$$66, ty$$65);
}

function TcNestedTypeApplication(cenv$$89, newOk$$17, checkCxs$$14, occ$$13, env$$135, tpenv$$67, mWholeTypeApp, ty$$66, tyargs$$4) {
  const ty$$67 = (0, _TastOps.convertToTypeWithMetadataIfPossible)(cenv$$89.g, ty$$66);

  if (!(0, _TastOps.isAppTy)(cenv$$89.g, ty$$67)) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeHasNoNestedTypes)(), mWholeTypeApp));
  }

  if (ty$$67.tag === 1) {
    const tinst$$17 = ty$$67.fields[1];
    const tcref$$24 = ty$$67.fields[0];
    const pathTypeArgs$$1 = (0, _List.truncate)((0, _Util.max)(_Util.comparePrimitives, (0, _List.length)(tinst$$17) - (0, _List.length)((0, _tast.EntityRef$$Typars$$4DB9192C)(tcref$$24, mWholeTypeApp)), 0), tinst$$17);
    return TcTypeApp(cenv$$89, newOk$$17, checkCxs$$14, occ$$13, env$$135, tpenv$$67, mWholeTypeApp, tcref$$24, pathTypeArgs$$1, tyargs$$4);
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("TcNestedTypeApplication: expected type application", mWholeTypeApp));
  }
}

function TryAdjustHiddenVarNameToCompGenName(cenv$$90, env$$136, id$$29, altNameRefCellOpt) {
  if (altNameRefCellOpt == null) {
    return null;
  } else if (altNameRefCellOpt.contents.tag === 1) {
    return altNameRefCellOpt.contents.fields[0];
  } else {
    const altNameRefCell = altNameRefCellOpt;

    if ((0, _NameResolution.ResolvePatternLongIdent)(cenv$$90.tcSink, cenv$$90.nameResolver, new _NameResolution.WarnOnUpperFlag(1, "AllIdsOK"), false, (0, _ast.Ident$$get_idRange)(id$$29), env$$136.eAccessRights, env$$136.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), (0, _Types.L)(id$$29, (0, _Types.L)())).tag === 6) {
      return null;
    } else {
      altNameRefCell.contents = new _ast.SynSimplePatAlternativeIdInfo(1, "Decided", altNameRefCellOpt.contents.fields[0]);
      return altNameRefCellOpt.contents.fields[0];
    }
  }
}

function TcSimplePat(optArgsOK, checkCxs$$15, cenv$$91, ty$$68, env$$137, tpenv$$68, names$$2, takenNames, p$$10) {
  TcSimplePat: while (true) {
    switch (p$$10.tag) {
      case 1:
        {
          const p$$11 = p$$10.fields[0];
          const m$$153 = p$$10.fields[2];
          const cty$$1 = p$$10.fields[1];
          const patternInput$$128 = TcTypeAndRecover(cenv$$91, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), checkCxs$$15, new _NameResolution.ItemOccurence(2, "UseInType"), env$$137, tpenv$$68, cty$$1);
          var $target$$357;

          if (p$$11.tag === 0) {
            if (p$$11.fields[4]) {
              $target$$357 = 0;
            } else {
              $target$$357 = 1;
            }
          } else {
            $target$$357 = 1;
          }

          switch ($target$$357) {
            case 0:
              {
                UnifyTypes(cenv$$91, env$$137, m$$153, ty$$68, (0, _TastOps.mkOptionTy)(cenv$$91.g, patternInput$$128[0]));
                break;
              }

            case 1:
              {
                UnifyTypes(cenv$$91, env$$137, m$$153, ty$$68, patternInput$$128[0]);
                break;
              }
          }

          optArgsOK = optArgsOK;
          checkCxs$$15 = checkCxs$$15;
          cenv$$91 = cenv$$91;
          ty$$68 = ty$$68;
          env$$137 = env$$137;
          tpenv$$68 = patternInput$$128[1];
          names$$2 = names$$2;
          takenNames = takenNames;
          p$$10 = p$$11;
          continue TcSimplePat;
        }

      case 2:
        {
          const p$$12 = p$$10.fields[0];
          optArgsOK = optArgsOK;
          checkCxs$$15 = checkCxs$$15;
          cenv$$91 = cenv$$91;
          ty$$68 = ty$$68;
          env$$137 = env$$137;
          tpenv$$68 = tpenv$$68;
          names$$2 = names$$2;
          takenNames = takenNames;
          p$$10 = p$$12;
          continue TcSimplePat;
        }

      default:
        {
          const m$$152 = p$$10.fields[5];
          const isOpt$$2 = p$$10.fields[4];
          const isMemberThis = p$$10.fields[3];
          const id$$30 = p$$10.fields[0];
          const compgen$$5 = p$$10.fields[2];
          const altNameRefCellOpt$$1 = p$$10.fields[1];
          const matchValue$$91 = TryAdjustHiddenVarNameToCompGenName(cenv$$91, env$$137, id$$30, altNameRefCellOpt$$1);

          if (matchValue$$91 == null) {
            if (isOpt$$2) {
              if (!optArgsOK) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOptionalArgsOnlyOnMembers)(), m$$152));
              }

              const tyarg = (0, _ConstraintSolver.NewInferenceType)();
              UnifyTypes(cenv$$91, env$$137, m$$152, ty$$68, (0, _TastOps.mkOptionTy)(cenv$$91.g, tyarg));
            }

            const patternInput$$127 = TcPatBindingName(cenv$$91, env$$137, id$$30, ty$$68, isMemberThis, null, null, new _tast.ValInline(2, "Optional"), permitInferTypars, noArgOrRetAttribs, false, null, compgen$$5, names$$2, takenNames);
            return [(0, _ast.Ident$$get_idText)(id$$30), [tpenv$$68, patternInput$$127[1], patternInput$$127[2]]];
          } else {
            const altId$$2 = matchValue$$91;
            optArgsOK = optArgsOK;
            checkCxs$$15 = checkCxs$$15;
            cenv$$91 = cenv$$91;
            ty$$68 = ty$$68;
            env$$137 = env$$137;
            tpenv$$68 = tpenv$$68;
            names$$2 = names$$2;
            takenNames = takenNames;
            p$$10 = new _ast.SynSimplePat(0, "Id", altId$$2, null, compgen$$5, isMemberThis, isOpt$$2, m$$152);
            continue TcSimplePat;
          }
        }
    }
  }
}

function ValidateOptArgOrder(spats$$1) {
  const getPats = function getPats(spats$$2) {
    getPats: while (true) {
      if (spats$$2.tag === 1) {
        const p$$14 = spats$$2.fields[0];
        spats$$2 = p$$14;
        continue getPats;
      } else {
        const p$$13 = spats$$2.fields[0];
        const m$$154 = spats$$2.fields[1];
        return [p$$13, m$$154];
      }
    }
  };

  const isOptArg = function isOptArg(pat$$3) {
    isOptArg: while (true) {
      switch (pat$$3.tag) {
        case 1:
          {
            const p$$15 = pat$$3.fields[0];
            pat$$3 = p$$15;
            continue isOptArg;
          }

        case 2:
          {
            const p$$16 = pat$$3.fields[0];
            pat$$3 = p$$16;
            continue isOptArg;
          }

        default:
          {
            const isOpt$$3 = pat$$3.fields[4];
            return isOpt$$3;
          }
      }
    }
  };

  const patternInput$$129 = getPats(spats$$1);
  const hitOptArg = new _Types.FSharpRef(false);
  (0, _List.iterate)(function (pat$$4) {
    if (isOptArg(pat$$4)) {
      hitOptArg.contents = true;
    } else if (hitOptArg.contents) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOptionalArgsMustComeAfterNonOptionalArgs)(), patternInput$$129[1]));
    }
  }, patternInput$$129[0]);
}

function TcSimplePats(cenv$$92, optArgsOK$$1, checkCxs$$16, ty$$69, env$$138, tpenv$$70, names$$4, takenNames$$2, p$$17) {
  TcSimplePats: while (true) {
    ValidateOptArgOrder(p$$17);

    if (p$$17.tag === 1) {
      const patternInput$$133 = TcTypeAndRecover(cenv$$92, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$138, tpenv$$70, p$$17.fields[1]);
      var $target$$358;

      if (p$$17.fields[0].tag === 0) {
        if (p$$17.fields[0].fields[0].tail != null) {
          if (p$$17.fields[0].fields[0].head.tag === 0) {
            if (p$$17.fields[0].fields[0].head.fields[4]) {
              if (p$$17.fields[0].fields[0].tail.tail == null) {
                $target$$358 = 0;
              } else {
                $target$$358 = 1;
              }
            } else {
              $target$$358 = 1;
            }
          } else {
            $target$$358 = 1;
          }
        } else {
          $target$$358 = 1;
        }
      } else {
        $target$$358 = 1;
      }

      switch ($target$$358) {
        case 0:
          {
            UnifyTypes(cenv$$92, env$$138, p$$17.fields[2], ty$$69, (0, _TastOps.mkOptionTy)(cenv$$92.g, patternInput$$133[0]));
            break;
          }

        case 1:
          {
            UnifyTypes(cenv$$92, env$$138, p$$17.fields[2], ty$$69, patternInput$$133[0]);
            break;
          }
      }

      cenv$$92 = cenv$$92;
      optArgsOK$$1 = optArgsOK$$1;
      checkCxs$$16 = checkCxs$$16;
      ty$$69 = ty$$69;
      env$$138 = env$$138;
      tpenv$$70 = patternInput$$133[1];
      names$$4 = names$$4;
      takenNames$$2 = takenNames$$2;
      p$$17 = p$$17.fields[0];
      continue TcSimplePats;
    } else if (p$$17.fields[0].tail != null) {
      if (p$$17.fields[0].tail.tail == null) {
        const patternInput$$131 = TcSimplePat(optArgsOK$$1, checkCxs$$16, cenv$$92, ty$$69, env$$138, tpenv$$70, names$$4, takenNames$$2, p$$17.fields[0].head);
        const tpenv$$71 = patternInput$$131[1][0];
        const takenNames$$4 = patternInput$$131[1][2];
        const names$$6 = patternInput$$131[1][1];
        return [(0, _Types.L)(patternInput$$131[0], (0, _Types.L)()), [tpenv$$71, names$$6, takenNames$$4]];
      } else {
        const ptys$$4 = UnifyRefTupleType(env$$138.eContextInfo, cenv$$92, TcEnv$$get_DisplayEnv(env$$138), p$$17.fields[1], ty$$69, p$$17.fields[0]);
        const patternInput$$132 = (0, _List.mapFold)(function (tpenv$$72, tupledArg$$30) {
          return TcSimplePat(optArgsOK$$1, checkCxs$$16, cenv$$92, tupledArg$$30[0], env$$138, tpenv$$72[0], tpenv$$72[1], tpenv$$72[2], tupledArg$$30[1]);
        }, [tpenv$$70, names$$4, takenNames$$2], (0, _List.zip)(ptys$$4, p$$17.fields[0]));
        const tpenv$$74 = patternInput$$132[1][0];
        const takenNames$$6 = patternInput$$132[1][2];
        const names$$8 = patternInput$$132[1][1];
        return [patternInput$$132[0], [tpenv$$74, names$$8, takenNames$$6]];
      }
    } else {
      const id$$31 = (0, _ast.ident)("unitVar" + (0, _Util.int32ToString)((0, _Set.FSharpSet$$get_Count)(takenNames$$2)), p$$17.fields[1]);
      UnifyTypes(cenv$$92, env$$138, p$$17.fields[1], ty$$69, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$92.g));
      const patternInput$$130 = TcPatBindingName(cenv$$92, env$$138, id$$31, ty$$69, false, null, null, new _tast.ValInline(2, "Optional"), permitInferTypars, noArgOrRetAttribs, false, null, true, names$$4, takenNames$$2);
      return [(0, _Types.L)((0, _ast.Ident$$get_idText)(id$$31), (0, _Types.L)()), [tpenv$$70, patternInput$$130[1], patternInput$$130[2]]];
    }
  }
}

function TcSimplePatsOfUnknownType(cenv$$93, optArgsOK$$2, checkCxs$$17, env$$139, tpenv$$76, spats$$3) {
  const argty$$2 = (0, _ConstraintSolver.NewInferenceType)();
  return TcSimplePats(cenv$$93, optArgsOK$$2, checkCxs$$17, argty$$2, env$$139, tpenv$$76, (0, _illib.NameMapModule$$$empty)(), (0, _Set.empty)({
    Compare: _Util.comparePrimitives
  }), spats$$3);
}

function TcPatBindingName(cenv$$94, env$$140, id$$32, ty$$71, isMemberThis$$1, vis1$$2, topValData$$2, inlineFlag$$9, declaredTypars$$7, argAttribs$$3, isMutable$$10, vis2$$3, compgen$$6, names$$9, takenNames$$7) {
  const vis$$18 = vis1$$2 != null ? vis1$$2 : vis2$$3;

  if ((0, _Set.FSharpSet$$Contains$$2B595)(takenNames$$7, (0, _ast.Ident$$get_idText)(id$$32))) {
    (0, _ErrorLogger.errorR)(new VarBoundTwice(id$$32));
  }

  const compgen$$7 = compgen$$6 ? true : (0, _PrettyNaming.IsCompilerGeneratedName)((0, _ast.Ident$$get_idText)(id$$32));
  const baseOrThis$$5 = isMemberThis$$1 ? new _tast.ValBaseOrThisInfo(3, "MemberThisVal") : new _tast.ValBaseOrThisInfo(2, "NormalVal");
  const names$$10 = (0, _Map.add)((0, _ast.Ident$$get_idText)(id$$32), new PrelimValScheme1(0, "PrelimValScheme1", id$$32, declaredTypars$$7, ty$$71, topValData$$2, null, isMutable$$10, inlineFlag$$9, baseOrThis$$5, argAttribs$$3, vis$$18, compgen$$7), names$$9);
  const takenNames$$8 = (0, _Set.add)((0, _ast.Ident$$get_idText)(id$$32), takenNames$$7);
  return [function (_arg2$$10) {
    var vref$$8;
    const values$$4 = _arg2$$10.fields[0];
    const isLeftMost = _arg2$$10.fields[1];
    let patternInput$$134;
    const matchValue$$92 = (0, _Map.FSharpMap$$TryFind$$2B595)(values$$4, (0, _ast.Ident$$get_idText)(id$$32));

    if (matchValue$$92 == null) {
      patternInput$$134 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNameNotBoundInPattern$$Z721C83C5)((0, _ast.Ident$$get_idText)(id$$32)), (0, _ast.Ident$$get_idRange)(id$$32)));
    } else {
      const value$$18 = matchValue$$92;
      const name$$2 = (0, _ast.Ident$$get_idText)(id$$32);

      if (!(0, _String.isNullOrEmpty)(name$$2) ? (0, _Char.isLower)(name$$2[0]) : false) {
        const matchValue$$93 = (0, _NameResolution.TryFindPatternByName)(name$$2, env$$140.eNameResEnv);
        var $target$$359, vref$$9;

        if (matchValue$$93 != null) {
          if (matchValue$$93.tag === 0) {
            if (vref$$8 = matchValue$$93.fields[0], (0, _tast.ValRef$$get_LiteralValue)(vref$$8) != null) {
              $target$$359 = 0;
              vref$$9 = matchValue$$93.fields[0];
            } else {
              $target$$359 = 1;
            }
          } else {
            $target$$359 = 1;
          }
        } else {
          $target$$359 = 1;
        }

        switch ($target$$359) {
          case 0:
            {
              (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$checkLowercaseLiteralBindingInPattern$$Z721C83C5)((0, _ast.Ident$$get_idText)(id$$32)), (0, _ast.Ident$$get_idRange)(id$$32)));
              break;
            }

          case 1:
            {
              var $target$$360;

              if (matchValue$$93 == null) {
                $target$$360 = 0;
              } else {
                $target$$360 = 0;
              }

              switch ($target$$360) {}

              break;
            }
        }
      }

      patternInput$$134 = value$$18;
    }

    if ((!isLeftMost ? !(0, _tast.Val$$get_IsCompilerGenerated)(patternInput$$134[0]) : false) ? !(0, _String.startsWith)((0, _tast.Val$$get_LogicalName)(patternInput$$134[0]), "_", 4) : false) {
      const item$$23 = new _NameResolution.Item(0, "Value", (0, _tast.mkLocalValRef)(patternInput$$134[0]));
      (0, _NameResolution.CallNameResolutionSink)(cenv$$94.tcSink, (0, _ast.Ident$$get_idRange)(id$$32), TcEnv$$get_NameEnv(env$$140), item$$23, item$$23, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$140), env$$140.eAccessRights);
    }

    return new _PatternMatchCompilation.PatternValBinding(0, "PBind", patternInput$$134[0], patternInput$$134[1]);
  }, names$$10, takenNames$$8];
}

function TcPatAndRecover(warnOnUpper, cenv$$95, env$$141, topValInfo$$2, vFlags_0, vFlags_1, vFlags_2, vFlags_3, vFlags_4, vFlags_5, tpenv$$77, names$$11, takenNames$$9, ty$$72, pat$$5) {
  const vFlags = [vFlags_0, vFlags_1, vFlags_2, vFlags_3, vFlags_4, vFlags_5];

  try {
    return TcPat(warnOnUpper, cenv$$95, env$$141, topValInfo$$2, vFlags[0], vFlags[1], vFlags[2], vFlags[3], vFlags[4], vFlags[5], tpenv$$77, names$$11, takenNames$$9, ty$$72, pat$$5);
  } catch (e$$42) {
    const m$$159 = (0, _ast.SynPat$$get_Range)(pat$$5);
    (0, _ErrorLogger.errorRecovery)(e$$42, m$$159);
    return [function (_arg3$$6) {
      return new _PatternMatchCompilation.Pattern(1, "TPat_wild", m$$159);
    }, [tpenv$$77, names$$11, takenNames$$9]];
  }
}

function TcPat(warnOnUpper$$1, cenv$$96, env$$142, topValInfo$$3, vFlags_0$$1, vFlags_1$$1, vFlags_2$$1, vFlags_3$$1, vFlags_4$$1, vFlags_5$$1, tpenv$$78, names$$12, takenNames$$10, ty$$73, pat$$6) {
  var activePatternResult47423, args$$40, activePatternResult47421, activePatternResult47422, activePatternResult47424, args$$41;

  TcPat: while (true) {
    const vFlags$$1 = [vFlags_0$$1, vFlags_1$$1, vFlags_2$$1, vFlags_3$$1, vFlags_4$$1, vFlags_5$$1];
    const ad$$17 = env$$142.eAccessRights;
    var $target$$361, c$$24, m$$160, m$$162, cty$$3, m$$163, m$$166, id$$34, isMemberThis$$3, m$$167, p$$20, vis$$20, cty$$4, m$$168, p$$21, m$$169, m$$170, pat1$$1, pat2, m$$171, pats$$1, args$$28, longId$$2, m$$172, tyargs$$5, vis$$21, m$$180, args$$44, m$$181, args$$45, m$$182, p$$25, args$$46, isArray$$1, m$$183, flds$$1, m$$184, c1, c2$$1, m$$185, m$$186, m$$187, pat$$10;

    if (pat$$6.tag === 1) {
      $target$$361 = 1;
      m$$162 = pat$$6.fields[0];
    } else if (pat$$6.tag === 15) {
      $target$$361 = 2;
      cty$$3 = pat$$6.fields[0];
      m$$163 = pat$$6.fields[1];
    } else if (pat$$6.tag === 2) {
      if (pat$$6.fields[0].tag === 15) {
        $target$$361 = 2;
        cty$$3 = pat$$6.fields[0].fields[0];
        m$$163 = pat$$6.fields[0].fields[1];
      } else {
        $target$$361 = 4;
        id$$34 = pat$$6.fields[1];
        isMemberThis$$3 = pat$$6.fields[2];
        m$$167 = pat$$6.fields[4];
        p$$20 = pat$$6.fields[0];
        vis$$20 = pat$$6.fields[3];
      }
    } else if (pat$$6.tag === 14) {
      $target$$361 = 3;
      m$$166 = pat$$6.fields[1];
    } else if (pat$$6.tag === 3) {
      $target$$361 = 5;
      cty$$4 = pat$$6.fields[1];
      m$$168 = pat$$6.fields[2];
      p$$21 = pat$$6.fields[0];
    } else if (pat$$6.tag === 4) {
      $target$$361 = 6;
      m$$169 = pat$$6.fields[2];
    } else if (pat$$6.tag === 5) {
      $target$$361 = 7;
      m$$170 = pat$$6.fields[2];
      pat1$$1 = pat$$6.fields[0];
      pat2 = pat$$6.fields[1];
    } else if (pat$$6.tag === 6) {
      $target$$361 = 8;
      m$$171 = pat$$6.fields[1];
      pats$$1 = pat$$6.fields[0];
    } else if (pat$$6.tag === 7) {
      $target$$361 = 9;
      args$$28 = pat$$6.fields[3];
      longId$$2 = pat$$6.fields[0].fields[0];
      m$$172 = pat$$6.fields[5];
      tyargs$$5 = pat$$6.fields[2];
      vis$$21 = pat$$6.fields[4];
    } else if (pat$$6.tag === 16) {
      $target$$361 = 10;
      m$$180 = pat$$6.fields[1];
    } else if (pat$$6.tag === 8) {
      $target$$361 = 11;
      args$$44 = pat$$6.fields[0];
      m$$181 = pat$$6.fields[1];
    } else if (pat$$6.tag === 9) {
      $target$$361 = 12;
      args$$45 = pat$$6.fields[0];
      m$$182 = pat$$6.fields[1];
    } else if (pat$$6.tag === 10) {
      $target$$361 = 13;
      p$$25 = pat$$6.fields[0];
    } else if (pat$$6.tag === 11) {
      $target$$361 = 14;
      args$$46 = pat$$6.fields[1];
      isArray$$1 = pat$$6.fields[0];
      m$$183 = pat$$6.fields[2];
    } else if (pat$$6.tag === 12) {
      $target$$361 = 15;
      flds$$1 = pat$$6.fields[0];
      m$$184 = pat$$6.fields[1];
    } else if (pat$$6.tag === 17) {
      $target$$361 = 16;
      c1 = pat$$6.fields[0];
      c2$$1 = pat$$6.fields[1];
      m$$185 = pat$$6.fields[2];
    } else if (pat$$6.tag === 13) {
      $target$$361 = 17;
      m$$186 = pat$$6.fields[0];
    } else if (pat$$6.tag === 18) {
      $target$$361 = 18;
      m$$187 = pat$$6.fields[4];
    } else if (pat$$6.tag === 19) {
      $target$$361 = 19;
      pat$$10 = pat$$6.fields[0];
    } else {
      $target$$361 = 0;
      c$$24 = pat$$6.fields[0];
      m$$160 = pat$$6.fields[1];
    }

    switch ($target$$361) {
      case 0:
        {
          switch (c$$24.tag) {
            case 18:
              {
                const m$$161 = c$$24.fields[1];
                const bytes = c$$24.fields[0];
                UnifyTypes(cenv$$96, env$$142, m$$161, ty$$73, (0, _TastOps.mkByteArrayTy)(cenv$$96.g));
                warnOnUpper$$1 = warnOnUpper$$1;
                cenv$$96 = cenv$$96;
                env$$142 = env$$142;
                topValInfo$$3 = null;
                vFlags_0$$1 = vFlags$$1[0];
                vFlags_1$$1 = vFlags$$1[1];
                vFlags_2$$1 = vFlags$$1[2];
                vFlags_3$$1 = vFlags$$1[3];
                vFlags_4$$1 = vFlags$$1[4];
                vFlags_5$$1 = vFlags$$1[5];
                tpenv$$78 = tpenv$$78;
                names$$12 = names$$12;
                takenNames$$10 = takenNames$$10;
                ty$$73 = ty$$73;
                pat$$6 = new _ast.SynPat(11, "ArrayOrList", true, (0, _List.ofSeq)((0, _Seq.delay)(function () {
                  return (0, _Seq.map)(function (b$$42) {
                    return new _ast.SynPat(0, "Const", new _ast.SynConst(3, "Byte", b$$42), m$$161);
                  }, bytes);
                })), m$$161);
                continue TcPat;
              }

            case 16:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidNonPrimitiveLiteralInPatternMatch)(), m$$160));
              }

            default:
              {
                const c$0027$$1 = TcConst(cenv$$96, ty$$73, m$$160, env$$142, c$$24);
                return [function (_arg4$$5) {
                  return new _PatternMatchCompilation.Pattern(0, "TPat_const", c$0027$$1, m$$160);
                }, [tpenv$$78, names$$12, takenNames$$10]];
              }
          }
        }

      case 1:
        {
          return [function (_arg5$$5) {
            return new _PatternMatchCompilation.Pattern(1, "TPat_wild", m$$162);
          }, [tpenv$$78, names$$12, takenNames$$10]];
        }

      case 2:
        {
          const srcTy$$2 = ty$$73;
          const patternInput$$135 = TcTypeAndRecover(cenv$$96, new ImplictlyBoundTyparsAllowed(0, "NewTyparsOKButWarnIfNotRigid"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$142, tpenv$$78, cty$$3);
          TcRuntimeTypeTest(false, true, cenv$$96, TcEnv$$get_DisplayEnv(env$$142), m$$163, patternInput$$135[0], srcTy$$2);
          var $target$$362, m$$164, id$$33, isMemberThis$$2, m$$165, vis$$19;

          if (pat$$6.tag === 15) {
            $target$$362 = 0;
            m$$164 = pat$$6.fields[1];
          } else if (pat$$6.tag === 2) {
            if (pat$$6.fields[0].tag === 15) {
              $target$$362 = 1;
              id$$33 = pat$$6.fields[1];
              isMemberThis$$2 = pat$$6.fields[2];
              m$$165 = pat$$6.fields[4];
              vis$$19 = pat$$6.fields[3];
            } else {
              $target$$362 = 2;
            }
          } else {
            $target$$362 = 2;
          }

          switch ($target$$362) {
            case 0:
              {
                return [function (_arg6$$5) {
                  return new _PatternMatchCompilation.Pattern(13, "TPat_isinst", srcTy$$2, patternInput$$135[0], null, m$$164);
                }, [patternInput$$135[1], names$$12, takenNames$$10]];
              }

            case 1:
              {
                const patternInput$$136 = TcPatBindingName(cenv$$96, env$$142, id$$33, patternInput$$135[0], isMemberThis$$2, vis$$19, null, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], names$$12, takenNames$$10);
                return [function (values$$5) {
                  return new _PatternMatchCompilation.Pattern(13, "TPat_isinst", srcTy$$2, patternInput$$135[0], patternInput$$136[0](values$$5), m$$165);
                }, [patternInput$$135[1], patternInput$$136[1], patternInput$$136[2]]];
              }

            case 2:
              {
                throw new Error("TcPat");
              }
          }
        }

      case 3:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOptionalArgsOnlyOnMembers)(), m$$166));
        }

      case 4:
        {
          const patternInput$$137 = TcPatBindingName(cenv$$96, env$$142, id$$34, ty$$73, isMemberThis$$3, vis$$20, topValInfo$$3, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], names$$12, takenNames$$10);
          const patternInput$$138 = TcPat(warnOnUpper$$1, cenv$$96, env$$142, null, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, patternInput$$137[1], patternInput$$137[2], ty$$73, p$$20);
          return [function (values$$6) {
            return new _PatternMatchCompilation.Pattern(2, "TPat_as", patternInput$$138[0](values$$6), patternInput$$137[0](values$$6), m$$167);
          }, patternInput$$138[1]];
        }

      case 5:
        {
          const patternInput$$139 = TcTypeAndRecover(cenv$$96, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$142, tpenv$$78, cty$$4);
          UnifyTypes(cenv$$96, env$$142, m$$168, ty$$73, patternInput$$139[0]);
          warnOnUpper$$1 = warnOnUpper$$1;
          cenv$$96 = cenv$$96;
          env$$142 = env$$142;
          topValInfo$$3 = topValInfo$$3;
          vFlags_0$$1 = vFlags$$1[0];
          vFlags_1$$1 = vFlags$$1[1];
          vFlags_2$$1 = vFlags$$1[2];
          vFlags_3$$1 = vFlags$$1[3];
          vFlags_4$$1 = vFlags$$1[4];
          vFlags_5$$1 = vFlags$$1[5];
          tpenv$$78 = patternInput$$139[1];
          names$$12 = names$$12;
          takenNames$$10 = takenNames$$10;
          ty$$73 = ty$$73;
          pat$$6 = p$$21;
          continue TcPat;
        }

      case 6:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributesInvalidInPatterns)(), m$$169));
        }

      case 7:
        {
          const patternInput$$140 = TcPat(warnOnUpper$$1, cenv$$96, env$$142, null, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, ty$$73, pat1$$1);
          const tpenv$$81 = patternInput$$140[1][0];
          const takenNames1 = patternInput$$140[1][2];
          const names1 = patternInput$$140[1][1];
          const patternInput$$141 = TcPat(warnOnUpper$$1, cenv$$96, env$$142, null, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$81, names$$12, takenNames$$10, ty$$73, pat2);
          const tpenv$$82 = patternInput$$141[1][0];
          const takenNames2 = patternInput$$141[1][2];
          const names2 = patternInput$$141[1][1];

          if (!takenNames1.Equals(takenNames2)) {
            (0, _ErrorLogger.error)(new UnionPatternsBindDifferentNames(m$$170));
          }

          (0, _Map.iterate)(function action$$17(_arg8$$2, _arg7$$2) {
            const ty1$$1 = _arg7$$2.fields[2];
            const id1 = _arg7$$2.fields[0];
            const matchValue$$94 = (0, _Map.tryFind)((0, _ast.Ident$$get_idText)(id1), names2);

            if (matchValue$$94 != null) {
              const ty2$$1 = matchValue$$94.fields[2];
              UnifyTypes(cenv$$96, env$$142, m$$170, ty1$$1, ty2$$1);
            }
          }, names1);
          return [function (values$$7) {
            return new _PatternMatchCompilation.Pattern(3, "TPat_disjs", (0, _Types.L)(patternInput$$140[0](values$$7), (0, _Types.L)(patternInput$$141[0](TcPatPhase2Input$$get_RightPath(values$$7)), (0, _Types.L)())), m$$170);
          }, [tpenv$$82, names1, takenNames1]];
        }

      case 8:
        {
          const patternInput$$142 = TcPatterns(warnOnUpper$$1, cenv$$96, env$$142, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, (0, _List.map)(function (_arg9$$1) {
            return ty$$73;
          }, pats$$1), pats$$1);
          return [function (values$$8) {
            return new _PatternMatchCompilation.Pattern(4, "TPat_conjs", (0, _List.map)(function (f$$22) {
              return f$$22(values$$8);
            }, patternInput$$142[0]), m$$171);
          }, patternInput$$142[1]];
        }

      case 9:
        {
          if (tyargs$$5 != null) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidTypeArgumentUsage)(), m$$172));
          }

          const warnOnUpperForId = args$$28.tag === 0 ? args$$28.fields[0].tail == null ? warnOnUpper$$1 : new _NameResolution.WarnOnUpperFlag(1, "AllIdsOK") : new _NameResolution.WarnOnUpperFlag(1, "AllIdsOK");

          const checkNoArgsForLiteral = function checkNoArgsForLiteral() {
            let nargs$$1;

            if (args$$28.tag === 1) {
              const pairs = args$$28.fields[0];
              nargs$$1 = (0, _List.length)(pairs);
            } else {
              const args$$29 = args$$28.fields[0];
              nargs$$1 = (0, _List.length)(args$$29);
            }

            if (nargs$$1 !== 0) {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLiteralDoesNotTakeArguments)(), m$$172));
            }
          };

          const matchValue$$95 = (0, _NameResolution.ResolvePatternLongIdent)(cenv$$96.tcSink, cenv$$96.nameResolver, warnOnUpperForId, false, m$$172, ad$$17, env$$142.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), longId$$2);
          var $target$$363, item$$25;

          switch (matchValue$$95.tag) {
            case 6:
              $target$$363 = 0;
              break;

            case 3:
              $target$$363 = 1;
              break;

            case 1:
              $target$$363 = 2;
              item$$25 = matchValue$$95;
              break;

            case 4:
              $target$$363 = 2;
              item$$25 = matchValue$$95;
              break;

            case 7:
              $target$$363 = 3;
              break;

            case 5:
              $target$$363 = 4;
              break;

            case 0:
              $target$$363 = 5;
              break;

            default:
              $target$$363 = 6;
          }

          switch ($target$$363) {
            case 0:
              {
                const id$$35 = matchValue$$95.fields[0];
                var $target$$364;

                if (args$$28.tag === 1) {
                  if (args$$28.fields[0].tail == null) {
                    $target$$364 = 0;
                  } else {
                    $target$$364 = 1;
                  }
                } else if (args$$28.fields[0].tail == null) {
                  $target$$364 = 0;
                } else {
                  $target$$364 = 1;
                }

                switch ($target$$364) {
                  case 0:
                    {
                      warnOnUpper$$1 = warnOnUpperForId;
                      cenv$$96 = cenv$$96;
                      env$$142 = env$$142;
                      topValInfo$$3 = topValInfo$$3;
                      vFlags_0$$1 = vFlags$$1[0];
                      vFlags_1$$1 = vFlags$$1[1];
                      vFlags_2$$1 = vFlags$$1[2];
                      vFlags_3$$1 = vFlags$$1[3];
                      vFlags_4$$1 = vFlags$$1[4];
                      vFlags_5$$1 = vFlags$$1[5];
                      tpenv$$78 = tpenv$$78;
                      names$$12 = names$$12;
                      takenNames$$10 = takenNames$$10;
                      ty$$73 = ty$$73;
                      pat$$6 = (0, _ast.mkSynPatVar)(vis$$21, id$$35);
                      continue TcPat;
                    }

                  case 1:
                    {
                      return (0, _ErrorLogger.error)(new _tast.UndefinedName(0, _FSComp.SR$$$undefinedNamePatternDiscriminator$$Z721C83C5, id$$35, function () {
                        return (0, _ErrorLogger.NoSuggestions)();
                      }));
                    }
                }
              }

            case 1:
              {
                const vref$$10 = matchValue$$95.fields[0].fields[1];
                const item$$24 = matchValue$$95;
                const idx = matchValue$$95.fields[0].fields[2] | 0;
                const apinfo = matchValue$$95.fields[0].fields[0];
                let args$$31;

                if (args$$28.tag === 0) {
                  const args$$30 = args$$28.fields[0];
                  args$$31 = args$$30;
                } else {
                  args$$31 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNamedActivePattern$$Z721C83C5)((0, _List.item)(idx, (0, _PrettyNaming.ActivePatternInfo$$get_ActiveTags)(apinfo))), m$$172));
                }

                const patternInput$$143 = TcVal(true, cenv$$96, env$$142, tpenv$$78, vref$$10, null, null, m$$172);
                const vexp$$2 = MakeApplicableExprWithFlex(cenv$$96, env$$142, patternInput$$143[1]);
                const vexpty = ApplicableExpr$$get_Type(vexp$$2);
                let patternInput$$145;

                if (args$$31.tail == null) {
                  patternInput$$145 = [(0, _Types.L)(), new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), m$$172)];
                } else {
                  const patternInput$$144 = (0, _TastOps.stripFunTy)(cenv$$96.g, vexpty);
                  patternInput$$145 = (((0, _List.length)(patternInput$$144[0]) === (0, _List.length)(args$$31) + 1 ? (0, _TastOps.isOptionTy)(cenv$$96.g, patternInput$$144[1]) : false) ? (0, _TastOps.isUnitTy)(cenv$$96.g, (0, _TastOps.destOptionTy)(cenv$$96.g, patternInput$$144[1])) : false) ? [args$$31, new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), m$$172)] : (0, _illib.List$$$frontAndBack)(args$$31);
                }

                if (!(patternInput$$145[0].tail == null) ? (0, _List.length)((0, _PrettyNaming.ActivePatternInfo$$get_ActiveTags)(apinfo)) !== 1 : false) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireActivePatternWithOneResult)(), m$$172));
                }

                const convSynPatToSynExpr = function convSynPatToSynExpr(x$$77) {
                  convSynPatToSynExpr: while (true) {
                    var $target$$365, p$$22, c$$25, m$$173, id$$36, cty$$5, m$$174, p$$23, _tyargs, args$$32, dotms, lidwd$$1, longId$$3, m$$175, args$$35, m$$176, p$$24, args$$36, isArray, m$$177, e$$45, m$$178;

                    if (x$$77.tag === 19) {
                      $target$$365 = 0;
                      p$$22 = x$$77.fields[0];
                    } else if (x$$77.tag === 0) {
                      $target$$365 = 1;
                      c$$25 = x$$77.fields[0];
                      m$$173 = x$$77.fields[1];
                    } else if (x$$77.tag === 2) {
                      if (x$$77.fields[0].tag === 1) {
                        if (x$$77.fields[3] == null) {
                          $target$$365 = 2;
                          id$$36 = x$$77.fields[1];
                        } else {
                          $target$$365 = 10;
                        }
                      } else {
                        $target$$365 = 10;
                      }
                    } else if (x$$77.tag === 3) {
                      $target$$365 = 3;
                      cty$$5 = x$$77.fields[1];
                      m$$174 = x$$77.fields[2];
                      p$$23 = x$$77.fields[0];
                    } else if (x$$77.tag === 7) {
                      if (x$$77.fields[4] == null) {
                        $target$$365 = 4;
                        _tyargs = x$$77.fields[2];
                        args$$32 = x$$77.fields[3];
                        dotms = x$$77.fields[0].fields[1];
                        lidwd$$1 = x$$77.fields[0];
                        longId$$3 = x$$77.fields[0].fields[0];
                        m$$175 = x$$77.fields[5];
                      } else {
                        $target$$365 = 10;
                      }
                    } else if (x$$77.tag === 8) {
                      $target$$365 = 5;
                      args$$35 = x$$77.fields[0];
                      m$$176 = x$$77.fields[1];
                    } else if (x$$77.tag === 10) {
                      $target$$365 = 6;
                      p$$24 = x$$77.fields[0];
                    } else if (x$$77.tag === 11) {
                      $target$$365 = 7;
                      args$$36 = x$$77.fields[1];
                      isArray = x$$77.fields[0];
                      m$$177 = x$$77.fields[2];
                    } else if (x$$77.tag === 16) {
                      $target$$365 = 8;
                      e$$45 = x$$77.fields[0];
                    } else if (x$$77.tag === 13) {
                      $target$$365 = 9;
                      m$$178 = x$$77.fields[0];
                    } else {
                      $target$$365 = 10;
                    }

                    switch ($target$$365) {
                      case 0:
                        {
                          x$$77 = p$$22;
                          continue convSynPatToSynExpr;
                        }

                      case 1:
                        {
                          return new _ast.SynExpr(2, "Const", c$$25, m$$173);
                        }

                      case 2:
                        {
                          return new _ast.SynExpr(28, "Ident", id$$36);
                        }

                      case 3:
                        {
                          return new _ast.SynExpr(3, "Typed", convSynPatToSynExpr(p$$23), cty$$5, m$$174);
                        }

                      case 4:
                        {
                          let args$$34;

                          if (args$$32.tag === 0) {
                            const args$$33 = args$$32.fields[0];
                            args$$34 = args$$33;
                          } else {
                            throw new Error("impossible: active patterns can be used only with SynConstructorArgs.Pats");
                          }

                          let e$$44;

                          if ((0, _List.length)(dotms) === (0, _List.length)(longId$$3)) {
                            const e$$43 = new _ast.SynExpr(29, "LongIdent", false, new _ast.LongIdentWithDots(0, "LongIdentWithDots", longId$$3, (0, _List.truncate)((0, _List.length)(dotms) - 1, dotms)), null, m$$175);
                            e$$44 = new _ast.SynExpr(59, "DiscardAfterMissingQualificationAfterDot", e$$43, (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)(e$$43), (0, _List.last)(dotms)));
                          } else {
                            e$$44 = new _ast.SynExpr(29, "LongIdent", false, lidwd$$1, null, m$$175);
                          }

                          return (0, _List.fold)(function (f$$23, x$$78) {
                            return (0, _ast.mkSynApp1)(f$$23, convSynPatToSynExpr(x$$78), m$$175);
                          }, e$$44, args$$34);
                        }

                      case 5:
                        {
                          return new _ast.SynExpr(4, "Tuple", (0, _List.map)(convSynPatToSynExpr, args$$35), (0, _Types.L)(), m$$176);
                        }

                      case 6:
                        {
                          x$$77 = p$$24;
                          continue convSynPatToSynExpr;
                        }

                      case 7:
                        {
                          return new _ast.SynExpr(6, "ArrayOrList", isArray, (0, _List.map)(convSynPatToSynExpr, args$$36), m$$177);
                        }

                      case 8:
                        {
                          return e$$45;
                        }

                      case 9:
                        {
                          return new _ast.SynExpr(43, "Null", m$$178);
                        }

                      case 10:
                        {
                          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidArgForParameterizedPattern)(), (0, _ast.SynPat$$get_Range)(x$$77)));
                        }
                    }
                  }
                };

                const activePatArgsAsSynExprs = (0, _List.map)(convSynPatToSynExpr, patternInput$$145[0]);
                const activePatResTys = (0, _ConstraintSolver.NewInferenceTypes)((0, _TastOps.ActivePatternInfo$002Eget_Names)(apinfo));
                const activePatType = (0, _TastOps.ActivePatternInfo$002EOverallType)(apinfo, cenv$$96.g, m$$172, ty$$73, activePatResTys);
                const delayed = (0, _List.map)(function mapping$$33(arg$$5) {
                  return new DelayedItem(1, "DelayedApp", 1, arg$$5, (0, _range.unionRanges)((0, _ast.rangeOfLid)(longId$$2), (0, _ast.SynExpr$$get_Range)(arg$$5)));
                }, activePatArgsAsSynExprs);
                const patternInput$$146 = PropagateThenTcDelayed(cenv$$96, activePatType, env$$142, tpenv$$78, m$$172, vexp$$2, vexpty, 1, delayed);

                if (idx >= (0, _List.length)(activePatResTys)) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidIndexIntoActivePatternArray)(), m$$172));
                }

                const argty$$3 = (0, _List.item)(idx, activePatResTys);
                const patternInput$$147 = TcPat(warnOnUpper$$1, cenv$$96, env$$142, null, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], patternInput$$146[1], names$$12, takenNames$$10, argty$$3, patternInput$$145[1]);
                const tpenv$$84 = patternInput$$147[1][0];
                const takenNames$$13 = patternInput$$147[1][2];
                const names$$15 = patternInput$$147[1][1];
                const activePatIdentity = activePatArgsAsSynExprs.tail == null ? [vref$$10, patternInput$$143[4]] : null;
                return [function (values$$9) {
                  (0, _NameResolution.CallNameResolutionSink)(cenv$$96.tcSink, (0, _ast.rangeOfLid)(longId$$2), TcEnv$$get_NameEnv(env$$142), item$$24, item$$24, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(4, "Pattern"), TcEnv$$get_DisplayEnv(env$$142), env$$142.eAccessRights);
                  return new _PatternMatchCompilation.Pattern(5, "TPat_query", [patternInput$$146[0], activePatResTys, activePatIdentity, idx, apinfo], patternInput$$147[0](values$$9), m$$172);
                }, [tpenv$$84, names$$15, takenNames$$13]];
              }

            case 2:
              {
                const patternInput$$148 = ApplyUnionCaseOrExnTypesForPat(m$$172, cenv$$96, env$$142, ty$$73, item$$25);
                const nargtys$$1 = (0, _List.length)(patternInput$$148[1]) | 0;
                let args$$39;

                if (args$$28.tag === 1) {
                  const pairs$$1 = args$$28.fields[0];
                  const m$$179 = args$$28.fields[1];
                  const result = (0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, null);
                  (0, _Seq.iterate)(function (forLoopVar$$1) {
                    const matchValue$$96 = (0, _List.tryFindIndex)(function predicate$$26(id2) {
                      return (0, _ast.Ident$$get_idText)(forLoopVar$$1[0]) === (0, _ast.Ident$$get_idText)(id2);
                    }, patternInput$$148[2]);

                    if (matchValue$$96 != null) {
                      const idx$$1 = matchValue$$96 | 0;

                      if ((0, _Util.equals)(result[idx$$1], null)) {
                        result[idx$$1] = forLoopVar$$1[1];
                        let argContainerOpt;

                        switch (item$$25.tag) {
                          case 1:
                            {
                              const uci$$1 = item$$25.fields[0];
                              argContainerOpt = new _NameResolution.ArgumentContainer(2, "UnionCase", uci$$1);
                              break;
                            }

                          case 4:
                            {
                              const tref = item$$25.fields[0];
                              argContainerOpt = new _NameResolution.ArgumentContainer(1, "Type", tref);
                              break;
                            }

                          default:
                            {
                              argContainerOpt = null;
                            }
                        }

                        const argItem = new _NameResolution.Item(20, "ArgName", (0, _List.item)(idx$$1, patternInput$$148[2]), (0, _List.item)(idx$$1, patternInput$$148[1]), argContainerOpt);
                        (0, _NameResolution.CallNameResolutionSink)(cenv$$96.tcSink, (0, _ast.Ident$$get_idRange)(forLoopVar$$1[0]), TcEnv$$get_NameEnv(env$$142), argItem, argItem, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(4, "Pattern"), TcEnv$$get_DisplayEnv(env$$142), ad$$17);
                      } else {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseFieldCannotBeUsedMoreThanOnce$$Z721C83C5)((0, _ast.Ident$$get_idText)(forLoopVar$$1[0])), (0, _ast.Ident$$get_idRange)(forLoopVar$$1[0])));
                      }
                    } else {
                      let caseName;

                      switch (item$$25.tag) {
                        case 1:
                          {
                            const uci = item$$25.fields[0];
                            caseName = (0, _infos.UnionCaseInfo$$get_Name)(uci);
                            break;
                          }

                        case 4:
                          {
                            const tcref$$25 = item$$25.fields[0];
                            caseName = (0, _tast.EntityRef$$get_DisplayName)(tcref$$25);
                            break;
                          }

                        default:
                          {
                            throw new Error("impossible");
                          }
                      }

                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseConstructorDoesNotHaveFieldWithGivenName$$Z384F8060)(caseName, (0, _ast.Ident$$get_idText)(forLoopVar$$1[0])), (0, _ast.Ident$$get_idRange)(forLoopVar$$1[0])));
                    }
                  }, pairs$$1);

                  for (let i$$17 = 0; i$$17 <= nargtys$$1 - 1; i$$17++) {
                    if (result[i$$17] == null) {
                      result[i$$17] = new _ast.SynPat(1, "Wild", (0, _range.range$$MakeSynthetic)(m$$179));
                    }
                  }

                  const args$$38 = (0, _List.ofArray)(result);
                  args$$39 = result.length === 1 ? args$$38 : (0, _Types.L)(new _ast.SynPat(8, "Tuple", args$$38, m$$179), (0, _Types.L)());
                } else {
                  const args$$37 = args$$28.fields[0];
                  args$$39 = args$$37;
                }

                const args$$43 = args$$39.tail != null ? (activePatternResult47423 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47423.tag === 8 ? args$$39.tail.tail == null ? (args$$40 = activePatternResult47423.fields[0], nargtys$$1 > 1) ? activePatternResult47423.fields[0] : args$$39.tail != null ? (activePatternResult47421 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47421.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47421)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47421.tag === 10 ? (activePatternResult47422 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47421.fields[0]), activePatternResult47422.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47422)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail != null ? (activePatternResult47421 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47421.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47421)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47421.tag === 10 ? (activePatternResult47422 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47421.fields[0]), activePatternResult47422.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47422)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47423.tag === 10 ? (activePatternResult47424 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47423.fields[0]), activePatternResult47424.tag === 8 ? args$$39.tail.tail == null ? (args$$41 = activePatternResult47424.fields[0], nargtys$$1 > 1) ? activePatternResult47424.fields[0] : args$$39.tail != null ? (activePatternResult47421 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47421.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47421)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47421.tag === 10 ? (activePatternResult47422 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47421.fields[0]), activePatternResult47422.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47422)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail != null ? (activePatternResult47421 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47421.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47421)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47421.tag === 10 ? (activePatternResult47422 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47421.fields[0]), activePatternResult47422.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47422)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail != null ? (activePatternResult47421 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47421.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47421)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47421.tag === 10 ? (activePatternResult47422 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47421.fields[0]), activePatternResult47422.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47422)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail != null ? (activePatternResult47421 = (0, _ast.$007CSynPatErrorSkip$007C)(args$$39.head), activePatternResult47421.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47421)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : activePatternResult47421.tag === 10 ? (activePatternResult47422 = (0, _ast.$007CSynPatErrorSkip$007C)(activePatternResult47421.fields[0]), activePatternResult47422.tag === 1 ? args$$39.tail.tail == null ? (0, _Array.toList)((0, _Array.fill)(new Array(nargtys$$1), 0, nargtys$$1, activePatternResult47422)) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172)) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : args$$39.tail.tail == null ? (0, _Types.L)(args$$39.head, (0, _Types.L)()) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : nargtys$$1 === 0 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseDoesNotTakeArguments)(), m$$172)) : nargtys$$1 === 1 ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseRequiresOneArgument)(), m$$172)) : (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseExpectsTupledArguments$$Z524259A4)(nargtys$$1), m$$172))) : (0, _Types.L)();
                UnionCaseOrExnCheck(env$$142, nargtys$$1, (0, _List.length)(args$$43), m$$172);
                const patternInput$$149 = TcPatterns(warnOnUpper$$1, cenv$$96, env$$142, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, patternInput$$148[1], args$$43);
                return [function (values$$10) {
                  (0, _NameResolution.CallNameResolutionSink)(cenv$$96.tcSink, (0, _ast.rangeOfLid)(longId$$2), TcEnv$$get_NameEnv(env$$142), item$$25, item$$25, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(4, "Pattern"), TcEnv$$get_DisplayEnv(env$$142), env$$142.eAccessRights);
                  return patternInput$$148[0](m$$172)((0, _List.map)(function (f$$24) {
                    return f$$24(values$$10);
                  }, patternInput$$149[0]));
                }, patternInput$$149[1]];
              }

            case 3:
              {
                const finfo$$3 = matchValue$$95.fields[0];
                (0, _AccessibilityLogic.CheckILFieldInfoAccessible)(cenv$$96.g, cenv$$96.amap, m$$172, env$$142.eAccessRights, finfo$$3);

                if (!(0, _infos.ILFieldInfo$$get_IsStatic)(finfo$$3)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsNotStatic$$Z721C83C5)((0, _infos.ILFieldInfo$$get_FieldName)(finfo$$3)), m$$172));
                }

                (0, _AttributeChecking.CheckILFieldAttributes)(cenv$$96.g, finfo$$3, m$$172);
                const matchValue$$98 = (0, _infos.ILFieldInfo$$get_LiteralValue)(finfo$$3);

                if (matchValue$$98 != null) {
                  const lit$$1 = matchValue$$98;
                  checkNoArgsForLiteral();
                  UnifyTypes(cenv$$96, env$$142, m$$172, ty$$73, (0, _infos.ILFieldInfo$$FieldType$$73F6E43C)(finfo$$3, cenv$$96.amap, m$$172));
                  const c$0027$$2 = TcFieldInit(m$$172, lit$$1);
                  const item$$26 = new _NameResolution.Item(7, "ILField", finfo$$3);
                  (0, _NameResolution.CallNameResolutionSink)(cenv$$96.tcSink, m$$172, TcEnv$$get_NameEnv(env$$142), item$$26, item$$26, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(4, "Pattern"), TcEnv$$get_DisplayEnv(env$$142), TcEnv$$get_AccessRights(env$$142));
                  return [function (_arg10$$1) {
                    return new _PatternMatchCompilation.Pattern(0, "TPat_const", c$0027$$2, m$$172);
                  }, [tpenv$$78, names$$12, takenNames$$10]];
                } else {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldNotLiteralCannotBeUsedInPattern)(), m$$172));
                }
              }

            case 4:
              {
                const rfinfo$$1 = matchValue$$95.fields[0];
                (0, _AccessibilityLogic.CheckRecdFieldInfoAccessible)(cenv$$96.amap, m$$172, env$$142.eAccessRights, rfinfo$$1);

                if (!(0, _infos.RecdFieldInfo$$get_IsStatic)(rfinfo$$1)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsNotStatic$$Z721C83C5)((0, _infos.RecdFieldInfo$$get_Name)(rfinfo$$1)), m$$172));
                }

                (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckRecdFieldInfoAttributes)(cenv$$96.g, rfinfo$$1, m$$172));
                const matchValue$$99 = (0, _infos.RecdFieldInfo$$get_LiteralValue)(rfinfo$$1);

                if (matchValue$$99 != null) {
                  const lit$$2 = matchValue$$99;
                  checkNoArgsForLiteral();
                  UnifyTypes(cenv$$96, env$$142, m$$172, ty$$73, (0, _infos.RecdFieldInfo$$get_FieldType)(rfinfo$$1));
                  const item$$27 = new _NameResolution.Item(5, "RecdField", rfinfo$$1);
                  (0, _NameResolution.CallNameResolutionSink)(cenv$$96.tcSink, m$$172, TcEnv$$get_NameEnv(env$$142), item$$27, item$$27, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(4, "Pattern"), TcEnv$$get_DisplayEnv(env$$142), TcEnv$$get_AccessRights(env$$142));
                  return [function (_arg11$$1) {
                    return new _PatternMatchCompilation.Pattern(0, "TPat_const", lit$$2, m$$172);
                  }, [tpenv$$78, names$$12, takenNames$$10]];
                } else {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldNotLiteralCannotBeUsedInPattern)(), m$$172));
                }
              }

            case 5:
              {
                const vref$$11 = matchValue$$95.fields[0];
                const matchValue$$100 = (0, _tast.ValRef$$get_LiteralValue)(vref$$11);

                if (matchValue$$100 != null) {
                  const lit$$3 = matchValue$$100;
                  const patternInput$$150 = TcVal(true, cenv$$96, env$$142, tpenv$$78, vref$$11, null, null, m$$172);
                  (0, _AccessibilityLogic.CheckValAccessible)(m$$172, env$$142.eAccessRights, vref$$11);
                  (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckFSharpAttributes)(cenv$$96.g, (0, _tast.ValRef$$get_Attribs)(vref$$11), m$$172));
                  checkNoArgsForLiteral();
                  UnifyTypes(cenv$$96, env$$142, m$$172, ty$$73, patternInput$$150[3]);
                  const item$$28 = new _NameResolution.Item(0, "Value", vref$$11);
                  (0, _NameResolution.CallNameResolutionSink)(cenv$$96.tcSink, m$$172, TcEnv$$get_NameEnv(env$$142), item$$28, item$$28, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(4, "Pattern"), TcEnv$$get_DisplayEnv(env$$142), TcEnv$$get_AccessRights(env$$142));
                  return [function (_arg12$$1) {
                    return new _PatternMatchCompilation.Pattern(0, "TPat_const", lit$$3, m$$172);
                  }, [tpenv$$78, names$$12, takenNames$$10]];
                } else {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNonLiteralCannotBeUsedInPattern)(), m$$172));
                }
              }

            case 6:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireVarConstRecogOrLiteral)(), m$$172));
              }
          }
        }

      case 10:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidPattern)(), m$$180));
        }

      case 11:
        {
          const argtys$$9 = (0, _ConstraintSolver.NewInferenceTypes)(args$$44);
          UnifyTypes(cenv$$96, env$$142, m$$181, ty$$73, new _tast.TType(2, "TType_tuple", _tast.tupInfoRef, argtys$$9));
          const patternInput$$151 = TcPatterns(warnOnUpper$$1, cenv$$96, env$$142, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, argtys$$9, args$$44);
          return [function (values$$11) {
            return new _PatternMatchCompilation.Pattern(8, "TPat_tuple", _tast.tupInfoRef, (0, _List.map)(function (f$$25) {
              return f$$25(values$$11);
            }, patternInput$$151[0]), argtys$$9, m$$181);
          }, patternInput$$151[1]];
        }

      case 12:
        {
          const argtys$$10 = (0, _ConstraintSolver.NewInferenceTypes)(args$$45);
          UnifyTypes(cenv$$96, env$$142, m$$182, ty$$73, new _tast.TType(2, "TType_tuple", _tast.tupInfoStruct, argtys$$10));
          const patternInput$$152 = TcPatterns(warnOnUpper$$1, cenv$$96, env$$142, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, argtys$$10, args$$45);
          return [function (values$$12) {
            return new _PatternMatchCompilation.Pattern(8, "TPat_tuple", _tast.tupInfoStruct, (0, _List.map)(function (f$$26) {
              return f$$26(values$$12);
            }, patternInput$$152[0]), argtys$$10, m$$182);
          }, patternInput$$152[1]];
        }

      case 13:
        {
          warnOnUpper$$1 = warnOnUpper$$1;
          cenv$$96 = cenv$$96;
          env$$142 = env$$142;
          topValInfo$$3 = null;
          vFlags_0$$1 = vFlags$$1[0];
          vFlags_1$$1 = vFlags$$1[1];
          vFlags_2$$1 = vFlags$$1[2];
          vFlags_3$$1 = vFlags$$1[3];
          vFlags_4$$1 = vFlags$$1[4];
          vFlags_5$$1 = vFlags$$1[5];
          tpenv$$78 = tpenv$$78;
          names$$12 = names$$12;
          takenNames$$10 = takenNames$$10;
          ty$$73 = ty$$73;
          pat$$6 = p$$25;
          continue TcPat;
        }

      case 14:
        {
          const argty$$4 = (0, _ConstraintSolver.NewInferenceType)();
          UnifyTypes(cenv$$96, env$$142, m$$183, ty$$73, isArray$$1 ? (0, _TastOps.mkArrayType)(cenv$$96.g, argty$$4) : (0, _TastOps.mkListTy)(cenv$$96.g, argty$$4));
          const patternInput$$153 = TcPatterns(warnOnUpper$$1, cenv$$96, env$$142, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, (0, _List.map)(function (_arg13) {
            return argty$$4;
          }, args$$46), args$$46);
          return [function (values$$13) {
            const args$0027$$6 = (0, _List.map)(function (f$$27) {
              return f$$27(values$$13);
            }, patternInput$$153[0]);
            return isArray$$1 ? new _PatternMatchCompilation.Pattern(9, "TPat_array", args$0027$$6, argty$$4, m$$183) : (0, _List.foldBack)(function (ph$$1, pt$$2) {
              return mkConsListPat(cenv$$96.g, argty$$4, ph$$1, pt$$2);
            }, args$0027$$6, mkNilListPat(cenv$$96.g, m$$183, argty$$4));
          }, patternInput$$153[1]];
        }

      case 15:
        {
          const patternInput$$154 = BuildFieldMap(cenv$$96, env$$142, true, ty$$73, flds$$1, m$$184);
          const patternInput$$155 = infoOfTyconRef(m$$184, patternInput$$154[0]);
          UnifyTypes(cenv$$96, env$$142, m$$184, ty$$73, patternInput$$155[3]);
          const fields = (0, _tast.EntityRef$$get_TrueInstanceFieldsAsList)(patternInput$$154[0]);
          const ftys = (0, _List.map)(function mapping$$34(fsp) {
            return [(0, _TastOps.actualTyOfRecdField)(patternInput$$155[1], fsp), fsp];
          }, fields);
          const patternInput$$156 = (0, _List.mapFold)(function mapping$$35(s$$4, tupledArg$$31) {
            const matchValue$$101 = (0, _Map.tryFind)((0, _ast.Ident$$get_idText)(tupledArg$$31[1].rfield_id), patternInput$$154[1]);

            if (matchValue$$101 == null) {
              return [function (_arg14) {
                return new _PatternMatchCompilation.Pattern(1, "TPat_wild", m$$184);
              }, s$$4];
            } else {
              const v$$28 = matchValue$$101;
              return TcPat(warnOnUpper$$1, cenv$$96, env$$142, null, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], s$$4[0], s$$4[1], s$$4[2], tupledArg$$31[0], v$$28);
            }
          }, [tpenv$$78, names$$12, takenNames$$10], ftys);
          return [function (values$$14) {
            return new _PatternMatchCompilation.Pattern(10, "TPat_recd", patternInput$$154[0], patternInput$$155[2], (0, _List.map)(function (f$$28) {
              return f$$28(values$$14);
            }, patternInput$$156[0]), m$$184);
          }, patternInput$$156[1]];
        }

      case 16:
        {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcUseWhenPatternGuard)(), m$$185));
          UnifyTypes(cenv$$96, env$$142, m$$185, ty$$73, (0, _TcGlobals.TcGlobals$$get_char_ty)(cenv$$96.g));
          return [function (_arg15) {
            return new _PatternMatchCompilation.Pattern(11, "TPat_range", c1, c2$$1, m$$185);
          }, [tpenv$$78, names$$12, takenNames$$10]];
        }

      case 17:
        {
          (0, _ConstraintSolver.AddCxTypeMustSupportNull)(TcEnv$$get_DisplayEnv(env$$142), cenv$$96.css, m$$186, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), ty$$73);
          return [function (_arg16) {
            return new _PatternMatchCompilation.Pattern(12, "TPat_null", m$$186);
          }, [tpenv$$78, names$$12, takenNames$$10]];
        }

      case 18:
        {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIllegalPattern)(), (0, _ast.SynPat$$get_Range)(pat$$6)));
          return [function (_arg17) {
            return new _PatternMatchCompilation.Pattern(1, "TPat_wild", m$$187);
          }, [tpenv$$78, names$$12, takenNames$$10]];
        }

      case 19:
        {
          return (0, _ErrorLogger.suppressErrorReporting)(function () {
            return TcPatAndRecover(warnOnUpper$$1, cenv$$96, env$$142, topValInfo$$3, vFlags$$1[0], vFlags$$1[1], vFlags$$1[2], vFlags$$1[3], vFlags$$1[4], vFlags$$1[5], tpenv$$78, names$$12, takenNames$$10, (0, _ConstraintSolver.NewErrorType)(), pat$$10);
          });
        }
    }
  }
}

function TcPatterns(warnOnUpper$$2, cenv$$97, env$$143, vFlags_0$$2, vFlags_1$$2, vFlags_2$$2, vFlags_3$$2, vFlags_4$$2, vFlags_5$$2, s_0, s_1, s_2, argtys$$12, args$$47) {
  const vFlags$$2 = [vFlags_0$$2, vFlags_1$$2, vFlags_2$$2, vFlags_3$$2, vFlags_4$$2, vFlags_5$$2];
  const s$$5 = [s_0, s_1, s_2];
  return (0, _List.mapFold)(function (s$$6, tupledArg$$32) {
    return TcPat(warnOnUpper$$2, cenv$$97, env$$143, null, vFlags$$2[0], vFlags$$2[1], vFlags$$2[2], vFlags$$2[3], vFlags$$2[4], vFlags$$2[5], s$$6[0], s$$6[1], s$$6[2], tupledArg$$32[0], tupledArg$$32[1]);
  }, s$$5, (0, _List.zip)(argtys$$12, args$$47));
}

function solveTypAsError(cenv$$98, denv$$20, m$$188, ty$$77) {
  const ty2$$2 = (0, _ConstraintSolver.NewErrorType)();
  (0, _ConstraintSolver.SolveTypeEqualsTypeKeepAbbrevs)((0, _ConstraintSolver.MakeConstraintSolverEnv)(new _ConstraintSolver.ContextInfo(0, "NoContext"), cenv$$98.css, m$$188, denv$$20), 0, m$$188, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), ty$$77, ty2$$2);
}

function RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects(cenv$$99, env$$144, tpenv$$87, expr$$26) {
  (0, _ErrorLogger.suppressErrorReporting)(function () {
    try {
      TcExprOfUnknownType(cenv$$99, env$$144, tpenv$$87, expr$$26);
    } catch (e$$47) {}
  });
}

function RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects_Delayed(cenv$$100, env$$145, tpenv$$88, delayed$$1) {
  const dummyCheckedDelayed = function dummyCheckedDelayed(delayed$$2) {
    var $target$$366, _hpa, _mExprAndArg, arg$$7, otherDelayed;

    if (delayed$$2.tail != null) {
      if (delayed$$2.head.tag === 1) {
        $target$$366 = 0;
        _hpa = delayed$$2.head.fields[0];
        _mExprAndArg = delayed$$2.head.fields[2];
        arg$$7 = delayed$$2.head.fields[1];
        otherDelayed = delayed$$2.tail;
      } else {
        $target$$366 = 1;
      }
    } else {
      $target$$366 = 1;
    }

    switch ($target$$366) {
      case 0:
        {
          RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects(cenv$$100, env$$145, tpenv$$88, arg$$7);
          dummyCheckedDelayed(otherDelayed);
          break;
        }
    }
  };

  dummyCheckedDelayed(delayed$$1);
}

function UnifyTypesAndRecover(cenv$$101, env$$146, m$$189, expectedTy$$3, actualTy$$5) {
  try {
    UnifyTypes(cenv$$101, env$$146, m$$189, expectedTy$$3, actualTy$$5);
  } catch (e$$48) {
    (0, _ErrorLogger.errorRecovery)(e$$48, m$$189);
  }
}

function TcExprOfUnknownType(cenv$$102, env$$147, tpenv$$89, expr$$27) {
  const exprty$$1 = (0, _ConstraintSolver.NewInferenceType)();
  const patternInput$$157 = TcExpr(cenv$$102, exprty$$1, env$$147, tpenv$$89, expr$$27);
  return [patternInput$$157[0], exprty$$1, patternInput$$157[1]];
}

function TcExprFlex(cenv$$103, flex$$2, compat, ty$$78, env$$148, tpenv$$91, e$$49) {
  if (flex$$2) {
    const argty$$5 = (0, _ConstraintSolver.NewInferenceType)();

    if (compat) {
      (0, _tast.Typar$$SetIsCompatFlex$$Z1FBCCD16)((0, _TastOps.destTyparTy)(cenv$$103.g, argty$$5), true);
    }

    (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$148), cenv$$103.css, (0, _ast.SynExpr$$get_Range)(e$$49), new _ConstraintSolver.OptionalTrace(0, "NoTrace"), ty$$78, argty$$5);
    const patternInput$$158 = TcExpr(cenv$$103, argty$$5, env$$148, tpenv$$91, e$$49);
    const e$0027$$1 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$103.g, ty$$78, argty$$5, patternInput$$158[0]);
    return [e$0027$$1, patternInput$$158[1]];
  } else {
    return TcExpr(cenv$$103, ty$$78, env$$148, tpenv$$91, e$$49);
  }
}

function TcExpr(cenv$$104, ty$$79, env$$149, tpenv$$93, expr$$28) {
  try {
    return TcExprNoRecover(cenv$$104, ty$$79, env$$149, tpenv$$93, expr$$28);
  } catch (e$$50) {
    const m$$190 = (0, _ast.SynExpr$$get_Range)(expr$$28);
    (0, _ErrorLogger.errorRecovery)(e$$50, m$$190);
    solveTypAsError(cenv$$104, TcEnv$$get_DisplayEnv(env$$149), m$$190, ty$$79);
    return [(0, _TastOps.mkThrow)(m$$190, ty$$79, (0, _TastOps.mkOne)(cenv$$104.g, m$$190)), tpenv$$93];
  }
}

function TcExprNoRecover(cenv$$105, ty$$80, env$$150, tpenv$$94, expr$$29) {
  const env$$151 = GetCtorShapeCounter(env$$150) > 0 ? AdjustCtorShapeCounter(function (x$$79) {
    return x$$79 - 1;
  }, env$$150) : env$$150;
  return TcExprThen(cenv$$105, ty$$80, env$$151, tpenv$$94, expr$$29, (0, _Types.L)());
}

function TcExprOfUnknownTypeThen(cenv$$106, env$$152, tpenv$$95, expr$$30, delayed$$3) {
  const exprty$$2 = (0, _ConstraintSolver.NewInferenceType)();
  let patternInput$$159;

  try {
    patternInput$$159 = TcExprThen(cenv$$106, exprty$$2, env$$152, tpenv$$95, expr$$30, delayed$$3);
  } catch (e$$51) {
    const m$$191 = (0, _ast.SynExpr$$get_Range)(expr$$30);
    (0, _ErrorLogger.errorRecovery)(e$$51, m$$191);
    solveTypAsError(cenv$$106, TcEnv$$get_DisplayEnv(env$$152), m$$191, exprty$$2);
    patternInput$$159 = [(0, _TastOps.mkThrow)(m$$191, exprty$$2, (0, _TastOps.mkOne)(cenv$$106.g, m$$191)), tpenv$$95];
  }

  return [patternInput$$159[0], exprty$$2, patternInput$$159[1]];
}

function TcExprThatIsCtorBody(safeInitInfo_0, safeInitInfo_1, cenv$$107, overallTy$$3, env$$153, tpenv$$97, expr$$31) {
  const safeInitInfo$$2 = [safeInitInfo_0, safeInitInfo_1];
  const env$$154 = new TcEnv(env$$153.eNameResEnv, env$$153.eUngeneralizableItems, env$$153.ePath, env$$153.eCompPath, env$$153.eAccessPath, env$$153.eAccessRights, env$$153.eInternalsVisibleCompPaths, env$$153.eModuleOrNamespaceTypeAccumulator, env$$153.eContextInfo, env$$153.eFamilyType, InitialExplicitCtorInfo(safeInitInfo$$2[0], safeInitInfo$$2[1]), env$$153.eCallerMemberName);
  const patternInput$$160 = TcExpr(cenv$$107, overallTy$$3, env$$154, tpenv$$97, expr$$31);
  const expr$$33 = CheckAndRewriteObjectCtor(cenv$$107.g, env$$154, patternInput$$160[0]);
  return [expr$$33, patternInput$$160[1]];
}

function TcExprThatCanBeCtorBody(cenv$$108, overallTy$$4, env$$155, tpenv$$99, expr$$34) {
  const env$$156 = AreWithinCtorShape(env$$155) ? AdjustCtorShapeCounter(function (x$$80) {
    return x$$80 + 1;
  }, env$$155) : env$$155;
  return TcExpr(cenv$$108, overallTy$$4, env$$156, tpenv$$99, expr$$34);
}

function TcExprThatCantBeCtorBody(cenv$$109, overallTy$$5, env$$157, tpenv$$100, expr$$35) {
  const env$$158 = AreWithinCtorShape(env$$157) ? ExitCtorShapeRegion(env$$157) : env$$157;
  return TcExpr(cenv$$109, overallTy$$5, env$$158, tpenv$$100, expr$$35);
}

function TcStmtThatCantBeCtorBody(cenv$$110, env$$159, tpenv$$101, expr$$36) {
  const env$$160 = AreWithinCtorShape(env$$159) ? ExitCtorShapeRegion(env$$159) : env$$159;
  return TcStmt(cenv$$110, env$$160, tpenv$$101, expr$$36);
}

function TcStmt(cenv$$111, env$$161, tpenv$$102, synExpr) {
  const patternInput$$161 = TcExprOfUnknownType(cenv$$111, env$$161, tpenv$$102, synExpr);
  const m$$192 = (0, _ast.SynExpr$$get_Range)(synExpr);
  const wasUnit = UnifyUnitType(cenv$$111, env$$161, m$$192, patternInput$$161[1], patternInput$$161[0]);

  if (wasUnit) {
    return [patternInput$$161[0], patternInput$$161[2]];
  } else {
    return [(0, _TastOps.mkCompGenSequential)(m$$192, patternInput$$161[0], (0, _TastOps.mkUnit)(cenv$$111.g, m$$192)), patternInput$$161[2]];
  }
}

function TcExprThen(cenv$$112, overallTy$$6, env$$162, tpenv$$104, synExpr$$1, delayed$$4) {
  TcExprThen: while (true) {
    const activePatternResult47547 = (0, _ast.$007CLongOrSingleIdent$007C_$007C)(synExpr$$1);

    if (activePatternResult47547 != null) {
      if (activePatternResult47547[0]) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcSyntaxErrorUnexpectedQMark)(), activePatternResult47547[3]));
      }

      var $target$$367, altId$$3;

      if (activePatternResult47547[2] != null) {
        if (activePatternResult47547[2].contents.tag === 1) {
          $target$$367 = 0;
          altId$$3 = activePatternResult47547[2].contents.fields[0];
        } else {
          $target$$367 = 1;
        }
      } else {
        $target$$367 = 1;
      }

      switch ($target$$367) {
        case 0:
          {
            cenv$$112 = cenv$$112;
            overallTy$$6 = overallTy$$6;
            env$$162 = env$$162;
            tpenv$$104 = tpenv$$104;
            synExpr$$1 = new _ast.SynExpr(29, "LongIdent", activePatternResult47547[0], new _ast.LongIdentWithDots(0, "LongIdentWithDots", (0, _Types.L)(altId$$3, (0, _Types.L)()), (0, _Types.L)()), null, activePatternResult47547[3]);
            delayed$$4 = delayed$$4;
            continue TcExprThen;
          }

        case 1:
          {
            return TcLongIdentThen(cenv$$112, overallTy$$6, env$$162, tpenv$$104, activePatternResult47547[1], delayed$$4);
          }
      }
    } else {
      switch (synExpr$$1.tag) {
        case 20:
          {
            const mFuncAndArg = synExpr$$1.fields[4];
            const hpa = synExpr$$1.fields[0] | 0;
            const func = synExpr$$1.fields[2];
            const arg$$8 = synExpr$$1.fields[3];
            cenv$$112 = cenv$$112;
            overallTy$$6 = overallTy$$6;
            env$$162 = env$$162;
            tpenv$$104 = tpenv$$104;
            synExpr$$1 = func;
            delayed$$4 = (0, _Types.L)(new DelayedItem(1, "DelayedApp", hpa, arg$$8, mFuncAndArg), delayed$$4);
            continue TcExprThen;
          }

        case 21:
          {
            const typeArgs = synExpr$$1.fields[2];
            const mTypeArgs = synExpr$$1.fields[5];
            const mFuncAndTypeArgs = synExpr$$1.fields[6];
            const func$$1 = synExpr$$1.fields[0];
            cenv$$112 = cenv$$112;
            overallTy$$6 = overallTy$$6;
            env$$162 = env$$162;
            tpenv$$104 = tpenv$$104;
            synExpr$$1 = func$$1;
            delayed$$4 = (0, _Types.L)(new DelayedItem(0, "DelayedTypeApp", typeArgs, mTypeArgs, mFuncAndTypeArgs), delayed$$4);
            continue TcExprThen;
          }

        case 31:
          {
            const longId$$5 = synExpr$$1.fields[2].fields[0];
            const e1$$16 = synExpr$$1.fields[0];
            cenv$$112 = cenv$$112;
            overallTy$$6 = overallTy$$6;
            env$$162 = env$$162;
            tpenv$$104 = tpenv$$104;
            const $var$$368 = e1$$16;
            delayed$$4 = (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", longId$$5, (0, _ast.SynExpr$$get_RangeSansAnyExtraDot)(synExpr$$1)), delayed$$4);
            synExpr$$1 = $var$$368;
            continue TcExprThen;
          }

        case 34:
          {
            const mWholeExpr = synExpr$$1.fields[3];
            const mDot = synExpr$$1.fields[2];
            const e2$$10 = synExpr$$1.fields[1];
            const e1$$17 = synExpr$$1.fields[0];
            return TcIndexerThen(cenv$$112, env$$162, overallTy$$6, mWholeExpr, mDot, tpenv$$104, synExpr$$1, e1$$17, e2$$10, delayed$$4);
          }

        case 35:
          {
            const mWholeExpr$$1 = synExpr$$1.fields[5];
            const mDot$$1 = synExpr$$1.fields[4];
            const e2$$11 = synExpr$$1.fields[1];
            const e1$$18 = synExpr$$1.fields[0];
            return TcIndexerThen(cenv$$112, env$$162, overallTy$$6, mWholeExpr$$1, mDot$$1, tpenv$$104, synExpr$$1, e1$$18, e2$$11, delayed$$4);
          }

        default:
          {
            if (delayed$$4.tail == null) {
              return TcExprUndelayed(cenv$$112, overallTy$$6, env$$162, tpenv$$104, synExpr$$1);
            } else {
              const patternInput$$162 = TcExprUndelayedNoType(cenv$$112, env$$162, tpenv$$104, synExpr$$1);
              return PropagateThenTcDelayed(cenv$$112, overallTy$$6, env$$162, patternInput$$162[2], (0, _ast.SynExpr$$get_Range)(synExpr$$1), MakeApplicableExprNoFlex(cenv$$112, patternInput$$162[0]), patternInput$$162[1], 1, delayed$$4);
            }
          }
      }
    }
  }
}

function TcExprs(cenv$$113, env$$163, m$$193, tpenv$$106, flexes, argtys$$13, args$$48) {
  if ((0, _List.length)(args$$48) !== (0, _List.length)(argtys$$13)) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpressionCountMisMatch$$Z37302880)((0, _List.length)(argtys$$13), (0, _List.length)(args$$48)), m$$193));
  }

  return (0, _List.mapFold)(function mapping$$36(tpenv$$107, tupledArg$$33) {
    return TcExprFlex(cenv$$113, tupledArg$$33[0], false, tupledArg$$33[1], env$$163, tpenv$$107, tupledArg$$33[2]);
  }, tpenv$$106, (0, _List.zip3)(flexes, argtys$$13, args$$48));
}

function CheckSuperInit(cenv$$114, objTy$$1, m$$194) {
  var tcref$$27;
  const matchValue$$102 = (0, _TastOps.tryDestAppTy)(cenv$$114.g, objTy$$1);
  var $target$$369, tcref$$28;

  if (matchValue$$102 != null) {
    if (tcref$$27 = matchValue$$102, (0, _TastOps.isAbstractTycon)((0, _tast.EntityRef$$get_Deref)(tcref$$27))) {
      $target$$369 = 0;
      tcref$$28 = matchValue$$102;
    } else {
      $target$$369 = 1;
    }
  } else {
    $target$$369 = 1;
  }

  switch ($target$$369) {
    case 0:
      {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAbstractTypeCannotBeInstantiated)(), m$$194));
        break;
      }
  }
}

function TcExprUndelayedNoType(cenv$$115, env$$164, tpenv$$108, expr$$39) {
  const exprty$$4 = (0, _ConstraintSolver.NewInferenceType)();
  const patternInput$$163 = TcExprUndelayed(cenv$$115, exprty$$4, env$$164, tpenv$$108, expr$$39);
  return [patternInput$$163[0], exprty$$4, patternInput$$163[1]];
}

function TcExprUndelayed(cenv$$116, overallTy$$7, env$$165, tpenv$$110, expr$$40) {
  var m$$236, isTrueReturn, m$$237, isTrueReturn$$1, m$$195, isTrueYield, m$$196, isTrueYield$$1;

  TcExprUndelayed: while (true) {
    var $target$$370, expr2, mWholeExprIncludingParentheses, m$$197, s$$7, c$$26, m$$198, _m$$1, isExnMatch, matches, spMatch, x$$81, argm$$1, clauses$$3, isExnMatch$$1, m$$199, spMatch$$1, m$$200, x$$82, m$$201, cty$$6, e$$54, m$$202, e$$55, m$$203, tgty$$5, byref, e$$56, m$$204, opm, e$$57, m$$205, e$$58, m$$207, m$$209, e$$59, m$$210, args$$49, m$$211, args$$50, m$$212, args$$51, isArray$$2, m$$213, arg$$9, mNewExpr, superInit, synObjTy, argopt, binds$$2, extraImpls$$1, m$$215, mNewExpr$$1, objTy$$3, flds$$2, inherits, mWholeExpr$$2, optOrigExpr, e1$$19, e2$$12, m$$216, spWhile, body$$10, dir$$1, finish$$1, id$$38, m$$217, spBind$$5, start$$1, bodySynExpr, enumSynExpr, isFromSource, m$$218, pat$$12, seqExprOnly, spForLoop, comp, isArrayOrList, isNotNakedRefCell, m$$219, comp$$1, isArray$$3, m$$220, _mTryToWith, clauses$$4, e1$$20, mTryToLast, mWithToLast, spTry, spWith, e1$$21, e2$$13, mTryToLast$$1, spFinally, spTry$$1, e1$$22, e2$$14, mAll, mInToken, _debugStr, m$$222, e1$$23, m$$223, e1$$24, m$$224, dir$$2, e1$$25, e2$$15, m$$225, sp, e1$$26, m$$226, e1$$27, e2$$16, e3opt$$1, isRecovery, m$$227, mIfToThen, spIfToThen, constraints, e2$$17, e3$$1, m$$228, e1$$28, e2$$18, lidwd$$2, longId$$6, mStmt, e1$$29, e2$$19, mStmt$$1, e1$$30, e2$$20, e3$$2, lidwd$$3, longId$$7, mStmt$$2, e2$$21, lidwd$$4, m$$229, e1$$31, e2$$22, lidwd$$5, mStmt$$3, arg$$10, m$$230, memSpfn$$2, tps$$10, c$$28, e1$$32, m$$231, n$$6, c$$29, e1$$33, e2$$23, m$$232, n$$9, args$$53, m$$233, rtys, s$$8, tyargs$$6, ast, isFromQueryExpression, m$$234, oper, raw, isTrueYield$$2, m$$235;

    if (expr$$40.tag === 0) {
      $target$$370 = 0;
      expr2 = expr$$40.fields[0];
      mWholeExprIncludingParentheses = expr$$40.fields[3];
    } else if (expr$$40.tag === 34) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 35) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 21) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 28) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 29) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 20) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 31) {
      $target$$370 = 1;
    } else if (expr$$40.tag === 2) {
      if (expr$$40.fields[0].tag === 17) {
        $target$$370 = 2;
        m$$197 = expr$$40.fields[0].fields[1];
        s$$7 = expr$$40.fields[0].fields[0];
      } else {
        $target$$370 = 3;
        c$$26 = expr$$40.fields[0];
        m$$198 = expr$$40.fields[1];
      }
    } else if (expr$$40.tag === 15) {
      $target$$370 = 4;
    } else if (expr$$40.tag === 17) {
      $target$$370 = 5;
      _m$$1 = expr$$40.fields[4];
      isExnMatch = expr$$40.fields[3];
      matches = expr$$40.fields[2];
      spMatch = expr$$40.fields[0];
      x$$81 = expr$$40.fields[1];
    } else if (expr$$40.tag === 16) {
      $target$$370 = 6;
      argm$$1 = expr$$40.fields[1];
      clauses$$3 = expr$$40.fields[2];
      isExnMatch$$1 = expr$$40.fields[0];
      m$$199 = expr$$40.fields[4];
      spMatch$$1 = expr$$40.fields[3];
    } else if (expr$$40.tag === 19) {
      $target$$370 = 7;
      m$$200 = expr$$40.fields[1];
      x$$82 = expr$$40.fields[0];
    } else if (expr$$40.tag === 60) {
      $target$$370 = 8;
      m$$201 = expr$$40.fields[1];
    } else if (expr$$40.tag === 3) {
      $target$$370 = 9;
      cty$$6 = expr$$40.fields[1];
      e$$54 = expr$$40.fields[0];
      m$$202 = expr$$40.fields[2];
    } else if (expr$$40.tag === 38) {
      $target$$370 = 10;
      e$$55 = expr$$40.fields[0];
      m$$203 = expr$$40.fields[2];
      tgty$$5 = expr$$40.fields[1];
    } else if (expr$$40.tag === 44) {
      $target$$370 = 11;
      byref = expr$$40.fields[0];
      e$$56 = expr$$40.fields[1];
      m$$204 = expr$$40.fields[3];
      opm = expr$$40.fields[2];
    } else if (expr$$40.tag === 39) {
      $target$$370 = 12;
      e$$57 = expr$$40.fields[0];
      m$$205 = expr$$40.fields[2];
    } else if (expr$$40.tag === 41) {
      $target$$370 = 12;
      e$$57 = expr$$40.fields[0];
      m$$205 = expr$$40.fields[1];
    } else if (expr$$40.tag === 40) {
      $target$$370 = 13;
      e$$58 = expr$$40.fields[0];
      m$$207 = expr$$40.fields[2];
    } else if (expr$$40.tag === 42) {
      $target$$370 = 13;
      e$$58 = expr$$40.fields[0];
      m$$207 = expr$$40.fields[1];
    } else if (expr$$40.tag === 43) {
      $target$$370 = 14;
      m$$209 = expr$$40.fields[0];
    } else if (expr$$40.tag === 25) {
      $target$$370 = 15;
      e$$59 = expr$$40.fields[0];
      m$$210 = expr$$40.fields[1];
    } else if (expr$$40.tag === 4) {
      $target$$370 = 16;
      args$$49 = expr$$40.fields[0];
      m$$211 = expr$$40.fields[2];
    } else if (expr$$40.tag === 5) {
      $target$$370 = 17;
      args$$50 = expr$$40.fields[0];
      m$$212 = expr$$40.fields[2];
    } else if (expr$$40.tag === 6) {
      $target$$370 = 18;
      args$$51 = expr$$40.fields[1];
      isArray$$2 = expr$$40.fields[0];
      m$$213 = expr$$40.fields[2];
    } else if (expr$$40.tag === 8) {
      $target$$370 = 19;
      arg$$9 = expr$$40.fields[2];
      mNewExpr = expr$$40.fields[3];
      superInit = expr$$40.fields[0];
      synObjTy = expr$$40.fields[1];
    } else if (expr$$40.tag === 9) {
      $target$$370 = 20;
      argopt = expr$$40.fields[1];
      binds$$2 = expr$$40.fields[2];
      extraImpls$$1 = expr$$40.fields[3];
      m$$215 = expr$$40.fields[5];
      mNewExpr$$1 = expr$$40.fields[4];
      objTy$$3 = expr$$40.fields[0];
    } else if (expr$$40.tag === 7) {
      $target$$370 = 21;
      flds$$2 = expr$$40.fields[2];
      inherits = expr$$40.fields[0];
      mWholeExpr$$2 = expr$$40.fields[3];
      optOrigExpr = expr$$40.fields[1];
    } else if (expr$$40.tag === 10) {
      $target$$370 = 22;
      e1$$19 = expr$$40.fields[1];
      e2$$12 = expr$$40.fields[2];
      m$$216 = expr$$40.fields[3];
      spWhile = expr$$40.fields[0];
    } else if (expr$$40.tag === 11) {
      $target$$370 = 23;
      body$$10 = expr$$40.fields[5];
      dir$$1 = expr$$40.fields[3];
      finish$$1 = expr$$40.fields[4];
      id$$38 = expr$$40.fields[1];
      m$$217 = expr$$40.fields[6];
      spBind$$5 = expr$$40.fields[0];
      start$$1 = expr$$40.fields[2];
    } else if (expr$$40.tag === 12) {
      $target$$370 = 24;
      bodySynExpr = expr$$40.fields[5];
      enumSynExpr = expr$$40.fields[4];
      isFromSource = expr$$40.fields[2];
      m$$218 = expr$$40.fields[6];
      pat$$12 = expr$$40.fields[3];
      seqExprOnly = expr$$40.fields[1].fields[0];
      spForLoop = expr$$40.fields[0];
    } else if (expr$$40.tag === 14) {
      $target$$370 = 25;
      comp = expr$$40.fields[2];
      isArrayOrList = expr$$40.fields[0];
      isNotNakedRefCell = expr$$40.fields[1];
      m$$219 = expr$$40.fields[3];
    } else if (expr$$40.tag === 13) {
      $target$$370 = 26;
      comp$$1 = expr$$40.fields[1];
      isArray$$3 = expr$$40.fields[0];
      m$$220 = expr$$40.fields[2];
    } else if (expr$$40.tag === 22) {
      $target$$370 = 27;
    } else if (expr$$40.tag === 23) {
      $target$$370 = 28;
      _mTryToWith = expr$$40.fields[1];
      clauses$$4 = expr$$40.fields[2];
      e1$$20 = expr$$40.fields[0];
      mTryToLast = expr$$40.fields[4];
      mWithToLast = expr$$40.fields[3];
      spTry = expr$$40.fields[5];
      spWith = expr$$40.fields[6];
    } else if (expr$$40.tag === 24) {
      $target$$370 = 29;
      e1$$21 = expr$$40.fields[0];
      e2$$13 = expr$$40.fields[1];
      mTryToLast$$1 = expr$$40.fields[2];
      spFinally = expr$$40.fields[4];
      spTry$$1 = expr$$40.fields[3];
    } else if (expr$$40.tag === 46) {
      $target$$370 = 30;
      e1$$22 = expr$$40.fields[0];
      e2$$14 = expr$$40.fields[2];
      mAll = expr$$40.fields[3];
      mInToken = expr$$40.fields[1];
    } else if (expr$$40.tag === 57) {
      $target$$370 = 31;
      _debugStr = expr$$40.fields[0];
      m$$222 = expr$$40.fields[1];
    } else if (expr$$40.tag === 59) {
      $target$$370 = 32;
      e1$$23 = expr$$40.fields[0];
      m$$223 = expr$$40.fields[1];
    } else if (expr$$40.tag === 58) {
      $target$$370 = 33;
      e1$$24 = expr$$40.fields[0];
      m$$224 = expr$$40.fields[1];
    } else if (expr$$40.tag === 26) {
      $target$$370 = 34;
      dir$$2 = expr$$40.fields[1];
      e1$$25 = expr$$40.fields[2];
      e2$$15 = expr$$40.fields[3];
      m$$225 = expr$$40.fields[4];
      sp = expr$$40.fields[0];
    } else if (expr$$40.tag === 18) {
      $target$$370 = 35;
      e1$$26 = expr$$40.fields[0];
      m$$226 = expr$$40.fields[1];
    } else if (expr$$40.tag === 27) {
      $target$$370 = 36;
      e1$$27 = expr$$40.fields[0];
      e2$$16 = expr$$40.fields[1];
      e3opt$$1 = expr$$40.fields[2];
      isRecovery = expr$$40.fields[4];
      m$$227 = expr$$40.fields[6];
      mIfToThen = expr$$40.fields[5];
      spIfToThen = expr$$40.fields[3];
    } else if (expr$$40.tag === 54) {
      $target$$370 = 37;
      constraints = expr$$40.fields[0];
      e2$$17 = expr$$40.fields[1];
      e3$$1 = expr$$40.fields[2];
      m$$228 = expr$$40.fields[3];
    } else if (expr$$40.tag === 32) {
      $target$$370 = 38;
      e1$$28 = expr$$40.fields[0];
      e2$$18 = expr$$40.fields[2];
      lidwd$$2 = expr$$40.fields[1];
      longId$$6 = expr$$40.fields[1].fields[0];
      mStmt = expr$$40.fields[3];
    } else if (expr$$40.tag === 33) {
      $target$$370 = 39;
      e1$$29 = expr$$40.fields[0];
      e2$$19 = expr$$40.fields[1];
      mStmt$$1 = expr$$40.fields[2];
    } else if (expr$$40.tag === 37) {
      $target$$370 = 40;
      e1$$30 = expr$$40.fields[0];
      e2$$20 = expr$$40.fields[2];
      e3$$2 = expr$$40.fields[3];
      lidwd$$3 = expr$$40.fields[1];
      longId$$7 = expr$$40.fields[1].fields[0];
      mStmt$$2 = expr$$40.fields[4];
    } else if (expr$$40.tag === 30) {
      $target$$370 = 41;
      e2$$21 = expr$$40.fields[1];
      lidwd$$4 = expr$$40.fields[0];
      m$$229 = expr$$40.fields[2];
    } else if (expr$$40.tag === 36) {
      $target$$370 = 42;
      e1$$31 = expr$$40.fields[1];
      e2$$22 = expr$$40.fields[2];
      lidwd$$5 = expr$$40.fields[0];
      mStmt$$3 = expr$$40.fields[3];
    } else if (expr$$40.tag === 45) {
      $target$$370 = 43;
      arg$$10 = expr$$40.fields[2];
      m$$230 = expr$$40.fields[3];
      memSpfn$$2 = expr$$40.fields[1];
      tps$$10 = expr$$40.fields[0];
    } else if (expr$$40.tag === 55) {
      $target$$370 = 44;
      c$$28 = expr$$40.fields[1];
      e1$$32 = expr$$40.fields[0];
      m$$231 = expr$$40.fields[3];
      n$$6 = expr$$40.fields[2];
    } else if (expr$$40.tag === 56) {
      $target$$370 = 45;
      c$$29 = expr$$40.fields[1];
      e1$$33 = expr$$40.fields[0];
      e2$$23 = expr$$40.fields[3];
      m$$232 = expr$$40.fields[4];
      n$$9 = expr$$40.fields[2];
    } else if (expr$$40.tag === 53) {
      $target$$370 = 46;
      args$$53 = expr$$40.fields[2];
      m$$233 = expr$$40.fields[4];
      rtys = expr$$40.fields[3];
      s$$8 = expr$$40.fields[0];
      tyargs$$6 = expr$$40.fields[1];
    } else if (expr$$40.tag === 1) {
      $target$$370 = 47;
      ast = expr$$40.fields[2];
      isFromQueryExpression = expr$$40.fields[3];
      m$$234 = expr$$40.fields[4];
      oper = expr$$40.fields[0];
      raw = expr$$40.fields[1];
    } else if (expr$$40.tag === 48) {
      if (m$$195 = expr$$40.fields[2], (isTrueYield = expr$$40.fields[0][0], isTrueYield)) {
        $target$$370 = 48;
        isTrueYield$$2 = expr$$40.fields[0][0];
        m$$235 = expr$$40.fields[2];
      } else {
        $target$$370 = 49;
      }
    } else if (expr$$40.tag === 49) {
      if (m$$196 = expr$$40.fields[2], (isTrueYield$$1 = expr$$40.fields[0][0], isTrueYield$$1)) {
        $target$$370 = 48;
        isTrueYield$$2 = expr$$40.fields[0][0];
        m$$235 = expr$$40.fields[2];
      } else {
        $target$$370 = 49;
      }
    } else {
      $target$$370 = 49;
    }

    switch ($target$$370) {
      case 0:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, mWholeExprIncludingParentheses, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          const env$$166 = ShrinkContext(env$$165, mWholeExprIncludingParentheses, (0, _ast.SynExpr$$get_Range)(expr2));
          return TcExpr(cenv$$116, overallTy$$7, env$$166, tpenv$$110, expr2);
        }

      case 1:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExprUndelayed)(), (0, _ast.SynExpr$$get_Range)(expr$$40)));
        }

      case 2:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, m$$197, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          return TcConstStringExpr(cenv$$116, overallTy$$7, env$$165, m$$197, tpenv$$110, s$$7);
        }

      case 3:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, m$$198, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          return TcConstExpr(cenv$$116, overallTy$$7, env$$165, m$$198, tpenv$$110, c$$26);
        }

      case 4:
        {
          return TcIteratedLambdas(cenv$$116, true, env$$165, overallTy$$7, (0, _Set.empty)({
            Compare: _Util.comparePrimitives
          }), tpenv$$110, expr$$40);
        }

      case 5:
        {
          const patternInput$$164 = TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, x$$81);
          const mExpr$$2 = (0, _TastOps.Expr$002Eget_Range)(patternInput$$164[0]);
          const patternInput$$165 = TcAndPatternCompileMatchClauses(mExpr$$2, mExpr$$2, isExnMatch ? new _PatternMatchCompilation.ActionOnFailure(2, "Throw") : new _PatternMatchCompilation.ActionOnFailure(0, "ThrowIncompleteMatchException"), cenv$$116, patternInput$$164[1], overallTy$$7, env$$165, patternInput$$164[2], matches);
          return [(0, _TastOps.mkLet)(spMatch, mExpr$$2, patternInput$$165[0], patternInput$$164[0], patternInput$$165[1]), patternInput$$165[2]];
        }

      case 6:
        {
          const patternInput$$166 = UnifyFunctionType(null, cenv$$116, TcEnv$$get_DisplayEnv(env$$165), m$$199, overallTy$$7);
          const patternInput$$167 = (0, _TastOps.mkCompGenLocal)(argm$$1, (0, _ast.SynArgNameGenerator$$New)(cenv$$116.synArgNameGenerator), patternInput$$166[0]);
          const envinner$$2 = ExitFamilyRegion(env$$165);
          const patternInput$$168 = TcAndPatternCompileMatchClauses(m$$199, argm$$1, isExnMatch$$1 ? new _PatternMatchCompilation.ActionOnFailure(2, "Throw") : new _PatternMatchCompilation.ActionOnFailure(0, "ThrowIncompleteMatchException"), cenv$$116, patternInput$$166[0], patternInput$$166[1], envinner$$2, tpenv$$110, clauses$$3);
          const overallExpr = (0, _TastOps.mkMultiLambda)(m$$199, (0, _Types.L)(patternInput$$167[0], (0, _Types.L)()), (0, _TastOps.mkLet)(spMatch$$1, m$$199, patternInput$$168[0], patternInput$$167[1], patternInput$$168[1]), patternInput$$166[1]);
          return [overallExpr, patternInput$$168[2]];
        }

      case 7:
        {
          return TcAssertExpr(cenv$$116, overallTy$$7, env$$165, m$$200, tpenv$$110, x$$82);
        }

      case 8:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFixedNotAllowed)(), m$$201));
        }

      case 9:
        {
          const patternInput$$169 = TcTypeAndRecover(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$165, tpenv$$110, cty$$6);
          UnifyTypes(cenv$$116, env$$165, m$$202, overallTy$$7, patternInput$$169[0]);
          const patternInput$$170 = TcExpr(cenv$$116, overallTy$$7, env$$165, patternInput$$169[1], e$$54);
          return [patternInput$$170[0], patternInput$$170[1]];
        }

      case 10:
        {
          const patternInput$$171 = TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, e$$55);
          UnifyTypes(cenv$$116, env$$165, m$$203, overallTy$$7, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$116.g));
          const patternInput$$172 = TcType(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$165, patternInput$$171[2], tgty$$5);
          TcRuntimeTypeTest(false, true, cenv$$116, TcEnv$$get_DisplayEnv(env$$165), m$$203, patternInput$$172[0], patternInput$$171[1]);
          const e$0027$$4 = (0, _TastOps.mkCallTypeTest)(cenv$$116.g, m$$203, patternInput$$172[0], patternInput$$171[0]);
          return [e$0027$$4, patternInput$$172[1]];
        }

      case 11:
        {
          return TcExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, (0, _ast.mkSynPrefixPrim)(opm, m$$204, byref ? "~&" : "~&&", e$$56));
        }

      case 12:
        {
          const patternInput$$173 = TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, e$$57);
          let patternInput$$175;

          switch (expr$$40.tag) {
            case 39:
              {
                const tgty$$7 = expr$$40.fields[1];
                const m$$206 = expr$$40.fields[2];
                const patternInput$$174 = TcType(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$165, patternInput$$173[2], tgty$$7);
                UnifyTypes(cenv$$116, env$$165, m$$206, patternInput$$174[0], overallTy$$7);
                patternInput$$175 = [patternInput$$174[0], patternInput$$174[1]];
                break;
              }

            case 41:
              {
                patternInput$$175 = [overallTy$$7, patternInput$$173[2]];
                break;
              }

            default:
              {
                throw new Error("upcast");
              }
          }

          TcStaticUpcast(cenv$$116, TcEnv$$get_DisplayEnv(env$$165), m$$205, patternInput$$175[0], patternInput$$173[1]);
          return [(0, _TastOps.mkCoerceExpr)(patternInput$$173[0], patternInput$$175[0], m$$205, patternInput$$173[1]), patternInput$$175[1]];
        }

      case 13:
        {
          const patternInput$$176 = TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, e$$58);
          let patternInput$$178;

          switch (expr$$40.tag) {
            case 40:
              {
                const tgty$$10 = expr$$40.fields[1];
                const m$$208 = expr$$40.fields[2];
                const patternInput$$177 = TcType(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$165, patternInput$$176[2], tgty$$10);
                UnifyTypes(cenv$$116, env$$165, m$$208, patternInput$$177[0], overallTy$$7);
                patternInput$$178 = [patternInput$$177[0], patternInput$$177[1], true];
                break;
              }

            case 42:
              {
                patternInput$$178 = [overallTy$$7, patternInput$$176[2], false];
                break;
              }

            default:
              {
                throw new Error("downcast");
              }
          }

          TcRuntimeTypeTest(true, patternInput$$178[2], cenv$$116, TcEnv$$get_DisplayEnv(env$$165), m$$207, patternInput$$178[0], patternInput$$176[1]);
          const e$0027$$7 = (0, _TastOps.mkCallUnbox)(cenv$$116.g, m$$207, patternInput$$178[0], patternInput$$176[0]);
          return [e$0027$$7, patternInput$$178[1]];
        }

      case 14:
        {
          (0, _ConstraintSolver.AddCxTypeMustSupportNull)(TcEnv$$get_DisplayEnv(env$$165), cenv$$116.css, m$$209, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), overallTy$$7);
          return [(0, _TastOps.mkNull)(m$$209, overallTy$$7), tpenv$$110];
        }

      case 15:
        {
          const ety$$1 = (0, _ConstraintSolver.NewInferenceType)();
          UnifyTypes(cenv$$116, env$$165, m$$210, overallTy$$7, (0, _TastOps.mkLazyTy)(cenv$$116.g, ety$$1));
          const patternInput$$179 = TcExpr(cenv$$116, ety$$1, env$$165, tpenv$$110, e$$59);
          return [(0, _TastOps.mkLazyDelayed)(cenv$$116.g, m$$210, ety$$1, (0, _TastOps.mkUnitDelayLambda)(cenv$$116.g, m$$210, patternInput$$179[0])), patternInput$$179[1]];
        }

      case 16:
        {
          const argtys$$14 = UnifyRefTupleType(env$$165.eContextInfo, cenv$$116, TcEnv$$get_DisplayEnv(env$$165), m$$211, overallTy$$7, args$$49);
          const flexes$$1 = (0, _List.map)(function mapping$$37(_arg18) {
            return false;
          }, argtys$$14);
          const patternInput$$180 = TcExprs(cenv$$116, env$$165, m$$211, tpenv$$110, flexes$$1, argtys$$14, args$$49);
          return [(0, _TastOps.mkRefTupled)(cenv$$116.g, m$$211, patternInput$$180[0], argtys$$14), patternInput$$180[1]];
        }

      case 17:
        {
          const argtys$$15 = UnifyStructTupleType(env$$165.eContextInfo, cenv$$116, TcEnv$$get_DisplayEnv(env$$165), m$$212, overallTy$$7, args$$50);
          const flexes$$2 = (0, _List.map)(function mapping$$38(_arg19) {
            return false;
          }, argtys$$15);
          const patternInput$$181 = TcExprs(cenv$$116, env$$165, m$$212, tpenv$$110, flexes$$2, argtys$$15, args$$50);
          return [(0, _TastOps.mkAnyTupled)(cenv$$116.g, m$$212, _tast.tupInfoStruct, patternInput$$181[0], argtys$$15), patternInput$$181[1]];
        }

      case 18:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, m$$213, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          const argty$$6 = (0, _ConstraintSolver.NewInferenceType)();
          UnifyTypes(cenv$$116, env$$165, m$$213, overallTy$$7, isArray$$2 ? (0, _TastOps.mkArrayType)(cenv$$116.g, argty$$6) : (0, _TastOps.mkListTy)(cenv$$116.g, argty$$6));
          const flex$$4 = !(0, _TastOps.isTyparTy)(cenv$$116.g, argty$$6);
          const first$$1 = new _Types.FSharpRef(true);

          const getInitEnv = function getInitEnv(m$$214) {
            if (first$$1.contents) {
              first$$1.contents = false;
              return env$$165;
            } else {
              return new TcEnv(env$$165.eNameResEnv, env$$165.eUngeneralizableItems, env$$165.ePath, env$$165.eCompPath, env$$165.eAccessPath, env$$165.eAccessRights, env$$165.eInternalsVisibleCompPaths, env$$165.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(6, "CollectionElement", isArray$$2, m$$214), env$$165.eFamilyType, env$$165.eCtorInfo, env$$165.eCallerMemberName);
            }
          };

          const patternInput$$182 = (0, _List.mapFold)(function (tpenv$$127, x$$83) {
            return TcExprFlex(cenv$$116, flex$$4, false, argty$$6, getInitEnv((0, _ast.SynExpr$$get_Range)(x$$83)), tpenv$$127, x$$83);
          }, tpenv$$110, args$$51);
          const expr$$41 = isArray$$2 ? new _tast.Expr(11, "Op", new _tast.TOp(3, "Array"), (0, _Types.L)(argty$$6, (0, _Types.L)()), patternInput$$182[0], m$$213) : (0, _List.foldBack)(function (arg20$0040$$10, arg30$0040$$13) {
            return (0, _TastOps.mkCons)(cenv$$116.g, argty$$6, arg20$0040$$10, arg30$0040$$13);
          }, patternInput$$182[0], (0, _TastOps.mkNil)(cenv$$116.g, m$$213, argty$$6));
          return [expr$$41, patternInput$$182[1]];
        }

      case 19:
        {
          const patternInput$$183 = TcType(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(1, "Use"), env$$165, tpenv$$110, synObjTy);
          UnifyTypes(cenv$$116, env$$165, mNewExpr, overallTy$$7, patternInput$$183[0]);
          return TcNewExpr(cenv$$116, env$$165, patternInput$$183[1], patternInput$$183[0], (0, _ast.SynType$$get_Range)(synObjTy), superInit, arg$$9, mNewExpr);
        }

      case 20:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, m$$215, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          return TcObjectExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, objTy$$3, argopt, binds$$2, extraImpls$$1, mNewExpr$$1, m$$215);
        }

      case 21:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, mWholeExpr$$2, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          return TcRecdExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, inherits, optOrigExpr, flds$$2, mWholeExpr$$2);
        }

      case 22:
        {
          UnifyTypes(cenv$$116, env$$165, m$$216, overallTy$$7, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$116.g));
          const patternInput$$184 = TcExpr(cenv$$116, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$116.g), env$$165, tpenv$$110, e1$$19);
          const patternInput$$185 = TcStmt(cenv$$116, env$$165, patternInput$$184[1], e2$$12);
          return [(0, _TastOps.mkWhile)(cenv$$116.g, spWhile, new _tast.SpecialWhileLoopMarker(0, "NoSpecialWhileLoopMarker"), patternInput$$184[0], patternInput$$185[0], m$$216), patternInput$$185[1]];
        }

      case 23:
        {
          UnifyTypes(cenv$$116, env$$165, m$$217, overallTy$$7, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$116.g));
          const patternInput$$186 = TcExpr(cenv$$116, (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$116.g), env$$165, tpenv$$110, start$$1);
          const patternInput$$187 = TcExpr(cenv$$116, (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$116.g), env$$165, patternInput$$186[1], finish$$1);
          const patternInput$$188 = (0, _TastOps.mkLocal)((0, _ast.Ident$$get_idRange)(id$$38), (0, _ast.Ident$$get_idText)(id$$38), (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$116.g));
          const envinner$$3 = AddLocalVal(cenv$$116.tcSink, m$$217, patternInput$$188[0], env$$165);
          const item$$29 = new _NameResolution.Item(0, "Value", (0, _tast.mkLocalValRef)(patternInput$$188[0]));
          (0, _NameResolution.CallNameResolutionSink)(cenv$$116.tcSink, (0, _tast.Val$$get_Range)(patternInput$$188[0]), TcEnv$$get_NameEnv(env$$165), item$$29, item$$29, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          const patternInput$$189 = TcStmt(cenv$$116, envinner$$3, patternInput$$187[1], body$$10);
          return [(0, _TastOps.mkFastForLoop)(cenv$$116.g, spBind$$5, m$$217, patternInput$$188[0], patternInput$$186[0], dir$$1, patternInput$$187[0], patternInput$$189[0]), patternInput$$189[1]];
        }

      case 24:
        {
          if (seqExprOnly) {
            (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpressionRequiresSequence)(), m$$218));
          }

          return TcForEachExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, pat$$12, enumSynExpr, bodySynExpr, m$$218, spForLoop);
        }

      case 25:
        {
          const env$$167 = ExitFamilyRegion(env$$165);

          if (!isArrayOrList) {
            if (comp.tag === 8) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidObjectExpressionSyntaxForm)(), m$$219));
            } else if ($007CSimpleSemicolonSequence$007C_$007C(false, comp) != null) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidObjectSequenceOrRecordExpression)(), m$$219));
            }
          }

          if (!isNotNakedRefCell.contents ? !(0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$116.g) : false) {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidSequenceExpressionSyntaxForm)(), m$$219));
          }

          return TcComputationOrSequenceExpression(cenv$$116, env$$167, overallTy$$7, m$$219, null, tpenv$$110, comp);
        }

      case 26:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, m$$220, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          var $target$$371, body$$11, elems$$2;

          if (comp$$1.tag === 14) {
            const activePatternResult47584 = $007CSimpleSemicolonSequence$007C_$007C(true, comp$$1.fields[2]);

            if (activePatternResult47584 != null) {
              $target$$371 = 0;
              body$$11 = comp$$1.fields[2];
              elems$$2 = activePatternResult47584;
            } else {
              $target$$371 = 1;
            }
          } else {
            $target$$371 = 1;
          }

          switch ($target$$371) {
            case 0:
              {
                if ($007CSimpleSemicolonSequence$007C_$007C(false, body$$11) != null) {} else {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcExpressionWithIfRequiresParenthesis)(), m$$220));
                }

                let replacementExpr;

                if (isArray$$3) {
                  const nelems = (0, _List.length)(elems$$2) | 0;
                  replacementExpr = (nelems > 0 ? (0, _List.forAll)(function (_arg13$$1) {
                    return _arg13$$1.tag === 2 ? _arg13$$1.fields[0].tag === 5 ? true : false : false;
                  }, elems$$2) : false) ? new _ast.SynExpr(2, "Const", new _ast.SynConst(19, "UInt16s", (0, _Array.ofList)((0, _List.map)(function (_arg14$$1) {
                    var $target$$372, x$$84;

                    if (_arg14$$1.tag === 2) {
                      if (_arg14$$1.fields[0].tag === 5) {
                        $target$$372 = 0;
                        x$$84 = _arg14$$1.fields[0].fields[0];
                      } else {
                        $target$$372 = 1;
                      }
                    } else {
                      $target$$372 = 1;
                    }

                    switch ($target$$372) {
                      case 0:
                        {
                          return x$$84;
                        }

                      case 1:
                        {
                          throw new Error("unreachable");
                        }
                    }
                  }, elems$$2), Uint16Array)), m$$220) : (nelems > 0 ? (0, _List.forAll)(function (_arg15$$1) {
                    return _arg15$$1.tag === 2 ? _arg15$$1.fields[0].tag === 3 ? true : false : false;
                  }, elems$$2) : false) ? new _ast.SynExpr(2, "Const", new _ast.SynConst(18, "Bytes", (0, _Array.ofList)((0, _List.map)(function (_arg16$$1) {
                    var $target$$373, x$$85;

                    if (_arg16$$1.tag === 2) {
                      if (_arg16$$1.fields[0].tag === 3) {
                        $target$$373 = 0;
                        x$$85 = _arg16$$1.fields[0].fields[0];
                      } else {
                        $target$$373 = 1;
                      }
                    } else {
                      $target$$373 = 1;
                    }

                    switch ($target$$373) {
                      case 0:
                        {
                          return x$$85;
                        }

                      case 1:
                        {
                          throw new Error("unreachable");
                        }
                    }
                  }, elems$$2), Uint8Array), m$$220), m$$220) : new _ast.SynExpr(6, "ArrayOrList", isArray$$3, elems$$2, m$$220);
                } else {
                  if ((0, _List.length)(elems$$2) > 500) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcListLiteralMaxSize)(), m$$220));
                  }

                  replacementExpr = new _ast.SynExpr(6, "ArrayOrList", isArray$$3, elems$$2, m$$220);
                }

                cenv$$116 = cenv$$116;
                overallTy$$7 = overallTy$$7;
                env$$165 = env$$165;
                tpenv$$110 = tpenv$$110;
                expr$$40 = replacementExpr;
                continue TcExprUndelayed;
              }

            case 1:
              {
                const genCollElemTy = (0, _ConstraintSolver.NewInferenceType)();
                const genCollTy = (isArray$$3 ? function (arg00$0040$$18) {
                  return function (arg10$0040$$21) {
                    return (0, _TastOps.mkArrayType)(arg00$0040$$18, arg10$0040$$21);
                  };
                } : function (arg00$0040$$19) {
                  return function (arg10$0040$$22) {
                    return (0, _TastOps.mkListTy)(arg00$0040$$19, arg10$0040$$22);
                  };
                })(cenv$$116.g)(genCollElemTy);
                UnifyTypes(cenv$$116, env$$165, m$$220, overallTy$$7, genCollTy);
                const exprty$$5 = (0, _TastOps.mkSeqTy)(cenv$$116.g, genCollElemTy);
                const patternInput$$190 = TcExpr(cenv$$116, exprty$$5, env$$165, tpenv$$110, comp$$1);
                const expr$$43 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$116.g, exprty$$5, (0, _TastOps.tyOfExpr)(cenv$$116.g, patternInput$$190[0]), patternInput$$190[0]);
                const expr$$44 = (0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$116.g) ? expr$$43 : (0, _TastOps.mkCallSeq)(cenv$$116.g, m$$220, genCollElemTy, expr$$43);
                const expr$$45 = (0, _TastOps.mkCoerceExpr)(expr$$44, exprty$$5, (0, _TastOps.Expr$002Eget_Range)(expr$$44), overallTy$$7);
                const expr$$46 = isArray$$3 ? (0, _TastOps.mkCallSeqToArray)(cenv$$116.g, m$$220, genCollElemTy, expr$$45) : (0, _TastOps.mkCallSeqToList)(cenv$$116.g, m$$220, genCollElemTy, expr$$45);
                return [expr$$46, patternInput$$190[1]];
              }
          }
        }

      case 27:
        {
          return TcLinearExprs(function (overallTy$$8, env$$168, tpenv$$136, expr$$47) {
            return TcExprThatCanBeCtorBody(cenv$$116, overallTy$$8, env$$168, tpenv$$136, expr$$47);
          }, cenv$$116, env$$165, overallTy$$7, tpenv$$110, false, expr$$40, function (x$$86) {
            return x$$86;
          });
        }

      case 28:
        {
          const patternInput$$191 = TcExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$20);
          const filterClauses = (0, _List.map)(function mapping$$39(_arg17$$1) {
            const pat$$13 = _arg17$$1.fields[0];
            const optWhenExpr = _arg17$$1.fields[1];
            const m$$221 = _arg17$$1.fields[3];
            return new _ast.SynMatchClause(0, "Clause", pat$$13, optWhenExpr, new _ast.SynExpr(2, "Const", new _ast.SynConst(6, "Int32", 1), m$$221), m$$221, new _ast.SequencePointInfoForTarget(1, "SuppressSequencePointAtTarget"));
          }, clauses$$4);
          const patternInput$$192 = TcMatchClauses(cenv$$116, (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$116.g), (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$116.g), env$$165, patternInput$$191[1], filterClauses);
          const patternInput$$193 = TcMatchClauses(cenv$$116, (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$116.g), overallTy$$7, env$$165, patternInput$$192[1], clauses$$4);
          const patternInput$$194 = CompilePatternForMatchClauses(cenv$$116, env$$165, mWithToLast, mWithToLast, true, new _PatternMatchCompilation.ActionOnFailure(4, "FailFilter"), (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$116.g), (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$116.g), patternInput$$192[0]);
          const patternInput$$195 = CompilePatternForMatchClauses(cenv$$116, env$$165, mWithToLast, mWithToLast, true, new _PatternMatchCompilation.ActionOnFailure(3, "Rethrow"), (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$116.g), overallTy$$7, patternInput$$193[0]);
          return [(0, _TastOps.mkTryWith)(cenv$$116.g, patternInput$$191[0], patternInput$$194[0], patternInput$$194[1], patternInput$$195[0], patternInput$$195[1], mTryToLast, overallTy$$7, spTry, spWith), patternInput$$193[1]];
        }

      case 29:
        {
          const patternInput$$196 = TcExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$21);
          const patternInput$$197 = TcStmt(cenv$$116, env$$165, patternInput$$196[1], e2$$13);
          return [(0, _TastOps.mkTryFinally)(cenv$$116.g, patternInput$$196[0], patternInput$$197[0], mTryToLast$$1, overallTy$$7, spTry$$1, spFinally), patternInput$$197[1]];
        }

      case 30:
        {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$parsUnfinishedExpression$$Z721C83C5)("in"), mInToken));
          const patternInput$$198 = (0, _ErrorLogger.suppressErrorReporting)(function () {
            return TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, e1$$22);
          });
          const patternInput$$199 = (0, _ErrorLogger.suppressErrorReporting)(function () {
            return TcExprOfUnknownType(cenv$$116, env$$165, patternInput$$198[2], e2$$14);
          });
          return [(0, _TastOps.mkDefault)(mAll, overallTy$$7), patternInput$$199[2]];
        }

      case 31:
        {
          return [(0, _TastOps.mkDefault)(m$$222, overallTy$$7), tpenv$$110];
        }

      case 32:
        {
          const patternInput$$200 = (0, _ErrorLogger.suppressErrorReporting)(function () {
            return TcExprOfUnknownTypeThen(cenv$$116, env$$165, tpenv$$110, e1$$23, (0, _Types.L)(new DelayedItem(3, "DelayedDot"), (0, _Types.L)()));
          });
          return [(0, _TastOps.mkDefault)(m$$223, overallTy$$7), patternInput$$200[2]];
        }

      case 33:
        {
          const patternInput$$201 = (0, _ErrorLogger.suppressErrorReporting)(function () {
            return TcExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$24);
          });
          return [(0, _TastOps.mkDefault)(m$$224, overallTy$$7), patternInput$$201[1]];
        }

      case 34:
        {
          if (dir$$2) {
            return TcLinearExprs(function (overallTy$$9, env$$169, tpenv$$146, expr$$48) {
              return TcExprThatCanBeCtorBody(cenv$$116, overallTy$$9, env$$169, tpenv$$146, expr$$48);
            }, cenv$$116, env$$165, overallTy$$7, tpenv$$110, false, expr$$40, function (x$$87) {
              return x$$87;
            });
          } else {
            const patternInput$$202 = TcExprThatCanBeCtorBody(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$25);

            if (GetCtorShapeCounter(env$$165) !== 1) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpressionFormRequiresObjectConstructor)(), m$$225));
            }

            const patternInput$$203 = TcStmtThatCantBeCtorBody(cenv$$116, env$$165, patternInput$$202[1], e2$$15);
            return [new _tast.Expr(2, "Sequential", patternInput$$202[0], patternInput$$203[0], new _tast.SequentialOpKind(1, "ThenDoSeq"), sp, m$$225), patternInput$$203[1]];
          }
        }

      case 35:
        {
          UnifyTypes(cenv$$116, env$$165, m$$226, overallTy$$7, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$116.g));
          return TcStmtThatCantBeCtorBody(cenv$$116, env$$165, tpenv$$110, e1$$26);
        }

      case 36:
        {
          const patternInput$$204 = TcExprThatCantBeCtorBody(cenv$$116, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$116.g), env$$165, tpenv$$110, e1$$27);
          let patternInput$$205;
          const env$$170 = env$$165.eContextInfo.tag === 3 ? new TcEnv(env$$165.eNameResEnv, env$$165.eUngeneralizableItems, env$$165.ePath, env$$165.eCompPath, env$$165.eAccessPath, env$$165.eAccessRights, env$$165.eInternalsVisibleCompPaths, env$$165.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(3, "ElseBranchResult", (0, _ast.SynExpr$$get_Range)(e2$$16)), env$$165.eFamilyType, env$$165.eCtorInfo, env$$165.eCallerMemberName) : e3opt$$1 == null ? new TcEnv(env$$165.eNameResEnv, env$$165.eUngeneralizableItems, env$$165.ePath, env$$165.eCompPath, env$$165.eAccessPath, env$$165.eAccessRights, env$$165.eInternalsVisibleCompPaths, env$$165.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(2, "OmittedElseBranch", (0, _ast.SynExpr$$get_Range)(e2$$16)), env$$165.eFamilyType, env$$165.eCtorInfo, env$$165.eCallerMemberName) : new TcEnv(env$$165.eNameResEnv, env$$165.eUngeneralizableItems, env$$165.ePath, env$$165.eCompPath, env$$165.eAccessPath, env$$165.eAccessRights, env$$165.eInternalsVisibleCompPaths, env$$165.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(1, "IfExpression", (0, _ast.SynExpr$$get_Range)(e2$$16)), env$$165.eFamilyType, env$$165.eCtorInfo, env$$165.eCallerMemberName);

          if (!isRecovery ? e3opt$$1 == null : false) {
            UnifyTypes(cenv$$116, env$$170, m$$227, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$116.g), overallTy$$7);
          }

          patternInput$$205 = TcExprThatCanBeCtorBody(cenv$$116, overallTy$$7, env$$170, patternInput$$204[1], e2$$16);
          let patternInput$$207;

          if (e3opt$$1 != null) {
            const e3 = e3opt$$1;
            const env$$171 = new TcEnv(env$$165.eNameResEnv, env$$165.eUngeneralizableItems, env$$165.ePath, env$$165.eCompPath, env$$165.eAccessPath, env$$165.eAccessRights, env$$165.eInternalsVisibleCompPaths, env$$165.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(3, "ElseBranchResult", (0, _ast.SynExpr$$get_Range)(e3)), env$$165.eFamilyType, env$$165.eCtorInfo, env$$165.eCallerMemberName);
            const patternInput$$206 = TcExprThatCanBeCtorBody(cenv$$116, overallTy$$7, env$$171, patternInput$$205[1], e3);
            patternInput$$207 = [patternInput$$206[0], new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget"), patternInput$$206[1]];
          } else {
            patternInput$$207 = [(0, _TastOps.mkUnit)(cenv$$116.g, mIfToThen), new _ast.SequencePointInfoForTarget(1, "SuppressSequencePointAtTarget"), patternInput$$205[1]];
          }

          return [(0, _TastOps.primMkCond)(spIfToThen, new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget"), patternInput$$207[1], m$$227, overallTy$$7, patternInput$$204[0], patternInput$$205[0], patternInput$$207[0]), patternInput$$207[2]];
        }

      case 37:
        {
          const patternInput$$208 = (0, _List.mapFold)(function (tpenv$$153, c$$27) {
            return TcStaticOptimizationConstraint(cenv$$116, env$$165, tpenv$$153, c$$27);
          }, tpenv$$110, constraints);
          const patternInput$$209 = TcExprOfUnknownType(cenv$$116, env$$165, patternInput$$208[1], e2$$17);
          const patternInput$$210 = TcExpr(cenv$$116, overallTy$$7, env$$165, patternInput$$209[2], e3$$1);
          return [new _tast.Expr(10, "StaticOptimization", patternInput$$208[0], patternInput$$209[0], patternInput$$210[0], m$$228), patternInput$$210[1]];
        }

      case 38:
        {
          if ((0, _ast.LongIdentWithDots$$get_ThereIsAnExtraDotAtTheEnd)(lidwd$$2)) {
            const mExprAndDotLookup = (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)(e1$$28), (0, _ast.rangeOfLid)(longId$$6));
            return TcExprThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$28, (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", longId$$6, mExprAndDotLookup), (0, _Types.L)()));
          } else {
            const mExprAndDotLookup$$1 = (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)(e1$$28), (0, _ast.rangeOfLid)(longId$$6));
            return TcExprThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$28, (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", longId$$6, mExprAndDotLookup$$1), (0, _Types.L)(MakeDelayedSet(e2$$18, mStmt), (0, _Types.L)())));
          }
        }

      case 39:
        {
          return TcExprThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$29, (0, _Types.L)(MakeDelayedSet(e2$$19, mStmt$$1), (0, _Types.L)()));
        }

      case 40:
        {
          if ((0, _ast.LongIdentWithDots$$get_ThereIsAnExtraDotAtTheEnd)(lidwd$$3)) {
            const mExprAndDotLookup$$2 = (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)(e1$$30), (0, _ast.rangeOfLid)(longId$$7));
            return TcExprThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$30, (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", longId$$7, mExprAndDotLookup$$2), (0, _Types.L)()));
          } else {
            const mExprAndDotLookup$$3 = (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)(e1$$30), (0, _ast.rangeOfLid)(longId$$7));
            return TcExprThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, e1$$30, (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", longId$$7, mExprAndDotLookup$$3), (0, _Types.L)(new DelayedItem(1, "DelayedApp", 0, e2$$20, mStmt$$2), (0, _Types.L)(MakeDelayedSet(e3$$2, mStmt$$2), (0, _Types.L)()))));
          }
        }

      case 41:
        {
          if ((0, _ast.LongIdentWithDots$$get_ThereIsAnExtraDotAtTheEnd)(lidwd$$4)) {
            return TcLongIdentThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, lidwd$$4, (0, _Types.L)());
          } else {
            return TcLongIdentThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, lidwd$$4, (0, _Types.L)(MakeDelayedSet(e2$$21, m$$229), (0, _Types.L)()));
          }
        }

      case 42:
        {
          if ((0, _ast.LongIdentWithDots$$get_ThereIsAnExtraDotAtTheEnd)(lidwd$$5)) {
            return TcLongIdentThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, lidwd$$5, (0, _Types.L)());
          } else {
            return TcLongIdentThen(cenv$$116, overallTy$$7, env$$165, tpenv$$110, lidwd$$5, (0, _Types.L)(new DelayedItem(1, "DelayedApp", 0, e1$$31, mStmt$$3), (0, _Types.L)(MakeDelayedSet(e2$$22, mStmt$$3), (0, _Types.L)())));
          }
        }

      case 43:
        {
          const synTypes$$1 = (0, _List.map)(function mapping$$40(tp$$43) {
            return new _ast.SynType(7, "Var", tp$$43, m$$230);
          }, tps$$10);
          const patternInput$$211 = TcPseudoMemberSpec(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), env$$165, synTypes$$1, tpenv$$110, memSpfn$$2, m$$230);
          const returnTy$$7 = patternInput$$211[0].fields[4];
          const logicalCompiledName$$1 = patternInput$$211[0].fields[1];
          const argtys$$16 = patternInput$$211[0].fields[3];

          if ((0, _Set.FSharpSet$$Contains$$2B595)(_ConstraintSolver.BakedInTraitConstraintNames, logicalCompiledName$$1)) {
            (0, _ErrorLogger.warning)(new BakedInMemberConstraintName(logicalCompiledName$$1, m$$230));
          }

          const returnTy$$8 = (0, _TastOps.GetFSharpViewOfReturnType)(cenv$$116.g, returnTy$$7);
          const patternInput$$212 = GetMethodArgs(arg$$10);

          if (!(patternInput$$212[1].tail == null)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNamedArgumentsCannotBeUsedInMemberTraits)(), m$$230));
          }

          const flexes$$3 = (0, _List.map)(function mapping$$41($arg$$29) {
            return !(0, _TastOps.isTyparTy)(cenv$$116.g, $arg$$29);
          }, argtys$$16);
          const patternInput$$213 = TcExprs(cenv$$116, env$$165, m$$230, patternInput$$211[1], flexes$$3, argtys$$16, patternInput$$212[0]);
          (0, _ConstraintSolver.AddCxMethodConstraint)(TcEnv$$get_DisplayEnv(env$$165), cenv$$116.css, m$$230, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), patternInput$$211[0]);
          UnifyTypes(cenv$$116, env$$165, m$$230, overallTy$$7, returnTy$$8);
          return [new _tast.Expr(11, "Op", new _tast.TOp(29, "TraitCall", patternInput$$211[0]), (0, _Types.L)(), patternInput$$213[0], m$$230), patternInput$$213[1]];
        }

      case 44:
        {
          const patternInput$$214 = TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, e1$$32);
          const patternInput$$215 = TcUnionCaseOrExnField(cenv$$116, env$$165, patternInput$$214[1], m$$231, c$$28, n$$6, function (tupledArg$$34) {
            return function (n$$7) {
              return (0, _TastOps.mkUnionCaseFieldGetUnproven)(cenv$$116.g, patternInput$$214[0], tupledArg$$34[0], tupledArg$$34[1], n$$7, m$$231);
            };
          }, function (a$$48) {
            return function (n$$8) {
              return (0, _TastOps.mkExnCaseFieldGet)(patternInput$$214[0], a$$48, n$$8, m$$231);
            };
          });
          UnifyTypes(cenv$$116, env$$165, m$$231, overallTy$$7, patternInput$$215[1]);
          return [patternInput$$215[0](n$$6), patternInput$$214[2]];
        }

      case 45:
        {
          UnifyTypes(cenv$$116, env$$165, m$$232, overallTy$$7, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$116.g));
          const patternInput$$216 = TcExprOfUnknownType(cenv$$116, env$$165, tpenv$$110, e1$$33);
          const patternInput$$217 = TcUnionCaseOrExnField(cenv$$116, env$$165, patternInput$$216[1], m$$232, c$$29, n$$9, function (tupledArg$$35) {
            return function (n$$10) {
              return function (e2$0027$$5) {
                if (!(0, _TastOps.isUnionCaseFieldMutable)(cenv$$116.g, tupledArg$$35[0], n$$10)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsNotMutable)(), m$$232));
                }

                return (0, _TastOps.mkUnionCaseFieldSet)(patternInput$$216[0], tupledArg$$35[0], tupledArg$$35[1], n$$10, e2$0027$$5, m$$232);
              };
            };
          }, function (a$$50) {
            return function (n$$11) {
              return function (e2$0027$$6) {
                if (!(0, _TastOps.isExnFieldMutable)(a$$50, n$$11)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsNotMutable)(), m$$232));
                }

                return (0, _TastOps.mkExnCaseFieldSet)(patternInput$$216[0], a$$50, n$$11, e2$0027$$6, m$$232);
              };
            };
          });
          const patternInput$$218 = TcExpr(cenv$$116, patternInput$$217[1], env$$165, patternInput$$216[2], e2$$23);
          return [patternInput$$217[0](n$$9)(patternInput$$218[0]), patternInput$$218[1]];
        }

      case 46:
        {
          const argtys$$17 = (0, _ConstraintSolver.NewInferenceTypes)(args$$53);
          const patternInput$$219 = TcTypes(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$165, tpenv$$110, tyargs$$6);
          const flexes$$4 = (0, _List.map)(function mapping$$42(_arg20) {
            return false;
          }, argtys$$17);
          const patternInput$$220 = TcExprs(cenv$$116, env$$165, m$$233, patternInput$$219[1], flexes$$4, argtys$$17, args$$53);
          const patternInput$$221 = TcTypes(cenv$$116, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$165, patternInput$$220[1], rtys);
          const returnTy$$10 = patternInput$$221[0].tail != null ? patternInput$$221[0].tail.tail == null ? patternInput$$221[0].head : (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Only zero or one pushed items are permitted in IL assembly code", m$$233)) : (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$116.g);
          UnifyTypes(cenv$$116, env$$165, m$$233, overallTy$$7, returnTy$$10);
          return [(0, _TastOps.mkAsmExpr)((0, _Array.toList)(s$$8), patternInput$$219[0], patternInput$$220[0], patternInput$$221[0], m$$233), patternInput$$221[1]];
        }

      case 47:
        {
          (0, _NameResolution.CallExprHasTypeSink)(cenv$$116.tcSink, m$$234, TcEnv$$get_NameEnv(env$$165), overallTy$$7, TcEnv$$get_DisplayEnv(env$$165), env$$165.eAccessRights);
          return TcQuotationExpr(cenv$$116, overallTy$$7, env$$165, tpenv$$110, oper, raw, ast, isFromQueryExpression, m$$234);
        }

      case 48:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructRequiresListArrayOrSequence)(), m$$235));
        }

      case 49:
        {
          var $target$$374, isTrueReturn$$2, m$$238;

          if (expr$$40.tag === 48) {
            if (m$$236 = expr$$40.fields[2], (isTrueReturn = expr$$40.fields[0][1], isTrueReturn)) {
              $target$$374 = 0;
              isTrueReturn$$2 = expr$$40.fields[0][1];
              m$$238 = expr$$40.fields[2];
            } else {
              $target$$374 = 1;
            }
          } else if (expr$$40.tag === 49) {
            if (m$$237 = expr$$40.fields[2], (isTrueReturn$$1 = expr$$40.fields[0][1], isTrueReturn$$1)) {
              $target$$374 = 0;
              isTrueReturn$$2 = expr$$40.fields[0][1];
              m$$238 = expr$$40.fields[2];
            } else {
              $target$$374 = 1;
            }
          } else {
            $target$$374 = 1;
          }

          switch ($target$$374) {
            case 0:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructRequiresComputationExpressions)(), m$$238));
              }

            case 1:
              {
                var $target$$375, m$$239, m$$240;

                switch (expr$$40.tag) {
                  case 48:
                    $target$$375 = 0;
                    m$$239 = expr$$40.fields[2];
                    break;

                  case 49:
                    $target$$375 = 0;
                    m$$239 = expr$$40.fields[2];
                    break;

                  case 47:
                    $target$$375 = 0;
                    m$$239 = expr$$40.fields[0];
                    break;

                  case 52:
                    $target$$375 = 1;
                    m$$240 = expr$$40.fields[1];
                    break;

                  case 50:
                    $target$$375 = 1;
                    m$$240 = expr$$40.fields[6];
                    break;

                  case 51:
                    $target$$375 = 2;
                    break;

                  default:
                    $target$$375 = 3;
                }

                switch ($target$$375) {
                  case 0:
                    {
                      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructRequiresSequenceOrComputations)(), m$$239));
                    }

                  case 1:
                    {
                      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructRequiresComputationExpression)(), m$$240));
                    }

                  case 2:
                    {
                      const m$$241 = expr$$40.fields[4];
                      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructRequiresComputationExpression)(), m$$241));
                    }

                  case 3:
                    {
                      throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 5679, 10);
                    }
                }
              }
          }
        }
    }
  }
}

function TcIteratedLambdas(cenv$$117, isFirst, env$$172, overallTy$$10, takenNames$$16, tpenv$$165, e$$60) {
  var spats$$4, m$$242, isSubsequent, isMember$$3, bodyExpr$$1;
  var $target$$376, bodyExpr$$2, isMember$$4, isSubsequent$$1, m$$243, spats$$5;

  if (e$$60.tag === 15) {
    if (spats$$4 = e$$60.fields[2], (m$$242 = e$$60.fields[4], (isSubsequent = e$$60.fields[1], (isMember$$3 = e$$60.fields[0], (bodyExpr$$1 = e$$60.fields[3], (isMember$$3 ? true : isFirst) ? true : isSubsequent))))) {
      $target$$376 = 0;
      bodyExpr$$2 = e$$60.fields[3];
      isMember$$4 = e$$60.fields[0];
      isSubsequent$$1 = e$$60.fields[1];
      m$$243 = e$$60.fields[4];
      spats$$5 = e$$60.fields[2];
    } else {
      $target$$376 = 1;
    }
  } else {
    $target$$376 = 1;
  }

  switch ($target$$376) {
    case 0:
      {
        const patternInput$$222 = UnifyFunctionType(null, cenv$$117, TcEnv$$get_DisplayEnv(env$$172), m$$243, overallTy$$10);
        const patternInput$$223 = TcSimplePats(cenv$$117, isMember$$4, new CheckConstraints(0, "CheckCxs"), patternInput$$222[0], env$$172, tpenv$$165, (0, _Map.empty)({
          Compare: _Util.comparePrimitives
        }), takenNames$$16, spats$$5);
        const tpenv$$166 = patternInput$$223[1][0];
        const takenNames$$17 = patternInput$$223[1][2];
        const names$$18 = patternInput$$223[1][1];
        const patternInput$$224 = MakeAndPublishSimpleVals(cenv$$117, env$$172, m$$243, names$$18, true);
        const byrefs = (0, _Map.map)(function mapping$$43(_arg21, v$$30) {
          return [(0, _TastOps.isByrefTy)(cenv$$117.g, (0, _tast.Val$$get_Type)(v$$30)), v$$30];
        }, patternInput$$224[2]);
        const envinner$$5 = isMember$$4 ? patternInput$$224[0] : ExitFamilyRegion(patternInput$$224[0]);
        const patternInput$$225 = TcIteratedLambdas(cenv$$117, false, envinner$$5, patternInput$$222[1], takenNames$$17, tpenv$$166, bodyExpr$$2);
        (0, _Map.iterate)(function action$$18(_arg22, tupledArg$$36) {
          if (!tupledArg$$36[0] ? (0, _TastOps.isByrefTy)(cenv$$117.g, (0, _tast.Val$$get_Type)(tupledArg$$36[1])) : false) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcParameterInferredByref$$Z721C83C5)((0, _tast.Val$$get_DisplayName)(tupledArg$$36[1])), (0, _tast.Val$$get_Range)(tupledArg$$36[1])));
          }
        }, byrefs);
        return [(0, _TastOps.mkMultiLambda)(m$$243, (0, _List.map)(function (nm$$5) {
          return (0, _illib.NameMapModule$$$find)(nm$$5, patternInput$$224[2]);
        }, patternInput$$223[0]), patternInput$$225[0], patternInput$$222[1]), patternInput$$225[1]];
      }

    case 1:
      {
        const e$$61 = e$$60;
        return (0, _ErrorLogger.conditionallySuppressErrorReporting)(!isFirst ? (0, _ast.synExprContainsError)(e$$61) : false, function () {
          return TcExpr(cenv$$117, overallTy$$10, env$$172, tpenv$$165, e$$61);
        });
      }
  }
}

function TcIndexerThen(cenv$$118, env$$173, overallTy$$11, mWholeExpr$$3, mDot$$2, tpenv$$168, wholeExpr, e1$$34, indexArgs, delayed$$5) {
  const ad$$18 = env$$173.eAccessRights;
  const patternInput$$226 = TcExprOfUnknownType(cenv$$118, env$$173, tpenv$$168, e1$$34);
  const propName = indexArgs.tail != null ? indexArgs.head.tag === 1 ? indexArgs.tail.tail == null ? (0, _infos.FoldPrimaryHierarchyOfType)(function (ty$$83, acc$$13) {
    if (acc$$13 == null) {
      const matchValue$$104 = (0, _TastOps.tryDestAppTy)(cenv$$118.g, ty$$83);

      if (matchValue$$104 == null) {
        return (0, _NameResolution.AllPropInfosOfTypeInScope)(cenv$$118.infoReader, TcEnv$$get_NameEnv(env$$173), "Item", ad$$18, new _InfoReader.FindMemberFlag(0, "IgnoreOverrides"), mWholeExpr$$3, ty$$83).tail == null ? null : "Item";
      } else {
        const tcref$$29 = matchValue$$104;
        return (0, _TastOps.TryFindTyconRefStringAttribute)(cenv$$118.g, mWholeExpr$$3, (0, _TcGlobals.TcGlobals$$get_attrib_DefaultMemberAttribute)(cenv$$118.g), tcref$$29);
      }
    } else {
      return acc$$13;
    }
  }, cenv$$118.g, cenv$$118.amap, mWholeExpr$$3, new _infos.AllowMultiIntfInstantiations(0, "Yes"), patternInput$$226[1], null) : "GetSlice" : "GetSlice" : "GetSlice";
  const isNominal = (0, _TastOps.isAppTy)(cenv$$118.g, patternInput$$226[1]);
  const isArray$$4 = (0, _TastOps.isArrayTy)(cenv$$118.g, patternInput$$226[1]);
  const isString = (0, _TastOps.typeEquiv)(cenv$$118.g, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$118.g), patternInput$$226[1]);
  const idxRange = (0, _List.reduce)(_range.unionRanges, (0, _List.map)(function mapping$$44(e$$62) {
    return (0, _ast.SynIndexerArg$$get_Range)(e$$62);
  }, indexArgs));

  const GetIndexArgs = function GetIndexArgs(es$$1) {
    return (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (e$$63) {
        return (0, _ast.SynIndexerArg$$get_Exprs)(e$$63);
      }, es$$1);
    }));
  };

  const MakeIndexParam = function MakeIndexParam(vopt) {
    var $target$$377, h;

    if (indexArgs.tail != null) {
      if (indexArgs.head.tag === 1) {
        if (indexArgs.tail.tail == null) {
          $target$$377 = 1;
          h = indexArgs.head.fields[0];
        } else {
          $target$$377 = 2;
        }
      } else {
        $target$$377 = 2;
      }
    } else {
      $target$$377 = 0;
    }

    switch ($target$$377) {
      case 0:
        {
          throw new Error("unexpected empty index list");
        }

      case 1:
        {
          return new _ast.SynExpr(0, "Paren", h, _range.range0, null, idxRange);
        }

      case 2:
        {
          return new _ast.SynExpr(0, "Paren", new _ast.SynExpr(4, "Tuple", (0, _List.append)(GetIndexArgs(indexArgs), (0, _List.ofArray)((0, _Option.defaultArg)(vopt, [], function ($x$$32) {
            return [$x$$32];
          }))), (0, _Types.L)(), idxRange), _range.range0, null, idxRange);
        }
    }
  };

  let attemptArrayString;

  if (isArray$$4 ? true : isString) {
    const indexOpPath = (0, _Types.L)("Microsoft", (0, _Types.L)("FSharp", (0, _Types.L)("Core", (0, _Types.L)("LanguagePrimitives", (0, _Types.L)("IntrinsicFunctions", (0, _Types.L)())))));
    const sliceOpPath = (0, _Types.L)("Microsoft", (0, _Types.L)("FSharp", (0, _Types.L)("Core", (0, _Types.L)("Operators", (0, _Types.L)("OperatorIntrinsics", (0, _Types.L)())))));
    let info$$1;
    const matchValue$$106 = [isString, isArray$$4, wholeExpr];
    var $target$$378, idxs, idxs$$1, idxs$$2, idx$$2, e3$$3, idxs$$3, e3$$4, idxs$$4, e3$$5, idxs$$5, e3$$6, e3$$7, e3$$8, e3$$9, e3$$10, e3$$11, e3$$12;

    if (matchValue$$106[0]) {
      if (matchValue$$106[1]) {
        $target$$378 = 22;
      } else if (matchValue$$106[2].tag === 34) {
        if (matchValue$$106[2].fields[1].tail != null) {
          if (matchValue$$106[2].fields[1].head.tag === 1) {
            if (matchValue$$106[2].fields[1].tail.tail == null) {
              $target$$378 = 9;
            } else {
              $target$$378 = 22;
            }
          } else if (matchValue$$106[2].fields[1].tail.tail == null) {
            $target$$378 = 8;
          } else {
            $target$$378 = 22;
          }
        } else {
          $target$$378 = 22;
        }
      } else {
        $target$$378 = 22;
      }
    } else if (matchValue$$106[1]) {
      if (matchValue$$106[2].tag === 34) {
        if (matchValue$$106[2].fields[1].tail != null) {
          if (matchValue$$106[2].fields[1].head.tag === 0) {
            if (matchValue$$106[2].fields[1].tail.tail != null) {
              if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                if (matchValue$$106[2].fields[1].tail.tail.tail != null) {
                  if (matchValue$$106[2].fields[1].tail.tail.head.tag === 0) {
                    if (matchValue$$106[2].fields[1].tail.tail.tail.tail != null) {
                      if (matchValue$$106[2].fields[1].tail.tail.tail.head.tag === 0) {
                        if (matchValue$$106[2].fields[1].tail.tail.tail.tail.tail == null) {
                          $target$$378 = 15;
                        } else {
                          $target$$378 = 22;
                        }
                      } else {
                        $target$$378 = 22;
                      }
                    } else {
                      $target$$378 = 14;
                    }
                  } else {
                    $target$$378 = 22;
                  }
                } else {
                  $target$$378 = 13;
                }
              } else if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                $target$$378 = 12;
              } else {
                $target$$378 = 22;
              }
            } else {
              $target$$378 = 10;
            }
          } else if (matchValue$$106[2].fields[1].head.fields[0].tag === 4) {
            if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail != null) {
              if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail != null) {
                if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail.tail != null) {
                  if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail.tail.tail != null) {
                    if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail.tail.tail.tail == null) {
                      if (matchValue$$106[2].fields[1].tail.tail != null) {
                        if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                          if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                            $target$$378 = 11;
                          } else {
                            $target$$378 = 22;
                          }
                        } else {
                          $target$$378 = 22;
                        }
                      } else {
                        $target$$378 = 2;
                        idxs$$2 = matchValue$$106[2].fields[1].head.fields[0].fields[0];
                      }
                    } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                      if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                        if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                          $target$$378 = 11;
                        } else {
                          $target$$378 = 22;
                        }
                      } else {
                        $target$$378 = 22;
                      }
                    } else {
                      $target$$378 = 3;
                      idx$$2 = matchValue$$106[2].fields[1].head.fields[0];
                    }
                  } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                    if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                      if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                        $target$$378 = 11;
                      } else {
                        $target$$378 = 22;
                      }
                    } else {
                      $target$$378 = 22;
                    }
                  } else {
                    $target$$378 = 1;
                    idxs$$1 = matchValue$$106[2].fields[1].head.fields[0].fields[0];
                  }
                } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                  if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                    if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                      $target$$378 = 11;
                    } else {
                      $target$$378 = 22;
                    }
                  } else {
                    $target$$378 = 22;
                  }
                } else {
                  $target$$378 = 0;
                  idxs = matchValue$$106[2].fields[1].head.fields[0].fields[0];
                }
              } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                  if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                    $target$$378 = 11;
                  } else {
                    $target$$378 = 22;
                  }
                } else {
                  $target$$378 = 22;
                }
              } else {
                $target$$378 = 3;
                idx$$2 = matchValue$$106[2].fields[1].head.fields[0];
              }
            } else if (matchValue$$106[2].fields[1].tail.tail != null) {
              if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                  $target$$378 = 11;
                } else {
                  $target$$378 = 22;
                }
              } else {
                $target$$378 = 22;
              }
            } else {
              $target$$378 = 3;
              idx$$2 = matchValue$$106[2].fields[1].head.fields[0];
            }
          } else if (matchValue$$106[2].fields[1].tail.tail != null) {
            if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
              if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                $target$$378 = 11;
              } else {
                $target$$378 = 22;
              }
            } else {
              $target$$378 = 22;
            }
          } else {
            $target$$378 = 3;
            idx$$2 = matchValue$$106[2].fields[1].head.fields[0];
          }
        } else {
          $target$$378 = 22;
        }
      } else if (matchValue$$106[2].tag === 35) {
        if (matchValue$$106[2].fields[1].tail != null) {
          if (matchValue$$106[2].fields[1].head.tag === 0) {
            if (matchValue$$106[2].fields[1].tail.tail != null) {
              if (matchValue$$106[2].fields[1].tail.head.tag === 1) {
                if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                  $target$$378 = 19;
                  e3$$10 = matchValue$$106[2].fields[2];
                } else {
                  $target$$378 = 22;
                }
              } else if (matchValue$$106[2].fields[1].tail.tail.tail != null) {
                if (matchValue$$106[2].fields[1].tail.tail.head.tag === 0) {
                  if (matchValue$$106[2].fields[1].tail.tail.tail.tail != null) {
                    if (matchValue$$106[2].fields[1].tail.tail.tail.head.tag === 0) {
                      if (matchValue$$106[2].fields[1].tail.tail.tail.tail.tail == null) {
                        $target$$378 = 21;
                        e3$$12 = matchValue$$106[2].fields[2];
                      } else {
                        $target$$378 = 22;
                      }
                    } else {
                      $target$$378 = 22;
                    }
                  } else {
                    $target$$378 = 20;
                    e3$$11 = matchValue$$106[2].fields[2];
                  }
                } else {
                  $target$$378 = 22;
                }
              } else {
                $target$$378 = 17;
                e3$$8 = matchValue$$106[2].fields[2];
              }
            } else {
              $target$$378 = 16;
              e3$$7 = matchValue$$106[2].fields[2];
            }
          } else if (matchValue$$106[2].fields[1].head.fields[0].tag === 4) {
            if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail != null) {
              if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail != null) {
                if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail.tail != null) {
                  if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail.tail.tail != null) {
                    if (matchValue$$106[2].fields[1].head.fields[0].fields[0].tail.tail.tail.tail.tail == null) {
                      if (matchValue$$106[2].fields[1].tail.tail != null) {
                        if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                          if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                            $target$$378 = 18;
                            e3$$9 = matchValue$$106[2].fields[2];
                          } else {
                            $target$$378 = 22;
                          }
                        } else {
                          $target$$378 = 22;
                        }
                      } else {
                        $target$$378 = 6;
                        e3$$5 = matchValue$$106[2].fields[2];
                        idxs$$5 = matchValue$$106[2].fields[1].head.fields[0].fields[0];
                      }
                    } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                      if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                        if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                          $target$$378 = 18;
                          e3$$9 = matchValue$$106[2].fields[2];
                        } else {
                          $target$$378 = 22;
                        }
                      } else {
                        $target$$378 = 22;
                      }
                    } else {
                      $target$$378 = 7;
                      e3$$6 = matchValue$$106[2].fields[2];
                    }
                  } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                    if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                      if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                        $target$$378 = 18;
                        e3$$9 = matchValue$$106[2].fields[2];
                      } else {
                        $target$$378 = 22;
                      }
                    } else {
                      $target$$378 = 22;
                    }
                  } else {
                    $target$$378 = 5;
                    e3$$4 = matchValue$$106[2].fields[2];
                    idxs$$4 = matchValue$$106[2].fields[1].head.fields[0].fields[0];
                  }
                } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                  if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                    if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                      $target$$378 = 18;
                      e3$$9 = matchValue$$106[2].fields[2];
                    } else {
                      $target$$378 = 22;
                    }
                  } else {
                    $target$$378 = 22;
                  }
                } else {
                  $target$$378 = 4;
                  e3$$3 = matchValue$$106[2].fields[2];
                  idxs$$3 = matchValue$$106[2].fields[1].head.fields[0].fields[0];
                }
              } else if (matchValue$$106[2].fields[1].tail.tail != null) {
                if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                  if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                    $target$$378 = 18;
                    e3$$9 = matchValue$$106[2].fields[2];
                  } else {
                    $target$$378 = 22;
                  }
                } else {
                  $target$$378 = 22;
                }
              } else {
                $target$$378 = 7;
                e3$$6 = matchValue$$106[2].fields[2];
              }
            } else if (matchValue$$106[2].fields[1].tail.tail != null) {
              if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
                if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                  $target$$378 = 18;
                  e3$$9 = matchValue$$106[2].fields[2];
                } else {
                  $target$$378 = 22;
                }
              } else {
                $target$$378 = 22;
              }
            } else {
              $target$$378 = 7;
              e3$$6 = matchValue$$106[2].fields[2];
            }
          } else if (matchValue$$106[2].fields[1].tail.tail != null) {
            if (matchValue$$106[2].fields[1].tail.head.tag === 0) {
              if (matchValue$$106[2].fields[1].tail.tail.tail == null) {
                $target$$378 = 18;
                e3$$9 = matchValue$$106[2].fields[2];
              } else {
                $target$$378 = 22;
              }
            } else {
              $target$$378 = 22;
            }
          } else {
            $target$$378 = 7;
            e3$$6 = matchValue$$106[2].fields[2];
          }
        } else {
          $target$$378 = 22;
        }
      } else {
        $target$$378 = 22;
      }
    } else {
      $target$$378 = 22;
    }

    switch ($target$$378) {
      case 0:
        {
          info$$1 = [indexOpPath, "GetArray2D", idxs];
          break;
        }

      case 1:
        {
          info$$1 = [indexOpPath, "GetArray3D", idxs$$1];
          break;
        }

      case 2:
        {
          info$$1 = [indexOpPath, "GetArray4D", idxs$$2];
          break;
        }

      case 3:
        {
          info$$1 = [indexOpPath, "GetArray", (0, _Types.L)(idx$$2, (0, _Types.L)())];
          break;
        }

      case 4:
        {
          info$$1 = [indexOpPath, "SetArray2D", (0, _List.append)(idxs$$3, (0, _Types.L)(e3$$3, (0, _Types.L)()))];
          break;
        }

      case 5:
        {
          info$$1 = [indexOpPath, "SetArray3D", (0, _List.append)(idxs$$4, (0, _Types.L)(e3$$4, (0, _Types.L)()))];
          break;
        }

      case 6:
        {
          info$$1 = [indexOpPath, "SetArray4D", (0, _List.append)(idxs$$5, (0, _Types.L)(e3$$5, (0, _Types.L)()))];
          break;
        }

      case 7:
        {
          info$$1 = [indexOpPath, "SetArray", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$6, (0, _Types.L)()))];
          break;
        }

      case 8:
        {
          info$$1 = [sliceOpPath, "GetStringSlice", GetIndexArgs(indexArgs)];
          break;
        }

      case 9:
        {
          info$$1 = [indexOpPath, "GetString", GetIndexArgs(indexArgs)];
          break;
        }

      case 10:
        {
          info$$1 = [sliceOpPath, "GetArraySlice", GetIndexArgs(indexArgs)];
          break;
        }

      case 11:
        {
          info$$1 = [sliceOpPath, "GetArraySlice2DFixed1", GetIndexArgs(indexArgs)];
          break;
        }

      case 12:
        {
          info$$1 = [sliceOpPath, "GetArraySlice2DFixed2", GetIndexArgs(indexArgs)];
          break;
        }

      case 13:
        {
          info$$1 = [sliceOpPath, "GetArraySlice2D", GetIndexArgs(indexArgs)];
          break;
        }

      case 14:
        {
          info$$1 = [sliceOpPath, "GetArraySlice3D", GetIndexArgs(indexArgs)];
          break;
        }

      case 15:
        {
          info$$1 = [sliceOpPath, "GetArraySlice4D", GetIndexArgs(indexArgs)];
          break;
        }

      case 16:
        {
          info$$1 = [sliceOpPath, "SetArraySlice", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$7, (0, _Types.L)()))];
          break;
        }

      case 17:
        {
          info$$1 = [sliceOpPath, "SetArraySlice2D", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$8, (0, _Types.L)()))];
          break;
        }

      case 18:
        {
          info$$1 = [sliceOpPath, "SetArraySlice2DFixed1", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$9, (0, _Types.L)()))];
          break;
        }

      case 19:
        {
          info$$1 = [sliceOpPath, "SetArraySlice2DFixed2", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$10, (0, _Types.L)()))];
          break;
        }

      case 20:
        {
          info$$1 = [sliceOpPath, "SetArraySlice3D", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$11, (0, _Types.L)()))];
          break;
        }

      case 21:
        {
          info$$1 = [sliceOpPath, "SetArraySlice4D", (0, _List.append)(GetIndexArgs(indexArgs), (0, _Types.L)(e3$$12, (0, _Types.L)()))];
          break;
        }

      case 22:
        {
          info$$1 = null;
          break;
        }
    }

    if (info$$1 != null) {
      const path$$2 = info$$1[0];
      const indexArgs$$1 = info$$1[2];
      const functionName = info$$1[1];
      const operPath = (0, _ast.mkSynLidGet)(mDot$$2, path$$2, (0, _PrettyNaming.CompileOpName)(functionName));
      const patternInput$$227 = TcExprOfUnknownType(cenv$$118, env$$173, patternInput$$226[2], operPath);
      const patternInput$$228 = UnifyFunctionType(mWholeExpr$$3, cenv$$118, TcEnv$$get_DisplayEnv(env$$173), mWholeExpr$$3, patternInput$$227[1]);
      UnifyTypes(cenv$$118, env$$173, mWholeExpr$$3, patternInput$$228[0], patternInput$$226[1]);
      const patternInput$$229 = buildApp(cenv$$118, MakeApplicableExprNoFlex(cenv$$118, patternInput$$227[0]), patternInput$$228[1], patternInput$$226[0], mWholeExpr$$3);
      const delayed$$6 = (0, _List.foldBack)(function (idx$$3, acc$$14) {
        return (0, _Types.L)(new DelayedItem(1, "DelayedApp", 0, idx$$3, mWholeExpr$$3), acc$$14);
      }, indexArgs$$1, delayed$$5);
      attemptArrayString = PropagateThenTcDelayed(cenv$$118, overallTy$$11, env$$173, patternInput$$227[2], mWholeExpr$$3, patternInput$$229[0], patternInput$$229[1], 0, delayed$$6);
    } else {
      attemptArrayString = null;
    }
  } else {
    attemptArrayString = null;
  }

  if (attemptArrayString == null) {
    if (isNominal ? true : propName != null) {
      let nm$$7;

      if (propName != null) {
        const nm$$6 = propName;
        nm$$7 = nm$$6;
      } else {
        nm$$7 = "Item";
      }

      let delayed$$7;

      switch (wholeExpr.tag) {
        case 34:
          {
            delayed$$7 = (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", (0, _Types.L)((0, _ast.ident)(nm$$7, mWholeExpr$$3), (0, _Types.L)()), mWholeExpr$$3), (0, _Types.L)(new DelayedItem(1, "DelayedApp", 0, MakeIndexParam(null), mWholeExpr$$3), delayed$$5));
            break;
          }

        case 35:
          {
            const mOfLeftOfSet = wholeExpr.fields[3];
            const e3$$13 = wholeExpr.fields[2];
            var $target$$379;

            if (indexArgs.tail != null) {
              if (indexArgs.head.tag === 1) {
                if (indexArgs.tail.tail == null) {
                  $target$$379 = 0;
                } else {
                  $target$$379 = 1;
                }
              } else {
                $target$$379 = 1;
              }
            } else {
              $target$$379 = 1;
            }

            switch ($target$$379) {
              case 0:
                {
                  delayed$$7 = (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", (0, _Types.L)((0, _ast.ident)(nm$$7, mOfLeftOfSet), (0, _Types.L)()), mOfLeftOfSet), (0, _Types.L)(new DelayedItem(1, "DelayedApp", 0, MakeIndexParam(null), mOfLeftOfSet), (0, _Types.L)(MakeDelayedSet(e3$$13, mWholeExpr$$3), delayed$$5)));
                  break;
                }

              case 1:
                {
                  delayed$$7 = (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", (0, _Types.L)((0, _ast.ident)("SetSlice", mOfLeftOfSet), (0, _Types.L)()), mOfLeftOfSet), (0, _Types.L)(new DelayedItem(1, "DelayedApp", 0, MakeIndexParam(e3$$13), mWholeExpr$$3), delayed$$5));
                  break;
                }
            }

            break;
          }

        default:
          {
            delayed$$7 = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("unreachable", mWholeExpr$$3));
          }
      }

      return PropagateThenTcDelayed(cenv$$118, overallTy$$11, env$$173, patternInput$$226[2], mDot$$2, MakeApplicableExprNoFlex(cenv$$118, patternInput$$226[0]), patternInput$$226[1], 0, delayed$$7);
    } else {
      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectOfIndeterminateTypeUsedRequireTypeConstraint)(), mWholeExpr$$3));
    }
  } else {
    const res$$22 = attemptArrayString;
    return res$$22;
  }
}

function TcNewExpr(cenv$$119, env$$174, tpenv$$171, objTy$$4, mObjTyOpt, superInit$$1, arg$$11, mWholeExprOrObjTy) {
  const ad$$19 = env$$174.eAccessRights;

  if ((0, _TastOps.isTyparTy)(cenv$$119.g, objTy$$4)) {
    if (superInit$$1) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromVariableType)(), mWholeExprOrObjTy));
    }

    (0, _ConstraintSolver.AddCxTypeMustSupportDefaultCtor)(TcEnv$$get_DisplayEnv(env$$174), cenv$$119.css, mWholeExprOrObjTy, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), objTy$$4);
    var $target$$380;

    if (arg$$11.tag === 2) {
      if (arg$$11.fields[0].tag === 0) {
        $target$$380 = 0;
      } else {
        $target$$380 = 1;
      }
    } else {
      $target$$380 = 1;
    }

    switch ($target$$380) {
      case 1:
        {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectConstructorsOnTypeParametersCannotTakeArguments)(), mWholeExprOrObjTy));
          break;
        }
    }

    return [(0, _TastOps.mkCallCreateInstance)(cenv$$119.g, mWholeExprOrObjTy, objTy$$4), tpenv$$171];
  } else {
    if (!(0, _TastOps.isAppTy)(cenv$$119.g, objTy$$4) ? !(0, _TastOps.isAnyTupleTy)(cenv$$119.g, objTy$$4) : false) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNamedTypeRequired$$Z721C83C5)(superInit$$1 ? "inherit" : "new"), mWholeExprOrObjTy));
    }

    const item$$30 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)((0, _NameResolution.ResolveObjectConstructor)(cenv$$119.nameResolver, TcEnv$$get_DisplayEnv(env$$174), mWholeExprOrObjTy, ad$$19, objTy$$4));
    return TcCtorCall(false, cenv$$119, env$$174, tpenv$$171, objTy$$4, objTy$$4, mObjTyOpt, item$$30, superInit$$1, (0, _Types.L)(arg$$11, (0, _Types.L)()), mWholeExprOrObjTy, (0, _Types.L)(), null);
  }
}

function TcCtorCall(isNaked, cenv$$120, env$$175, tpenv$$172, overallTy$$12, objTy$$5, mObjTyOpt$$1, item$$31, superInit$$2, args$$54, mWholeCall, delayed$$8, afterTcOverloadResolutionOpt) {
  const ad$$20 = env$$175.eAccessRights;
  const isSuperInit = superInit$$2 ? new _tast.ValUseFlag(2, "CtorValUsedAsSuperInit") : new _tast.ValUseFlag(1, "NormalValUse");
  let mItem;

  if (mObjTyOpt$$1 == null) {
    mItem = mWholeCall;
  } else {
    const m$$244 = mObjTyOpt$$1;
    mItem = m$$244;
  }

  if ((0, _TastOps.isInterfaceTy)(cenv$$120.g, objTy$$5)) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$(superInit$$2 ? (0, _FSComp.SR$$$tcInheritCannotBeUsedOnInterfaceType)() : (0, _FSComp.SR$$$tcNewCannotBeUsedOnInterfaceType)(), mWholeCall));
  }

  const matchValue$$107 = [item$$31, args$$54];
  var $target$$381, methodName$$1, minfos, arg$$12, ty$$84;

  if (matchValue$$107[0].tag === 11) {
    $target$$381 = 0;
    methodName$$1 = matchValue$$107[0].fields[0];
    minfos = matchValue$$107[0].fields[1];
  } else if (matchValue$$107[0].tag === 13) {
    if (matchValue$$107[1].tail != null) {
      if (matchValue$$107[1].tail.tail == null) {
        $target$$381 = 1;
        arg$$12 = matchValue$$107[1].head;
        ty$$84 = matchValue$$107[0].fields[0];
      } else {
        $target$$381 = 2;
      }
    } else {
      $target$$381 = 2;
    }
  } else {
    $target$$381 = 2;
  }

  switch ($target$$381) {
    case 0:
      {
        const meths$$1 = (0, _List.map)(function (minfo$$9) {
          return [minfo$$9, null];
        }, minfos);

        if (isNaked ? (0, _TypeRelations.TypeFeasiblySubsumesType)(0, cenv$$120.g, cenv$$120.amap, mWholeCall, (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$120.g), new _TypeRelations.CanCoerce(1, "NoCoerce"), objTy$$5) : false) {
          (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIDisposableTypeShouldUseNew)(), mWholeCall));
        }

        if (!(superInit$$2 ? true : AreWithinCtorShape(env$$175))) {
          CheckSuperInit(cenv$$120, objTy$$5, mWholeCall);
        }

        let afterResolution;
        const matchValue$$108 = [mObjTyOpt$$1, afterTcOverloadResolutionOpt];

        if (matchValue$$108[1] == null) {
          if (matchValue$$108[0] == null) {
            afterResolution = new _NameResolution.AfterResolution(0, "DoNothing");
          } else {
            const mObjTy$$1 = matchValue$$108[0];
            afterResolution = ForNewConstructors(cenv$$120.tcSink, env$$175, mObjTy$$1, methodName$$1, minfos);
          }
        } else {
          const action$$19 = matchValue$$108[1];
          afterResolution = action$$19;
        }

        return TcMethodApplicationThen(cenv$$120, env$$175, overallTy$$12, objTy$$5, tpenv$$172, null, (0, _Types.L)(), mWholeCall, mItem, methodName$$1, ad$$20, new _TastOps.Mutates(2, "PossiblyMutates"), false, meths$$1, afterResolution, isSuperInit, args$$54, 1, delayed$$8);
      }

    case 1:
      {
        if (mObjTyOpt$$1 == null) {} else {
          const mObjTy$$2 = mObjTyOpt$$1;
          (0, _NameResolution.CallNameResolutionSink)(cenv$$120.tcSink, mObjTy$$2, TcEnv$$get_NameEnv(env$$175), item$$31, item$$31, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$175), env$$175.eAccessRights);
        }

        return TcNewDelegateThen(cenv$$120, objTy$$5, env$$175, tpenv$$172, mItem, mWholeCall, ty$$84, arg$$12, 1, delayed$$8);
      }

    case 2:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcSyntaxCanOnlyBeUsedToCreateObjectTypes$$Z721C83C5)(superInit$$2 ? "inherit" : "new"), mWholeCall));
      }
  }
}

function TcRecordConstruction(cenv$$121, overallTy$$13, env$$176, tpenv$$173, optOrigExpr$$1, objTy$$6, fldsList, m$$245) {
  const patternInput$$230 = (0, _TastOps.destAppTy)(cenv$$121.g, objTy$$6);
  const tycon$$1 = (0, _tast.EntityRef$$get_Deref)(patternInput$$230[0]);
  UnifyTypes(cenv$$121, env$$176, m$$245, overallTy$$13, objTy$$6);

  if ((0, _illib.NameMultiMapModule$$$existsInRange)(function f$$30(v$$32) {
    return (0, _tast.ValRef$$get_IsIncrClassConstructor)(v$$32);
  }, (0, _tast.Entity$$get_MembersOfFSharpTyconByName)(tycon$$1))) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorRequiresCall$$Z721C83C5)((0, _tast.Entity$$get_DisplayName)(tycon$$1)), m$$245));
  }

  const fspecs = (0, _tast.Entity$$get_TrueInstanceFieldsAsList)(tycon$$1);
  const fldsList$$1 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$109) {
      let fspec$$4;

      try {
        fspec$$4 = (0, _List.find)(function predicate$$27(fspec$$3) {
          return (0, _tast.RecdField$$get_Name)(fspec$$3) === matchValue$$109[0];
        }, fspecs);
      } catch (matchValue$$110) {
        if (false) {
          fspec$$4 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUndefinedField$$Z384F8060)(matchValue$$109[0], (0, _NicePrint.minimalStringOfType)(TcEnv$$get_DisplayEnv(env$$176), objTy$$6)), m$$245));
        } else {
          throw matchValue$$110;
        }
      }

      const fty$$5 = (0, _TastOps.actualTyOfRecdFieldForTycon)(tycon$$1, patternInput$$230[1], fspec$$4);
      const flex$$5 = !(0, _TastOps.isTyparTy)(cenv$$121.g, fty$$5);
      return (0, _Seq.singleton)([matchValue$$109[0], matchValue$$109[1], fty$$5, flex$$5]);
    }, fldsList);
  }));
  let patternInput$$232;
  const env$$177 = new TcEnv(env$$176.eNameResEnv, env$$176.eUngeneralizableItems, env$$176.ePath, env$$176.eCompPath, env$$176.eAccessPath, env$$176.eAccessRights, env$$176.eInternalsVisibleCompPaths, env$$176.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(4, "RecordFields"), env$$176.eFamilyType, env$$176.eCtorInfo, env$$176.eCallerMemberName);
  patternInput$$232 = (0, _List.mapFold)(function mapping$$45(tpenv$$174, tupledArg$$37) {
    const patternInput$$231 = TcExprFlex(cenv$$121, tupledArg$$37[3], false, tupledArg$$37[2], env$$177, tpenv$$174, tupledArg$$37[1]);
    return [[tupledArg$$37[0], patternInput$$231[0]], patternInput$$231[1]];
  }, tpenv$$173, fldsList$$1);
  let patternInput$$234;

  if (optOrigExpr$$1 != null) {
    const oldve = optOrigExpr$$1[2];
    const patternInput$$233 = (0, _TastOps.mkExprAddrOfExpr)(cenv$$121.g, (0, _tast.Entity$$get_IsStructOrEnumTycon)(tycon$$1), false, new _TastOps.Mutates(3, "NeverMutates"), oldve, null, m$$245);

    const fieldNameUnbound = function fieldNameUnbound(nom) {
      return (0, _List.forAll)(function (tupledArg$$38) {
        return tupledArg$$38[0] !== nom;
      }, patternInput$$232[0]);
    };

    const flds$$3 = (0, _List.choose)(function chooser$$2(rfld) {
      if (fieldNameUnbound((0, _tast.RecdField$$get_Name)(rfld)) ? !(0, _tast.RecdField$$get_IsZeroInit)(rfld) : false) {
        return [(0, _tast.RecdField$$get_Name)(rfld), (0, _TastOps.mkRecdFieldGetViaExprAddr)(patternInput$$233[1], (0, _tast.EntityRef$$MakeNestedRecdFieldRef$$Z3DF09F14)(patternInput$$230[0], rfld), patternInput$$230[1], m$$245)];
      } else {
        return null;
      }
    }, fspecs);
    patternInput$$234 = [flds$$3, patternInput$$233[0]];
  } else {
    patternInput$$234 = [(0, _Types.L)(), function (x$$88) {
      return x$$88;
    }];
  }

  const fldsList$$3 = (0, _List.append)(patternInput$$232[0], patternInput$$234[0]);
  const fspecs$$1 = (0, _List.filter)(function predicate$$28(f$$31) {
    return !(0, _tast.RecdField$$get_IsZeroInit)(f$$31);
  }, fspecs);
  (0, _List.iterate)(function action$$20(fspec$$5) {
    if (!(0, _List.exists)(function predicate$$29(tupledArg$$39) {
      return tupledArg$$39[0] === (0, _tast.RecdField$$get_Name)(fspec$$5);
    }, fldsList$$3)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldRequiresAssignment$$Z384F8060)((0, _ast.Ident$$get_idText)(fspec$$5.rfield_id), (0, _TastOps.fullDisplayTextOfTyconRef)(patternInput$$230[0])), m$$245));
    }
  }, fspecs$$1);
  const ns1 = (0, _lib.NameSetModule$$$ofList)((0, _List.map)(function (tuple$$11) {
    return tuple$$11[0];
  }, fldsList$$3));
  const ns2 = (0, _lib.NameSetModule$$$ofList)((0, _List.map)(function (x$$89) {
    return (0, _ast.Ident$$get_idText)(x$$89.rfield_id);
  }, fspecs$$1));

  if (optOrigExpr$$1 == null ? !(0, _zset.ZsetModule$$$subset)(ns2, ns1) : false) {
    (0, _ErrorLogger.error)(new MissingFields((0, _zset.ZsetModule$$$elements)((0, _zset.ZsetModule$$$diff)(ns2, ns1)), m$$245));
  }

  if (!(0, _zset.ZsetModule$$$subset)(ns1, ns2)) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExtraneousFieldsGivenValues)(), m$$245));
  }

  const rfrefs = (0, _List.map)(function ($arg$$33) {
    return (0, _tast.mkRecdFieldRef)(patternInput$$230[0], $arg$$33[0]);
  }, fldsList$$3);
  (0, _List.iterate)(function action$$21(rfref$$2) {
    (0, _AccessibilityLogic.CheckRecdFieldAccessible)(cenv$$121.amap, m$$245, env$$176.eAccessRights, rfref$$2);
    (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckFSharpAttributes)(cenv$$121.g, (0, _tast.RecdFieldRef$$get_PropertyAttribs)(rfref$$2), m$$245));
  }, rfrefs);
  const args$$55 = (0, _List.map)(function (tuple$$13) {
    return tuple$$13[1];
  }, fldsList$$3);
  const expr$$49 = patternInput$$234[1]((0, _TastOps.mkRecordExpr)(cenv$$121.g, GetRecdInfo(env$$176), patternInput$$230[0], patternInput$$230[1], rfrefs, args$$55, m$$245));
  let expr$$50;

  if (optOrigExpr$$1 != null) {
    const oldv = optOrigExpr$$1[1];
    const old = optOrigExpr$$1[0];
    expr$$50 = (0, _TastOps.mkCompGenLet)(m$$245, oldv, old, expr$$49);
  } else {
    expr$$50 = expr$$49;
  }

  return [expr$$50, patternInput$$232[1]];
}

function GetNameAndArityOfObjExprBinding(_cenv$$2, _env$$4, b$$45) {
  const valSynData$$14 = b$$45.fields[7];
  const rhsExpr$$15 = b$$45.fields[9];
  const pat$$14 = b$$45.fields[8];
  const mBinding$$2 = b$$45.fields[10];
  const valSynInfo$$11 = valSynData$$14.fields[1];
  const memberFlagsOpt$$6 = valSynData$$14.fields[0];
  const matchValue$$111 = [pat$$14, memberFlagsOpt$$6];

  var $target$$382, _thisId, memberFlags$$19, memberId$$4;

  if (matchValue$$111[0].tag === 18) {
    if (matchValue$$111[0].fields[3] == null) {
      if (matchValue$$111[1] != null) {
        $target$$382 = 0;
        _thisId = matchValue$$111[0].fields[0];
        memberFlags$$19 = matchValue$$111[1];
        memberId$$4 = matchValue$$111[0].fields[1];
      } else {
        $target$$382 = 1;
      }
    } else {
      $target$$382 = 1;
    }
  } else {
    $target$$382 = 1;
  }

  switch ($target$$382) {
    case 0:
      {
        const logicalMethId = (0, _ast.ident)(ComputeLogicalName(memberId$$4, memberFlags$$19), (0, _ast.Ident$$get_idRange)(memberId$$4));
        return [(0, _ast.Ident$$get_idText)(logicalMethId), valSynInfo$$11];
      }

    case 1:
      {
        const lookPat = function lookPat(pat$$15) {
          lookPat: while (true) {
            var $target$$383, pat$$16, pat$$17, id$$39;

            if (pat$$15.tag === 3) {
              $target$$383 = 0;
              pat$$16 = pat$$15.fields[0];
            } else if (pat$$15.tag === 19) {
              $target$$383 = 1;
              pat$$17 = pat$$15.fields[0];
            } else if (pat$$15.tag === 2) {
              if (pat$$15.fields[0].tag === 1) {
                if (pat$$15.fields[3] == null) {
                  $target$$383 = 2;
                  id$$39 = pat$$15.fields[1];
                } else {
                  $target$$383 = 3;
                }
              } else {
                $target$$383 = 3;
              }
            } else {
              $target$$383 = 3;
            }

            switch ($target$$383) {
              case 0:
                {
                  pat$$15 = pat$$16;
                  continue lookPat;
                }

              case 1:
                {
                  pat$$15 = pat$$17;
                  continue lookPat;
                }

              case 2:
                {
                  const pushedPats = rhsExpr$$15.fields[0];
                  const infosForExplicitArgs = (0, _List.map)(_ast.SynInfo$$$InferSynArgInfoFromSimplePats, pushedPats);
                  const infosForExplicitArgs$$1 = (0, _ast.SynInfo$$$AdjustMemberArgs)(new _ast.MemberKind(2, "Member"), infosForExplicitArgs);
                  const infosForExplicitArgs$$2 = (0, _ast.SynInfo$$$AdjustArgsForUnitElimination)(infosForExplicitArgs$$1);
                  const argInfos$$3 = (0, _List.append)((0, _Types.L)(_ast.SynInfo$$$selfMetadata, (0, _Types.L)()), infosForExplicitArgs$$2);
                  const retInfo$$2 = _ast.SynInfo$$$unnamedRetVal;
                  const valSynData$$15 = new _ast.SynValInfo(0, "SynValInfo", argInfos$$3, retInfo$$2);
                  return [(0, _ast.Ident$$get_idText)(id$$39), valSynData$$15];
                }

              case 3:
                {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectExpressionsCanOnlyOverrideAbstractOrVirtual)(), mBinding$$2));
                }
            }
          }
        };

        return lookPat(pat$$14);
      }
  }
}

function FreshenObjExprAbstractSlot(cenv$$122, env$$178, implty, virtNameAndArityPairs, bind$$4, bindAttribs, bindName, absSlots) {
  const synTyparDecls$$1 = bind$$4.fields[6];
  const mBinding$$3 = bind$$4.fields[10];
  var $target$$384;

  if (absSlots.tail == null) {
    if (!(0, _TastOps.CompileAsEvent)(cenv$$122.g, bindAttribs)) {
      $target$$384 = 0;
    } else {
      $target$$384 = 1;
    }
  } else {
    $target$$384 = 1;
  }

  switch ($target$$384) {
    case 0:
      {
        const absSlotsByName = (0, _List.filter)(function ($arg$$35) {
          return bindName === $arg$$35[0][0];
        }, virtNameAndArityPairs);

        const getSignature = function getSignature(absSlot) {
          return (0, _String.replace)((0, _NicePrint.stringOfMethInfo)(cenv$$122.amap, mBinding$$3, TcEnv$$get_DisplayEnv(env$$178), absSlot), "abstract ", "");
        };

        const getDetails = function getDetails(absSlot$$1) {
          if ((0, _illib.List$$$existsSquared)(function f$$33(arg10$0040$$25) {
            return (0, _TastOps.isAnyTupleTy)(cenv$$122.g, arg10$0040$$25);
          }, (0, _infos.MethInfo$$GetParamTypes$$Z5D984B3C)(absSlot$$1, cenv$$122.amap, mBinding$$3, (0, _Types.L)()))) {
            return (0, _FSComp.SR$$$tupleRequiredInAbstractMethod)();
          } else {
            return "";
          }
        };

        const patternInput$$235 = GetNameAndArityOfObjExprBinding(cenv$$122, env$$178, bind$$4);
        let arity;
        const matchValue$$112 = (0, _ast.SynInfo$$$AritiesOfArgs)(patternInput$$235[1]);
        var $target$$385, x$$91;

        if (matchValue$$112.tail != null) {
          if (matchValue$$112.tail.tail != null) {
            $target$$385 = 0;
            x$$91 = matchValue$$112.tail.head;
          } else {
            $target$$385 = 1;
          }
        } else {
          $target$$385 = 1;
        }

        switch ($target$$385) {
          case 0:
            {
              arity = x$$91;
              break;
            }

          case 1:
            {
              arity = 0;
              break;
            }
        }

        if (absSlotsByName.tail != null) {
          if (absSlotsByName.tail.tail == null) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcArgumentArityMismatch$$8A8C5B)(bindName, (0, _List.sum)((0, _infos.MethInfo$$get_NumArgs)(absSlotsByName.head[1]), {
              GetZero() {
                return 0;
              },

              Add($x$$37, $y$$38) {
                return $x$$37 + $y$$38;
              }

            }), arity, getSignature(absSlotsByName.head[1]), getDetails(absSlotsByName.head[1])), mBinding$$3));
          } else {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcArgumentArityMismatchOneOverload$$8A8C5B)(bindName, (0, _List.sum)((0, _infos.MethInfo$$get_NumArgs)(absSlotsByName.head[1]), {
              GetZero() {
                return 0;
              },

              Add($x$$39, $y$$40) {
                return $x$$39 + $y$$40;
              }

            }), arity, getSignature(absSlotsByName.head[1]), getDetails(absSlotsByName.head[1])), mBinding$$3));
          }
        } else {
          const tcref$$31 = (0, _TastOps.tcrefOfAppTy)(cenv$$122.g, implty);
          const containsNonAbstractMemberWithSameName = (0, _Seq.exists)(function predicate$$31(kv) {
            return (0, _List.exists)(function predicate$$30(valRef$$1) {
              return (0, _tast.ValRef$$get_DisplayName)(valRef$$1) === bindName;
            }, kv[1]);
          }, (0, _tast.EntityRef$$get_MembersOfFSharpTyconByName)(tcref$$31));

          const suggestVirtualMembers = function suggestVirtualMembers() {
            return new Set((0, _List.map)(function mapping$$46($arg$$36) {
              return $arg$$36[0][0];
            }, virtNameAndArityPairs));
          };

          if (containsNonAbstractMemberWithSameName) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.ErrorWithSuggestions((0, _FSComp.SR$$$tcMemberFoundIsNotAbstractOrVirtual$$Z384F8060)((0, _tast.EntityRef$$get_DisplayName)(tcref$$31), bindName), mBinding$$3, bindName, suggestVirtualMembers));
          } else {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.ErrorWithSuggestions((0, _FSComp.SR$$$tcNoAbstractOrVirtualMemberFound$$Z721C83C5)(bindName), mBinding$$3, bindName, suggestVirtualMembers));
          }
        }

        return null;
      }

    case 1:
      {
        var $target$$386, absSlot$$4;

        if (absSlots.tail != null) {
          if (absSlots.tail.tail == null) {
            $target$$386 = 0;
            absSlot$$4 = absSlots.head[1];
          } else {
            $target$$386 = 1;
          }
        } else {
          $target$$386 = 1;
        }

        switch ($target$$386) {
          case 0:
            {
              const patternInput$$236 = FreshenAbstractSlot(cenv$$122.g, cenv$$122.amap, mBinding$$3, synTyparDecls$$1, absSlot$$4);
              const bindingTy = (0, _TastOps.op_MinusMinusGreater)(implty, (0, _TastOps.mkMethodTy)(cenv$$122.g, patternInput$$236[2], patternInput$$236[3]));
              return [patternInput$$236[0], patternInput$$236[1], bindingTy];
            }

          case 1:
            {
              return null;
            }
        }
      }
  }
}

function TcObjectExprBinding(cenv$$123, env$$179, implty$$1, tpenv$$177, absSlotInfo, bind$$5) {
  const vis$$22 = bind$$5.fields[0];
  const valSynData$$16 = bind$$5.fields[7];
  const synTyparDecls$$2 = bind$$5.fields[6];
  const spBind$$6 = bind$$5.fields[11];
  const p$$26 = bind$$5.fields[8];
  const mBinding$$4 = bind$$5.fields[10];
  const isMutable$$13 = bind$$5.fields[3];
  const isInline$$3 = bind$$5.fields[2];
  const doc$$3 = bind$$5.fields[5];
  const bkind$$1 = bind$$5.fields[1];
  const bindingRhs$$4 = bind$$5.fields[9];
  const attrs$$8 = bind$$5.fields[4];
  const memberFlagsOpt$$7 = valSynData$$16.fields[0];
  let patternInput$$237;

  const lookPat$$1 = function lookPat$$1(p$$27) {
    lookPat$$1: while (true) {
      const matchValue$$113 = [p$$27, memberFlagsOpt$$7];
      var $target$$387, pat$$18, id$$40, memberFlags$$21, memberId$$5, thisId$$5;

      if (matchValue$$113[0].tag === 19) {
        $target$$387 = 0;
        pat$$18 = matchValue$$113[0].fields[0];
      } else if (matchValue$$113[0].tag === 2) {
        if (matchValue$$113[0].fields[0].tag === 1) {
          if (matchValue$$113[1] == null) {
            $target$$387 = 1;
            id$$40 = matchValue$$113[0].fields[1];
          } else {
            $target$$387 = 3;
          }
        } else {
          $target$$387 = 3;
        }
      } else if (matchValue$$113[0].tag === 18) {
        if (matchValue$$113[1] != null) {
          $target$$387 = 2;
          memberFlags$$21 = matchValue$$113[1];
          memberId$$5 = matchValue$$113[0].fields[1];
          thisId$$5 = matchValue$$113[0].fields[0];
        } else {
          $target$$387 = 3;
        }
      } else {
        $target$$387 = 3;
      }

      switch ($target$$387) {
        case 0:
          {
            p$$27 = pat$$18;
            continue lookPat$$1;
          }

        case 1:
          {
            const bindingRhs$$5 = PushOnePatternToRhs(cenv$$123, true, (0, _ast.mkSynThisPatVar)((0, _ast.ident)((0, _PrettyNaming.CompilerGeneratedName)("this"), (0, _ast.Ident$$get_idRange)(id$$40))), bindingRhs$$4);
            const logicalMethId$$1 = id$$40;
            const memberFlags$$20 = (0, _ast.OverrideMemberFlags)(new _ast.MemberKind(2, "Member"));
            return [bindingRhs$$5, logicalMethId$$1, memberFlags$$20];
          }

        case 2:
          {
            CheckMemberFlags(null, new NewSlotsOK(0, "NewSlotsOK"), new OverridesOK(0, "OverridesOK"), memberFlags$$21, mBinding$$4);
            const bindingRhs$$6 = PushOnePatternToRhs(cenv$$123, true, (0, _ast.mkSynThisPatVar)(thisId$$5), bindingRhs$$4);
            const logicalMethId$$2 = (0, _ast.ident)(ComputeLogicalName(memberId$$5, memberFlags$$21), (0, _ast.Ident$$get_idRange)(memberId$$5));
            return [bindingRhs$$6, logicalMethId$$2, memberFlags$$21];
          }

        case 3:
          {
            return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("unexpected member binding", mBinding$$4));
          }
      }
    }
  };

  patternInput$$237 = lookPat$$1(p$$26);
  const bind$$6 = new NormalizedBinding(0, "NormalizedBinding", vis$$22, bkind$$1, isInline$$3, isMutable$$13, attrs$$8, doc$$3, synTyparDecls$$2, valSynData$$16, (0, _ast.mkSynPatVar)(vis$$22, patternInput$$237[1]), patternInput$$237[0], mBinding$$4, spBind$$6);
  let bindingTy$$1;

  if (absSlotInfo != null) {
    const memberTyFromAbsSlot = absSlotInfo[2];
    bindingTy$$1 = memberTyFromAbsSlot;
  } else {
    bindingTy$$1 = (0, _TastOps.op_MinusMinusGreater)(implty$$1, (0, _ConstraintSolver.NewInferenceType)());
  }

  let patternInput$$239;
  const patternInput$$238 = TcNonrecBindingTyparDecls(cenv$$123, env$$179, tpenv$$177, bind$$6);
  patternInput$$239 = TcNormalizedBinding(new DeclKind(4, "ObjectExpressionOverrideBinding"), cenv$$123, env$$179, patternInput$$238[1], bindingTy$$1, null, new SafeInitData(1, "NoSafeInitInfo"), (0, _Types.L)(), patternInput$$238[0], bind$$6);
  const rhsExpr$$16 = patternInput$$239[0].fields[6];
  const nameToPrelimValSchemeMap = patternInput$$239[0].fields[5];
  const m$$247 = patternInput$$239[0].fields[9];
  const inlineFlag$$12 = patternInput$$239[0].fields[0];
  const declaredTypars$$10 = patternInput$$239[0].fields[4].fields[1];
  const bindingAttribs$$1 = patternInput$$239[0].fields[1];
  const matchValue$$114 = (0, _illib.NameMapModule$$$range)(nameToPrelimValSchemeMap);
  var $target$$388, id$$41;

  if (matchValue$$114.tail != null) {
    if (matchValue$$114.tail.tail == null) {
      $target$$388 = 0;
      id$$41 = matchValue$$114.head.fields[0];
    } else {
      $target$$388 = 1;
    }
  } else {
    $target$$388 = 1;
  }

  switch ($target$$388) {
    case 0:
      {
        const denv$$21 = TcEnv$$get_DisplayEnv(env$$179);
        let declaredTypars$$11;

        if (absSlotInfo != null) {
          const typarsFromAbsSlotAreRigid$$2 = absSlotInfo[0];
          const typarsFromAbsSlot$$2 = absSlotInfo[1];
          declaredTypars$$11 = typarsFromAbsSlotAreRigid$$2 ? typarsFromAbsSlot$$2 : declaredTypars$$10;
        } else {
          declaredTypars$$11 = declaredTypars$$10;
        }

        GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$123, denv$$21, m$$247, declaredTypars$$11);
        const freeInEnv$$4 = GeneralizationHelpers$$$ComputeUngeneralizableTypars(env$$179);
        const generalizedTypars$$22 = GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars(cenv$$123, denv$$21, m$$247, freeInEnv$$4, false, new GeneralizeConstrainedTyparOptions(0, "CanGeneralizeConstrainedTypars"), inlineFlag$$12, rhsExpr$$16, declaredTypars$$11, (0, _Types.L)(), bindingTy$$1, false);
        const declaredTypars$$12 = ChooseCanonicalDeclaredTyparsAfterInference(cenv$$123.g, TcEnv$$get_DisplayEnv(env$$179), declaredTypars$$11, m$$247);
        const generalizedTypars$$23 = PlaceTyparsInDeclarationOrder(declaredTypars$$12, generalizedTypars$$22);
        return [[id$$41, patternInput$$237[2], (0, _TastOps.op_PlusMinusGreater)(generalizedTypars$$23, bindingTy$$1), bindingAttribs$$1, rhsExpr$$16], patternInput$$239[1]];
      }

    case 1:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcSimpleMethodNameRequired)(), m$$247));
      }
  }
}

function ComputeObjectExprOverrides(cenv$$124, env$$180, tpenv$$180, impls) {
  const slotImplSets = (0, _MethodOverrides.DispatchSlotChecking$$$GetSlotImplSets)(cenv$$124.infoReader, TcEnv$$get_DisplayEnv(env$$180), true, (0, _List.map)(function mapping$$47(tupledArg$$40) {
    return [tupledArg$$40[1], tupledArg$$40[0]];
  }, impls));
  const allImpls = (0, _List.map2)(function mapping$$49(tupledArg$$41, implTySet) {
    const binds$$4 = (0, _List.map)(function mapping$$48(b$$46) {
      return BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(0, "ObjExprBinding"), cenv$$124, env$$180, b$$46);
    }, tupledArg$$41[2]);
    return [tupledArg$$41[0], tupledArg$$41[1], binds$$4, implTySet];
  }, impls, slotImplSets);
  const patternInput$$243 = (0, _List.mapFold)(function mapping$$59(tpenv$$181, tupledArg$$42) {
    const reqdSlots = tupledArg$$42[3].fields[0];
    const dispatchSlotsKeyed = tupledArg$$42[3].fields[1];
    const availPriorOverrides = tupledArg$$42[3].fields[2];
    const patternInput$$240 = (0, _List.unzip)((0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (binding$$1) {
        const valSynData$$17 = binding$$1.fields[7];
        const bindingSynAttribs = binding$$1.fields[4];
        const memberFlagsOpt$$8 = valSynData$$17.fields[0];
        const attrTgt$$2 = DeclKind$$$AllowedAttribTargets(memberFlagsOpt$$8, new DeclKind(4, "ObjectExpressionOverrideBinding")) | 0;
        const bindingAttribs$$2 = TcAttributes(cenv$$124, env$$180, attrTgt$$2, bindingSynAttribs);
        return (0, _Seq.append)((0, _Seq.singleton)([binding$$1, bindingAttribs$$2]), (0, _Seq.delay)(function () {
          return (0, _Seq.map)(function (extraBinding) {
            return [extraBinding, (0, _Types.L)()];
          }, EventDeclarationNormalization$$$GenerateExtraBindings(cenv$$124, bindingAttribs$$2, binding$$1));
        }));
      }, tupledArg$$42[2]);
    })));
    const dispatchSlots = (0, _List.map)(function mapping$$50(_arg26) {
      const dispatchSlot = _arg26.fields[0];
      return dispatchSlot;
    }, reqdSlots);
    const virtNameAndArityPairs$$1 = (0, _List.map)(function mapping$$51(virt) {
      const vkey = [(0, _infos.MethInfo$$get_LogicalName)(virt), (0, _infos.MethInfo$$get_NumArgs)(virt)];
      return [vkey, virt];
    }, dispatchSlots);
    const bindNameAndSynInfoPairs = (0, _List.map)(function mapping$$52(b$$47) {
      return GetNameAndArityOfObjExprBinding(cenv$$124, env$$180, b$$47);
    }, patternInput$$240[0]);
    const bindNames = (0, _List.map)(function mapping$$53(tuple$$18) {
      return tuple$$18[0];
    }, bindNameAndSynInfoPairs);
    const bindKeys = (0, _List.map)(function mapping$$54(tupledArg$$43) {
      const argCounts = (0, _List.tail)((0, _ast.SynInfo$$$AritiesOfArgs)(tupledArg$$43[1]));
      return [tupledArg$$43[0], argCounts];
    }, bindNameAndSynInfoPairs);
    const preAssignedVirtsPerBinding = (0, _List.map)(function mapping$$55(bkey) {
      return (0, _List.filter)(function ($arg$$41) {
        return (0, _Util.equalArrays)(bkey, $arg$$41[0]);
      }, virtNameAndArityPairs$$1);
    }, bindKeys);
    const absSlotInfo$$1 = (0, _List.map)(function mapping$$56(tupledArg$$44) {
      return FreshenObjExprAbstractSlot(cenv$$124, env$$180, tupledArg$$42[1], virtNameAndArityPairs$$1, tupledArg$$44[0], tupledArg$$44[1], tupledArg$$44[2], tupledArg$$44[3]);
    }, (0, _illib.List$$$zip4)(patternInput$$240[0], patternInput$$240[1], bindNames, preAssignedVirtsPerBinding));
    const patternInput$$241 = (0, _List.mapFold)(function mapping$$57(tpenv$$182, tupledArg$$45) {
      return TcObjectExprBinding(cenv$$124, env$$180, tupledArg$$42[1], tpenv$$182, tupledArg$$45[0], tupledArg$$45[1]);
    }, tpenv$$181, (0, _List.zip)(absSlotInfo$$1, patternInput$$240[0]));
    const overrides$$2 = (0, _List.map2)(function mapping$$58(tupledArg$$46, tupledArg$$47) {
      const partialValInfo = TranslateTopValSynInfo((0, _ast.Ident$$get_idRange)(tupledArg$$46[0]), function (attrTgt$$3, synAttribs$$2) {
        return TcAttributes(cenv$$124, env$$180, attrTgt$$3, synAttribs$$2);
      }, tupledArg$$47[1]);
      const patternInput$$242 = (0, _TastOps.tryDestForallTy)(cenv$$124.g, tupledArg$$46[2]);
      const valInfo = TranslatePartialArity(patternInput$$242[0], partialValInfo);
      return (0, _MethodOverrides.DispatchSlotChecking$$$GetObjectExprOverrideInfo)(cenv$$124.g, cenv$$124.amap, tupledArg$$42[1], tupledArg$$46[0], tupledArg$$46[1], tupledArg$$46[2], valInfo, tupledArg$$46[3], tupledArg$$46[4]);
    }, patternInput$$241[0], bindNameAndSynInfoPairs);
    return [[tupledArg$$42[0], tupledArg$$42[1], reqdSlots, dispatchSlotsKeyed, availPriorOverrides, overrides$$2], patternInput$$241[1]];
  }, tpenv$$180, allImpls);
  return [patternInput$$243[0], patternInput$$243[1]];
}

function CheckSuperType(cenv$$125, ty$$88, m$$251) {
  if (((((0, _TastOps.typeEquiv)(cenv$$125.g, ty$$88, (0, _TcGlobals.TcGlobals$$get_system_Value_ty)(cenv$$125.g)) ? true : (0, _TastOps.typeEquiv)(cenv$$125.g, ty$$88, (0, _TcGlobals.TcGlobals$$get_system_Enum_ty)(cenv$$125.g))) ? true : (0, _TastOps.typeEquiv)(cenv$$125.g, ty$$88, (0, _TcGlobals.TcGlobals$$get_system_Array_ty)(cenv$$125.g))) ? true : (0, _TastOps.typeEquiv)(cenv$$125.g, ty$$88, (0, _TcGlobals.TcGlobals$$get_system_MulticastDelegate_ty)(cenv$$125.g))) ? true : (0, _TastOps.typeEquiv)(cenv$$125.g, ty$$88, (0, _TcGlobals.TcGlobals$$get_system_Delegate_ty)(cenv$$125.g))) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPredefinedTypeCannotBeUsedAsSuperType)(), m$$251));
  }

  if ((0, _TastOps.isErasedType)(cenv$$125.g, ty$$88)) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromErasedType)(), m$$251));
  }
}

function TcObjectExpr(cenv$$126, overallTy$$14, env$$181, tpenv$$185, synObjTy$$1, argopt$$1, binds$$7, extraImpls$$2, mNewExpr$$2, mWholeExpr$$4) {
  const mObjTy$$3 = (0, _ast.SynType$$get_Range)(synObjTy$$1);
  const patternInput$$244 = TcType(cenv$$126, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$181, tpenv$$185, synObjTy$$1);
  const matchValue$$115 = (0, _TastOps.tryDestAppTy)(cenv$$126.g, patternInput$$244[0]);

  if (matchValue$$115 != null) {
    const tcref$$32 = matchValue$$115;
    const isRecordTy = (0, _TastOps.isRecdTy)(cenv$$126.g, patternInput$$244[0]);

    if ((!isRecordTy ? !(0, _TastOps.isInterfaceTy)(cenv$$126.g, patternInput$$244[0]) : false) ? (0, _TastOps.isSealedTy)(cenv$$126.g, patternInput$$244[0]) : false) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotCreateExtensionOfSealedType)(), mNewExpr$$2));
    }

    CheckSuperType(cenv$$126, patternInput$$244[0], (0, _ast.SynType$$get_Range)(synObjTy$$1));
    const env$$182 = new TcEnv(env$$181.eNameResEnv, addFreeItemOfTy(patternInput$$244[0], env$$181.eUngeneralizableItems), env$$181.ePath, env$$181.eCompPath, env$$181.eAccessPath, env$$181.eAccessRights, env$$181.eInternalsVisibleCompPaths, env$$181.eModuleOrNamespaceTypeAccumulator, env$$181.eContextInfo, env$$181.eFamilyType, env$$181.eCtorInfo, env$$181.eCallerMemberName);
    const env$$183 = EnterFamilyRegion(tcref$$32, env$$182);
    const ad$$21 = env$$183.eAccessRights;

    if (isRecordTy ? true : ((0, _TastOps.isFSharpObjModelTy)(cenv$$126.g, patternInput$$244[0]) ? !(0, _TastOps.isInterfaceTy)(cenv$$126.g, patternInput$$244[0]) : false) ? argopt$$1 == null : false) {
      if (argopt$$1 != null) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoArgumentsForRecordValue)(), mWholeExpr$$4));
      }

      if (!(extraImpls$$2.tail == null)) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoInterfaceImplementationForConstructionExpression)(), mNewExpr$$2));
      }

      if ((0, _TastOps.isFSharpObjModelTy)(cenv$$126.g, patternInput$$244[0]) ? GetCtorShapeCounter(env$$183) !== 1 : false) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectConstructionCanOnlyBeUsedInClassTypes)(), mNewExpr$$2));
      }

      const fldsList$$4 = (0, _List.map)(function mapping$$60(b$$48) {
        const matchValue$$116 = BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(0, "ObjExprBinding"), cenv$$126, env$$183, b$$48);
        var $target$$389, id$$43, rhsExpr$$17;

        if (matchValue$$116.fields[4].tail == null) {
          if (matchValue$$116.fields[8].tag === 2) {
            if (matchValue$$116.fields[8].fields[0].tag === 1) {
              $target$$389 = 0;
              id$$43 = matchValue$$116.fields[8].fields[1];
              rhsExpr$$17 = matchValue$$116.fields[9].fields[2];
            } else {
              $target$$389 = 1;
            }
          } else {
            $target$$389 = 1;
          }
        } else {
          $target$$389 = 1;
        }

        switch ($target$$389) {
          case 0:
            {
              return [(0, _ast.Ident$$get_idText)(id$$43), rhsExpr$$17];
            }

          case 1:
            {
              return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlySimpleBindingsCanBeUsedInConstructionExpressions)(), (0, _ast.SynBinding$$get_RangeOfBindingSansRhs)(b$$48)));
            }
        }
      }, binds$$7);
      return TcRecordConstruction(cenv$$126, overallTy$$14, env$$183, patternInput$$244[1], null, patternInput$$244[0], fldsList$$4, mWholeExpr$$4);
    } else {
      const item$$32 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)((0, _NameResolution.ResolveObjectConstructor)(cenv$$126.nameResolver, TcEnv$$get_DisplayEnv(env$$183), mObjTy$$3, ad$$21, patternInput$$244[0]));

      if ((0, _TastOps.isFSharpObjModelTy)(cenv$$126.g, patternInput$$244[0]) ? GetCtorShapeCounter(env$$183) === 1 : false) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectsMustBeInitializedWithObjectExpression)(), mNewExpr$$2));
      }

      const patternInput$$246 = (0, _List.mapFold)(function mapping$$61(tpenv$$187, _arg29) {
        const synIntfTy = _arg29.fields[0];
        const overrides$$3 = _arg29.fields[1];
        const m$$252 = _arg29.fields[2];
        const patternInput$$245 = TcType(cenv$$126, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$183, tpenv$$187, synIntfTy);

        if (!(0, _TastOps.isInterfaceTy)(cenv$$126.g, patternInput$$245[0])) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpectedInterfaceType)(), m$$252));
        }

        if ((0, _TastOps.isErasedType)(cenv$$126.g, patternInput$$245[0])) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromErasedType)(), m$$252));
        }

        return [[m$$252, patternInput$$245[0], overrides$$3], patternInput$$245[1]];
      }, patternInput$$244[1], extraImpls$$2);
      let realObjTy;

      if ((0, _TastOps.isObjTy)(cenv$$126.g, patternInput$$244[0]) ? !(patternInput$$246[0].tail == null) : false) {
        const tupledArg$$48 = (0, _List.head)(patternInput$$246[0]);
        realObjTy = (0, _lib.p23)(tupledArg$$48[0], tupledArg$$48[1], tupledArg$$48[2]);
      } else {
        realObjTy = patternInput$$244[0];
      }

      UnifyTypes(cenv$$126, env$$183, mWholeExpr$$4, overallTy$$14, realObjTy);
      let patternInput$$248;
      const matchValue$$117 = [item$$32, argopt$$1];

      if (matchValue$$117[0].tag === 11) {
        if (matchValue$$117[1] == null) {
          patternInput$$248 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorRequiresArguments)(), mNewExpr$$2));
        } else {
          const meths$$2 = (0, _List.map)(function mapping$$62(minfo$$10) {
            return [minfo$$10, null];
          }, matchValue$$117[0].fields[1]);
          const afterResolution$$1 = ForNewConstructors(cenv$$126.tcSink, env$$183, (0, _ast.SynType$$get_Range)(synObjTy$$1), matchValue$$117[0].fields[0], matchValue$$117[0].fields[1]);
          const ad$$22 = env$$183.eAccessRights;
          const patternInput$$247 = TcMethodApplicationThen(cenv$$126, env$$183, patternInput$$244[0], null, patternInput$$246[1], null, (0, _Types.L)(), mWholeExpr$$4, mObjTy$$3, matchValue$$117[0].fields[0], ad$$22, new _TastOps.Mutates(2, "PossiblyMutates"), false, meths$$2, afterResolution$$1, new _tast.ValUseFlag(2, "CtorValUsedAsSuperInit"), (0, _Types.L)(matchValue$$117[1][0], (0, _Types.L)()), 0, (0, _Types.L)());
          let baseIdOpt$$2;

          if (matchValue$$117[1][1] != null) {
            const id$$44 = matchValue$$117[1][1];
            baseIdOpt$$2 = id$$44;
          } else {
            baseIdOpt$$2 = (0, _ast.ident)("base", mObjTy$$3);
          }

          patternInput$$248 = [patternInput$$247[0], baseIdOpt$$2, patternInput$$247[1]];
        }
      } else if (matchValue$$117[0].tag === 12) {
        if (matchValue$$117[1] != null) {
          patternInput$$248 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorForInterfacesDoNotTakeArguments)(), mNewExpr$$2));
        } else {
          UnifyTypes(cenv$$126, env$$183, mWholeExpr$$4, patternInput$$244[0], matchValue$$117[0].fields[0]);
          const expr$$52 = (0, _MethodCalls.BuildObjCtorCall)(cenv$$126.g, mWholeExpr$$4);
          patternInput$$248 = [expr$$52, null, patternInput$$246[1]];
        }
      } else {
        patternInput$$248 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNewRequiresObjectConstructor)(), mNewExpr$$2));
      }

      const baseValOpt = MakeAndPublishBaseVal(cenv$$126, env$$183, patternInput$$248[1], patternInput$$244[0]);
      const env$$185 = (0, _Seq.foldBack)(function (v$$33, env$$184) {
        return AddLocalVal(cenv$$126.tcSink, mNewExpr$$2, v$$33, env$$184);
      }, (0, _Option.defaultArg)(baseValOpt, [], function ($x$$42) {
        return [$x$$42];
      }), env$$183);
      const impls$$1 = (0, _Types.L)([mWholeExpr$$4, patternInput$$244[0], binds$$7], patternInput$$246[0]);
      const patternInput$$249 = ComputeObjectExprOverrides(cenv$$126, env$$185, patternInput$$248[2], impls$$1);
      (0, _List.iterate)(function action$$22(tupledArg$$49) {
        const overrideSpecs = (0, _List.map)(function mapping$$63(tuple$$20) {
          return tuple$$20[0];
        }, tupledArg$$49[5]);
        (0, _MethodOverrides.DispatchSlotChecking$$$CheckOverridesAreAllUsedOnce)(TcEnv$$get_DisplayEnv(env$$185), cenv$$126.g, cenv$$126.amap, true, tupledArg$$49[1], tupledArg$$49[3], tupledArg$$49[4], overrideSpecs);
        (0, _MethodOverrides.DispatchSlotChecking$$$CheckDispatchSlotsAreImplemented)(TcEnv$$get_DisplayEnv(env$$185), cenv$$126.g, cenv$$126.amap, tupledArg$$49[0], TcEnv$$get_NameEnv(env$$185), cenv$$126.tcSink, false, tupledArg$$49[1], tupledArg$$49[2], tupledArg$$49[4], overrideSpecs);
      }, patternInput$$249[0]);
      const allTypeImpls = (0, _List.map)(function mapping$$64(tupledArg$$50) {
        const overrides$0027 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
          return (0, _Seq.collect)(function (overrideMeth) {
            const thisVal = overrideMeth[1][1];
            const ovinfo = overrideMeth[0];
            const mtps = overrideMeth[0].fields[3][0];
            const methodVars = overrideMeth[1][2];
            const isFakeEventProperty = overrideMeth[0].fields[6];
            const id$$45 = overrideMeth[0].fields[2];
            const bindingBody$$1 = overrideMeth[1][4];
            const bindingAttribs$$4 = overrideMeth[1][3];

            if (!isFakeEventProperty) {
              const searchForOverride = (0, _List.tryPick)(function chooser$$3(_arg30) {
                const virt$$1 = _arg30.fields[0];

                if ((0, _MethodOverrides.DispatchSlotChecking$$$IsExactMatch)(cenv$$126.g, cenv$$126.amap, tupledArg$$50[0], virt$$1, ovinfo)) {
                  return virt$$1;
                } else {
                  return null;
                }
              }, (0, _illib.NameMultiMapModule$$$find)((0, _ast.Ident$$get_idText)(id$$45), tupledArg$$50[3]));
              let overridden;

              if (searchForOverride == null) {
                overridden = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAtLeastOneOverrideIsInvalid)(), (0, _ast.SynType$$get_Range)(synObjTy$$1)));
              } else {
                const x$$92 = searchForOverride;
                overridden = x$$92;
              }

              return (0, _Seq.singleton)(new _tast.ObjExprMethod(0, "TObjExprMethod", (0, _infos.MethInfo$$GetSlotSig$$73F6E43C)(overridden, cenv$$126.amap, tupledArg$$50[0]), bindingAttribs$$4, mtps, (0, _Types.L)((0, _Types.L)(thisVal, (0, _Types.L)()), methodVars), bindingBody$$1, (0, _ast.Ident$$get_idRange)(id$$45)));
            } else {
              return (0, _Seq.empty)();
            }
          }, tupledArg$$50[5]);
        }));
        return [tupledArg$$50[1], overrides$0027];
      }, patternInput$$249[0]);
      const patternInput$$250 = (0, _List.head)(allTypeImpls);
      const extraImpls$$4 = (0, _List.tail)(allTypeImpls);
      const expr$$53 = (0, _TastOps.mkObjExpr)(patternInput$$250[0], baseValOpt, patternInput$$248[0], patternInput$$250[1], extraImpls$$4, mWholeExpr$$4);
      const expr$$54 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$126.g, realObjTy, patternInput$$250[0], expr$$53);
      return [expr$$54, patternInput$$249[1]];
    }
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNewMustBeUsedWithNamedType)(), mNewExpr$$2));
  }
}

function TcConstStringExpr(cenv$$127, overallTy$$15, env$$186, m$$256, tpenv$$193, s$$9) {
  if ((0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$186), cenv$$127.css, m$$256, overallTy$$15, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$127.g))) {
    return [(0, _TastOps.mkString)(cenv$$127.g, m$$256, s$$9), tpenv$$193];
  } else {
    const aty = (0, _ConstraintSolver.NewInferenceType)();
    const bty = (0, _ConstraintSolver.NewInferenceType)();
    const cty$$7 = (0, _ConstraintSolver.NewInferenceType)();
    const dty = (0, _ConstraintSolver.NewInferenceType)();
    const ety$$2 = (0, _ConstraintSolver.NewInferenceType)();
    const ty$0027$$7 = (0, _TastOps.mkPrintfFormatTy)(cenv$$127.g, aty, bty, cty$$7, dty, ety$$2);

    if (!(0, _TastOps.isObjTy)(cenv$$127.g, overallTy$$15) ? (0, _ConstraintSolver.AddCxTypeMustSubsumeTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$186), cenv$$127.css, m$$256, overallTy$$15, ty$0027$$7) : false) {
      let formatStringCheckContext;
      const matchValue$$118 = cenv$$127.tcSink.CurrentSink;

      if (matchValue$$118 != null) {
        const sink$$1 = matchValue$$118;
        formatStringCheckContext = sink$$1.FormatStringCheckContext;
      } else {
        formatStringCheckContext = null;
      }

      const normalizedString = (0, _String.replace)((0, _String.replace)(s$$9, "\r\n", "\n"), "\r", "\n");
      let patternInput$$251;

      try {
        patternInput$$251 = (0, _CheckFormatStrings.ParseFormatString)(m$$256, cenv$$127.g, formatStringCheckContext, normalizedString, bty, cty$$7, dty);
      } catch (matchValue$$119) {
        const activePatternResult47748 = (0, _FSharp.Operators$$$FailurePattern)(matchValue$$119);

        if (activePatternResult47748 != null) {
          const s$$10 = activePatternResult47748;
          patternInput$$251 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnableToParseFormatString$$Z721C83C5)(s$$10), m$$256));
        } else {
          throw matchValue$$119;
        }
      }

      const ety$0027 = patternInput$$251[0][1];
      const aty$0027 = patternInput$$251[0][0];
      const matchValue$$120 = cenv$$127.tcSink.CurrentSink;

      if (matchValue$$120 != null) {
        const sink$$2 = matchValue$$120;
        (0, _Seq.iterate)(function (forLoopVar$$2) {
          sink$$2.NotifyFormatSpecifierLocation(forLoopVar$$2[0], forLoopVar$$2[1]);
        }, patternInput$$251[1]);
      }

      UnifyTypes(cenv$$127, env$$186, m$$256, aty, aty$0027);
      UnifyTypes(cenv$$127, env$$186, m$$256, ety$$2, ety$0027);
      return [(0, _TastOps.mkCallNewFormat)(cenv$$127.g, m$$256, aty, bty, cty$$7, dty, ety$$2, (0, _TastOps.mkString)(cenv$$127.g, m$$256, s$$9)), tpenv$$193];
    } else {
      UnifyTypes(cenv$$127, env$$186, m$$256, overallTy$$15, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$127.g));
      return [(0, _TastOps.mkString)(cenv$$127.g, m$$256, s$$9), tpenv$$193];
    }
  }
}

function TcConstExpr(cenv$$128, overallTy$$16, env$$187, m$$257, tpenv$$194, c$$30) {
  var ccu$$3;

  switch (c$$30.tag) {
    case 18:
      {
        const m$$258 = c$$30.fields[1];
        const bytes$$1 = c$$30.fields[0];
        UnifyTypes(cenv$$128, env$$187, m$$258, overallTy$$16, (0, _TastOps.mkByteArrayTy)(cenv$$128.g));
        return [new _tast.Expr(11, "Op", new _tast.TOp(4, "Bytes", bytes$$1), (0, _Types.L)(), (0, _Types.L)(), m$$258), tpenv$$194];
      }

    case 19:
      {
        const arr = c$$30.fields[0];
        UnifyTypes(cenv$$128, env$$187, m$$257, overallTy$$16, (0, _TastOps.mkArrayType)(cenv$$128.g, (0, _TcGlobals.TcGlobals$$get_uint16_ty)(cenv$$128.g)));
        return [new _tast.Expr(11, "Op", new _tast.TOp(5, "UInt16s", arr), (0, _Types.L)(), (0, _Types.L)(), m$$257), tpenv$$194];
      }

    case 16:
      {
        const suffix = c$$30.fields[1];
        const s$$11 = c$$30.fields[0];
        let expr$$56;
        const modName = "NumericLiteral" + suffix;
        const ad$$23 = env$$187.eAccessRights;
        const matchValue$$121 = (0, _NameResolution.ResolveLongIndentAsModuleOrNamespace)(cenv$$128.tcSink, new _NameResolution.ResultCollectionSettings(1, "AtMostOneResult"), cenv$$128.amap, m$$257, true, new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$187.eNameResEnv, ad$$23, (0, _ast.ident)(modName, m$$257), (0, _Types.L)(), false);
        var $target$$390, mref;

        if (matchValue$$121.tag === 1) {
          $target$$390 = 0;
        } else if (matchValue$$121.fields[0].tail != null) {
          $target$$390 = 1;
          mref = matchValue$$121.fields[0].head[1];
        } else {
          $target$$390 = 0;
        }

        switch ($target$$390) {
          case 0:
            {
              expr$$56 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNumericLiteralRequiresModule$$Z721C83C5)(modName), m$$257));
              break;
            }

          case 1:
            {
              let expr$$55;

              try {
                const matchValue$$122 = (0, _Int.parse)(s$$11) | 0;

                switch (matchValue$$122) {
                  case 0:
                    {
                      expr$$55 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)(m$$257, (0, _Types.L)(modName, (0, _Types.L)()), "FromZero"), new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), m$$257), m$$257);
                      break;
                    }

                  case 1:
                    {
                      expr$$55 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)(m$$257, (0, _Types.L)(modName, (0, _Types.L)()), "FromOne"), new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), m$$257), m$$257);
                      break;
                    }

                  default:
                    {
                      const i32 = matchValue$$122 | 0;
                      expr$$55 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)(m$$257, (0, _Types.L)(modName, (0, _Types.L)()), "FromInt32"), new _ast.SynExpr(2, "Const", new _ast.SynConst(6, "Int32", i32), m$$257), m$$257);
                    }
                }
              } catch (matchValue$$123) {
                try {
                  const i64 = (0, _Long.fromString)(s$$11, false);
                  expr$$55 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)(m$$257, (0, _Types.L)(modName, (0, _Types.L)()), "FromInt64"), new _ast.SynExpr(2, "Const", new _ast.SynConst(8, "Int64", i64), m$$257), m$$257);
                } catch (matchValue$$124) {
                  expr$$55 = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)(m$$257, (0, _Types.L)(modName, (0, _Types.L)()), "FromString"), new _ast.SynExpr(2, "Const", new _ast.SynConst(17, "String", s$$11, m$$257), m$$257), m$$257);
                }
              }

              if (suffix !== "I") {
                expr$$56 = expr$$55;
              } else {
                const matchValue$$125 = (0, _tast.ccuOfTyconRef)(mref);
                var $target$$391, ccu$$4;

                if (matchValue$$125 != null) {
                  if (ccu$$3 = matchValue$$125, (0, _tast.ccuEq)(ccu$$3, (0, _TcGlobals.TcGlobals$$get_fslibCcu)(cenv$$128.g))) {
                    $target$$391 = 0;
                    ccu$$4 = matchValue$$125;
                  } else {
                    $target$$391 = 1;
                  }
                } else {
                  $target$$391 = 1;
                }

                switch ($target$$391) {
                  case 0:
                    {
                      expr$$56 = new _ast.SynExpr(3, "Typed", expr$$55, new _ast.SynType(0, "LongIdent", new _ast.LongIdentWithDots(0, "LongIdentWithDots", (0, _ast.pathToSynLid)(m$$257, (0, _Types.L)("System", (0, _Types.L)("Numerics", (0, _Types.L)("BigInteger", (0, _Types.L)())))), (0, _Types.L)())), m$$257);
                      break;
                    }

                  case 1:
                    {
                      expr$$56 = expr$$55;
                      break;
                    }
                }
              }

              break;
            }
        }

        return TcExpr(cenv$$128, overallTy$$16, env$$187, tpenv$$194, expr$$56);
      }

    default:
      {
        const c$0027$$3 = TcConst(cenv$$128, overallTy$$16, m$$257, env$$187, c$$30);
        return [new _tast.Expr(0, "Const", c$0027$$3, m$$257, overallTy$$16), tpenv$$194];
      }
  }
}

function TcAssertExpr(cenv$$129, overallTy$$17, env$$188, m$$259, tpenv$$195, x$$93) {
  const synm = (0, _range.range$$MakeSynthetic)(m$$259);
  const callDiagnosticsExpr = new _ast.SynExpr(20, "App", 0, false, (0, _ast.mkSynLidGet)(synm, (0, _Types.L)("System", (0, _Types.L)("Diagnostics", (0, _Types.L)("Debug", (0, _Types.L)()))), "Assert"), new _ast.SynExpr(0, "Paren", x$$93, _range.range0, null, synm), synm);
  return TcExpr(cenv$$129, overallTy$$17, env$$188, tpenv$$195, callDiagnosticsExpr);
}

function TcRecdExpr(cenv$$130, overallTy$$18, env$$189, tpenv$$196, inherits$$1, optOrigExpr$$2, flds$$4, mWholeExpr$$5) {
  var realSuperTy;
  const requiresCtor = GetCtorShapeCounter(env$$189) === 1;
  const haveCtor = inherits$$1 != null;
  let patternInput$$254;

  if (optOrigExpr$$2 != null) {
    const origExpr = optOrigExpr$$2[0];

    if (inherits$$1 == null) {
      const patternInput$$252 = TcExpr(cenv$$130, overallTy$$18, env$$189, tpenv$$196, origExpr);
      const patternInput$$253 = (0, _TastOps.mkCompGenLocal)(mWholeExpr$$5, "inputRecord", overallTy$$18);
      patternInput$$254 = [[patternInput$$252[0], patternInput$$253[0], patternInput$$253[1]], patternInput$$252[1]];
    } else {
      const mInherits = inherits$$1[2];
      patternInput$$254 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidRecordConstruction)(), mInherits));
    }
  } else {
    patternInput$$254 = [null, tpenv$$196];
  }

  const hasOrigExpr = patternInput$$254[0] != null;
  let fldsList$$6;
  const flds$$5 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$126) {
      const lidwd$$6 = matchValue$$126[0][0];
      const isOk = matchValue$$126[0][1];
      return (0, _Seq.append)(!isOk ? ((() => {
        throw new _ErrorLogger.ReportedError(null);
      })(), (0, _Seq.empty)()) : (0, _Seq.empty)(), (0, _Seq.delay)(function () {
        return (0, _Seq.singleton)([(0, _illib.List$$$frontAndBack)((0, _ast.LongIdentWithDots$$get_Lid)(lidwd$$6)), matchValue$$126[1]]);
      }));
    }, flds$$4);
  }));

  if (flds$$5.tail == null) {
    fldsList$$6 = (0, _Types.L)();
  } else {
    const patternInput$$255 = BuildFieldMap(cenv$$130, env$$189, hasOrigExpr, overallTy$$18, flds$$5, mWholeExpr$$5);
    const patternInput$$256 = infoOfTyconRef(mWholeExpr$$5, patternInput$$255[0]);
    UnifyTypes(cenv$$130, env$$189, mWholeExpr$$5, overallTy$$18, patternInput$$256[3]);
    fldsList$$6 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (matchValue$$127) {
        if (matchValue$$127[1] == null) {
          return (0, _Seq.empty)();
        } else {
          const v$$37 = matchValue$$127[1];
          return (0, _Seq.singleton)([matchValue$$127[0], v$$37]);
        }
      }, patternInput$$255[2]);
    }));
  }

  if (hasOrigExpr ? !(0, _TastOps.isRecdTy)(cenv$$130.g, overallTy$$18) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExpressionFormRequiresRecordTypes)(), mWholeExpr$$5));
  }

  if (requiresCtor ? true : haveCtor) {
    if (!(0, _TastOps.isFSharpObjModelTy)(cenv$$130.g, overallTy$$18)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInheritedTypeIsNotObjectModelType)(), mWholeExpr$$5));
    }

    if (!requiresCtor) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectConstructionExpressionCanOnlyImplementConstructorsInObjectModelTypes)(), mWholeExpr$$5));
    }
  } else {
    if (flds$$4.tail == null) {
      const errorInfo = hasOrigExpr ? (0, _FSComp.SR$$$tcEmptyCopyAndUpdateRecordInvalid)() : (0, _FSComp.SR$$$tcEmptyRecordInvalid)();
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$(errorInfo, mWholeExpr$$5));
    }

    if ((0, _TastOps.isFSharpObjModelTy)(cenv$$130.g, overallTy$$18)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeIsNotARecordTypeNeedConstructor)(), mWholeExpr$$5));
    } else if (!(0, _TastOps.isRecdTy)(cenv$$130.g, overallTy$$18)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeIsNotARecordType)(), mWholeExpr$$5));
    }
  }

  let patternInput$$259;
  const matchValue$$128 = [inherits$$1, (0, _infos.GetSuperTypeOfType)(cenv$$130.g, cenv$$130.amap, mWholeExpr$$5, overallTy$$18)];
  var $target$$392, arg$$14, m$$260, realSuperTy$$1, superTy, realSuperTy$$2;

  if (matchValue$$128[0] == null) {
    if (matchValue$$128[1] != null) {
      if (realSuperTy = matchValue$$128[1], requiresCtor) {
        $target$$392 = 1;
        realSuperTy$$2 = matchValue$$128[1];
      } else {
        $target$$392 = 2;
      }
    } else {
      $target$$392 = 2;
    }
  } else if (matchValue$$128[1] != null) {
    $target$$392 = 0;
    arg$$14 = matchValue$$128[0][1];
    m$$260 = matchValue$$128[0][2];
    realSuperTy$$1 = matchValue$$128[1];
    superTy = matchValue$$128[0][0];
  } else {
    $target$$392 = 2;
  }

  switch ($target$$392) {
    case 0:
      {
        const patternInput$$257 = TcExpr(cenv$$130, realSuperTy$$1, env$$189, patternInput$$254[1], new _ast.SynExpr(8, "New", true, superTy, arg$$14, m$$260));
        patternInput$$259 = [patternInput$$257[0], patternInput$$257[1]];
        break;
      }

    case 1:
      {
        const patternInput$$258 = TcNewExpr(cenv$$130, env$$189, patternInput$$254[1], realSuperTy$$2, null, true, new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), mWholeExpr$$5), mWholeExpr$$5);
        patternInput$$259 = [patternInput$$258[0], patternInput$$258[1]];
        break;
      }

    case 2:
      {
        if (matchValue$$128[0] == null) {
          patternInput$$259 = [null, patternInput$$254[1]];
        } else if (matchValue$$128[1] == null) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("Unexpected failure in getting super type", mWholeExpr$$5));
          patternInput$$259 = [null, patternInput$$254[1]];
        } else {
          throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 6959, 14);
        }

        break;
      }
  }

  const patternInput$$260 = TcRecordConstruction(cenv$$130, overallTy$$18, env$$189, patternInput$$259[1], patternInput$$254[0], overallTy$$18, fldsList$$6, mWholeExpr$$5);
  let expr$$58;

  if ((0, _TastOps.isStructTy)(cenv$$130.g, overallTy$$18)) {
    expr$$58 = patternInput$$260[0];
  } else {
    if (patternInput$$259[0] == null) {
      expr$$58 = patternInput$$260[0];
    } else {
      const e$$66 = patternInput$$259[0];
      expr$$58 = (0, _TastOps.mkCompGenSequential)(mWholeExpr$$5, e$$66, patternInput$$260[0]);
    }
  }

  return [expr$$58, patternInput$$260[1]];
}

function TcForEachExpr(cenv$$131, overallTy$$19, env$$190, tpenv$$203, pat$$19, enumSynExpr$$1, bodySynExpr$$1, mWholeExpr$$6, spForLoop$$1) {
  var vf$$18, tyarg$$1, startExpr$$1, finishExpr$$1, cleanupE, spBind$$7, spStart;
  UnifyTypes(cenv$$131, env$$190, mWholeExpr$$6, overallTy$$19, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$131.g));
  const mPat = (0, _ast.SynPat$$get_Range)(pat$$19);
  const mEnumExpr = (0, _ast.SynExpr$$get_Range)(enumSynExpr$$1);
  let mForLoopStart;

  if (spForLoop$$1.tag === 1) {
    mForLoopStart = mEnumExpr;
  } else {
    const mStart = spForLoop$$1.fields[0];
    mForLoopStart = mStart;
  }

  const patternInput$$261 = TcExprOfUnknownType(cenv$$131, env$$190, tpenv$$203, enumSynExpr$$1);
  let patternInput$$266;
  var $target$$393, finishExpr$$2, startExpr$$2, tyarg$$2, vf$$19;

  if (patternInput$$261[0].tag === 5) {
    if (patternInput$$261[0].fields[0].tag === 1) {
      if (patternInput$$261[0].fields[2].tail != null) {
        if (patternInput$$261[0].fields[2].tail.tail == null) {
          if (patternInput$$261[0].fields[3].tail != null) {
            if (patternInput$$261[0].fields[3].tail.tail != null) {
              if (patternInput$$261[0].fields[3].tail.tail.tail == null) {
                if (vf$$18 = patternInput$$261[0].fields[0].fields[0], (tyarg$$1 = patternInput$$261[0].fields[2].head, (startExpr$$1 = patternInput$$261[0].fields[3].head, (finishExpr$$1 = patternInput$$261[0].fields[3].tail.head, (0, _TastOps.valRefEq)(cenv$$131.g, vf$$18, (0, _TcGlobals.TcGlobals$$get_range_op_vref)(cenv$$131.g)) ? (0, _TastOps.typeEquiv)(cenv$$131.g, tyarg$$1, (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$131.g)) : false)))) {
                  $target$$393 = 0;
                  finishExpr$$2 = patternInput$$261[0].fields[3].tail.head;
                  startExpr$$2 = patternInput$$261[0].fields[3].head;
                  tyarg$$2 = patternInput$$261[0].fields[2].head;
                  vf$$19 = patternInput$$261[0].fields[0].fields[0];
                } else {
                  $target$$393 = 1;
                }
              } else {
                $target$$393 = 1;
              }
            } else {
              $target$$393 = 1;
            }
          } else {
            $target$$393 = 1;
          }
        } else {
          $target$$393 = 1;
        }
      } else {
        $target$$393 = 1;
      }
    } else {
      $target$$393 = 1;
    }
  } else {
    $target$$393 = 1;
  }

  switch ($target$$393) {
    case 0:
      {
        patternInput$$266 = [(0, _TcGlobals.TcGlobals$$get_int32_ty)(cenv$$131.g), function (_arg33) {
          return function (x$$94) {
            return x$$94;
          };
        }, function (x$$95) {
          return x$$95;
        }, new _Option.Choice(0, "Choice1Of3", [startExpr$$2, finishExpr$$2])];
        break;
      }

    case 1:
      {
        if ((0, _TastOps.isArray1DTy)(cenv$$131.g, patternInput$$261[1])) {
          const patternInput$$262 = (0, _TastOps.mkCompGenLocal)(mEnumExpr, "arr", patternInput$$261[1]);
          const patternInput$$263 = (0, _TastOps.mkCompGenLocal)(mPat, "idx", (0, _TcGlobals.TcGlobals$$get_int32_ty)(cenv$$131.g));
          const elemTy$$2 = (0, _TastOps.destArrayTy)(cenv$$131.g, patternInput$$261[1]);

          const bodyExprFixup = function bodyExprFixup(elemVar, bodyExpr$$4) {
            return (0, _TastOps.mkCompGenLet)(mForLoopStart, elemVar, (0, _TastOps.mkLdelem)(cenv$$131.g, mForLoopStart, elemTy$$2, patternInput$$262[1], patternInput$$263[1]), bodyExpr$$4);
          };

          const overallExprFixup = function overallExprFixup(overallExpr$$1) {
            return (0, _TastOps.mkCompGenLet)(mForLoopStart, patternInput$$262[0], patternInput$$261[0], overallExpr$$1);
          };

          patternInput$$266 = [elemTy$$2, (0, _Util.curry)(2, bodyExprFixup), overallExprFixup, new _Option.Choice(1, "Choice2Of3", [patternInput$$263[0], (0, _TastOps.mkZero)(cenv$$131.g, mForLoopStart), (0, _TastOps.mkDecr)(cenv$$131.g, mForLoopStart, (0, _TastOps.mkLdlen)(cenv$$131.g, mForLoopStart, patternInput$$262[1]))])];
        } else {
          const patternInput$$264 = (0, _TastOps.mkCompGenLocal)(mEnumExpr, "inputSequence", patternInput$$261[1]);
          const patternInput$$265 = AnalyzeArbitraryExprAsEnumerable(cenv$$131, env$$190, true, mEnumExpr, patternInput$$261[1], patternInput$$264[1]);
          patternInput$$266 = [patternInput$$265[3], function (_arg34) {
            return function (x$$96) {
              return x$$96;
            };
          }, function (x$$97) {
            return x$$97;
          }, new _Option.Choice(2, "Choice3Of3", [patternInput$$264[0], patternInput$$265[0], patternInput$$265[1], patternInput$$265[4], patternInput$$265[5], patternInput$$265[6], patternInput$$265[8]])];
        }

        break;
      }
  }

  const patternInput$$267 = TcMatchPattern(cenv$$131, patternInput$$266[0], env$$190, patternInput$$261[2], pat$$19, null);
  let patternInput$$269;
  var $target$$394, pat1$$2, v$$38;

  if (patternInput$$267[0].tag === 2) {
    if (patternInput$$267[0].fields[1].fields[1].fields[0].tail == null) {
      $target$$394 = 0;
      pat1$$2 = patternInput$$267[0].fields[0];
      v$$38 = patternInput$$267[0].fields[1].fields[0];
    } else {
      $target$$394 = 1;
    }
  } else {
    $target$$394 = 1;
  }

  switch ($target$$394) {
    case 0:
      {
        patternInput$$269 = [v$$38, pat1$$2];
        break;
      }

    case 1:
      {
        const patternInput$$268 = (0, _TastOps.mkCompGenLocal)((0, _PatternMatchCompilation.Pattern$$get_Range)(patternInput$$267[0]), "forLoopVar", patternInput$$266[0]);
        patternInput$$269 = [patternInput$$268[0], patternInput$$267[0]];
        break;
      }
  }

  const patternInput$$270 = TcStmt(cenv$$131, patternInput$$267[3], patternInput$$267[4], bodySynExpr$$1);
  let bodyExpr$$6;
  const valsDefinedByMatching = (0, _lib.ListSet$$$remove)(_tast.valEq, patternInput$$269[0], patternInput$$267[2]);
  bodyExpr$$6 = CompilePatternForMatch(cenv$$131, env$$190, (0, _ast.SynExpr$$get_Range)(enumSynExpr$$1), (0, _PatternMatchCompilation.Pattern$$get_Range)(patternInput$$269[1]), false, new _PatternMatchCompilation.ActionOnFailure(1, "IgnoreWithWarning"), patternInput$$269[0], (0, _Types.L)(), (0, _Types.L)(new _PatternMatchCompilation.TypedMatchClause(0, "TClause", patternInput$$269[1], null, new _tast.DecisionTreeTarget(0, "TTarget", valsDefinedByMatching, patternInput$$270[0], new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), mForLoopStart), (0, _Types.L)()), patternInput$$266[0], overallTy$$19);
  const bodyExpr$$7 = patternInput$$266[1](patternInput$$269[0])(bodyExpr$$6);
  let overallExpr$$2;

  if (patternInput$$266[3].tag === 1) {
    const startExpr$$4 = patternInput$$266[3].fields[0][1];
    const idxVar$$1 = patternInput$$266[3].fields[0][0];
    const finishExpr$$4 = patternInput$$266[3].fields[0][2];
    overallExpr$$2 = (0, _TastOps.mkFastForLoop)(cenv$$131.g, spForLoop$$1, mWholeExpr$$6, idxVar$$1, startExpr$$4, true, finishExpr$$4, bodyExpr$$7);
  } else if (patternInput$$266[3].tag === 2) {
    const guardExpr$$3 = patternInput$$266[3].fields[0][5];
    const getEnumExpr$$5 = patternInput$$266[3].fields[0][3];
    const enumeratorVar$$3 = patternInput$$266[3].fields[0][1];
    const enumerableVar$$2 = patternInput$$266[3].fields[0][0];
    const currentExpr$$4 = patternInput$$266[3].fields[0][6];
    overallExpr$$2 = (0, _TastOps.mkCompGenLet)(mForLoopStart, enumerableVar$$2, patternInput$$261[0], (cleanupE = BuildDisposableCleanup(cenv$$131, env$$190, mWholeExpr$$6, enumeratorVar$$3), (spBind$$7 = spForLoop$$1.tag === 1 ? new _ast.SequencePointInfoForBinding(3, "NoSequencePointAtStickyBinding") : (spStart = spForLoop$$1.fields[0], new _ast.SequencePointInfoForBinding(0, "SequencePointAtBinding", spStart)), (0, _TastOps.mkLet)(spBind$$7, mForLoopStart, enumeratorVar$$3, getEnumExpr$$5, (0, _TastOps.mkTryFinally)(cenv$$131.g, (0, _TastOps.mkWhile)(cenv$$131.g, new _ast.SequencePointInfoForWhileLoop(1, "NoSequencePointAtWhileLoop"), new _tast.SpecialWhileLoopMarker(1, "WhileLoopForCompiledForEachExprMarker"), guardExpr$$3, (0, _TastOps.mkCompGenLet)(mForLoopStart, patternInput$$269[0], currentExpr$$4, bodyExpr$$7), mForLoopStart), cleanupE, mForLoopStart, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$131.g), new _ast.SequencePointInfoForTry(2, "NoSequencePointAtTry"), new _ast.SequencePointInfoForFinally(1, "NoSequencePointAtFinally"))))));
  } else {
    const startExpr$$3 = patternInput$$266[3].fields[0][0];
    const finishExpr$$3 = patternInput$$266[3].fields[0][1];
    overallExpr$$2 = (0, _TastOps.mkFastForLoop)(cenv$$131.g, spForLoop$$1, mWholeExpr$$6, patternInput$$269[0], startExpr$$3, true, finishExpr$$3, bodyExpr$$7);
  }

  const overallExpr$$3 = patternInput$$266[2](overallExpr$$2);
  return [overallExpr$$3, patternInput$$270[1]];
}

function TcQuotationExpr(cenv$$132, overallTy$$20, env$$191, tpenv$$207, _oper, raw$$1, ast$$1, isFromQueryExpression$$1, m$$261) {
  const astTy = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$132, env$$191, m$$261, overallTy$$20, raw$$1 ? (0, _TastOps.mkRawQuotedExprTy)(cenv$$132.g) : (0, _TastOps.mkQuotedExprTy)(cenv$$132.g, astTy));
  const patternInput$$271 = TcExpr(cenv$$132, astTy, env$$191, tpenv$$207, ast$$1);
  const expr$$60 = new _tast.Expr(12, "Quote", patternInput$$271[0], new _Types.FSharpRef(null), isFromQueryExpression$$1, m$$261, overallTy$$20);
  const expr$$61 = raw$$1 ? (0, _TastOps.mkCoerceExpr)(expr$$60, (0, _TastOps.mkRawQuotedExprTy)(cenv$$132.g), m$$261, (0, _TastOps.tyOfExpr)(cenv$$132.g, expr$$60)) : expr$$60;
  return [expr$$61, patternInput$$271[1]];
}

function TcComputationOrSequenceExpression(cenv$$133, env$$192, overallTy$$21, m$$262, interpValOpt, tpenv$$209, comp$$2) {
  if (interpValOpt == null) {
    return TcSequenceExpression(cenv$$133, env$$192, tpenv$$209, comp$$2, overallTy$$21, m$$262);
  } else {
    const interpExpr = interpValOpt[0];
    const builderTy = interpValOpt[1];
    return TcComputationExpression(cenv$$133, env$$192, overallTy$$21, m$$262, interpExpr, builderTy, tpenv$$209, comp$$2);
  }
}

function IgnoreAttribute(_arg3$$7) {
  return null;
}

function TcComputationExpression(cenv$$134, env$$193, overallTy$$22, mWhole, interpExpr$$1, builderTy$$1, tpenv$$210, comp$$3) {
  const ad$$24 = env$$193.eAccessRights;

  const mkSynDelay2 = function mkSynDelay2(e$$67) {
    var copyOfStruct$$1;
    return (0, _ast.mkSynDelay)((copyOfStruct$$1 = (0, _ast.SynExpr$$get_Range)(e$$67), (0, _range.range$$MakeSynthetic)(copyOfStruct$$1)), e$$67);
  };

  const builderValName = (0, _PrettyNaming.CompilerGeneratedName)("builder");
  const mBuilderVal = (0, _TastOps.Expr$002Eget_Range)(interpExpr$$1);
  let isQuery;

  if (interpExpr$$1.tag === 1) {
    const vf$$20 = interpExpr$$1.fields[0];
    const m$$263 = interpExpr$$1.fields[2];
    const item$$33 = new _NameResolution.Item(16, "CustomBuilder", (0, _tast.ValRef$$get_DisplayName)(vf$$20), vf$$20);
    (0, _NameResolution.CallNameResolutionSink)(cenv$$134.tcSink, m$$263, TcEnv$$get_NameEnv(env$$193), item$$33, item$$33, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$193), env$$193.eAccessRights);
    isQuery = (0, _TastOps.valRefEq)(cenv$$134.g, vf$$20, (0, _TcGlobals.TcGlobals$$get_query_value_vref)(cenv$$134.g));
  } else {
    isQuery = false;
  }

  const mkSynCall = function mkSynCall(nm$$8, m$$264, args$$56) {
    const m$$265 = (0, _range.range$$MakeSynthetic)(m$$264);
    const args$$58 = args$$56.tail != null ? args$$56.tail.tail == null ? new _ast.SynExpr(0, "Paren", new _ast.SynExpr(0, "Paren", args$$56.head, _range.range0, null, m$$265), _range.range0, null, m$$265) : new _ast.SynExpr(0, "Paren", new _ast.SynExpr(4, "Tuple", args$$56, (0, _Types.L)(), m$$265), _range.range0, null, m$$265) : new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), m$$265);
    const builderVal = (0, _ast.mkSynIdGet)(m$$265, builderValName);
    return (0, _ast.mkSynApp1)(new _ast.SynExpr(31, "DotGet", builderVal, _range.range0, new _ast.LongIdentWithDots(0, "LongIdentWithDots", (0, _Types.L)((0, _ast.mkSynId)(m$$265, nm$$8), (0, _Types.L)()), (0, _Types.L)()), m$$265), args$$58, m$$265);
  };

  const sourceMethInfo = TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$193, mBuilderVal, ad$$24, "Source", builderTy$$1);

  const mkSourceExpr = function mkSourceExpr(callExpr) {
    if (sourceMethInfo.tail == null) {
      return callExpr;
    } else {
      return mkSynCall("Source", (0, _ast.SynExpr$$get_Range)(callExpr), (0, _Types.L)(callExpr, (0, _Types.L)()));
    }
  };

  const isAutoQuote = TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$193, mBuilderVal, ad$$24, "Quote", builderTy$$1).tail == null ? false : true;
  const customOperationMethods = (0, _List.choose)(function chooser$$4(methInfo) {
    if (!(0, _AccessibilityLogic.IsMethInfoAccessible)(cenv$$134.amap, mBuilderVal, ad$$24, methInfo)) {
      return null;
    } else {
      const nameSearch = (0, _AttributeChecking.TryBindMethInfoAttribute)(cenv$$134.g, mBuilderVal, (0, _TcGlobals.TcGlobals$$get_attrib_CustomOperationAttribute)(cenv$$134.g), methInfo, IgnoreAttribute, function (_arg18$$1) {
        var activePatternResult47820, msg$$1;
        return _arg18$$1.fields[2].tail != null ? (activePatternResult47820 = (0, _TastOps.$007CAttribStringArg$007C_$007C)(_arg18$$1.fields[2].head), activePatternResult47820 != null ? _arg18$$1.fields[2].tail.tail == null ? (msg$$1 = activePatternResult47820, msg$$1) : null : null) : null;
      }, IgnoreAttribute);

      if (nameSearch != null) {
        const nm$$9 = nameSearch;
        const joinConditionWord = (0, _AttributeChecking.TryBindMethInfoAttribute)(cenv$$134.g, mBuilderVal, (0, _TcGlobals.TcGlobals$$get_attrib_CustomOperationAttribute)(cenv$$134.g), methInfo, IgnoreAttribute, function (_arg19$$1) {
          var activePatternResult47823, activePatternResult47824, s$$12;
          return activePatternResult47823 = (0, _TastOps.$007CExtractAttribNamedArg$007C_$007C)("JoinConditionWord", _arg19$$1.fields[3]), activePatternResult47823 != null ? (activePatternResult47824 = (0, _TastOps.$007CAttribStringArg$007C_$007C)(activePatternResult47823), activePatternResult47824 != null ? (s$$12 = activePatternResult47824, s$$12) : null) : null;
        }, IgnoreAttribute);

        const flagSearch = function flagSearch(propName$$1) {
          return (0, _AttributeChecking.TryBindMethInfoAttribute)(cenv$$134.g, mBuilderVal, (0, _TcGlobals.TcGlobals$$get_attrib_CustomOperationAttribute)(cenv$$134.g), methInfo, IgnoreAttribute, function (_arg20$$1) {
            var activePatternResult47827, activePatternResult47828, b$$49;
            return activePatternResult47827 = (0, _TastOps.$007CExtractAttribNamedArg$007C_$007C)(propName$$1, _arg20$$1.fields[3]), activePatternResult47827 != null ? (activePatternResult47828 = (0, _TastOps.$007CAttribBoolArg$007C_$007C)(activePatternResult47827), activePatternResult47828 != null ? (b$$49 = activePatternResult47828, b$$49) : null) : null;
          }, IgnoreAttribute);
        };

        const maintainsVarSpaceUsingBind = (0, _Option.defaultArg)(flagSearch("MaintainsVariableSpaceUsingBind"), false);
        const maintainsVarSpace = (0, _Option.defaultArg)(flagSearch("MaintainsVariableSpace"), false);
        const allowInto = (0, _Option.defaultArg)(flagSearch("AllowIntoPattern"), false);
        const isLikeZip = (0, _Option.defaultArg)(flagSearch("IsLikeZip"), false);
        const isLikeJoin = (0, _Option.defaultArg)(flagSearch("IsLikeJoin"), false);
        const isLikeGroupJoin = (0, _Option.defaultArg)(flagSearch("IsLikeGroupJoin"), false);
        return [nm$$9, maintainsVarSpaceUsingBind, maintainsVarSpace, allowInto, isLikeZip, isLikeJoin, isLikeGroupJoin, joinConditionWord, methInfo];
      } else {
        return null;
      }
    }
  }, (0, _NameResolution.AllMethInfosOfTypeInScope)(cenv$$134.infoReader, TcEnv$$get_NameEnv(env$$193), null, ad$$24, new _InfoReader.FindMemberFlag(0, "IgnoreOverrides"), mBuilderVal, builderTy$$1));
  const customOperationMethodsIndexedByKeyword = new Map((0, _Seq.map)(function mapping$$65(tupledArg$$52) {
    return [tupledArg$$52[0], (0, _List.ofSeq)(tupledArg$$52[1])];
  }, (0, _Map.groupBy)(function projection(tupledArg$$51) {
    return tupledArg$$51[0];
  }, customOperationMethods, {
    Compare: _Util.comparePrimitives
  })));
  const customOperationMethodsIndexedByMethodName = new Map((0, _Seq.map)(function mapping$$66(tupledArg$$54) {
    return [tupledArg$$54[0], (0, _List.ofSeq)(tupledArg$$54[1])];
  }, (0, _Map.groupBy)(function projection$$1(tupledArg$$53) {
    return (0, _infos.MethInfo$$get_LogicalName)(tupledArg$$53[8]);
  }, customOperationMethods, {
    Compare: _Util.comparePrimitives
  })));

  const tryGetDataForCustomOperation = function tryGetDataForCustomOperation(nm$$13) {
    const matchValue$$130 = (0, _Util.tryGetValue)(customOperationMethodsIndexedByKeyword, (0, _ast.Ident$$get_idText)(nm$$13), null);
    var $target$$395, opData, opData$$1;

    if (matchValue$$130[0]) {
      if (matchValue$$130[1].tail != null) {
        if (matchValue$$130[1].tail.tail == null) {
          $target$$395 = 0;
          opData = matchValue$$130[1].head;
        } else {
          $target$$395 = 1;
          opData$$1 = matchValue$$130[1].head;
        }
      } else {
        $target$$395 = 2;
      }
    } else {
      $target$$395 = 2;
    }

    switch ($target$$395) {
      case 0:
        {
          const opName$$2 = opData[0];
          const methInfo$$2 = opData[8];
          const maintainsVarSpaceUsingBind$$1 = opData[1];
          const maintainsVarSpace$$1 = opData[2];
          const isLikeZip$$1 = opData[4];
          const isLikeJoin$$1 = opData[5];
          const isLikeGroupJoin$$1 = opData[6];
          const _joinConditionWord = opData[7];
          const _allowInto = opData[3];

          if ((((maintainsVarSpaceUsingBind$$1 ? maintainsVarSpace$$1 : false) ? true : isLikeZip$$1 ? isLikeJoin$$1 : false) ? true : isLikeZip$$1 ? isLikeGroupJoin$$1 : false) ? true : isLikeJoin$$1 ? isLikeGroupJoin$$1 : false) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationInvalid$$Z721C83C5)(opName$$2), (0, _ast.Ident$$get_idRange)(nm$$13)));
          }

          const matchValue$$131 = (0, _Util.tryGetValue)(customOperationMethodsIndexedByMethodName, (0, _infos.MethInfo$$get_LogicalName)(methInfo$$2), null);
          var $target$$396;

          if (matchValue$$131[0]) {
            if (matchValue$$131[1].tail != null) {
              if (matchValue$$131[1].tail.tail == null) {
                $target$$396 = 0;
              } else {
                $target$$396 = 1;
              }
            } else {
              $target$$396 = 1;
            }
          } else {
            $target$$396 = 1;
          }

          switch ($target$$396) {
            case 1:
              {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationMayNotBeOverloaded$$Z721C83C5)((0, _ast.Ident$$get_idText)(nm$$13)), (0, _ast.Ident$$get_idRange)(nm$$13)));
                break;
              }
          }

          return opData;
        }

      case 1:
        {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationMayNotBeOverloaded$$Z721C83C5)((0, _ast.Ident$$get_idText)(nm$$13)), (0, _ast.Ident$$get_idRange)(nm$$13)));
          return opData$$1;
        }

      case 2:
        {
          return null;
        }
    }
  };

  const hasCustomOperations = function hasCustomOperations() {
    return !(customOperationMethods.tail == null);
  };

  const isCustomOperation = function isCustomOperation(nm$$14) {
    return tryGetDataForCustomOperation(nm$$14) != null;
  };

  const customOperationMaintainsVarSpace = function customOperationMaintainsVarSpace(nm$$15) {
    const matchValue$$132 = tryGetDataForCustomOperation(nm$$15);

    if (matchValue$$132 != null) {
      const maintainsVarSpace$$2 = matchValue$$132[2];
      const _nm = matchValue$$132[0];
      const _methInfo = matchValue$$132[8];
      const _maintainsVarSpaceUsingBind = matchValue$$132[1];
      const _joinConditionWord$$1 = matchValue$$132[7];
      const _isLikeZip = matchValue$$132[4];
      const _isLikeJoin = matchValue$$132[5];
      const _isLikeGroupJoin = matchValue$$132[6];
      const _allowInto$$1 = matchValue$$132[3];
      return maintainsVarSpace$$2;
    } else {
      return false;
    }
  };

  const customOperationMaintainsVarSpaceUsingBind = function customOperationMaintainsVarSpaceUsingBind(nm$$16) {
    const matchValue$$133 = tryGetDataForCustomOperation(nm$$16);

    if (matchValue$$133 != null) {
      const maintainsVarSpaceUsingBind$$2 = matchValue$$133[1];
      const _nm$$1 = matchValue$$133[0];
      const _methInfo$$1 = matchValue$$133[8];
      const _maintainsVarSpace = matchValue$$133[2];
      const _joinConditionWord$$2 = matchValue$$133[7];
      const _isLikeZip$$1 = matchValue$$133[4];
      const _isLikeJoin$$1 = matchValue$$133[5];
      const _isLikeGroupJoin$$1 = matchValue$$133[6];
      const _allowInto$$2 = matchValue$$133[3];
      return maintainsVarSpaceUsingBind$$2;
    } else {
      return false;
    }
  };

  const customOperationIsLikeZip = function customOperationIsLikeZip(nm$$17) {
    const matchValue$$134 = tryGetDataForCustomOperation(nm$$17);

    if (matchValue$$134 != null) {
      const isLikeZip$$2 = matchValue$$134[4];
      const _nm$$2 = matchValue$$134[0];
      const _methInfo$$2 = matchValue$$134[8];
      const _maintainsVarSpaceUsingBind$$1 = matchValue$$134[1];
      const _maintainsVarSpace$$1 = matchValue$$134[2];
      const _joinConditionWord$$3 = matchValue$$134[7];
      const _isLikeJoin$$2 = matchValue$$134[5];
      const _isLikeGroupJoin$$2 = matchValue$$134[6];
      const _allowInto$$3 = matchValue$$134[3];
      return isLikeZip$$2;
    } else {
      return false;
    }
  };

  const customOperationIsLikeJoin = function customOperationIsLikeJoin(nm$$18) {
    const matchValue$$135 = tryGetDataForCustomOperation(nm$$18);

    if (matchValue$$135 != null) {
      const isLikeJoin$$2 = matchValue$$135[5];
      const _nm$$3 = matchValue$$135[0];
      const _methInfo$$3 = matchValue$$135[8];
      const _maintainsVarSpaceUsingBind$$2 = matchValue$$135[1];
      const _maintainsVarSpace$$2 = matchValue$$135[2];
      const _joinConditionWord$$4 = matchValue$$135[7];
      const _isLikeZip$$2 = matchValue$$135[4];
      const _isLikeGroupJoin$$3 = matchValue$$135[6];
      const _allowInto$$4 = matchValue$$135[3];
      return isLikeJoin$$2;
    } else {
      return false;
    }
  };

  const customOperationIsLikeGroupJoin = function customOperationIsLikeGroupJoin(nm$$19) {
    const matchValue$$136 = tryGetDataForCustomOperation(nm$$19);

    if (matchValue$$136 != null) {
      const isLikeGroupJoin$$2 = matchValue$$136[6];
      const _nm$$4 = matchValue$$136[0];
      const _methInfo$$4 = matchValue$$136[8];
      const _maintainsVarSpaceUsingBind$$3 = matchValue$$136[1];
      const _maintainsVarSpace$$3 = matchValue$$136[2];
      const _joinConditionWord$$5 = matchValue$$136[7];
      const _isLikeZip$$3 = matchValue$$136[4];
      const _isLikeJoin$$3 = matchValue$$136[5];
      const _allowInto$$5 = matchValue$$136[3];
      return isLikeGroupJoin$$2;
    } else {
      return false;
    }
  };

  const customOperationJoinConditionWord = function customOperationJoinConditionWord(nm$$20) {
    const matchValue$$137 = tryGetDataForCustomOperation(nm$$20);

    var $target$$397, _allowInto$$6, _isLikeGroupJoin$$4, _isLikeJoin$$4, _isLikeZip$$4, _maintainsVarSpace$$4, _maintainsVarSpaceUsingBind$$4, _methInfo$$5, _nm$$5, joinConditionWord$$1;

    if (matchValue$$137 != null) {
      if (matchValue$$137[7] != null) {
        $target$$397 = 0;
        _allowInto$$6 = matchValue$$137[3];
        _isLikeGroupJoin$$4 = matchValue$$137[6];
        _isLikeJoin$$4 = matchValue$$137[5];
        _isLikeZip$$4 = matchValue$$137[4];
        _maintainsVarSpace$$4 = matchValue$$137[2];
        _maintainsVarSpaceUsingBind$$4 = matchValue$$137[1];
        _methInfo$$5 = matchValue$$137[8];
        _nm$$5 = matchValue$$137[0];
        joinConditionWord$$1 = matchValue$$137[7];
      } else {
        $target$$397 = 1;
      }
    } else {
      $target$$397 = 1;
    }

    switch ($target$$397) {
      case 0:
        {
          return joinConditionWord$$1;
        }

      case 1:
        {
          return "on";
        }
    }
  };

  const customOperationAllowsInto = function customOperationAllowsInto(nm$$21) {
    const matchValue$$138 = tryGetDataForCustomOperation(nm$$21);

    if (matchValue$$138 != null) {
      const allowInto$$1 = matchValue$$138[3];
      const _nm$$6 = matchValue$$138[0];
      const _methInfo$$6 = matchValue$$138[8];
      const _maintainsVarSpaceUsingBind$$5 = matchValue$$138[1];
      const _maintainsVarSpace$$5 = matchValue$$138[2];
      const _joinConditionWord$$6 = matchValue$$138[7];
      const _isLikeZip$$5 = matchValue$$138[4];
      const _isLikeJoin$$5 = matchValue$$138[5];
      const _isLikeGroupJoin$$5 = matchValue$$138[6];
      return allowInto$$1;
    } else {
      return false;
    }
  };

  const customOpUsageText = function customOpUsageText(nm$$22) {
    const matchValue$$139 = tryGetDataForCustomOperation(nm$$22);

    if (matchValue$$139 != null) {
      const isLikeZip$$3 = matchValue$$139[4];
      const isLikeJoin$$3 = matchValue$$139[5];
      const isLikeGroupJoin$$3 = matchValue$$139[6];
      const _nm$$7 = matchValue$$139[0];
      const _methInfo$$7 = matchValue$$139[8];
      const _maintainsVarSpaceUsingBind$$6 = matchValue$$139[1];
      const _maintainsVarSpace$$6 = matchValue$$139[2];
      const _joinConditionWord$$7 = matchValue$$139[7];
      const _allowInto$$7 = matchValue$$139[3];

      if (isLikeGroupJoin$$3) {
        return (0, _FSComp.SR$$$customOperationTextLikeGroupJoin$$30230F9B)((0, _ast.Ident$$get_idText)(nm$$22), customOperationJoinConditionWord(nm$$22), customOperationJoinConditionWord(nm$$22));
      } else if (isLikeJoin$$3) {
        return (0, _FSComp.SR$$$customOperationTextLikeJoin$$30230F9B)((0, _ast.Ident$$get_idText)(nm$$22), customOperationJoinConditionWord(nm$$22), customOperationJoinConditionWord(nm$$22));
      } else if (isLikeZip$$3) {
        return (0, _FSComp.SR$$$customOperationTextLikeZip$$Z721C83C5)((0, _ast.Ident$$get_idText)(nm$$22));
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  const env$$194 = customOperationMethods.tail == null ? env$$193 : new TcEnv((0, _Seq.fold)(function folder$$4(nenv$$7, tupledArg$$55) {
    return (0, _NameResolution.AddFakeNameToNameEnv)(tupledArg$$55[0], nenv$$7, new _NameResolution.Item(15, "CustomOperation", tupledArg$$55[0], function () {
      return customOpUsageText((0, _ast.ident)(tupledArg$$55[0], mBuilderVal));
    }, tupledArg$$55[8]));
  }, env$$193.eNameResEnv, customOperationMethods), env$$193.eUngeneralizableItems, env$$193.ePath, env$$193.eCompPath, env$$193.eAccessPath, env$$193.eAccessRights, env$$193.eInternalsVisibleCompPaths, env$$193.eModuleOrNamespaceTypeAccumulator, env$$193.eContextInfo, env$$193.eFamilyType, env$$193.eCtorInfo, env$$193.eCallerMemberName);
  (0, _NameResolution.CallEnvSink)(cenv$$134.tcSink, (0, _ast.SynExpr$$get_Range)(comp$$3), TcEnv$$get_NameEnv(env$$194), ad$$24);

  const tryGetArgInfosForCustomOperator = function tryGetArgInfosForCustomOperator(nm$$24) {
    const matchValue$$140 = tryGetDataForCustomOperation(nm$$24);

    if (matchValue$$140 != null) {
      const methInfo$$4 = matchValue$$140[8];
      const _nm$$8 = matchValue$$140[0];
      const _maintainsVarSpace$$7 = matchValue$$140[2];
      const _joinConditionWord$$8 = matchValue$$140[7];
      const _isLikeZip$$6 = matchValue$$140[4];
      const _isLikeJoin$$6 = matchValue$$140[5];
      const _isLikeGroupJoin$$6 = matchValue$$140[6];
      const _allowInto$$8 = matchValue$$140[3];
      const __maintainsVarSpaceUsingBind = matchValue$$140[1];

      if (methInfo$$4.tag === 0) {
        const vref$$12 = methInfo$$4.fields[2];
        const matchValue$$141 = (0, _TastOps.ArgInfosOfMember)(cenv$$134.g, vref$$12);
        var $target$$398, curriedArgInfo;

        if (matchValue$$141.tail != null) {
          if (matchValue$$141.tail.tail == null) {
            $target$$398 = 0;
            curriedArgInfo = matchValue$$141.head;
          } else {
            $target$$398 = 1;
          }
        } else {
          $target$$398 = 1;
        }

        switch ($target$$398) {
          case 0:
            {
              return curriedArgInfo;
            }

          case 1:
            {
              return null;
            }
        }
      } else {
        return null;
      }
    } else {
      return null;
    }
  };

  const expectedArgCountForCustomOperator = function expectedArgCountForCustomOperator(nm$$25) {
    const matchValue$$142 = tryGetArgInfosForCustomOperator(nm$$25);

    if (matchValue$$142 != null) {
      const argInfos$$4 = matchValue$$142;
      return (0, _Util.max)(_Util.comparePrimitives, (0, _List.length)(argInfos$$4) - 1, 0) | 0;
    } else {
      return 0;
    }
  };

  const isCustomOperationProjectionParameter = function isCustomOperationProjectionParameter(i$$18, nm$$26) {
    const matchValue$$143 = tryGetArgInfosForCustomOperator(nm$$26);

    if (matchValue$$143 != null) {
      const argInfos$$5 = matchValue$$143;

      if (i$$18 < (0, _List.length)(argInfos$$5)) {
        const patternInput$$272 = (0, _List.item)(i$$18, argInfos$$5);
        return (0, _TastOps.HasFSharpAttribute)(cenv$$134.g, (0, _TcGlobals.TcGlobals$$get_attrib_ProjectionParameterAttribute)(cenv$$134.g), patternInput$$272[1].Attribs);
      } else {
        return false;
      }
    } else {
      return false;
    }
  };

  const $007CForEachThen$007C_$007C = function $007CForEachThen$007C_$007C(e$$68) {
    var $target$$399, _spBind, clause, expr1, isFromSource$$1, pat1$$3, rest$$5;

    if (e$$68.tag === 12) {
      if (e$$68.fields[1].fields[0]) {
        $target$$399 = 1;
      } else if (e$$68.fields[5].tag === 26) {
        if (e$$68.fields[5].fields[1]) {
          $target$$399 = 0;
          _spBind = e$$68.fields[0];
          clause = e$$68.fields[5].fields[2];
          expr1 = e$$68.fields[4];
          isFromSource$$1 = e$$68.fields[2];
          pat1$$3 = e$$68.fields[3];
          rest$$5 = e$$68.fields[5].fields[3];
        } else {
          $target$$399 = 1;
        }
      } else {
        $target$$399 = 1;
      }
    } else {
      $target$$399 = 1;
    }

    switch ($target$$399) {
      case 0:
        {
          return [isFromSource$$1, pat1$$3, expr1, clause, rest$$5];
        }

      case 1:
        {
          return null;
        }
    }
  };

  const $007CCustomOpId$007C_$007C = function $007CCustomOpId$007C_$007C(predicate$$32, e$$69) {
    var nm$$27;
    var $target$$402, nm$$28;
    const activePatternResult47855 = (0, _ast.$007CSingleIdent$007C_$007C)(e$$69);

    if (activePatternResult47855 != null) {
      if (nm$$27 = activePatternResult47855, isCustomOperation(nm$$27) ? predicate$$32(nm$$27) : false) {
        $target$$402 = 0;
        nm$$28 = activePatternResult47855;
      } else {
        $target$$402 = 1;
      }
    } else {
      $target$$402 = 1;
    }

    switch ($target$$402) {
      case 0:
        {
          return nm$$28;
        }

      case 1:
        {
          return null;
        }
    }
  };

  const $007CInExpr$007C_$007C = function $007CInExpr$007C_$007C(e$$70) {
    if (e$$70.tag === 46) {
      const mApp = e$$70.fields[3];
      const e2$$24 = e$$70.fields[2];
      const e1$$35 = e$$70.fields[0];
      return [e1$$35, e2$$24, mApp];
    } else {
      return null;
    }
  };

  const $007COnExpr$007C_$007C = function $007COnExpr$007C_$007C(nm$$29, e$$71) {
    var opName$$3, e2$$25, e1$$36;

    if (tryGetDataForCustomOperation(nm$$29) != null) {
      var $target$$403, e1$$37, e2$$26, opName$$4;

      if (e$$71.tag === 20) {
        if (e$$71.fields[2].tag === 20) {
          const activePatternResult47860 = (0, _ast.$007CSingleIdent$007C_$007C)(e$$71.fields[2].fields[3]);

          if (activePatternResult47860 != null) {
            if (opName$$3 = activePatternResult47860, (e2$$25 = e$$71.fields[3], (e1$$36 = e$$71.fields[2].fields[2], (0, _ast.Ident$$get_idText)(opName$$3) === customOperationJoinConditionWord(nm$$29)))) {
              $target$$403 = 0;
              e1$$37 = e$$71.fields[2].fields[2];
              e2$$26 = e$$71.fields[3];
              opName$$4 = activePatternResult47860;
            } else {
              $target$$403 = 1;
            }
          } else {
            $target$$403 = 1;
          }
        } else {
          $target$$403 = 1;
        }
      } else {
        $target$$403 = 1;
      }

      switch ($target$$403) {
        case 0:
          {
            const item$$34 = new _NameResolution.Item(15, "CustomOperation", (0, _ast.Ident$$get_idText)(opName$$4), function () {
              return null;
            }, null);
            (0, _NameResolution.CallNameResolutionSink)(cenv$$134.tcSink, (0, _ast.Ident$$get_idRange)(opName$$4), TcEnv$$get_NameEnv(env$$194), item$$34, item$$34, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$194), env$$194.eAccessRights);
            return [e1$$37, e2$$26];
          }

        case 1:
          {
            return null;
          }
      }
    } else {
      return null;
    }
  };

  const $007CIntoSuffix$007C_$007C = function $007CIntoSuffix$007C_$007C(e$$72) {
    var x$$98, nm2, intoPat;
    var $target$$404, intoPat$$1, nm2$$1, x$$99;

    if (e$$72.tag === 20) {
      if (e$$72.fields[2].tag === 20) {
        const activePatternResult47863 = (0, _ast.$007CSingleIdent$007C_$007C)(e$$72.fields[2].fields[3]);

        if (activePatternResult47863 != null) {
          const activePatternResult47864 = $007CExprAsPat$007C_$007C(e$$72.fields[3]);

          if (activePatternResult47864 != null) {
            if (x$$98 = e$$72.fields[2].fields[2], (nm2 = activePatternResult47863, (intoPat = activePatternResult47864, (0, _ast.Ident$$get_idText)(nm2) === "into"))) {
              $target$$404 = 0;
              intoPat$$1 = activePatternResult47864;
              nm2$$1 = activePatternResult47863;
              x$$99 = e$$72.fields[2].fields[2];
            } else {
              $target$$404 = 1;
            }
          } else {
            $target$$404 = 1;
          }
        } else {
          $target$$404 = 1;
        }
      } else {
        $target$$404 = 1;
      }
    } else {
      $target$$404 = 1;
    }

    switch ($target$$404) {
      case 0:
        {
          return [x$$99, (0, _ast.Ident$$get_idRange)(nm2$$1), intoPat$$1];
        }

      case 1:
        {
          return null;
        }
    }
  };

  const arbPat = function arbPat(m$$266) {
    return (0, _ast.mkSynPatVar)(null, (0, _ast.mkSynId)((0, _range.range$$MakeSynthetic)(m$$266), "_missingVar"));
  };

  const MatchIntoSuffixOrRecover = function MatchIntoSuffixOrRecover(alreadyGivenError, nm$$30, e$$73) {
    const activePatternResult47868 = $007CIntoSuffix$007C_$007C(e$$73);

    if (activePatternResult47868 != null) {
      const item$$35 = new _NameResolution.Item(15, "CustomOperation", "into", function () {
        return null;
      }, null);
      (0, _NameResolution.CallNameResolutionSink)(cenv$$134.tcSink, activePatternResult47868[1], TcEnv$$get_NameEnv(env$$194), item$$35, item$$35, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$194), env$$194.eAccessRights);
      return [activePatternResult47868[0], activePatternResult47868[2], alreadyGivenError];
    } else {
      if (!alreadyGivenError) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorIncorrectSyntax$$Z384F8060)((0, _ast.Ident$$get_idText)(nm$$30), customOpUsageText(nm$$30)), (0, _ast.Ident$$get_idRange)(nm$$30)));
      }

      return [e$$73, arbPat((0, _ast.SynExpr$$get_Range)(e$$73)), true];
    }
  };

  const MatchOnExprOrRecover = function MatchOnExprOrRecover(alreadyGivenError$$1, nm$$31, onExpr) {
    var $target$$405, innerSource, keySelectors;
    const activePatternResult47874 = $007COnExpr$007C_$007C(nm$$31, onExpr);

    if (activePatternResult47874 != null) {
      const activePatternResult47875 = (0, _ast.$007CSynExprParen$007C_$007C)(activePatternResult47874[1]);

      if (activePatternResult47875 != null) {
        $target$$405 = 0;
        innerSource = activePatternResult47874[0];
        keySelectors = activePatternResult47875[0];
      } else {
        $target$$405 = 1;
      }
    } else {
      $target$$405 = 1;
    }

    switch ($target$$405) {
      case 0:
        {
          return [innerSource, keySelectors];
        }

      case 1:
        {
          if (!alreadyGivenError$$1) {
            (0, _ErrorLogger.suppressErrorReporting)(function () {
              return TcExprOfUnknownType(cenv$$134, env$$194, tpenv$$210, onExpr);
            });
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorIncorrectSyntax$$Z384F8060)((0, _ast.Ident$$get_idText)(nm$$31), customOpUsageText(nm$$31)), (0, _ast.Ident$$get_idRange)(nm$$31)));
          }

          return [(0, _ast.arbExpr)("_innerSource", (0, _ast.SynExpr$$get_Range)(onExpr)), (0, _ast.mkSynBifix)((0, _ast.SynExpr$$get_Range)(onExpr), "=", (0, _ast.arbExpr)("_keySelectors", (0, _ast.SynExpr$$get_Range)(onExpr)), (0, _ast.arbExpr)("_keySelector2", (0, _ast.SynExpr$$get_Range)(onExpr)))];
        }
    }
  };

  const JoinOrGroupJoinOp = function JoinOrGroupJoinOp(detector, e$$74) {
    var $target$$408, innerSourcePat, mJoinCore, nm$$32;

    if (e$$74.tag === 20) {
      const activePatternResult47884 = $007CCustomOpId$007C_$007C(detector, e$$74.fields[2]);

      if (activePatternResult47884 != null) {
        const activePatternResult47885 = $007CExprAsPat$007C_$007C(e$$74.fields[3]);

        if (activePatternResult47885 != null) {
          $target$$408 = 0;
          innerSourcePat = activePatternResult47885;
          mJoinCore = e$$74.fields[4];
          nm$$32 = activePatternResult47884;
        } else {
          $target$$408 = 1;
        }
      } else {
        $target$$408 = 1;
      }
    } else {
      $target$$408 = 1;
    }

    switch ($target$$408) {
      case 0:
        {
          return [nm$$32, innerSourcePat, mJoinCore, false];
        }

      case 1:
        {
          var $target$$409, _innerSourcePatExpr, mJoinCore$$1, nm$$33;

          if (e$$74.tag === 20) {
            const activePatternResult47882 = $007CCustomOpId$007C_$007C(detector, e$$74.fields[2]);

            if (activePatternResult47882 != null) {
              $target$$409 = 0;
              _innerSourcePatExpr = e$$74.fields[3];
              mJoinCore$$1 = e$$74.fields[4];
              nm$$33 = activePatternResult47882;
            } else {
              $target$$409 = 1;
            }
          } else {
            $target$$409 = 1;
          }

          switch ($target$$409) {
            case 0:
              {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBinaryOperatorRequiresVariable$$Z384F8060)((0, _ast.Ident$$get_idText)(nm$$33), customOpUsageText(nm$$33)), (0, _ast.Ident$$get_idRange)(nm$$33)));
                return [nm$$33, arbPat(mJoinCore$$1), mJoinCore$$1, true];
              }

            case 1:
              {
                const activePatternResult47880 = $007CCustomOpId$007C_$007C(detector, e$$74);

                if (activePatternResult47880 != null) {
                  const nm$$34 = activePatternResult47880;
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBinaryOperatorRequiresVariable$$Z384F8060)((0, _ast.Ident$$get_idText)(nm$$34), customOpUsageText(nm$$34)), (0, _ast.Ident$$get_idRange)(nm$$34)));
                  return [nm$$34, arbPat((0, _ast.SynExpr$$get_Range)(e$$74)), (0, _ast.SynExpr$$get_Range)(e$$74), true];
                } else {
                  return null;
                }
              }
          }
        }
    }
  };

  const $007CJoinOp$007C_$007C = function $007CJoinOp$007C_$007C(e$$75) {
    return JoinOrGroupJoinOp(customOperationIsLikeJoin, e$$75);
  };

  const $007CGroupJoinOp$007C_$007C = function $007CGroupJoinOp$007C_$007C(e$$76) {
    return JoinOrGroupJoinOp(customOperationIsLikeGroupJoin, e$$76);
  };

  const arbKeySelectors = function arbKeySelectors(m$$267) {
    return (0, _ast.mkSynBifix)(m$$267, "=", (0, _ast.arbExpr)("_keySelectors", m$$267), (0, _ast.arbExpr)("_keySelector2", m$$267));
  };

  const $007CJoinExpr$007C_$007C = function $007CJoinExpr$007C_$007C(e$$77) {
    var $target$$410, alreadyGivenError$$2, innerSourcePat$$1, mJoinCore$$2, nm$$35, onExpr$$1;
    const activePatternResult47892 = $007CInExpr$007C_$007C(e$$77);

    if (activePatternResult47892 != null) {
      const activePatternResult47893 = $007CJoinOp$007C_$007C(activePatternResult47892[0]);

      if (activePatternResult47893 != null) {
        $target$$410 = 0;
        alreadyGivenError$$2 = activePatternResult47893[3];
        innerSourcePat$$1 = activePatternResult47893[1];
        mJoinCore$$2 = activePatternResult47892[2];
        nm$$35 = activePatternResult47893[0];
        onExpr$$1 = activePatternResult47892[1];
      } else {
        $target$$410 = 1;
      }
    } else {
      $target$$410 = 1;
    }

    switch ($target$$410) {
      case 0:
        {
          const patternInput$$273 = MatchOnExprOrRecover(alreadyGivenError$$2, nm$$35, onExpr$$1);
          return [nm$$35, innerSourcePat$$1, patternInput$$273[0], patternInput$$273[1], mJoinCore$$2];
        }

      case 1:
        {
          const activePatternResult47891 = $007CJoinOp$007C_$007C(e$$77);

          if (activePatternResult47891 != null) {
            if (activePatternResult47891[3]) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorRequiresIn$$Z384F8060)((0, _ast.Ident$$get_idText)(activePatternResult47891[0]), customOpUsageText(activePatternResult47891[0])), (0, _ast.Ident$$get_idRange)(activePatternResult47891[0])));
            }

            return [activePatternResult47891[0], activePatternResult47891[1], (0, _ast.arbExpr)("_innerSource", (0, _ast.SynExpr$$get_Range)(e$$77)), arbKeySelectors((0, _ast.SynExpr$$get_Range)(e$$77)), activePatternResult47891[2]];
          } else {
            return null;
          }
        }
    }
  };

  const $007CGroupJoinExpr$007C_$007C = function $007CGroupJoinExpr$007C_$007C(e$$78) {
    var $target$$411, alreadyGivenError$$4, innerSourcePat$$3, intoExpr, mGroupJoinCore, nm$$37;
    const activePatternResult47896 = $007CInExpr$007C_$007C(e$$78);

    if (activePatternResult47896 != null) {
      const activePatternResult47897 = $007CGroupJoinOp$007C_$007C(activePatternResult47896[0]);

      if (activePatternResult47897 != null) {
        $target$$411 = 0;
        alreadyGivenError$$4 = activePatternResult47897[3];
        innerSourcePat$$3 = activePatternResult47897[1];
        intoExpr = activePatternResult47896[1];
        mGroupJoinCore = activePatternResult47896[2];
        nm$$37 = activePatternResult47897[0];
      } else {
        $target$$411 = 1;
      }
    } else {
      $target$$411 = 1;
    }

    switch ($target$$411) {
      case 0:
        {
          const patternInput$$274 = MatchIntoSuffixOrRecover(alreadyGivenError$$4, nm$$37, intoExpr);
          const patternInput$$275 = MatchOnExprOrRecover(patternInput$$274[2], nm$$37, patternInput$$274[0]);
          return [nm$$37, innerSourcePat$$3, patternInput$$275[0], patternInput$$275[1], patternInput$$274[1], mGroupJoinCore];
        }

      case 1:
        {
          const activePatternResult47895 = $007CGroupJoinOp$007C_$007C(e$$78);

          if (activePatternResult47895 != null) {
            if (activePatternResult47895[3]) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorRequiresIn$$Z384F8060)((0, _ast.Ident$$get_idText)(activePatternResult47895[0]), customOpUsageText(activePatternResult47895[0])), (0, _ast.Ident$$get_idRange)(activePatternResult47895[0])));
            }

            return [activePatternResult47895[0], activePatternResult47895[1], (0, _ast.arbExpr)("_innerSource", (0, _ast.SynExpr$$get_Range)(e$$78)), arbKeySelectors((0, _ast.SynExpr$$get_Range)(e$$78)), arbPat((0, _ast.SynExpr$$get_Range)(e$$78)), activePatternResult47895[2]];
          } else {
            return null;
          }
        }
    }
  };

  const $007CJoinOrGroupJoinOrZipClause$007C_$007C = function $007CJoinOrGroupJoinOrZipClause$007C_$007C(e$$79) {
    const activePatternResult47909 = $007CJoinExpr$007C_$007C(e$$79);

    if (activePatternResult47909 != null) {
      return [activePatternResult47909[0], activePatternResult47909[1], activePatternResult47909[2], activePatternResult47909[3], null, activePatternResult47909[4]];
    } else {
      const activePatternResult47908 = $007CGroupJoinExpr$007C_$007C(e$$79);

      if (activePatternResult47908 != null) {
        return [activePatternResult47908[0], activePatternResult47908[1], activePatternResult47908[2], activePatternResult47908[3], activePatternResult47908[4], activePatternResult47908[5]];
      } else {
        var $target$$412, mZipCore, nm$$41, secondSource, secondSourcePat;
        const activePatternResult47904 = $007CInExpr$007C_$007C(e$$79);

        if (activePatternResult47904 != null) {
          if (activePatternResult47904[0].tag === 20) {
            const activePatternResult47906 = $007CCustomOpId$007C_$007C(customOperationIsLikeZip, activePatternResult47904[0].fields[2]);

            if (activePatternResult47906 != null) {
              const activePatternResult47907 = $007CExprAsPat$007C_$007C(activePatternResult47904[0].fields[3]);

              if (activePatternResult47907 != null) {
                $target$$412 = 0;
                mZipCore = activePatternResult47904[2];
                nm$$41 = activePatternResult47906;
                secondSource = activePatternResult47904[1];
                secondSourcePat = activePatternResult47907;
              } else {
                $target$$412 = 1;
              }
            } else {
              $target$$412 = 1;
            }
          } else {
            $target$$412 = 1;
          }
        } else {
          $target$$412 = 1;
        }

        switch ($target$$412) {
          case 0:
            {
              return [nm$$41, secondSourcePat, secondSource, null, null, mZipCore];
            }

          case 1:
            {
              const activePatternResult47903 = $007CCustomOpId$007C_$007C(customOperationIsLikeZip, e$$79);

              if (activePatternResult47903 != null) {
                const nm$$42 = activePatternResult47903;
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorIncorrectSyntax$$Z384F8060)((0, _ast.Ident$$get_idText)(nm$$42), customOpUsageText(nm$$42)), (0, _ast.Ident$$get_idRange)(nm$$42)));
                return [nm$$42, arbPat((0, _ast.SynExpr$$get_Range)(e$$79)), (0, _ast.arbExpr)("_secondSource", (0, _ast.SynExpr$$get_Range)(e$$79)), null, null, (0, _ast.SynExpr$$get_Range)(e$$79)];
              } else {
                var $target$$413, mZipCore$$1, nm$$43, secondSourcePat$$1;

                if (e$$79.tag === 20) {
                  const activePatternResult47900 = $007CCustomOpId$007C_$007C(customOperationIsLikeZip, e$$79.fields[2]);

                  if (activePatternResult47900 != null) {
                    const activePatternResult47901 = $007CExprAsPat$007C_$007C(e$$79.fields[3]);

                    if (activePatternResult47901 != null) {
                      $target$$413 = 0;
                      mZipCore$$1 = e$$79.fields[4];
                      nm$$43 = activePatternResult47900;
                      secondSourcePat$$1 = activePatternResult47901;
                    } else {
                      $target$$413 = 1;
                    }
                  } else {
                    $target$$413 = 1;
                  }
                } else {
                  $target$$413 = 1;
                }

                switch ($target$$413) {
                  case 0:
                    {
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorIncorrectSyntax$$Z384F8060)((0, _ast.Ident$$get_idText)(nm$$43), customOpUsageText(nm$$43)), mZipCore$$1));
                      return [nm$$43, secondSourcePat$$1, (0, _ast.arbExpr)("_innerSource", (0, _ast.SynExpr$$get_Range)(e$$79)), null, null, mZipCore$$1];
                    }

                  case 1:
                    {
                      return null;
                    }
                }
              }
            }
        }
      }
    }
  };

  const $007CForEachThenJoinOrGroupJoinOrZipClause$007C_$007C = function $007CForEachThenJoinOrGroupJoinOrZipClause$007C_$007C(e$$80) {
    var secondSourcePat$$2, secondSource$$1, pat3opt, nm$$44, mOpCore, keySelectorsOpt, isFromSource$$2, innerComp, firstSourcePat, firstSource, patternInput$$276, _holder;

    var $target$$414, firstSource$$1, firstSourcePat$$1, innerComp$$1, isFromSource$$3, keySelectorsOpt$$1, mOpCore$$1, nm$$45, pat3opt$$1, secondSource$$2, secondSourcePat$$3;
    const activePatternResult47914 = $007CForEachThen$007C_$007C(e$$80);

    if (activePatternResult47914 != null) {
      const activePatternResult47915 = $007CJoinOrGroupJoinOrZipClause$007C_$007C(activePatternResult47914[3]);

      if (activePatternResult47915 != null) {
        if (secondSourcePat$$2 = activePatternResult47915[1], (secondSource$$1 = activePatternResult47915[2], (pat3opt = activePatternResult47915[4], (nm$$44 = activePatternResult47915[0], (mOpCore = activePatternResult47915[5], (keySelectorsOpt = activePatternResult47915[3], (isFromSource$$2 = activePatternResult47914[0], (innerComp = activePatternResult47914[4], (firstSourcePat = activePatternResult47914[1], (firstSource = activePatternResult47914[2], (patternInput$$276 = (_holder = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink), (() => {
          try {
            return (0, _ast.SimplePatsOfPat)(cenv$$134.synArgNameGenerator, firstSourcePat);
          } finally {
            if ((0, _Util.isDisposable)(_holder)) {
              _holder.Dispose();
            }
          }
        })()), patternInput$$276[1] == null))))))))))) {
          $target$$414 = 0;
          firstSource$$1 = activePatternResult47914[2];
          firstSourcePat$$1 = activePatternResult47914[1];
          innerComp$$1 = activePatternResult47914[4];
          isFromSource$$3 = activePatternResult47914[0];
          keySelectorsOpt$$1 = activePatternResult47915[3];
          mOpCore$$1 = activePatternResult47915[5];
          nm$$45 = activePatternResult47915[0];
          pat3opt$$1 = activePatternResult47915[4];
          secondSource$$2 = activePatternResult47915[2];
          secondSourcePat$$3 = activePatternResult47915[1];
        } else {
          $target$$414 = 1;
        }
      } else {
        $target$$414 = 1;
      }
    } else {
      $target$$414 = 1;
    }

    switch ($target$$414) {
      case 0:
        {
          return [isFromSource$$3, firstSourcePat$$1, firstSource$$1, nm$$45, secondSourcePat$$3, secondSource$$2, keySelectorsOpt$$1, pat3opt$$1, mOpCore$$1, innerComp$$1];
        }

      case 1:
        {
          const activePatternResult47913 = $007CJoinOrGroupJoinOrZipClause$007C_$007C(e$$80);

          if (activePatternResult47913 != null) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBinaryOperatorRequiresBody$$Z384F8060)((0, _ast.Ident$$get_idText)(activePatternResult47913[0]), customOpUsageText(activePatternResult47913[0])), (0, _ast.Ident$$get_idRange)(activePatternResult47913[0])));
            return [true, arbPat((0, _ast.SynExpr$$get_Range)(e$$80)), (0, _ast.arbExpr)("_outerSource", (0, _ast.SynExpr$$get_Range)(e$$80)), activePatternResult47913[0], activePatternResult47913[1], activePatternResult47913[2], activePatternResult47913[3], activePatternResult47913[4], activePatternResult47913[5], (0, _ast.arbExpr)("_innerComp", (0, _ast.SynExpr$$get_Range)(e$$80))];
          } else {
            return null;
          }
        }
    }
  };

  const $007CStripApps$007C = function $007CStripApps$007C(e$$81) {
    const strip = function strip(e$$82) {
      var $target$$415, arg$$16, f$$34;

      if (e$$82.tag === 58) {
        if (e$$82.fields[0].tag === 20) {
          $target$$415 = 0;
          arg$$16 = e$$82.fields[0].fields[3];
          f$$34 = e$$82.fields[0].fields[2];
        } else {
          $target$$415 = 1;
        }
      } else if (e$$82.tag === 20) {
        $target$$415 = 0;
        arg$$16 = e$$82.fields[3];
        f$$34 = e$$82.fields[2];
      } else {
        $target$$415 = 1;
      }

      switch ($target$$415) {
        case 0:
          {
            const patternInput$$277 = strip(f$$34);
            return [patternInput$$277[0], (0, _Types.L)(arg$$16, patternInput$$277[1])];
          }

        case 1:
          {
            return [e$$82, (0, _Types.L)()];
          }
      }
    };

    const patternInput$$278 = strip(e$$81);
    return [patternInput$$278[0], (0, _List.reverse)(patternInput$$278[1])];
  };

  const $007COptionalIntoSuffix$007C = function $007COptionalIntoSuffix$007C(e$$83) {
    const activePatternResult47919 = $007CIntoSuffix$007C_$007C(e$$83);

    if (activePatternResult47919 != null) {
      return [activePatternResult47919[0], [activePatternResult47919[1], activePatternResult47919[2]]];
    } else {
      const body$$13 = e$$83;
      return [body$$13, null];
    }
  };

  const $007CCustomOperationClause$007C_$007C = function $007CCustomOperationClause$007C_$007C(e$$84) {
    var nm$$47;
    var $target$$416, core$$1, nm$$48, optInto$$1;
    const activePatternResult47924 = $007COptionalIntoSuffix$007C(e$$84);
    const activePatternResult47925 = $007CStripApps$007C(activePatternResult47924[0]);
    const activePatternResult47926 = (0, _ast.$007CSingleIdent$007C_$007C)(activePatternResult47925[0]);

    if (activePatternResult47926 != null) {
      if (nm$$47 = activePatternResult47926, isCustomOperation(nm$$47)) {
        $target$$416 = 0;
        core$$1 = activePatternResult47924[0];
        nm$$48 = activePatternResult47926;
        optInto$$1 = activePatternResult47924[1];
      } else {
        $target$$416 = 1;
      }
    } else {
      $target$$416 = 1;
    }

    switch ($target$$416) {
      case 0:
        {
          let optIntoInfo;

          if (optInto$$1 == null) {
            optIntoInfo = null;
          } else {
            const optInfo$$1 = optInto$$1[1];
            const intoWordRange$$2 = optInto$$1[0];
            const item$$36 = new _NameResolution.Item(15, "CustomOperation", "into", function () {
              return null;
            }, null);
            (0, _NameResolution.CallNameResolutionSink)(cenv$$134.tcSink, intoWordRange$$2, TcEnv$$get_NameEnv(env$$194), item$$36, item$$36, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$194), env$$194.eAccessRights);
            optIntoInfo = optInfo$$1;
          }

          return [nm$$48, tryGetDataForCustomOperation(nm$$48), core$$1, (0, _ast.SynExpr$$get_Range)(core$$1), optIntoInfo];
        }

      case 1:
        {
          return null;
        }
    }
  };

  const mkSynLambda = function mkSynLambda(p$$28, e$$85, m$$268) {
    return new _ast.SynExpr(15, "Lambda", false, false, p$$28, e$$85, m$$268);
  };

  const mkExprForVarSpace = function mkExprForVarSpace(m$$269, patvs) {
    if (patvs.tail != null) {
      if (patvs.tail.tail == null) {
        return new _ast.SynExpr(28, "Ident", (0, _tast.Val$$get_Id)(patvs.head));
      } else {
        return new _ast.SynExpr(4, "Tuple", (0, _List.map)(function mapping$$67(v$$40) {
          return new _ast.SynExpr(28, "Ident", (0, _tast.Val$$get_Id)(v$$40));
        }, patvs), (0, _Types.L)(), m$$269);
      }
    } else {
      return new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), m$$269);
    }
  };

  const mkSimplePatForVarSpace = function mkSimplePatForVarSpace(m$$270, patvs$$1) {
    const spats$$6 = patvs$$1.tail != null ? patvs$$1.tail.tail == null ? (0, _Types.L)((0, _ast.mkSynSimplePatVar)(false, (0, _tast.Val$$get_Id)(patvs$$1.head)), (0, _Types.L)()) : (0, _List.map)(function mapping$$68(v$$42) {
      return (0, _ast.mkSynSimplePatVar)(false, (0, _tast.Val$$get_Id)(v$$42));
    }, patvs$$1) : (0, _Types.L)();
    return new _ast.SynSimplePats(0, "SimplePats", spats$$6, m$$270);
  };

  const mkPatForVarSpace = function mkPatForVarSpace(m$$271, patvs$$2) {
    if (patvs$$2.tail != null) {
      if (patvs$$2.tail.tail == null) {
        return (0, _ast.mkSynPatVar)(null, (0, _tast.Val$$get_Id)(patvs$$2.head));
      } else {
        return new _ast.SynPat(8, "Tuple", (0, _List.map)(function mapping$$69(x$$101) {
          return (0, _ast.mkSynPatVar)(null, (0, _tast.Val$$get_Id)(x$$101));
        }, patvs$$2), m$$271);
      }
    } else {
      return new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), m$$271);
    }
  };

  const $007COptionalSequential$007C = function $007COptionalSequential$007C(e$$86) {
    var $target$$417, _sp, dataComp1, dataComp2;

    if (e$$86.tag === 26) {
      if (e$$86.fields[1]) {
        $target$$417 = 0;
        _sp = e$$86.fields[0];
        dataComp1 = e$$86.fields[2];
        dataComp2 = e$$86.fields[3];
      } else {
        $target$$417 = 1;
      }
    } else {
      $target$$417 = 1;
    }

    switch ($target$$417) {
      case 0:
        {
          return [dataComp1, dataComp2];
        }

      case 1:
        {
          return [e$$86, null];
        }
    }
  };

  const checkForBinaryApp = function checkForBinaryApp(comp$$4) {
    var nm2$$4, m$$272, nm2$$2, nm$$49, arg2$$1;
    var $target$$418, arg2$$2, args$$60, nm$$50, nm2$$3;
    const activePatternResult47945 = $007CStripApps$007C(comp$$4);
    const activePatternResult47946 = (0, _ast.$007CSingleIdent$007C_$007C)(activePatternResult47945[0]);

    if (activePatternResult47946 != null) {
      if (activePatternResult47945[1].tail != null) {
        const activePatternResult47947 = $007CStripApps$007C(activePatternResult47945[1].head);
        const activePatternResult47948 = (0, _ast.$007CSingleIdent$007C_$007C)(activePatternResult47947[0]);

        if (activePatternResult47948 != null) {
          if (activePatternResult47945[1].tail.tail != null) {
            if (activePatternResult47945[1].tail.tail.tail == null) {
              if (nm2$$2 = activePatternResult47948, (nm$$49 = activePatternResult47946, (arg2$$1 = activePatternResult47945[1].tail.head, ((0, _PrettyNaming.IsInfixOperator)((0, _ast.Ident$$get_idText)(nm$$49)) ? expectedArgCountForCustomOperator(nm2$$2) > 0 : false) ? !(activePatternResult47947[1].tail == null) : false))) {
                $target$$418 = 0;
                arg2$$2 = activePatternResult47945[1].tail.head;
                args$$60 = activePatternResult47947[1];
                nm$$50 = activePatternResult47946;
                nm2$$3 = activePatternResult47948;
              } else {
                $target$$418 = 1;
              }
            } else {
              $target$$418 = 1;
            }
          } else {
            $target$$418 = 1;
          }
        } else {
          $target$$418 = 1;
        }
      } else {
        $target$$418 = 1;
      }
    } else {
      $target$$418 = 1;
    }

    switch ($target$$418) {
      case 0:
        {
          const estimatedRangeOfIntendedLeftAndRightArguments = (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)((0, _List.last)(args$$60)), (0, _ast.SynExpr$$get_Range)(arg2$$2));
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnrecognizedQueryBinaryOperator)(), estimatedRangeOfIntendedLeftAndRightArguments));
          return true;
        }

      case 1:
        {
          var $target$$419, args$$62, m$$273, nm2$$5;

          if (comp$$4.tag === 4) {
            if (comp$$4.fields[0].tail != null) {
              const activePatternResult47943 = $007CStripApps$007C(comp$$4.fields[0].head);
              const activePatternResult47944 = (0, _ast.$007CSingleIdent$007C_$007C)(activePatternResult47943[0]);

              if (activePatternResult47944 != null) {
                if (nm2$$4 = activePatternResult47944, (m$$272 = comp$$4.fields[2], expectedArgCountForCustomOperator(nm2$$4) > 0 ? !(activePatternResult47943[1].tail == null) : false)) {
                  $target$$419 = 0;
                  args$$62 = activePatternResult47943[1];
                  m$$273 = comp$$4.fields[2];
                  nm2$$5 = activePatternResult47944;
                } else {
                  $target$$419 = 1;
                }
              } else {
                $target$$419 = 1;
              }
            } else {
              $target$$419 = 1;
            }
          } else {
            $target$$419 = 1;
          }

          switch ($target$$419) {
            case 0:
              {
                const estimatedRangeOfIntendedLeftAndRightArguments$$1 = (0, _range.unionRanges)((0, _ast.SynExpr$$get_Range)((0, _List.last)(args$$62)), (0, _range.range$$get_EndRange)(m$$273));
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnrecognizedQueryBinaryOperator)(), estimatedRangeOfIntendedLeftAndRightArguments$$1));
                return true;
              }

            case 1:
              {
                return false;
              }
          }
        }
    }
  };

  const addVarsToVarSpace = function addVarsToVarSpace(varSpace, f$$35) {
    return (0, _illib.LazyWithContext$00602$$$Create$$4F384A61)(function (m$$274) {
      const patternInput$$279 = (0, _illib.LazyWithContext$00602$$Force$$2B594)(varSpace, m$$274);
      const patternInput$$280 = f$$35(m$$274, patternInput$$279[1]);
      const patvs$$4 = (0, _List.append)(patternInput$$279[0], (0, _List.filter)(function predicate$$34(v$$44) {
        return !(0, _List.exists)(function predicate$$33(v2$$1) {
          return (0, _tast.Val$$get_LogicalName)(v$$44) === (0, _tast.Val$$get_LogicalName)(v2$$1);
        }, patternInput$$279[0]);
      }, patternInput$$280[0]));
      return [patvs$$4, patternInput$$280[1]];
    }, function (x$$102) {
      return x$$102;
    });
  };

  const emptyVarSpace = (0, _illib.LazyWithContext$00602$$$NotLazy$$2B595)([(0, _Types.L)(), env$$194]);

  const tryTrans = function tryTrans(firstTry) {
    return function (q$$1) {
      return function (varSpace$$1) {
        return function (comp$$5) {
          return function (translatedCtxt) {
            var relExpr$$2, secondResultPat, relExpr, mClause;
            const activePatternResult48034 = $007CForEachThenJoinOrGroupJoinOrZipClause$007C_$007C(comp$$5);

            if (activePatternResult48034 != null) {
              if (!q$$1) {
                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationMayNotBeUsedHere)(), (0, _ast.Ident$$get_idRange)(activePatternResult48034[3])));
              }

              const firstSource$$3 = activePatternResult48034[0] ? mkSourceExpr(activePatternResult48034[2]) : activePatternResult48034[2];
              const secondSource$$4 = mkSourceExpr(activePatternResult48034[5]);
              const varSpaceWithFirstVars = addVarsToVarSpace(varSpace$$1, function (_mCustomOp, env$$196) {
                const _holder$$1 = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink);

                try {
                  const patternInput$$281 = TcMatchPattern(cenv$$134, (0, _ConstraintSolver.NewInferenceType)(), env$$196, tpenv$$210, activePatternResult48034[1], null);
                  return [patternInput$$281[2], patternInput$$281[3]];
                } finally {
                  if ((0, _Util.isDisposable)(_holder$$1)) {
                    _holder$$1.Dispose();
                  }
                }
              });
              const varSpaceWithSecondVars = addVarsToVarSpace(varSpaceWithFirstVars, function (_mCustomOp$$1, env$$197) {
                const _holder$$2 = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink);

                try {
                  const patternInput$$282 = TcMatchPattern(cenv$$134, (0, _ConstraintSolver.NewInferenceType)(), env$$197, tpenv$$210, activePatternResult48034[4], null);
                  return [patternInput$$282[2], patternInput$$282[3]];
                } finally {
                  if ((0, _Util.isDisposable)(_holder$$2)) {
                    _holder$$2.Dispose();
                  }
                }
              });
              let varSpaceWithGroupJoinVars;

              if (activePatternResult48034[7] == null) {
                varSpaceWithGroupJoinVars = varSpace$$1;
              } else {
                const pat3 = activePatternResult48034[7];
                varSpaceWithGroupJoinVars = addVarsToVarSpace(varSpaceWithFirstVars, function (_mCustomOp$$2, env$$198) {
                  const _holder$$3 = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink);

                  try {
                    const patternInput$$283 = TcMatchPattern(cenv$$134, (0, _ConstraintSolver.NewInferenceType)(), env$$198, tpenv$$210, pat3, null);
                    return [patternInput$$283[2], patternInput$$283[3]];
                  } finally {
                    if ((0, _Util.isDisposable)(_holder$$3)) {
                      _holder$$3.Dispose();
                    }
                  }
                });
              }

              const patternInput$$284 = (0, _ast.SimplePatsOfPat)(cenv$$134.synArgNameGenerator, activePatternResult48034[1]);
              const patternInput$$285 = (0, _ast.SimplePatsOfPat)(cenv$$134.synArgNameGenerator, activePatternResult48034[4]);

              if (patternInput$$284[1] != null) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcJoinMustUseSimplePattern$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynPat$$get_Range)(activePatternResult48034[1])));
              }

              if (patternInput$$285[1] != null) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcJoinMustUseSimplePattern$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynPat$$get_Range)(activePatternResult48034[4])));
              }

              const matchValue$$145 = tryGetDataForCustomOperation(activePatternResult48034[3]);

              if (matchValue$$145 != null) {
                const opName$$5 = matchValue$$145[0];
                const methInfo$$5 = matchValue$$145[8];
                const item$$37 = new _NameResolution.Item(15, "CustomOperation", opName$$5, function () {
                  return customOpUsageText(activePatternResult48034[3]);
                }, methInfo$$5);
                (0, _NameResolution.CallNameResolutionSink)(cenv$$134.tcSink, (0, _ast.Ident$$get_idRange)(activePatternResult48034[3]), TcEnv$$get_NameEnv(env$$194), item$$37, item$$37, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$194), env$$194.eAccessRights);

                const mkJoinExpr = function mkJoinExpr(keySelector1, keySelector2, innerPat, e$$87) {
                  const mSynthetic = (0, _range.range$$MakeSynthetic)(activePatternResult48034[8]);
                  return mkSynCall((0, _infos.MethInfo$$get_DisplayName)(methInfo$$5), activePatternResult48034[8], (0, _Types.L)(firstSource$$3, (0, _Types.L)(secondSource$$4, (0, _Types.L)(mkSynLambda(patternInput$$284[0], keySelector1, mSynthetic), (0, _Types.L)(mkSynLambda(patternInput$$285[0], keySelector2, mSynthetic), (0, _Types.L)(mkSynLambda(patternInput$$284[0], mkSynLambda(innerPat, e$$87, mSynthetic), mSynthetic), (0, _Types.L)()))))));
                };

                const mkZipExpr = function mkZipExpr(e$$88) {
                  const mSynthetic$$1 = (0, _range.range$$MakeSynthetic)(activePatternResult48034[8]);
                  return mkSynCall((0, _infos.MethInfo$$get_DisplayName)(methInfo$$5), activePatternResult48034[8], (0, _Types.L)(firstSource$$3, (0, _Types.L)(secondSource$$4, (0, _Types.L)(mkSynLambda(patternInput$$284[0], mkSynLambda(patternInput$$285[0], e$$88, mSynthetic$$1), mSynthetic$$1), (0, _Types.L)()))));
                };

                const wrapInArbErrSequence = function wrapInArbErrSequence(l$$44, caption) {
                  var copyOfStruct$$2;
                  return new _ast.SynExpr(26, "Sequential", new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq"), true, l$$44, (0, _ast.arbExpr)(caption, (copyOfStruct$$2 = (0, _ast.SynExpr$$get_Range)(l$$44), (0, _range.range$$get_EndRange)(copyOfStruct$$2))), (0, _ast.SynExpr$$get_Range)(l$$44));
                };

                let patternInput$$287;

                const isNullableOp = function isNullableOp(opId$$11) {
                  const matchValue$$146 = (0, _PrettyNaming.DecompileOpName)(opId$$11);
                  var $target$$422;

                  switch (matchValue$$146) {
                    case "?=":
                    case "=?":
                    case "?=?":
                      $target$$422 = 0;
                      break;

                    default:
                      $target$$422 = 1;
                  }

                  switch ($target$$422) {
                    case 0:
                      {
                        return true;
                      }

                    case 1:
                      {
                        return false;
                      }
                  }
                };

                const matchValue$$147 = [activePatternResult48034[7], activePatternResult48034[6]];
                var $target$$423, relExpr$$1, secondResultPat$$1;

                if (matchValue$$147[0] != null) {
                  if (matchValue$$147[1] != null) {
                    if (secondResultPat = matchValue$$147[0], (relExpr = matchValue$$147[1], customOperationIsLikeGroupJoin(activePatternResult48034[3]))) {
                      $target$$423 = 0;
                      relExpr$$1 = matchValue$$147[1];
                      secondResultPat$$1 = matchValue$$147[0];
                    } else {
                      $target$$423 = 1;
                    }
                  } else {
                    $target$$423 = 1;
                  }
                } else {
                  $target$$423 = 1;
                }

                switch ($target$$423) {
                  case 0:
                    {
                      const patternInput$$286 = (0, _ast.SimplePatsOfPat)(cenv$$134.synArgNameGenerator, secondResultPat$$1);

                      if (patternInput$$286[1] != null) {
                        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcJoinMustUseSimplePattern$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynPat$$get_Range)(secondResultPat$$1)));
                      }

                      const activePatternResult47979 = $007CJoinRelation$007C_$007C(cenv$$134, env$$194, relExpr$$1);

                      if (activePatternResult47979 != null) {
                        patternInput$$287 = [(0, _Util.partialApply)(1, mkJoinExpr, [activePatternResult47979[0], activePatternResult47979[1], patternInput$$286[0]]), varSpaceWithGroupJoinVars];
                      } else {
                        const activePatternResult47977 = $007CBinOpExpr$007C_$007C(relExpr$$1);

                        if (activePatternResult47977 != null) {
                          if (isNullableOp((0, _ast.Ident$$get_idText)(activePatternResult47977[0]))) {
                            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$cannotResolveNullableOperators$$Z721C83C5)((0, _PrettyNaming.DecompileOpName)((0, _ast.Ident$$get_idText)(activePatternResult47977[0]))), (0, _ast.SynExpr$$get_Range)(relExpr$$1)));
                          } else {
                            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidRelationInJoin$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynExpr$$get_Range)(relExpr$$1)));
                          }

                          const l$$46 = wrapInArbErrSequence(activePatternResult47977[1], "_keySelector1");
                          const r$$4 = wrapInArbErrSequence(activePatternResult47977[2], "_keySelector2");
                          patternInput$$287 = [(0, _Util.partialApply)(1, mkJoinExpr, [l$$46, r$$4, patternInput$$286[0]]), varSpaceWithGroupJoinVars];
                        } else {
                          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidRelationInJoin$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynExpr$$get_Range)(relExpr$$1)));
                          patternInput$$287 = [(0, _Util.partialApply)(1, mkJoinExpr, [relExpr$$1, (0, _ast.arbExpr)("_keySelector2", (0, _ast.SynExpr$$get_Range)(relExpr$$1)), patternInput$$286[0]]), varSpaceWithGroupJoinVars];
                        }
                      }

                      break;
                    }

                  case 1:
                    {
                      var $target$$424, relExpr$$3;

                      if (matchValue$$147[0] == null) {
                        if (matchValue$$147[1] != null) {
                          if (relExpr$$2 = matchValue$$147[1], customOperationIsLikeJoin(activePatternResult48034[3])) {
                            $target$$424 = 0;
                            relExpr$$3 = matchValue$$147[1];
                          } else {
                            $target$$424 = 1;
                          }
                        } else {
                          $target$$424 = 1;
                        }
                      } else {
                        $target$$424 = 1;
                      }

                      switch ($target$$424) {
                        case 0:
                          {
                            const activePatternResult47982 = $007CJoinRelation$007C_$007C(cenv$$134, env$$194, relExpr$$3);

                            if (activePatternResult47982 != null) {
                              patternInput$$287 = [(0, _Util.partialApply)(1, mkJoinExpr, [activePatternResult47982[0], activePatternResult47982[1], patternInput$$285[0]]), varSpaceWithSecondVars];
                            } else {
                              const activePatternResult47980 = $007CBinOpExpr$007C_$007C(relExpr$$3);

                              if (activePatternResult47980 != null) {
                                if (isNullableOp((0, _ast.Ident$$get_idText)(activePatternResult47980[0]))) {
                                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$cannotResolveNullableOperators$$Z721C83C5)((0, _PrettyNaming.DecompileOpName)((0, _ast.Ident$$get_idText)(activePatternResult47980[0]))), (0, _ast.SynExpr$$get_Range)(relExpr$$3)));
                                } else {
                                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidRelationInJoin$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynExpr$$get_Range)(relExpr$$3)));
                                }

                                const l$$48 = wrapInArbErrSequence(activePatternResult47980[1], "_keySelector1");
                                const r$$6 = wrapInArbErrSequence(activePatternResult47980[2], "_keySelector2");
                                patternInput$$287 = [(0, _Util.partialApply)(1, mkJoinExpr, [l$$48, r$$6, patternInput$$285[0]]), varSpaceWithGroupJoinVars];
                              } else {
                                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidRelationInJoin$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.SynExpr$$get_Range)(relExpr$$3)));
                                patternInput$$287 = [(0, _Util.partialApply)(1, mkJoinExpr, [relExpr$$3, (0, _ast.arbExpr)("_keySelector2", (0, _ast.SynExpr$$get_Range)(relExpr$$3)), patternInput$$285[0]]), varSpaceWithGroupJoinVars];
                              }
                            }

                            break;
                          }

                        case 1:
                          {
                            var $target$$425;

                            if (matchValue$$147[0] == null) {
                              if (matchValue$$147[1] == null) {
                                if (customOperationIsLikeZip(activePatternResult48034[3])) {
                                  $target$$425 = 0;
                                } else {
                                  $target$$425 = 1;
                                }
                              } else {
                                $target$$425 = 1;
                              }
                            } else {
                              $target$$425 = 1;
                            }

                            switch ($target$$425) {
                              case 0:
                                {
                                  patternInput$$287 = [mkZipExpr, varSpaceWithSecondVars];
                                  break;
                                }

                              case 1:
                                {
                                  throw new Error("unreachable");
                                  break;
                                }
                            }

                            break;
                          }
                      }

                      break;
                    }
                }

                const patternInput$$288 = (0, _illib.LazyWithContext$00602$$Force$$2B594)(patternInput$$287[1], activePatternResult48034[8]);
                const varSpaceExpr = mkExprForVarSpace(activePatternResult48034[8], patternInput$$288[0]);
                const varSpacePat = mkPatForVarSpace(activePatternResult48034[8], patternInput$$288[0]);
                const joinExpr = patternInput$$287[0](varSpaceExpr);
                return trans(true)(q$$1)(patternInput$$287[1])(new _ast.SynExpr(12, "ForEach", new _ast.SequencePointInfoForForLoop(1, "NoSequencePointAtForLoop"), new _ast.SeqExprOnly(0, "SeqExprOnly", false), false, varSpacePat, joinExpr, activePatternResult48034[9], activePatternResult48034[8]))(translatedCtxt);
              } else {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMissingCustomOperation$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult48034[3])), (0, _ast.Ident$$get_idRange)(activePatternResult48034[3])));
              }
            } else {
              var $target$$426, _seqExprOnly, innerComp$$3, isFromSource$$5, pat$$22, sourceExpr, spForLoop$$2, dir$$3, finish$$2, id$$46, innerComp$$4, m$$277, spBind$$9, start$$2, guardExpr$$4, innerComp$$5, spWhile$$1, _spFinally, innerComp$$6, mTryToLast$$2, spTry$$2, unwindExpr, m$$281, m$$282, mClause$$1;

              if (comp$$5.tag === 12) {
                $target$$426 = 0;
                _seqExprOnly = comp$$5.fields[1].fields[0];
                innerComp$$3 = comp$$5.fields[5];
                isFromSource$$5 = comp$$5.fields[2];
                pat$$22 = comp$$5.fields[3];
                sourceExpr = comp$$5.fields[4];
                spForLoop$$2 = comp$$5.fields[0];
              } else if (comp$$5.tag === 11) {
                $target$$426 = 1;
                dir$$3 = comp$$5.fields[3];
                finish$$2 = comp$$5.fields[4];
                id$$46 = comp$$5.fields[1];
                innerComp$$4 = comp$$5.fields[5];
                m$$277 = comp$$5.fields[6];
                spBind$$9 = comp$$5.fields[0];
                start$$2 = comp$$5.fields[2];
              } else if (comp$$5.tag === 10) {
                $target$$426 = 2;
                guardExpr$$4 = comp$$5.fields[1];
                innerComp$$5 = comp$$5.fields[2];
                spWhile$$1 = comp$$5.fields[0];
              } else if (comp$$5.tag === 24) {
                $target$$426 = 3;
                _spFinally = comp$$5.fields[4];
                innerComp$$6 = comp$$5.fields[0];
                mTryToLast$$2 = comp$$5.fields[2];
                spTry$$2 = comp$$5.fields[3];
                unwindExpr = comp$$5.fields[1];
              } else if (comp$$5.tag === 0) {
                $target$$426 = 4;
                m$$281 = comp$$5.fields[3];
              } else if (comp$$5.tag === 47) {
                $target$$426 = 5;
                m$$282 = comp$$5.fields[0];
              } else {
                const activePatternResult48032 = $007COptionalSequential$007C(comp$$5);
                const activePatternResult48033 = $007CJoinOrGroupJoinOrZipClause$007C_$007C(activePatternResult48032[0]);

                if (activePatternResult48033 != null) {
                  if (mClause = activePatternResult48033[5], firstTry) {
                    $target$$426 = 6;
                    mClause$$1 = activePatternResult48033[5];
                  } else {
                    $target$$426 = 7;
                  }
                } else {
                  $target$$426 = 7;
                }
              }

              switch ($target$$426) {
                case 0:
                  {
                    const wrappedSourceExpr = isFromSource$$5 ? mkSourceExpr(sourceExpr) : sourceExpr;
                    let mFor;

                    if (spForLoop$$2.tag === 0) {
                      const m$$275 = spForLoop$$2.fields[0];
                      mFor = m$$275;
                    } else {
                      mFor = (0, _ast.SynPat$$get_Range)(pat$$22);
                    }

                    const mPat$$1 = (0, _ast.SynPat$$get_Range)(pat$$22);
                    let spBind$$8;

                    if (spForLoop$$2.tag === 1) {
                      spBind$$8 = new _ast.SequencePointInfoForBinding(3, "NoSequencePointAtStickyBinding");
                    } else {
                      const m$$276 = spForLoop$$2.fields[0];
                      spBind$$8 = new _ast.SequencePointInfoForBinding(0, "SequencePointAtBinding", m$$276);
                    }

                    if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mFor, ad$$24, "For", builderTy$$1).tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("For"), mFor));
                    }

                    const varSpace$$2 = addVarsToVarSpace(varSpace$$1, function (_mCustomOp$$3, env$$199) {
                      const _holder$$4 = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink);

                      try {
                        const patternInput$$289 = TcMatchPattern(cenv$$134, (0, _ConstraintSolver.NewInferenceType)(), env$$199, tpenv$$210, pat$$22, null);
                        return [patternInput$$289[2], patternInput$$289[3]];
                      } finally {
                        if ((0, _Util.isDisposable)(_holder$$4)) {
                          _holder$$4.Dispose();
                        }
                      }
                    });
                    return trans(true)(q$$1)(varSpace$$2)(innerComp$$3)(function (holeFill) {
                      return translatedCtxt(mkSynCall("For", mFor, (0, _Types.L)(wrappedSourceExpr, (0, _Types.L)(new _ast.SynExpr(16, "MatchLambda", false, (0, _ast.SynExpr$$get_Range)(sourceExpr), (0, _Types.L)(new _ast.SynMatchClause(0, "Clause", pat$$22, null, holeFill, mPat$$1, new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), (0, _Types.L)()), spBind$$8, mFor), (0, _Types.L)()))));
                    });
                  }

                case 1:
                  {
                    let mFor$$1;

                    if (spBind$$9.tag === 0) {
                      const m$$278 = spBind$$9.fields[0];
                      mFor$$1 = m$$278;
                    } else {
                      mFor$$1 = m$$277;
                    }

                    if (isQuery) {
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoIntegerForLoopInQuery)(), mFor$$1));
                    }

                    return trans(true)(q$$1)(varSpace$$1)(elimFastIntegerForLoop(spBind$$9, id$$46, start$$2, dir$$3, finish$$2, innerComp$$4, m$$277))(translatedCtxt);
                  }

                case 2:
                  {
                    const mGuard = (0, _ast.SynExpr$$get_Range)(guardExpr$$4);
                    let mWhile;

                    if (spWhile$$1.tag === 0) {
                      const m$$279 = spWhile$$1.fields[0];
                      mWhile = m$$279;
                    } else {
                      mWhile = mGuard;
                    }

                    if (isQuery) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoWhileInQuery)(), mWhile));
                    }

                    if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mWhile, ad$$24, "While", builderTy$$1).tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("While"), mWhile));
                    }

                    if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mWhile, ad$$24, "Delay", builderTy$$1).tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Delay"), mWhile));
                    }

                    return trans(true)(q$$1)(varSpace$$1)(innerComp$$5)(function (holeFill$$1) {
                      return translatedCtxt(mkSynCall("While", mWhile, (0, _Types.L)(mkSynDelay2(guardExpr$$4), (0, _Types.L)(mkSynCall("Delay", mWhile, (0, _Types.L)((0, _ast.mkSynDelay)((0, _ast.SynExpr$$get_Range)(innerComp$$5), holeFill$$1), (0, _Types.L)())), (0, _Types.L)()))));
                    });
                  }

                case 3:
                  {
                    let mTry;

                    if (spTry$$2.tag === 0) {
                      const m$$280 = spTry$$2.fields[0];
                      mTry = m$$280;
                    } else {
                      mTry = mTryToLast$$2;
                    }

                    if (isQuery) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoTryFinallyInQuery)(), mTry));
                    }

                    if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mTry, ad$$24, "TryFinally", builderTy$$1).tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("TryFinally"), mTry));
                    }

                    if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mTry, ad$$24, "Delay", builderTy$$1).tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Delay"), mTry));
                    }

                    return translatedCtxt(mkSynCall("TryFinally", mTry, (0, _Types.L)(mkSynCall("Delay", mTry, (0, _Types.L)((0, _ast.mkSynDelay)((0, _ast.SynExpr$$get_Range)(innerComp$$6), transNoQueryOps(innerComp$$6)), (0, _Types.L)())), (0, _Types.L)(mkSynDelay2(unwindExpr), (0, _Types.L)()))));
                  }

                case 4:
                  {
                    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructIsAmbiguousInComputationExpression)(), m$$281));
                  }

                case 5:
                  {
                    if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$282, ad$$24, "Zero", builderTy$$1).tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Zero"), m$$282));
                    }

                    return translatedCtxt(mkSynCall("Zero", m$$282, (0, _Types.L)()));
                  }

                case 6:
                  {
                    const patternInput$$290 = (0, _illib.LazyWithContext$00602$$Force$$2B594)(varSpace$$1, (0, _ast.SynExpr$$get_Range)(comp$$5));
                    const varSpaceExpr$$1 = mkExprForVarSpace(mClause$$1, patternInput$$290[0]);
                    const varSpacePat$$1 = mkPatForVarSpace(mClause$$1, patternInput$$290[0]);
                    const dataCompPrior = translatedCtxt(transNoQueryOps(new _ast.SynExpr(48, "YieldOrReturn", [true, false], varSpaceExpr$$1, mClause$$1)));
                    const rebind = new _ast.SynExpr(12, "ForEach", new _ast.SequencePointInfoForForLoop(1, "NoSequencePointAtForLoop"), new _ast.SeqExprOnly(0, "SeqExprOnly", false), false, varSpacePat$$1, dataCompPrior, comp$$5, (0, _ast.SynExpr$$get_Range)(comp$$5));
                    return tryTrans(false)(q$$1)(varSpace$$1)(rebind)(function (x$$103) {
                      return x$$103;
                    });
                  }

                case 7:
                  {
                    const activePatternResult48030 = $007COptionalSequential$007C(comp$$5);
                    const activePatternResult48031 = $007CCustomOperationClause$007C_$007C(activePatternResult48030[0]);

                    if (activePatternResult48031 != null) {
                      if (!q$$1) {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationMayNotBeUsedHere)(), (0, _ast.SynExpr$$get_Range)(activePatternResult48031[2])));
                      }

                      const patternInput$$291 = (0, _illib.LazyWithContext$00602$$Force$$2B594)(varSpace$$1, (0, _ast.SynExpr$$get_Range)(comp$$5));
                      const varSpaceExpr$$2 = mkExprForVarSpace(activePatternResult48031[3], patternInput$$291[0]);
                      let dataCompPriorToOp;
                      const isYield = !customOperationMaintainsVarSpaceUsingBind(activePatternResult48031[0]);
                      dataCompPriorToOp = translatedCtxt(transNoQueryOps(new _ast.SynExpr(48, "YieldOrReturn", [isYield, false], varSpaceExpr$$2, activePatternResult48031[3])));

                      const consumeClauses = function consumeClauses(varSpace$$3, dataCompPrior$$1, compClausesExpr, lastUsesBind) {
                        consumeClauses: while (true) {
                          const patternInput$$292 = (0, _illib.LazyWithContext$00602$$Force$$2B594)(varSpace$$3, (0, _ast.SynExpr$$get_Range)(comp$$5));
                          const varSpaceSimplePat = mkSimplePatForVarSpace(activePatternResult48031[3], patternInput$$292[0]);
                          const varSpacePat$$2 = mkPatForVarSpace(activePatternResult48031[3], patternInput$$292[0]);
                          const activePatternResult47997 = $007COptionalSequential$007C(compClausesExpr);
                          const activePatternResult47998 = $007CCustomOperationClause$007C_$007C(activePatternResult47997[0]);

                          if (activePatternResult47998 != null) {
                            const item$$38 = new _NameResolution.Item(15, "CustomOperation", activePatternResult47998[1][0], function () {
                              return customOpUsageText(activePatternResult47998[0]);
                            }, activePatternResult47998[1][8]);
                            (0, _NameResolution.CallNameResolutionSink)(cenv$$134.tcSink, (0, _ast.Ident$$get_idRange)(activePatternResult47998[0]), TcEnv$$get_NameEnv(env$$194), item$$38, item$$38, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$194), env$$194.eAccessRights);

                            if ((activePatternResult47998[1][4] ? true : activePatternResult47998[1][5]) ? true : activePatternResult47998[1][6]) {
                              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBinaryOperatorRequiresBody$$Z384F8060)((0, _ast.Ident$$get_idText)(activePatternResult47998[0]), customOpUsageText(activePatternResult47998[0])), (0, _ast.Ident$$get_idRange)(activePatternResult47998[0])));

                              if (activePatternResult47997[1] != null) {
                                const contExpr = activePatternResult47997[1];
                                varSpace$$3 = varSpace$$3;
                                dataCompPrior$$1 = dataCompPrior$$1;
                                compClausesExpr = contExpr;
                                lastUsesBind = lastUsesBind;
                                continue consumeClauses;
                              } else {
                                RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects(cenv$$134, env$$194, tpenv$$210, activePatternResult47998[2]);
                                return dataCompPrior$$1;
                              }
                            } else {
                              const maintainsVarSpace$$3 = customOperationMaintainsVarSpace(activePatternResult47998[0]);
                              const maintainsVarSpaceUsingBind$$3 = customOperationMaintainsVarSpaceUsingBind(activePatternResult47998[0]);
                              const expectedArgCount = expectedArgCountForCustomOperator(activePatternResult47998[0]) | 0;
                              let dataCompAfterOp;
                              const activePatternResult47994 = $007CStripApps$007C(activePatternResult47998[2]);
                              const activePatternResult47995 = (0, _ast.$007CSingleIdent$007C_$007C)(activePatternResult47994[0]);

                              if (activePatternResult47995 != null) {
                                const nm$$54 = activePatternResult47995;

                                if ((0, _List.length)(activePatternResult47994[1]) === expectedArgCount) {
                                  const args$$64 = (0, _List.mapIndexed)(function mapping$$70(i$$19, arg$$17) {
                                    var copyOfStruct$$3;

                                    if (isCustomOperationProjectionParameter(i$$19 + 1, nm$$54)) {
                                      return new _ast.SynExpr(15, "Lambda", false, false, varSpaceSimplePat, arg$$17, (copyOfStruct$$3 = (0, _ast.SynExpr$$get_Range)(arg$$17), (0, _range.range$$MakeSynthetic)(copyOfStruct$$3)));
                                    } else {
                                      return arg$$17;
                                    }
                                  }, activePatternResult47994[1]);
                                  dataCompAfterOp = mkSynCall((0, _infos.MethInfo$$get_DisplayName)(activePatternResult47998[1][8]), activePatternResult47998[3], (0, _Types.L)(dataCompPrior$$1, args$$64));
                                } else {
                                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationHasIncorrectArgCount$$487EF8FB)((0, _ast.Ident$$get_idText)(nm$$54), expectedArgCount, (0, _List.length)(activePatternResult47994[1])), (0, _ast.Ident$$get_idRange)(nm$$54)));
                                  dataCompAfterOp = mkSynCall((0, _infos.MethInfo$$get_DisplayName)(activePatternResult47998[1][8]), activePatternResult47998[3], (0, _List.append)((0, _Types.L)(dataCompPrior$$1, (0, _Types.L)()), (0, _List.initialize)(expectedArgCount, function (i$$20) {
                                    return (0, _ast.arbExpr)("_arg" + (0, _Util.int32ToString)(i$$20), activePatternResult47998[3]);
                                  })));
                                }
                              } else {
                                throw new Error("unreachable");
                              }

                              if (activePatternResult47997[1] != null) {
                                const contExpr$$1 = activePatternResult47997[1];

                                if (activePatternResult47998[4] == null) {
                                  if (maintainsVarSpace$$3 ? true : maintainsVarSpaceUsingBind$$3) {
                                    varSpace$$3 = varSpace$$3;
                                    dataCompPrior$$1 = dataCompAfterOp;
                                    compClausesExpr = contExpr$$1;
                                    lastUsesBind = maintainsVarSpaceUsingBind$$3;
                                    continue consumeClauses;
                                  } else {
                                    varSpace$$3 = emptyVarSpace;
                                    dataCompPrior$$1 = dataCompAfterOp;
                                    compClausesExpr = contExpr$$1;
                                    lastUsesBind = false;
                                    continue consumeClauses;
                                  }
                                } else {
                                  const intoPat$$6 = activePatternResult47998[4];

                                  if (!customOperationAllowsInto(activePatternResult47998[0])) {
                                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOperatorDoesntAcceptInto$$Z721C83C5)((0, _ast.Ident$$get_idText)(activePatternResult47998[0])), (0, _ast.SynPat$$get_Range)(intoPat$$6)));
                                  }

                                  const rebind$$1 = maintainsVarSpaceUsingBind$$3 ? new _ast.SynExpr(50, "LetOrUseBang", new _ast.SequencePointInfoForBinding(2, "NoSequencePointAtLetBinding"), false, false, intoPat$$6, dataCompAfterOp, contExpr$$1, (0, _ast.SynPat$$get_Range)(intoPat$$6)) : new _ast.SynExpr(12, "ForEach", new _ast.SequencePointInfoForForLoop(1, "NoSequencePointAtForLoop"), new _ast.SeqExprOnly(0, "SeqExprOnly", false), false, intoPat$$6, dataCompAfterOp, contExpr$$1, (0, _ast.SynPat$$get_Range)(intoPat$$6));
                                  return trans(true)(q$$1)(emptyVarSpace)(rebind$$1)(function (x$$104) {
                                    return x$$104;
                                  });
                                }
                              } else {
                                if (activePatternResult47998[4] == null) {} else {
                                  const intoPat$$5 = activePatternResult47998[4];
                                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIntoNeedsRestOfQuery)(), (0, _ast.SynPat$$get_Range)(intoPat$$5)));
                                }

                                return dataCompAfterOp;
                              }
                            }
                          } else {
                            const rebind$$2 = lastUsesBind ? new _ast.SynExpr(50, "LetOrUseBang", new _ast.SequencePointInfoForBinding(2, "NoSequencePointAtLetBinding"), false, false, varSpacePat$$2, dataCompPrior$$1, compClausesExpr, (0, _ast.SynExpr$$get_Range)(compClausesExpr)) : new _ast.SynExpr(12, "ForEach", new _ast.SequencePointInfoForForLoop(1, "NoSequencePointAtForLoop"), new _ast.SeqExprOnly(0, "SeqExprOnly", false), false, varSpacePat$$2, dataCompPrior$$1, compClausesExpr, (0, _ast.SynExpr$$get_Range)(compClausesExpr));
                            return trans(true)(q$$1)(varSpace$$3)(rebind$$2)(function (x$$105) {
                              return x$$105;
                            });
                          }
                        }
                      };

                      return consumeClauses(varSpace$$1, dataCompPriorToOp, comp$$5, false);
                    } else {
                      var $target$$427, innerComp1, innerComp2, m$$283, sp$$1, elseCompOpt, guardExpr$$5, isRecovery$$1, mIfToEndOfElseBranch, mIfToThen$$2, spIfToThen$$1, thenComp, binds$$8, innerComp$$7, isRec, m$$285, innerComp$$8, pat$$24, rhsExpr$$19, spBind$$10, innerComp$$9, isFromSource$$6, pat$$25, rhsExpr$$20, spBind$$11, id$$47, innerComp$$10, isFromSource$$7, pat$$26, rhsExpr$$22, spBind$$12, _innerComp, _isFromSource, _rhsExpr, _spBind$$1, pat$$27, clauses$$5, expr$$62, m$$290, spMatch$$2, clauses$$7, expr$$63, m$$291, spMatch$$3, _mTryToWith$$1, _mWithToLast, _spWith, clauses$$9, innerComp$$13, mTryToLast$$3, spTry$$3, isYield$$1, m$$293, yieldExpr, isYield$$2, m$$294, yieldExpr$$2;

                      if (comp$$5.tag === 26) {
                        if (comp$$5.fields[1]) {
                          $target$$427 = 0;
                          innerComp1 = comp$$5.fields[2];
                          innerComp2 = comp$$5.fields[3];
                          m$$283 = comp$$5.fields[4];
                          sp$$1 = comp$$5.fields[0];
                        } else {
                          $target$$427 = 12;
                        }
                      } else if (comp$$5.tag === 27) {
                        $target$$427 = 1;
                        elseCompOpt = comp$$5.fields[2];
                        guardExpr$$5 = comp$$5.fields[0];
                        isRecovery$$1 = comp$$5.fields[4];
                        mIfToEndOfElseBranch = comp$$5.fields[6];
                        mIfToThen$$2 = comp$$5.fields[5];
                        spIfToThen$$1 = comp$$5.fields[3];
                        thenComp = comp$$5.fields[1];
                      } else if (comp$$5.tag === 22) {
                        if (comp$$5.fields[1]) {
                          if (comp$$5.fields[2].tail != null) {
                            if (comp$$5.fields[2].head.fields[1].tag === 1) {
                              if (comp$$5.fields[2].tail.tail == null) {
                                $target$$427 = 3;
                                innerComp$$8 = comp$$5.fields[3];
                                pat$$24 = comp$$5.fields[2].head.fields[7];
                                rhsExpr$$19 = comp$$5.fields[2].head.fields[9];
                                spBind$$10 = comp$$5.fields[2].head.fields[11];
                              } else {
                                $target$$427 = 12;
                              }
                            } else {
                              $target$$427 = 12;
                            }
                          } else {
                            $target$$427 = 12;
                          }
                        } else {
                          $target$$427 = 2;
                          binds$$8 = comp$$5.fields[2];
                          innerComp$$7 = comp$$5.fields[3];
                          isRec = comp$$5.fields[0];
                          m$$285 = comp$$5.fields[4];
                        }
                      } else if (comp$$5.tag === 50) {
                        if (comp$$5.fields[1]) {
                          if (comp$$5.fields[3].tag === 2) {
                            if (comp$$5.fields[3].fields[0].tag === 1) {
                              if (comp$$5.fields[3].fields[2]) {
                                $target$$427 = 6;
                                _innerComp = comp$$5.fields[5];
                                _isFromSource = comp$$5.fields[2];
                                _rhsExpr = comp$$5.fields[4];
                                _spBind$$1 = comp$$5.fields[0];
                                pat$$27 = comp$$5.fields[3];
                              } else {
                                $target$$427 = 5;
                                id$$47 = comp$$5.fields[3].fields[1];
                                innerComp$$10 = comp$$5.fields[5];
                                isFromSource$$7 = comp$$5.fields[2];
                                pat$$26 = comp$$5.fields[3];
                                rhsExpr$$22 = comp$$5.fields[4];
                                spBind$$12 = comp$$5.fields[0];
                              }
                            } else {
                              $target$$427 = 6;
                              _innerComp = comp$$5.fields[5];
                              _isFromSource = comp$$5.fields[2];
                              _rhsExpr = comp$$5.fields[4];
                              _spBind$$1 = comp$$5.fields[0];
                              pat$$27 = comp$$5.fields[3];
                            }
                          } else if (comp$$5.fields[3].tag === 7) {
                            if (comp$$5.fields[3].fields[0].fields[0].tail != null) {
                              if (comp$$5.fields[3].fields[0].fields[0].tail.tail == null) {
                                $target$$427 = 5;
                                id$$47 = comp$$5.fields[3].fields[0].fields[0].head;
                                innerComp$$10 = comp$$5.fields[5];
                                isFromSource$$7 = comp$$5.fields[2];
                                pat$$26 = comp$$5.fields[3];
                                rhsExpr$$22 = comp$$5.fields[4];
                                spBind$$12 = comp$$5.fields[0];
                              } else {
                                $target$$427 = 6;
                                _innerComp = comp$$5.fields[5];
                                _isFromSource = comp$$5.fields[2];
                                _rhsExpr = comp$$5.fields[4];
                                _spBind$$1 = comp$$5.fields[0];
                                pat$$27 = comp$$5.fields[3];
                              }
                            } else {
                              $target$$427 = 6;
                              _innerComp = comp$$5.fields[5];
                              _isFromSource = comp$$5.fields[2];
                              _rhsExpr = comp$$5.fields[4];
                              _spBind$$1 = comp$$5.fields[0];
                              pat$$27 = comp$$5.fields[3];
                            }
                          } else {
                            $target$$427 = 6;
                            _innerComp = comp$$5.fields[5];
                            _isFromSource = comp$$5.fields[2];
                            _rhsExpr = comp$$5.fields[4];
                            _spBind$$1 = comp$$5.fields[0];
                            pat$$27 = comp$$5.fields[3];
                          }
                        } else {
                          $target$$427 = 4;
                          innerComp$$9 = comp$$5.fields[5];
                          isFromSource$$6 = comp$$5.fields[2];
                          pat$$25 = comp$$5.fields[3];
                          rhsExpr$$20 = comp$$5.fields[4];
                          spBind$$11 = comp$$5.fields[0];
                        }
                      } else if (comp$$5.tag === 17) {
                        if (comp$$5.fields[3]) {
                          $target$$427 = 12;
                        } else {
                          $target$$427 = 7;
                          clauses$$5 = comp$$5.fields[2];
                          expr$$62 = comp$$5.fields[1];
                          m$$290 = comp$$5.fields[4];
                          spMatch$$2 = comp$$5.fields[0];
                        }
                      } else if (comp$$5.tag === 51) {
                        if (comp$$5.fields[3]) {
                          $target$$427 = 12;
                        } else {
                          $target$$427 = 8;
                          clauses$$7 = comp$$5.fields[2];
                          expr$$63 = comp$$5.fields[1];
                          m$$291 = comp$$5.fields[4];
                          spMatch$$3 = comp$$5.fields[0];
                        }
                      } else if (comp$$5.tag === 23) {
                        $target$$427 = 9;
                        _mTryToWith$$1 = comp$$5.fields[1];
                        _mWithToLast = comp$$5.fields[3];
                        _spWith = comp$$5.fields[6];
                        clauses$$9 = comp$$5.fields[2];
                        innerComp$$13 = comp$$5.fields[0];
                        mTryToLast$$3 = comp$$5.fields[4];
                        spTry$$3 = comp$$5.fields[5];
                      } else if (comp$$5.tag === 49) {
                        $target$$427 = 10;
                        isYield$$1 = comp$$5.fields[0][0];
                        m$$293 = comp$$5.fields[2];
                        yieldExpr = comp$$5.fields[1];
                      } else if (comp$$5.tag === 48) {
                        $target$$427 = 11;
                        isYield$$2 = comp$$5.fields[0][0];
                        m$$294 = comp$$5.fields[2];
                        yieldExpr$$2 = comp$$5.fields[1];
                      } else {
                        $target$$427 = 12;
                      }

                      switch ($target$$427) {
                        case 0:
                          {
                            if (isQuery ? checkForBinaryApp(innerComp1) : false) {
                              return trans(true)(q$$1)(varSpace$$1)(innerComp2)(translatedCtxt);
                            } else {
                              if (isQuery ? !(0, _ast.SynExpr$$get_IsArbExprAndThusAlreadyReportedError)(innerComp1) : false) {
                                if (innerComp1.tag === 46) {} else {
                                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnrecognizedQueryOperator)(), (0, _ast.SynExpr$$get_RangeOfFirstPortion)(innerComp1)));
                                }
                              }

                              const matchValue$$148 = tryTrans(true)(false)(varSpace$$1)(innerComp1)(function (x$$106) {
                                return x$$106;
                              });

                              if (matchValue$$148 == null) {
                                if (innerComp1.tag === 52) {
                                  const rhsExpr$$18 = innerComp1.fields[0];
                                  const m$$284 = innerComp1.fields[1];
                                  const sp$$2 = sp$$1.tag === 1 ? new _ast.SequencePointInfoForBinding(1, "NoSequencePointAtDoBinding") : sp$$1.tag === 0 ? new _ast.SequencePointInfoForBinding(0, "SequencePointAtBinding", m$$284) : new _ast.SequencePointInfoForBinding(0, "SequencePointAtBinding", m$$284);
                                  return trans(true)(q$$1)(varSpace$$1)(new _ast.SynExpr(50, "LetOrUseBang", sp$$2, false, true, new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), (0, _ast.SynExpr$$get_Range)(rhsExpr$$18)), rhsExpr$$18, innerComp2, m$$284))(translatedCtxt);
                                } else {
                                  return trans(true)(q$$1)(varSpace$$1)(innerComp2)(function (holeFill$$2) {
                                    return translatedCtxt(new _ast.SynExpr(26, "Sequential", sp$$1, true, innerComp1, holeFill$$2, m$$283));
                                  });
                                }
                              } else {
                                const c$$31 = matchValue$$148;
                                const m1$$3 = innerComp1.tag === 27 ? innerComp1.fields[5] : innerComp1.tag === 17 ? innerComp1.fields[0].tag === 0 ? innerComp1.fields[0].fields[0] : (0, _ast.SynExpr$$get_Range)(innerComp1) : innerComp1.tag === 23 ? innerComp1.fields[5].tag === 0 ? innerComp1.fields[5].fields[0] : (0, _ast.SynExpr$$get_Range)(innerComp1) : innerComp1.tag === 24 ? innerComp1.fields[3].tag === 0 ? innerComp1.fields[3].fields[0] : (0, _ast.SynExpr$$get_Range)(innerComp1) : innerComp1.tag === 11 ? innerComp1.fields[0].tag === 0 ? innerComp1.fields[0].fields[0] : (0, _ast.SynExpr$$get_Range)(innerComp1) : innerComp1.tag === 12 ? innerComp1.fields[0].tag === 0 ? innerComp1.fields[0].fields[0] : (0, _ast.SynExpr$$get_Range)(innerComp1) : innerComp1.tag === 10 ? innerComp1.fields[0].tag === 0 ? innerComp1.fields[0].fields[0] : (0, _ast.SynExpr$$get_Range)(innerComp1) : (0, _ast.SynExpr$$get_Range)(innerComp1);

                                if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$283, ad$$24, "Combine", builderTy$$1).tail == null) {
                                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Combine"), m$$283));
                                }

                                if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$283, ad$$24, "Delay", builderTy$$1).tail == null) {
                                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Delay"), m$$283));
                                }

                                return translatedCtxt(mkSynCall("Combine", m1$$3, (0, _Types.L)(c$$31, (0, _Types.L)(mkSynCall("Delay", m1$$3, (0, _Types.L)((0, _ast.mkSynDelay)((0, _ast.SynExpr$$get_Range)(innerComp2), transNoQueryOps(innerComp2)), (0, _Types.L)())), (0, _Types.L)()))));
                              }
                            }
                          }

                        case 1:
                          {
                            if (elseCompOpt == null) {
                              let elseComp$$1;

                              if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mIfToThen$$2, ad$$24, "Zero", builderTy$$1).tail == null) {
                                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Zero"), mIfToThen$$2));
                              }

                              elseComp$$1 = mkSynCall("Zero", mIfToThen$$2, (0, _Types.L)());
                              return trans(true)(q$$1)(varSpace$$1)(thenComp)(function (holeFill$$3) {
                                return translatedCtxt(new _ast.SynExpr(27, "IfThenElse", guardExpr$$5, holeFill$$3, elseComp$$1, spIfToThen$$1, isRecovery$$1, mIfToThen$$2, mIfToEndOfElseBranch));
                              });
                            } else {
                              const elseComp = elseCompOpt;

                              if (isQuery) {
                                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIfThenElseMayNotBeUsedWithinQueries)(), mIfToThen$$2));
                              }

                              return translatedCtxt(new _ast.SynExpr(27, "IfThenElse", guardExpr$$5, transNoQueryOps(thenComp), transNoQueryOps(elseComp), spIfToThen$$1, isRecovery$$1, mIfToThen$$2, mIfToEndOfElseBranch));
                            }
                          }

                        case 2:
                          {
                            if (isQuery) {
                              const matchValue$$149 = (0, _List.map)(function (b$$50) {
                                return BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(1, "ValOrMemberBinding"), cenv$$134, env$$194, b$$50);
                              }, binds$$8);
                              var $target$$428;

                              if (matchValue$$149.tail != null) {
                                if (matchValue$$149.head.fields[1].tag === 1) {
                                  if (matchValue$$149.head.fields[2]) {
                                    $target$$428 = 1;
                                  } else if (matchValue$$149.head.fields[3]) {
                                    $target$$428 = 1;
                                  } else if (matchValue$$149.tail.tail == null) {
                                    if (!isRec) {
                                      $target$$428 = 0;
                                    } else {
                                      $target$$428 = 1;
                                    }
                                  } else {
                                    $target$$428 = 1;
                                  }
                                } else {
                                  $target$$428 = 1;
                                }
                              } else {
                                $target$$428 = 1;
                              }

                              switch ($target$$428) {
                                case 1:
                                  {
                                    const normalizedBindings = matchValue$$149;

                                    const failAt = function failAt(m$$286) {
                                      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNonSimpleLetBindingInQuery)(), m$$286));
                                    };

                                    if (normalizedBindings.tail != null) {
                                      const mBinding$$5 = normalizedBindings.head.fields[10];
                                      failAt(mBinding$$5);
                                    } else {
                                      failAt(m$$285);
                                    }

                                    break;
                                  }
                              }
                            }

                            const varSpace$$4 = addVarsToVarSpace(varSpace$$1, function (mQueryOp, env$$200) {
                              const matchValue$$150 = (0, _List.map)(function (b$$51) {
                                return BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(1, "ValOrMemberBinding"), cenv$$134, env$$200, b$$51);
                              }, binds$$8);

                              var $target$$429, _vis, pat$$23;

                              if (matchValue$$150.tail != null) {
                                if (matchValue$$150.head.fields[1].tag === 1) {
                                  if (matchValue$$150.head.fields[2]) {
                                    $target$$429 = 1;
                                  } else if (matchValue$$150.head.fields[3]) {
                                    $target$$429 = 1;
                                  } else if (matchValue$$150.tail.tail == null) {
                                    $target$$429 = 0;
                                    _vis = matchValue$$150.head.fields[0];
                                    pat$$23 = matchValue$$150.head.fields[8];
                                  } else {
                                    $target$$429 = 1;
                                  }
                                } else {
                                  $target$$429 = 1;
                                }
                              } else {
                                $target$$429 = 1;
                              }

                              switch ($target$$429) {
                                case 0:
                                  {
                                    const _holder$$5 = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink);

                                    try {
                                      const patternInput$$293 = TcMatchPattern(cenv$$134, (0, _ConstraintSolver.NewInferenceType)(), env$$200, tpenv$$210, pat$$23, null);
                                      return [patternInput$$293[2], patternInput$$293[3]];
                                    } finally {
                                      if ((0, _Util.isDisposable)(_holder$$5)) {
                                        _holder$$5.Dispose();
                                      }
                                    }
                                  }

                                case 1:
                                  {
                                    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationMayNotBeUsedInConjunctionWithNonSimpleLetBindings)(), mQueryOp));
                                  }
                              }
                            });
                            return trans(true)(q$$1)(varSpace$$4)(innerComp$$7)(function (holeFill$$4) {
                              return translatedCtxt(new _ast.SynExpr(22, "LetOrUse", isRec, false, binds$$8, holeFill$$4, m$$285));
                            });
                          }

                        case 3:
                          {
                            let bindRange;

                            if (spBind$$10.tag === 0) {
                              const m$$287 = spBind$$10.fields[0];
                              bindRange = m$$287;
                            } else {
                              bindRange = (0, _ast.SynExpr$$get_Range)(rhsExpr$$19);
                            }

                            if (isQuery) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUseMayNotBeUsedInQueries)(), bindRange));
                            }

                            const innerCompRange = (0, _ast.SynExpr$$get_Range)(innerComp$$8);
                            const consumeExpr = new _ast.SynExpr(16, "MatchLambda", false, innerCompRange, (0, _Types.L)(new _ast.SynMatchClause(0, "Clause", pat$$24, null, transNoQueryOps(innerComp$$8), innerCompRange, new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), (0, _Types.L)()), spBind$$10, innerCompRange);

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, bindRange, ad$$24, "Using", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Using"), bindRange));
                            }

                            return translatedCtxt(mkSynCall("Using", bindRange, (0, _Types.L)(rhsExpr$$19, (0, _Types.L)(consumeExpr, (0, _Types.L)()))));
                          }

                        case 4:
                          {
                            let bindRange$$1;

                            if (spBind$$11.tag === 0) {
                              const m$$288 = spBind$$11.fields[0];
                              bindRange$$1 = m$$288;
                            } else {
                              bindRange$$1 = (0, _ast.SynExpr$$get_Range)(rhsExpr$$20);
                            }

                            if (isQuery) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBindMayNotBeUsedInQueries)(), bindRange$$1));
                            }

                            const innerRange = (0, _ast.SynExpr$$get_Range)(innerComp$$9);

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, bindRange$$1, ad$$24, "Bind", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Bind"), bindRange$$1));
                            }

                            const varSpace$$5 = addVarsToVarSpace(varSpace$$1, function (_mCustomOp$$4, env$$201) {
                              const _holder$$6 = (0, _NameResolution.TemporarilySuspendReportingTypecheckResultsToSink)(cenv$$134.tcSink);

                              try {
                                const patternInput$$294 = TcMatchPattern(cenv$$134, (0, _ConstraintSolver.NewInferenceType)(), env$$201, tpenv$$210, pat$$25, null);
                                return [patternInput$$294[2], patternInput$$294[3]];
                              } finally {
                                if ((0, _Util.isDisposable)(_holder$$6)) {
                                  _holder$$6.Dispose();
                                }
                              }
                            });
                            const rhsExpr$$21 = isFromSource$$6 ? mkSourceExpr(rhsExpr$$20) : rhsExpr$$20;
                            return trans(true)(q$$1)(varSpace$$5)(innerComp$$9)(function (holeFill$$5) {
                              const consumeExpr$$1 = new _ast.SynExpr(16, "MatchLambda", false, (0, _ast.SynPat$$get_Range)(pat$$25), (0, _Types.L)(new _ast.SynMatchClause(0, "Clause", pat$$25, null, holeFill$$5, innerRange, new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), (0, _Types.L)()), spBind$$11, innerRange);
                              return translatedCtxt(mkSynCall("Bind", bindRange$$1, (0, _Types.L)(rhsExpr$$21, (0, _Types.L)(consumeExpr$$1, (0, _Types.L)()))));
                            });
                          }

                        case 5:
                          {
                            let bindRange$$2;

                            if (spBind$$12.tag === 0) {
                              const m$$289 = spBind$$12.fields[0];
                              bindRange$$2 = m$$289;
                            } else {
                              bindRange$$2 = (0, _ast.SynExpr$$get_Range)(rhsExpr$$22);
                            }

                            if (isQuery) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBindMayNotBeUsedInQueries)(), bindRange$$2));
                            }

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, bindRange$$2, ad$$24, "Using", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Using"), bindRange$$2));
                            }

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, bindRange$$2, ad$$24, "Bind", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Bind"), bindRange$$2));
                            }

                            const consumeExpr$$2 = new _ast.SynExpr(16, "MatchLambda", false, bindRange$$2, (0, _Types.L)(new _ast.SynMatchClause(0, "Clause", pat$$26, null, transNoQueryOps(innerComp$$10), (0, _ast.SynExpr$$get_Range)(innerComp$$10), new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), (0, _Types.L)()), spBind$$12, bindRange$$2);
                            const consumeExpr$$3 = mkSynCall("Using", bindRange$$2, (0, _Types.L)(new _ast.SynExpr(28, "Ident", id$$47), (0, _Types.L)(consumeExpr$$2, (0, _Types.L)())));
                            const consumeExpr$$4 = new _ast.SynExpr(16, "MatchLambda", false, bindRange$$2, (0, _Types.L)(new _ast.SynMatchClause(0, "Clause", pat$$26, null, consumeExpr$$3, (0, _ast.Ident$$get_idRange)(id$$47), new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget")), (0, _Types.L)()), spBind$$12, bindRange$$2);
                            const rhsExpr$$23 = isFromSource$$7 ? mkSourceExpr(rhsExpr$$22) : rhsExpr$$22;
                            return translatedCtxt(mkSynCall("Bind", bindRange$$2, (0, _Types.L)(rhsExpr$$23, (0, _Types.L)(consumeExpr$$4, (0, _Types.L)()))));
                          }

                        case 6:
                          {
                            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseBangBinding)(), (0, _ast.SynPat$$get_Range)(pat$$27)));
                          }

                        case 7:
                          {
                            let mMatch$$2;

                            if (spMatch$$2.tag === 0) {
                              const mMatch$$1 = spMatch$$2.fields[0];
                              mMatch$$2 = mMatch$$1;
                            } else {
                              mMatch$$2 = m$$290;
                            }

                            if (isQuery) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMatchMayNotBeUsedWithQuery)(), mMatch$$2));
                            }

                            const clauses$$6 = (0, _List.map)(function mapping$$71(_arg58) {
                              const sp$$3 = _arg58.fields[4];
                              const patm = _arg58.fields[3];
                              const pat$$28 = _arg58.fields[0];
                              const innerComp$$11 = _arg58.fields[2];
                              const cond = _arg58.fields[1];
                              return new _ast.SynMatchClause(0, "Clause", pat$$28, cond, transNoQueryOps(innerComp$$11), patm, sp$$3);
                            }, clauses$$5);
                            return translatedCtxt(new _ast.SynExpr(17, "Match", spMatch$$2, expr$$62, clauses$$6, false, m$$290));
                          }

                        case 8:
                          {
                            let mMatch$$4;

                            if (spMatch$$3.tag === 0) {
                              const mMatch$$3 = spMatch$$3.fields[0];
                              mMatch$$4 = mMatch$$3;
                            } else {
                              mMatch$$4 = m$$291;
                            }

                            if (isQuery) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMatchMayNotBeUsedWithQuery)(), mMatch$$4));
                            }

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mMatch$$4, ad$$24, "Bind", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Bind"), mMatch$$4));
                            }

                            const clauses$$8 = (0, _List.map)(function mapping$$72(_arg59) {
                              const sp$$4 = _arg59.fields[4];
                              const patm$$1 = _arg59.fields[3];
                              const pat$$29 = _arg59.fields[0];
                              const innerComp$$12 = _arg59.fields[2];
                              const cond$$1 = _arg59.fields[1];
                              return new _ast.SynMatchClause(0, "Clause", pat$$29, cond$$1, transNoQueryOps(innerComp$$12), patm$$1, sp$$4);
                            }, clauses$$7);
                            const consumeExpr$$5 = new _ast.SynExpr(16, "MatchLambda", false, mMatch$$4, clauses$$8, spMatch$$3, mMatch$$4);
                            return translatedCtxt(mkSynCall("Bind", mMatch$$4, (0, _Types.L)(expr$$63, (0, _Types.L)(consumeExpr$$5, (0, _Types.L)()))));
                          }

                        case 9:
                          {
                            let mTry$$3;

                            if (spTry$$3.tag === 0) {
                              const m$$292 = spTry$$3.fields[0];
                              mTry$$3 = m$$292;
                            } else {
                              mTry$$3 = mTryToLast$$3;
                            }

                            if (isQuery) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTryWithMayNotBeUsedInQueries)(), mTry$$3));
                            }

                            const clauses$$10 = (0, _List.map)(function mapping$$73(_arg60) {
                              const sp$$5 = _arg60.fields[4];
                              const patm$$2 = _arg60.fields[3];
                              const pat$$30 = _arg60.fields[0];
                              const cond$$2 = _arg60.fields[1];
                              const clauseComp = _arg60.fields[2];
                              return new _ast.SynMatchClause(0, "Clause", pat$$30, cond$$2, transNoQueryOps(clauseComp), patm$$2, sp$$5);
                            }, clauses$$9);
                            const consumeExpr$$6 = new _ast.SynExpr(16, "MatchLambda", true, mTryToLast$$3, clauses$$10, new _ast.SequencePointInfoForBinding(3, "NoSequencePointAtStickyBinding"), mTryToLast$$3);

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mTry$$3, ad$$24, "TryWith", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("TryWith"), mTry$$3));
                            }

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mTry$$3, ad$$24, "Delay", builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("Delay"), mTry$$3));
                            }

                            return translatedCtxt(mkSynCall("TryWith", mTry$$3, (0, _Types.L)(mkSynCall("Delay", mTry$$3, (0, _Types.L)(mkSynDelay2(transNoQueryOps(innerComp$$13)), (0, _Types.L)())), (0, _Types.L)(consumeExpr$$6, (0, _Types.L)()))));
                          }

                        case 10:
                          {
                            const yieldExpr$$1 = mkSourceExpr(yieldExpr);

                            if (isYield$$1) {
                              if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$293, ad$$24, "YieldFrom", builderTy$$1).tail == null) {
                                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("YieldFrom"), m$$293));
                              }

                              return translatedCtxt(mkSynCall("YieldFrom", m$$293, (0, _Types.L)(yieldExpr$$1, (0, _Types.L)())));
                            } else {
                              if (isQuery) {
                                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcReturnMayNotBeUsedInQueries)(), m$$293));
                              }

                              if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$293, ad$$24, "ReturnFrom", builderTy$$1).tail == null) {
                                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)("ReturnFrom"), m$$293));
                                return translatedCtxt(yieldExpr$$1);
                              } else {
                                return translatedCtxt(mkSynCall("ReturnFrom", m$$293, (0, _Types.L)(yieldExpr$$1, (0, _Types.L)())));
                              }
                            }
                          }

                        case 11:
                          {
                            const methName = isYield$$2 ? "Yield" : "Return";

                            if (isQuery ? !isYield$$2 : false) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcReturnMayNotBeUsedInQueries)(), m$$294));
                            }

                            if (TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$294, ad$$24, methName, builderTy$$1).tail == null) {
                              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRequireBuilderMethod$$Z721C83C5)(methName), m$$294));
                            }

                            return translatedCtxt(mkSynCall(methName, m$$294, (0, _Types.L)(yieldExpr$$2, (0, _Types.L)())));
                          }

                        case 12:
                          {
                            return null;
                          }
                      }
                    }
                  }
              }
            }
          };
        };
      };
    };
  };

  const transNoQueryOps = function transNoQueryOps(comp$$6) {
    return trans(true)(false)(emptyVarSpace)(comp$$6)(function (x$$107) {
      return x$$107;
    });
  };

  const trans = function trans(firstTry$$1) {
    return function (q$$2) {
      return function (varSpace$$6) {
        return function (comp$$7) {
          return function (translatedCtxt$$1) {
            const matchValue$$151 = tryTrans(firstTry$$1)(q$$2)(varSpace$$6)(comp$$7)(translatedCtxt$$1);

            if (matchValue$$151 == null) {
              if (comp$$7.tag === 52) {
                const rhsExpr$$24 = comp$$7.fields[0];
                const m$$295 = comp$$7.fields[1];
                const mUnit = (0, _ast.SynExpr$$get_Range)(rhsExpr$$24);
                const rhsExpr$$25 = mkSourceExpr(rhsExpr$$24);

                if (isQuery) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBindMayNotBeUsedInQueries)(), m$$295));
                }

                const bodyExpr$$8 = TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, m$$295, ad$$24, "Return", builderTy$$1).tail == null ? new _ast.SynExpr(47, "ImplicitZero", m$$295) : new _ast.SynExpr(48, "YieldOrReturn", [false, true], new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), m$$295), m$$295);
                return trans(true)(q$$2)(varSpace$$6)(new _ast.SynExpr(50, "LetOrUseBang", new _ast.SequencePointInfoForBinding(1, "NoSequencePointAtDoBinding"), false, false, new _ast.SynPat(0, "Const", new _ast.SynConst(0, "Unit"), mUnit), rhsExpr$$25, bodyExpr$$8, m$$295))(translatedCtxt$$1);
              } else if (isQuery ? checkForBinaryApp(comp$$7) : false) {
                return trans(true)(q$$2)(varSpace$$6)(new _ast.SynExpr(47, "ImplicitZero", (0, _ast.SynExpr$$get_Range)(comp$$7)))(translatedCtxt$$1);
              } else {
                if (isQuery ? !(0, _ast.SynExpr$$get_IsArbExprAndThusAlreadyReportedError)(comp$$7) : false) {
                  if (comp$$7.tag === 46) {} else {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnrecognizedQueryOperator)(), (0, _ast.SynExpr$$get_RangeOfFirstPortion)(comp$$7)));
                  }
                }

                return trans(true)(q$$2)(varSpace$$6)(new _ast.SynExpr(47, "ImplicitZero", (0, _ast.SynExpr$$get_Range)(comp$$7)))(function (holeFill$$6) {
                  return translatedCtxt$$1(new _ast.SynExpr(26, "Sequential", new _ast.SequencePointInfoForSeq(2, "SuppressSequencePointOnStmtOfSequential"), true, comp$$7, holeFill$$6, (0, _ast.SynExpr$$get_Range)(comp$$7)));
                });
              }
            } else {
              const e$$89 = matchValue$$151;
              return e$$89;
            }
          };
        };
      };
    };
  };

  const basicSynExpr = trans(true)(hasCustomOperations())((0, _illib.LazyWithContext$00602$$$NotLazy$$2B595)([(0, _Types.L)(), env$$194]))(comp$$3)(function (holeFill$$7) {
    return holeFill$$7;
  });
  const delayedExpr = TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mBuilderVal, ad$$24, "Delay", builderTy$$1).tail == null ? basicSynExpr : mkSynCall("Delay", mBuilderVal, (0, _Types.L)(mkSynDelay2(basicSynExpr), (0, _Types.L)()));
  const quotedSynExpr = isAutoQuote ? new _ast.SynExpr(1, "Quote", (0, _ast.mkSynIdGet)((0, _range.range$$MakeSynthetic)(mBuilderVal), (0, _PrettyNaming.CompileOpName)("<@ @>")), false, delayedExpr, true, mWhole) : delayedExpr;
  const runExpr = TryFindIntrinsicOrExtensionMethInfo(cenv$$134, env$$194, mBuilderVal, ad$$24, "Run", builderTy$$1).tail == null ? quotedSynExpr : mkSynCall("Run", mBuilderVal, (0, _Types.L)(quotedSynExpr, (0, _Types.L)()));
  let lambdaExpr;
  const mBuilderVal$$1 = (0, _range.range$$MakeSynthetic)(mBuilderVal);
  lambdaExpr = new _ast.SynExpr(15, "Lambda", false, false, new _ast.SynSimplePats(0, "SimplePats", (0, _Types.L)((0, _ast.mkSynSimplePatVar)(false, (0, _ast.mkSynId)(mBuilderVal$$1, builderValName)), (0, _Types.L)()), mBuilderVal$$1), runExpr, mBuilderVal$$1);
  const env$$202 = comp$$3.tag === 48 ? comp$$3.fields[0][0] ? new TcEnv(env$$194.eNameResEnv, env$$194.eUngeneralizableItems, env$$194.ePath, env$$194.eCompPath, env$$194.eAccessPath, env$$194.eAccessRights, env$$194.eInternalsVisibleCompPaths, env$$194.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(8, "YieldInComputationExpression"), env$$194.eFamilyType, env$$194.eCtorInfo, env$$194.eCallerMemberName) : comp$$3.fields[0][1] ? new TcEnv(env$$194.eNameResEnv, env$$194.eUngeneralizableItems, env$$194.ePath, env$$194.eCompPath, env$$194.eAccessPath, env$$194.eAccessRights, env$$194.eInternalsVisibleCompPaths, env$$194.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(7, "ReturnInComputationExpression"), env$$194.eFamilyType, env$$194.eCtorInfo, env$$194.eCallerMemberName) : env$$194 : env$$194;
  const patternInput$$295 = TcExpr(cenv$$134, (0, _TastOps.op_MinusMinusGreater)(builderTy$$1, overallTy$$22), env$$202, tpenv$$210, lambdaExpr);
  const coreExpr = (0, _TastOps.mkApps)(cenv$$134.g, [patternInput$$295[0], (0, _TastOps.tyOfExpr)(cenv$$134.g, patternInput$$295[0])], (0, _Types.L)(), (0, _Types.L)(interpExpr$$1, (0, _Types.L)()), mBuilderVal);
  return [coreExpr, patternInput$$295[1]];
}

function TcSequenceExpression(cenv$$135, env$$203, tpenv$$212, comp$$8, overallTy$$23, m$$296) {
  const genEnumElemTy = (0, _ConstraintSolver.NewInferenceType)();
  UnifyTypes(cenv$$135, env$$203, m$$296, overallTy$$23, (0, _TastOps.mkSeqTy)(cenv$$135.g, genEnumElemTy));
  const flex$$8 = !(0, _TastOps.isTyparTy)(cenv$$135.g, genEnumElemTy);

  const mkDelayedExpr = function mkDelayedExpr(coreExpr$$1) {
    const m$$297 = (0, _TastOps.Expr$002Eget_Range)(coreExpr$$1);
    const overallTy$$24 = (0, _TastOps.tyOfExpr)(cenv$$135.g, coreExpr$$1);
    return mkSeqDelay(cenv$$135, env$$203, m$$297, overallTy$$24, coreExpr$$1);
  };

  const tryTcSequenceExprBody = function tryTcSequenceExprBody(env$$204) {
    return function (genOuterTy) {
      return function (tpenv$$213) {
        return function (comp$$9) {
          var yexpr, vf$$21, v$$45, genEnumElemTy$$1;

          var $target$$430, _isFromSource$$1, _seqExprOnly$$1, _spBind$$2, innerComp$$14, m$$298, pat$$31, pseudoEnumExpr$$1, dir$$4, finish$$3, id$$48, innerComp$$15, m$$299, spBind$$13, start$$3, _m$$3, _spWhile, guardExpr$$6, innerComp$$16, _mTryToLast, _spFinally$$1, _spTry, innerComp$$17, unwindExpr$$1, m$$300, m$$301, _rhsExpr$$1, m$$302, innerComp1$$1, innerComp2$$1, m$$303, sp$$6, _isRecovery, elseCompOpt$$1, guardExpr$$9, mIfToEndOfElseBranch$$1, mIfToThen$$3, spIfToThen$$2, thenComp$$1, _isRec, _spBind$$3, _vis$$1, innerComp$$18, pat$$32, rhsExpr$$26, wholeExprMark, m$$304, clauses$$11, expr$$64, spMatch$$4, mTryToWith, isYield$$3, m$$305, yieldExpr$$3, isYield$$4, m$$306, yieldExpr$$4;

          if (comp$$9.tag === 12) {
            $target$$430 = 0;
            _isFromSource$$1 = comp$$9.fields[2];
            _seqExprOnly$$1 = comp$$9.fields[1].fields[0];
            _spBind$$2 = comp$$9.fields[0];
            innerComp$$14 = comp$$9.fields[5];
            m$$298 = comp$$9.fields[6];
            pat$$31 = comp$$9.fields[3];
            pseudoEnumExpr$$1 = comp$$9.fields[4];
          } else if (comp$$9.tag === 11) {
            $target$$430 = 1;
            dir$$4 = comp$$9.fields[3];
            finish$$3 = comp$$9.fields[4];
            id$$48 = comp$$9.fields[1];
            innerComp$$15 = comp$$9.fields[5];
            m$$299 = comp$$9.fields[6];
            spBind$$13 = comp$$9.fields[0];
            start$$3 = comp$$9.fields[2];
          } else if (comp$$9.tag === 10) {
            $target$$430 = 2;
            _m$$3 = comp$$9.fields[3];
            _spWhile = comp$$9.fields[0];
            guardExpr$$6 = comp$$9.fields[1];
            innerComp$$16 = comp$$9.fields[2];
          } else if (comp$$9.tag === 24) {
            $target$$430 = 3;
            _mTryToLast = comp$$9.fields[2];
            _spFinally$$1 = comp$$9.fields[4];
            _spTry = comp$$9.fields[3];
            innerComp$$17 = comp$$9.fields[0];
            unwindExpr$$1 = comp$$9.fields[1];
          } else if (comp$$9.tag === 0) {
            $target$$430 = 4;
            m$$300 = comp$$9.fields[3];
          } else if (comp$$9.tag === 47) {
            $target$$430 = 5;
            m$$301 = comp$$9.fields[0];
          } else if (comp$$9.tag === 52) {
            $target$$430 = 6;
            _rhsExpr$$1 = comp$$9.fields[0];
            m$$302 = comp$$9.fields[1];
          } else if (comp$$9.tag === 26) {
            if (comp$$9.fields[1]) {
              $target$$430 = 7;
              innerComp1$$1 = comp$$9.fields[2];
              innerComp2$$1 = comp$$9.fields[3];
              m$$303 = comp$$9.fields[4];
              sp$$6 = comp$$9.fields[0];
            } else {
              $target$$430 = 16;
            }
          } else if (comp$$9.tag === 27) {
            $target$$430 = 8;
            _isRecovery = comp$$9.fields[4];
            elseCompOpt$$1 = comp$$9.fields[2];
            guardExpr$$9 = comp$$9.fields[0];
            mIfToEndOfElseBranch$$1 = comp$$9.fields[6];
            mIfToThen$$3 = comp$$9.fields[5];
            spIfToThen$$2 = comp$$9.fields[3];
            thenComp$$1 = comp$$9.fields[1];
          } else if (comp$$9.tag === 22) {
            if (comp$$9.fields[1]) {
              if (comp$$9.fields[2].tail != null) {
                if (comp$$9.fields[2].head.fields[1].tag === 1) {
                  if (comp$$9.fields[2].tail.tail == null) {
                    $target$$430 = 10;
                    _isRec = comp$$9.fields[0];
                    _spBind$$3 = comp$$9.fields[2].head.fields[11];
                    _vis$$1 = comp$$9.fields[2].head.fields[0];
                    innerComp$$18 = comp$$9.fields[3];
                    pat$$32 = comp$$9.fields[2].head.fields[7];
                    rhsExpr$$26 = comp$$9.fields[2].head.fields[9];
                    wholeExprMark = comp$$9.fields[4];
                  } else {
                    $target$$430 = 16;
                  }
                } else {
                  $target$$430 = 16;
                }
              } else {
                $target$$430 = 16;
              }
            } else {
              $target$$430 = 9;
            }
          } else if (comp$$9.tag === 50) {
            $target$$430 = 11;
            m$$304 = comp$$9.fields[6];
          } else if (comp$$9.tag === 17) {
            if (comp$$9.fields[3]) {
              $target$$430 = 16;
            } else {
              $target$$430 = 12;
              clauses$$11 = comp$$9.fields[2];
              expr$$64 = comp$$9.fields[1];
              spMatch$$4 = comp$$9.fields[0];
            }
          } else if (comp$$9.tag === 23) {
            $target$$430 = 13;
            mTryToWith = comp$$9.fields[1];
          } else if (comp$$9.tag === 49) {
            $target$$430 = 14;
            isYield$$3 = comp$$9.fields[0][0];
            m$$305 = comp$$9.fields[2];
            yieldExpr$$3 = comp$$9.fields[1];
          } else if (comp$$9.tag === 48) {
            $target$$430 = 15;
            isYield$$4 = comp$$9.fields[0][0];
            m$$306 = comp$$9.fields[2];
            yieldExpr$$4 = comp$$9.fields[1];
          } else {
            $target$$430 = 16;
          }

          switch ($target$$430) {
            case 0:
              {
                const patternInput$$296 = TcExprOfUnknownType(cenv$$135, env$$204, tpenv$$213, pseudoEnumExpr$$1);
                const patternInput$$297 = ConvertArbitraryExprToEnumerable(cenv$$135, patternInput$$296[1], env$$204, patternInput$$296[0]);
                const patternInput$$298 = TcMatchPattern(cenv$$135, patternInput$$297[1], env$$204, patternInput$$296[2], pat$$31, null);
                const patternInput$$299 = tcSequenceExprBody(patternInput$$298[3])(genOuterTy)(patternInput$$298[4])(innerComp$$14);
                const matchValue$$154 = [patternInput$$298[0], patternInput$$298[2], patternInput$$299[0]];
                var $target$$431, genEnumElemTy$$2, v$$46, vf$$22, vs$$10, yexpr$$1;

                if (matchValue$$154[0].tag === 2) {
                  if (matchValue$$154[0].fields[0].tag === 1) {
                    if (matchValue$$154[2].tag === 5) {
                      if (matchValue$$154[2].fields[0].tag === 1) {
                        if (matchValue$$154[2].fields[2].tail != null) {
                          if (matchValue$$154[2].fields[2].tail.tail == null) {
                            if (matchValue$$154[2].fields[3].tail != null) {
                              if (matchValue$$154[2].fields[3].tail.tail == null) {
                                if (yexpr = matchValue$$154[2].fields[3].head, (vf$$21 = matchValue$$154[2].fields[0].fields[0], (v$$45 = matchValue$$154[0].fields[1].fields[0], (genEnumElemTy$$1 = matchValue$$154[2].fields[2].head, (0, _List.length)(matchValue$$154[1]) === 1 ? (0, _TastOps.valRefEq)(cenv$$135.g, vf$$21, (0, _TcGlobals.TcGlobals$$get_seq_singleton_vref)(cenv$$135.g)) : false)))) {
                                  $target$$431 = 0;
                                  genEnumElemTy$$2 = matchValue$$154[2].fields[2].head;
                                  v$$46 = matchValue$$154[0].fields[1].fields[0];
                                  vf$$22 = matchValue$$154[2].fields[0].fields[0];
                                  vs$$10 = matchValue$$154[1];
                                  yexpr$$1 = matchValue$$154[2].fields[3].head;
                                } else {
                                  $target$$431 = 1;
                                }
                              } else {
                                $target$$431 = 1;
                              }
                            } else {
                              $target$$431 = 1;
                            }
                          } else {
                            $target$$431 = 1;
                          }
                        } else {
                          $target$$431 = 1;
                        }
                      } else {
                        $target$$431 = 1;
                      }
                    } else {
                      $target$$431 = 1;
                    }
                  } else {
                    $target$$431 = 1;
                  }
                } else {
                  $target$$431 = 1;
                }

                switch ($target$$431) {
                  case 0:
                    {
                      const enumExprMark = (0, _TastOps.Expr$002Eget_Range)(patternInput$$297[0]);
                      const lam$$3 = (0, _TastOps.mkLambda)(enumExprMark, v$$46, yexpr$$1, genEnumElemTy$$2);
                      const enumExpr$$4 = (0, _TastOps.mkCoerceIfNeeded)(cenv$$135.g, (0, _TastOps.mkSeqTy)(cenv$$135.g, patternInput$$297[1]), (0, _TastOps.tyOfExpr)(cenv$$135.g, patternInput$$297[0]), patternInput$$297[0]);
                      return [(0, _TastOps.mkCallSeqMap)(cenv$$135.g, m$$298, patternInput$$297[1], genEnumElemTy$$2, lam$$3, enumExpr$$4), patternInput$$299[1]];
                    }

                  case 1:
                    {
                      const enumExprMark$$1 = (0, _TastOps.Expr$002Eget_Range)(patternInput$$297[0]);
                      const patternInput$$300 = compileSeqExprMatchClauses(cenv$$135, env$$204, enumExprMark$$1, patternInput$$298[0], patternInput$$298[2], patternInput$$299[0], patternInput$$297[1], genOuterTy);
                      const lam$$4 = (0, _TastOps.mkLambda)(enumExprMark$$1, patternInput$$300[0], patternInput$$300[1], (0, _TastOps.tyOfExpr)(cenv$$135.g, patternInput$$300[1]));
                      return [mkSeqCollect(cenv$$135, env$$204, m$$298, patternInput$$297[1], genOuterTy, lam$$4, patternInput$$297[0]), patternInput$$299[1]];
                    }
                }
              }

            case 1:
              {
                return tcSequenceExprBody(env$$204)(genOuterTy)(tpenv$$213)(elimFastIntegerForLoop(spBind$$13, id$$48, start$$3, dir$$4, finish$$3, innerComp$$15, m$$299));
              }

            case 2:
              {
                const patternInput$$301 = TcExpr(cenv$$135, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$135.g), env$$204, tpenv$$213, guardExpr$$6);
                const patternInput$$302 = tcSequenceExprBody(env$$204)(genOuterTy)(patternInput$$301[1])(innerComp$$16);
                const guardExprMark = (0, _TastOps.Expr$002Eget_Range)(patternInput$$301[0]);
                const guardExpr$$8 = (0, _TastOps.mkUnitDelayLambda)(cenv$$135.g, guardExprMark, patternInput$$301[0]);
                const innerExpr$$5 = mkDelayedExpr(patternInput$$302[0]);
                return [mkSeqFromFunctions(cenv$$135, env$$204, guardExprMark, genOuterTy, guardExpr$$8, innerExpr$$5), patternInput$$302[1]];
              }

            case 3:
              {
                const patternInput$$303 = tcSequenceExprBody(env$$204)(genOuterTy)(tpenv$$213)(innerComp$$17);
                const patternInput$$304 = TcExpr(cenv$$135, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$135.g), env$$204, patternInput$$303[1], unwindExpr$$1);
                const unwindExprMark = (0, _TastOps.Expr$002Eget_Range)(patternInput$$304[0]);
                const unwindExpr$$3 = (0, _TastOps.mkUnitDelayLambda)(cenv$$135.g, unwindExprMark, patternInput$$304[0]);
                const innerExpr$$7 = mkDelayedExpr(patternInput$$303[0]);
                const innerExprMark = (0, _TastOps.Expr$002Eget_Range)(innerExpr$$7);
                return [mkSeqFinally(cenv$$135, env$$204, innerExprMark, genOuterTy, innerExpr$$7, unwindExpr$$3), patternInput$$304[1]];
              }

            case 4:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructIsAmbiguousInSequenceExpression)(), m$$300));
              }

            case 5:
              {
                return [mkSeqEmpty(cenv$$135, env$$204, m$$301, genOuterTy), tpenv$$213];
              }

            case 6:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDoBangIllegalInSequenceExpression)(), m$$302));
              }

            case 7:
              {
                const matchValue$$155 = tryTcSequenceExprBody(env$$204)(genOuterTy)(tpenv$$213)(innerComp1$$1);

                if (matchValue$$155 != null) {
                  const tpenv$$223 = matchValue$$155[1];
                  const innerExpr1$$1 = matchValue$$155[0];
                  const patternInput$$307 = tcSequenceExprBody(env$$204)(genOuterTy)(tpenv$$223)(innerComp2$$1);
                  const innerExpr2$$2 = mkDelayedExpr(patternInput$$307[0]);
                  return [mkSeqAppend(cenv$$135, env$$204, (0, _ast.SynExpr$$get_Range)(innerComp1$$1), genOuterTy, innerExpr1$$1, innerExpr2$$2), patternInput$$307[1]];
                } else {
                  const patternInput$$305 = TcStmtThatCantBeCtorBody(cenv$$135, env$$204, tpenv$$213, innerComp1$$1);
                  const patternInput$$306 = tcSequenceExprBody(env$$204)(genOuterTy)(patternInput$$305[1])(innerComp2$$1);
                  return [new _tast.Expr(2, "Sequential", patternInput$$305[0], patternInput$$306[0], new _tast.SequentialOpKind(0, "NormalSeq"), sp$$6, m$$303), patternInput$$306[1]];
                }
              }

            case 8:
              {
                const patternInput$$308 = TcExpr(cenv$$135, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$135.g), env$$204, tpenv$$213, guardExpr$$9);
                const patternInput$$309 = tcSequenceExprBody(env$$204)(genOuterTy)(patternInput$$308[1])(thenComp$$1);
                let elseComp$$2;

                if (elseCompOpt$$1 == null) {
                  elseComp$$2 = new _ast.SynExpr(47, "ImplicitZero", mIfToThen$$3);
                } else {
                  const c$$32 = elseCompOpt$$1;
                  elseComp$$2 = c$$32;
                }

                const patternInput$$310 = tcSequenceExprBody(env$$204)(genOuterTy)(patternInput$$309[1])(elseComp$$2);
                return [(0, _TastOps.mkCond)(spIfToThen$$2, new _ast.SequencePointInfoForTarget(0, "SequencePointAtTarget"), mIfToEndOfElseBranch$$1, genOuterTy, patternInput$$308[0], patternInput$$309[0], patternInput$$310[0]), patternInput$$310[1]];
              }

            case 9:
              {
                return TcLinearExprs(function (ty$$89, envinner$$15, tpenv$$228, e$$90) {
                  return tcSequenceExprBody(envinner$$15)(ty$$89)(tpenv$$228)(e$$90);
                }, cenv$$135, env$$204, overallTy$$23, tpenv$$213, true, comp$$9, function (x$$108) {
                  return x$$108;
                });
              }

            case 10:
              {
                const bindPatTy$$1 = (0, _ConstraintSolver.NewInferenceType)();
                const inputExprTy = (0, _ConstraintSolver.NewInferenceType)();
                const patternInput$$311 = TcMatchPattern(cenv$$135, bindPatTy$$1, env$$204, tpenv$$213, pat$$32, null);
                UnifyTypes(cenv$$135, env$$204, m$$296, inputExprTy, bindPatTy$$1);
                const patternInput$$312 = TcExpr(cenv$$135, inputExprTy, env$$204, patternInput$$311[4], rhsExpr$$26);
                const patternInput$$313 = tcSequenceExprBody(patternInput$$311[3])(genOuterTy)(patternInput$$312[1])(innerComp$$18);
                const inputExprMark$$1 = (0, _TastOps.Expr$002Eget_Range)(patternInput$$312[0]);
                const patternInput$$314 = compileSeqExprMatchClauses(cenv$$135, env$$204, inputExprMark$$1, patternInput$$311[0], patternInput$$311[2], patternInput$$313[0], bindPatTy$$1, genOuterTy);
                const consumeExpr$$7 = (0, _TastOps.mkLambda)(wholeExprMark, patternInput$$314[0], patternInput$$314[1], genOuterTy);
                return [mkSeqUsing(cenv$$135, env$$204, wholeExprMark, bindPatTy$$1, genOuterTy, patternInput$$312[0], consumeExpr$$7), patternInput$$313[1]];
              }

            case 11:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUseForInSequenceExpression)(), m$$304));
              }

            case 12:
              {
                const patternInput$$315 = TcExprOfUnknownType(cenv$$135, env$$204, tpenv$$213, expr$$64);
                const patternInput$$318 = (0, _List.mapFold)(function (tpenv$$233, _arg61) {
                  const sp$$7 = _arg61.fields[4];
                  const pat$$33 = _arg61.fields[0];
                  const innerComp$$19 = _arg61.fields[2];
                  const cond$$3 = _arg61.fields[1];
                  const patternInput$$316 = TcMatchPattern(cenv$$135, patternInput$$315[1], env$$204, tpenv$$233, pat$$33, cond$$3);
                  const patternInput$$317 = tcSequenceExprBody(patternInput$$316[3])(genOuterTy)(patternInput$$316[4])(innerComp$$19);
                  return [new _PatternMatchCompilation.TypedMatchClause(0, "TClause", patternInput$$316[0], patternInput$$316[1], new _tast.DecisionTreeTarget(0, "TTarget", patternInput$$316[2], patternInput$$317[0], sp$$7), (0, _PatternMatchCompilation.Pattern$$get_Range)(patternInput$$316[0])), patternInput$$317[1]];
                }, patternInput$$315[2], clauses$$11);
                const inputExprTy$$1 = (0, _TastOps.tyOfExpr)(cenv$$135.g, patternInput$$315[0]);
                const inputExprMark$$2 = (0, _TastOps.Expr$002Eget_Range)(patternInput$$315[0]);
                const patternInput$$319 = CompilePatternForMatchClauses(cenv$$135, env$$204, inputExprMark$$2, inputExprMark$$2, true, new _PatternMatchCompilation.ActionOnFailure(0, "ThrowIncompleteMatchException"), inputExprTy$$1, genOuterTy, patternInput$$318[0]);
                return [(0, _TastOps.mkLet)(spMatch$$4, inputExprMark$$2, patternInput$$319[0], patternInput$$315[0], patternInput$$319[1]), patternInput$$318[1]];
              }

            case 13:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTryIllegalInSequenceExpression)(), mTryToWith));
              }

            case 14:
              {
                const patternInput$$320 = TcExprOfUnknownType(cenv$$135, env$$204, tpenv$$213, yieldExpr$$3);

                if (!isYield$$3) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUseYieldBangForMultipleResults)(), m$$305));
                }

                (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$204), cenv$$135.css, m$$305, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), genOuterTy, patternInput$$320[1]);
                return [(0, _TastOps.mkCoerceExpr)(patternInput$$320[0], genOuterTy, m$$305, patternInput$$320[1]), patternInput$$320[2]];
              }

            case 15:
              {
                const genResultTy$$7 = (0, _ConstraintSolver.NewInferenceType)();

                if (!isYield$$4) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcSeqResultsUseYield)(), m$$306));
                }

                UnifyTypes(cenv$$135, env$$204, m$$306, genOuterTy, (0, _TastOps.mkSeqTy)(cenv$$135.g, genResultTy$$7));
                const patternInput$$321 = TcExprFlex(cenv$$135, flex$$8, true, genResultTy$$7, env$$204, tpenv$$213, yieldExpr$$4);
                return [(0, _TastOps.mkCallSeqSingleton)(cenv$$135.g, m$$306, genResultTy$$7, patternInput$$321[0]), patternInput$$321[1]];
              }

            case 16:
              {
                return null;
              }
          }
        };
      };
    };
  };

  const tcSequenceExprBody = function tcSequenceExprBody(env$$205) {
    return function (genOuterTy$$1) {
      return function (tpenv$$239) {
        return function (comp$$10) {
          const matchValue$$156 = tryTcSequenceExprBody(env$$205)(genOuterTy$$1)(tpenv$$239)(comp$$10);

          if (matchValue$$156 == null) {
            const m$$307 = (0, _ast.SynExpr$$get_Range)(comp$$10);
            const env$$206 = new TcEnv(env$$205.eNameResEnv, env$$205.eUngeneralizableItems, env$$205.ePath, env$$205.eCompPath, env$$205.eAccessPath, env$$205.eAccessRights, env$$205.eInternalsVisibleCompPaths, env$$205.eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(13, "SequenceExpression", genOuterTy$$1), env$$205.eFamilyType, env$$205.eCtorInfo, env$$205.eCallerMemberName);
            const patternInput$$322 = TcStmtThatCantBeCtorBody(cenv$$135, env$$206, tpenv$$239, comp$$10);
            return [new _tast.Expr(2, "Sequential", patternInput$$322[0], mkSeqEmpty(cenv$$135, env$$206, m$$307, genOuterTy$$1), new _tast.SequentialOpKind(0, "NormalSeq"), new _ast.SequencePointInfoForSeq(2, "SuppressSequencePointOnStmtOfSequential"), m$$307), patternInput$$322[1]];
          } else {
            const e$$91 = matchValue$$156;
            return e$$91;
          }
        };
      };
    };
  };

  const patternInput$$323 = tcSequenceExprBody(env$$203)(overallTy$$23)(tpenv$$212)(comp$$8);
  const delayedExpr$$1 = mkDelayedExpr(patternInput$$323[0]);
  return [delayedExpr$$1, patternInput$$323[1]];
}

function Propagate(cenv$$136, overallTy$$25, env$$207, tpenv$$242, expr$$66, exprty$$6, delayed$$9) {
  const propagate = function propagate(isAddrOf, delayedList, mExpr$$3, exprty$$7) {
    var vf$$23;

    var $target$$432, _mTypeArgs, delayedList$0027, mExprAndTypeArgs, arg$$18, delayedList$0027$$1, mExprAndArg;

    if (delayedList.tail != null) {
      if (delayedList.head.tag === 4) {
        $target$$432 = 1;
      } else if (delayedList.head.tag === 2) {
        $target$$432 = 1;
      } else if (delayedList.head.tag === 0) {
        $target$$432 = 2;
        _mTypeArgs = delayedList.head.fields[1];
        delayedList$0027 = delayedList.tail;
        mExprAndTypeArgs = delayedList.head.fields[2];
      } else if (delayedList.head.tag === 1) {
        $target$$432 = 3;
        arg$$18 = delayedList.head.fields[1];
        delayedList$0027$$1 = delayedList.tail;
        mExprAndArg = delayedList.head.fields[2];
      } else {
        $target$$432 = 1;
      }
    } else {
      $target$$432 = 0;
    }

    switch ($target$$432) {
      case 0:
        {
          if (!(delayed$$9.tail == null)) {
            let exprty$$8;

            if (isAddrOf ? (0, _TastOps.isByrefTy)(cenv$$136.g, exprty$$7) : false) {
              exprty$$8 = (0, _TastOps.mkByrefTyWithInference)(cenv$$136.g, (0, _TastOps.destByrefTy)(cenv$$136.g, exprty$$7), (0, _ConstraintSolver.NewByRefKindInferenceType)(cenv$$136.g, mExpr$$3));
            } else if ((0, _TastOps.isByrefTy)(cenv$$136.g, exprty$$7)) {
              if ((0, _TastOps.isByrefTy)(cenv$$136.g, overallTy$$25)) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcByrefReturnImplicitlyDereferenced)(), mExpr$$3));
              }

              exprty$$8 = (0, _TastOps.destByrefTy)(cenv$$136.g, exprty$$7);
            } else {
              exprty$$8 = exprty$$7;
            }

            UnifyTypesAndRecover(cenv$$136, env$$207, mExpr$$3, overallTy$$25, exprty$$8);
          }

          break;
        }

      case 2:
        {
          propagate(isAddrOf, delayedList$0027, mExprAndTypeArgs, exprty$$7);
          break;
        }

      case 3:
        {
          const denv$$22 = TcEnv$$get_DisplayEnv(env$$207);
          const matchValue$$157 = UnifyFunctionTypeUndoIfFailed(cenv$$136, denv$$22, mExpr$$3, exprty$$7);

          if (matchValue$$157 == null) {
            const mArg = (0, _ast.SynExpr$$get_Range)(arg$$18);
            var $target$$433;

            if (arg$$18.tag === 14) {
              $target$$433 = 0;
            } else if (arg$$18.tag === 13) {
              if (arg$$18.fields[0]) {
                $target$$433 = 2;
              } else {
                $target$$433 = 1;
              }
            } else {
              $target$$433 = 2;
            }

            switch ($target$$433) {
              case 1:
                {
                  RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects_Delayed(cenv$$136, env$$207, tpenv$$242, delayed$$9);

                  if ((0, _InfoReader.IsIndexerType)(cenv$$136.g, cenv$$136.amap, ApplicableExpr$$get_Type(expr$$66))) {
                    const matchValue$$158 = ApplicableExpr$$get_Expr(expr$$66);

                    if (matchValue$$158.tag === 1) {
                      const d$$12 = matchValue$$158.fields[0];
                      (0, _ErrorLogger.error)(new NotAFunctionButIndexer(denv$$22, overallTy$$25, (0, _tast.ValRef$$get_DisplayName)(d$$12), mExpr$$3, mArg));
                    } else {
                      (0, _ErrorLogger.error)(new NotAFunctionButIndexer(denv$$22, overallTy$$25, null, mExpr$$3, mArg));
                    }
                  } else {
                    (0, _ErrorLogger.error)(new NotAFunction(denv$$22, overallTy$$25, mExpr$$3, mArg));
                  }

                  break;
                }

              case 2:
                {
                  RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects_Delayed(cenv$$136, env$$207, tpenv$$242, delayed$$9);
                  (0, _ErrorLogger.error)(new NotAFunction(denv$$22, overallTy$$25, mExpr$$3, mArg));
                  break;
                }
            }
          } else {
            const resultTy$$13 = matchValue$$157[1];
            const isAddrOf$$1 = expr$$66.fields[1].tag === 5 ? expr$$66.fields[1].fields[0].tag === 1 ? expr$$66.fields[1].fields[3].tail == null ? (vf$$23 = expr$$66.fields[1].fields[0].fields[0], (0, _TastOps.valRefEq)(cenv$$136.g, vf$$23, (0, _TcGlobals.TcGlobals$$get_addrof_vref)(cenv$$136.g)) ? true : (0, _TastOps.valRefEq)(cenv$$136.g, vf$$23, (0, _TcGlobals.TcGlobals$$get_nativeptr_tobyref_vref)(cenv$$136.g))) ? true : false : false : false : false;
            propagate(isAddrOf$$1, delayedList$0027$$1, mExprAndArg, resultTy$$13);
          }

          break;
        }
    }
  };

  propagate(false, delayed$$9, ApplicableExpr$$get_Range(expr$$66), exprty$$6);
}

function PropagateThenTcDelayed(cenv$$137, overallTy$$26, env$$208, tpenv$$243, mExpr$$4, expr$$67, exprty$$9, atomicFlag, delayed$$10) {
  Propagate(cenv$$137, overallTy$$26, env$$208, tpenv$$243, expr$$67, exprty$$9, delayed$$10);
  return TcDelayed(cenv$$137, overallTy$$26, env$$208, tpenv$$243, mExpr$$4, expr$$67, exprty$$9, atomicFlag, delayed$$10);
}

function TcDelayed(cenv$$138, overallTy$$27, env$$209, tpenv$$244, mExpr$$5, expr$$68, exprty$$10, atomicFlag$$1, delayed$$11) {
  if (atomicFlag$$1 === 0) {
    (0, _NameResolution.CallExprHasTypeSink)(cenv$$138.tcSink, mExpr$$5, TcEnv$$get_NameEnv(env$$209), exprty$$10, TcEnv$$get_DisplayEnv(env$$209), env$$209.eAccessRights);
  }

  var $target$$434, longId$$8, mDotLookup, otherDelayed$$1, arg$$19, hpa$$1, mExprAndArg$$1, otherDelayed$$2, _mExprAndTypeArgs, mTypeArgs$$1, mStmt$$4, otherDelayed$$3, synExpr2;

  if (delayed$$11.tail != null) {
    if (delayed$$11.head.tag === 2) {
      $target$$434 = 1;
      longId$$8 = delayed$$11.head.fields[0];
      mDotLookup = delayed$$11.head.fields[1];
      otherDelayed$$1 = delayed$$11.tail;
    } else if (delayed$$11.head.tag === 1) {
      $target$$434 = 2;
      arg$$19 = delayed$$11.head.fields[1];
      hpa$$1 = delayed$$11.head.fields[0];
      mExprAndArg$$1 = delayed$$11.head.fields[2];
      otherDelayed$$2 = delayed$$11.tail;
    } else if (delayed$$11.head.tag === 0) {
      $target$$434 = 3;
      _mExprAndTypeArgs = delayed$$11.head.fields[2];
      mTypeArgs$$1 = delayed$$11.head.fields[1];
    } else if (delayed$$11.head.tag === 4) {
      $target$$434 = 4;
      mStmt$$4 = delayed$$11.head.fields[1];
      otherDelayed$$3 = delayed$$11.tail;
      synExpr2 = delayed$$11.head.fields[0];
    } else {
      $target$$434 = 0;
    }
  } else {
    $target$$434 = 0;
  }

  switch ($target$$434) {
    case 0:
      {
        UnifyTypesAndRecover(cenv$$138, env$$209, mExpr$$5, overallTy$$27, exprty$$10);
        return [ApplicableExpr$$get_Expr(expr$$68), tpenv$$244];
      }

    case 1:
      {
        return TcLookupThen(cenv$$138, overallTy$$27, env$$209, tpenv$$244, mExpr$$5, ApplicableExpr$$get_Expr(expr$$68), exprty$$10, longId$$8, otherDelayed$$1, mDotLookup);
      }

    case 2:
      {
        return TcFunctionApplicationThen(cenv$$138, overallTy$$27, env$$209, tpenv$$244, mExprAndArg$$1, expr$$68, exprty$$10, arg$$19, hpa$$1, otherDelayed$$2);
      }

    case 3:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedTypeArguments)(), mTypeArgs$$1));
      }

    case 4:
      {
        if (!(otherDelayed$$3.tail == null)) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidAssignment)(), mExpr$$5));
        }

        UnifyTypes(cenv$$138, env$$209, mExpr$$5, overallTy$$27, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$138.g));
        const expr$$69 = ApplicableExpr$$get_Expr(expr$$68);
        const patternInput$$324 = (0, _TastOps.mkExprAddrOfExpr)(cenv$$138.g, true, false, new _TastOps.Mutates(1, "DefinitelyMutates"), expr$$69, null, mExpr$$5);
        const vty$$4 = (0, _TastOps.tyOfExpr)(cenv$$138.g, expr$$69);
        const patternInput$$325 = TcExprFlex(cenv$$138, true, false, vty$$4, env$$209, tpenv$$244, synExpr2);
        const patternInput$$326 = (0, _TastOps.mkCompGenLocal)(mExpr$$5, "addr", (0, _TastOps.mkByrefTy)(cenv$$138.g, vty$$4));
        return [(0, _TastOps.mkCompGenLet)(mStmt$$4, patternInput$$326[0], patternInput$$324[1], (0, _TastOps.mkAddrSet)(mStmt$$4, (0, _tast.mkLocalValRef)(patternInput$$326[0]), patternInput$$325[0])), patternInput$$325[1]];
      }
  }
}

function delayRest(rest$$6, mPrior, delayed$$12) {
  if (rest$$6.tail == null) {
    return delayed$$12;
  } else {
    const longId$$9 = rest$$6;
    const mPriorAndLongId = (0, _range.unionRanges)(mPrior, (0, _ast.rangeOfLid)(longId$$9));
    return (0, _Types.L)(new DelayedItem(2, "DelayedDotLookup", rest$$6, mPriorAndLongId), delayed$$12);
  }
}

function TcFunctionApplicationThen(cenv$$139, overallTy$$28, env$$210, tpenv$$246, mExprAndArg$$2, expr$$70, exprty$$11, synArg, atomicFlag$$2, delayed$$13) {
  var vf$$25;
  const denv$$23 = TcEnv$$get_DisplayEnv(env$$210);
  const mArg$$1 = (0, _ast.SynExpr$$get_Range)(synArg);
  const mFunExpr$$1 = ApplicableExpr$$get_Range(expr$$70);
  const matchValue$$159 = UnifyFunctionTypeUndoIfFailed(cenv$$139, denv$$23, mFunExpr$$1, exprty$$11);

  if (matchValue$$159 == null) {
    var $target$$435, _isNotNakedRefCell, _m$$5, comp$$11;

    if (synArg.tag === 14) {
      if (synArg.fields[0]) {
        $target$$435 = 1;
      } else {
        $target$$435 = 0;
        _isNotNakedRefCell = synArg.fields[1];
        _m$$5 = synArg.fields[3];
        comp$$11 = synArg.fields[2];
      }
    } else {
      $target$$435 = 1;
    }

    switch ($target$$435) {
      case 0:
        {
          const patternInput$$329 = TcComputationOrSequenceExpression(cenv$$139, env$$210, overallTy$$28, mFunExpr$$1, [ApplicableExpr$$get_Expr(expr$$70), exprty$$11], tpenv$$246, comp$$11);
          return TcDelayed(cenv$$139, overallTy$$28, env$$210, patternInput$$329[1], mExprAndArg$$2, MakeApplicableExprNoFlex(cenv$$139, patternInput$$329[0]), (0, _TastOps.tyOfExpr)(cenv$$139.g, patternInput$$329[0]), 1, delayed$$13);
        }

      case 1:
        {
          return (0, _ErrorLogger.error)(new NotAFunction(denv$$23, overallTy$$28, mFunExpr$$1, mArg$$1));
        }
    }
  } else {
    const resultTy$$14 = matchValue$$159[1];
    const domainTy$$6 = matchValue$$159[0];

    var $target$$436, _comp, _m$$4, isNotNakedRefCell$$1;

    if (synArg.tag === 14) {
      if (synArg.fields[0]) {
        $target$$436 = 1;
      } else {
        $target$$436 = 0;
        _comp = synArg.fields[2];
        _m$$4 = synArg.fields[3];
        isNotNakedRefCell$$1 = synArg.fields[1];
      }
    } else {
      $target$$436 = 1;
    }

    switch ($target$$436) {
      case 0:
        {
          isNotNakedRefCell$$1.contents = isNotNakedRefCell$$1.contents ? true : expr$$70.fields[1].tag === 11 ? expr$$70.fields[1].fields[0].tag === 24 ? expr$$70.fields[1].fields[2].tail != null ? expr$$70.fields[1].fields[2].head.tag === 5 ? expr$$70.fields[1].fields[2].head.fields[0].tag === 1 ? expr$$70.fields[1].fields[2].tail.tail == null ? (vf$$25 = expr$$70.fields[1].fields[2].head.fields[0].fields[0], (0, _TastOps.valRefEq)(cenv$$139.g, vf$$25, (0, _TcGlobals.TcGlobals$$get_seq_vref)(cenv$$139.g))) ? true : false : false : false : false : false : false : false;
          break;
        }
    }

    const patternInput$$327 = TcExpr(cenv$$139, domainTy$$6, env$$210, tpenv$$246, synArg);
    const patternInput$$328 = buildApp(cenv$$139, expr$$70, resultTy$$14, patternInput$$327[0], mExprAndArg$$2);
    return TcDelayed(cenv$$139, overallTy$$28, env$$210, patternInput$$327[1], mExprAndArg$$2, patternInput$$328[0], patternInput$$328[1], atomicFlag$$2, delayed$$13);
  }
}

function TcLongIdentThen(cenv$$140, overallTy$$29, env$$211, tpenv$$249, _arg4$$6, delayed$$14) {
  const longId$$10 = _arg4$$6.fields[0];
  const ad$$25 = env$$211.eAccessRights;
  const typeNameResInfo = delayed$$14.tail != null ? delayed$$14.head.tag === 0 ? delayed$$14.tail.tail != null ? delayed$$14.tail.head.tag === 3 ? new _NameResolution.TypeNameResolutionInfo(0, "TypeNameResolutionInfo", new _NameResolution.TypeNameResolutionFlag(1, "ResolveTypeNamesToTypeRefs"), (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(delayed$$14.head.fields[0]))) : delayed$$14.tail.head.tag === 2 ? new _NameResolution.TypeNameResolutionInfo(0, "TypeNameResolutionInfo", new _NameResolution.TypeNameResolutionFlag(1, "ResolveTypeNamesToTypeRefs"), (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(delayed$$14.head.fields[0]))) : new _NameResolution.TypeNameResolutionInfo(0, "TypeNameResolutionInfo", new _NameResolution.TypeNameResolutionFlag(0, "ResolveTypeNamesToCtors"), (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(delayed$$14.head.fields[0]))) : new _NameResolution.TypeNameResolutionInfo(0, "TypeNameResolutionInfo", new _NameResolution.TypeNameResolutionFlag(0, "ResolveTypeNamesToCtors"), (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(delayed$$14.head.fields[0]))) : (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)() : (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)();
  const nameResolutionResult = (0, _NameResolution.ResolveLongIdentAsExprAndComputeRange)(cenv$$140.tcSink, cenv$$140.nameResolver, (0, _ast.rangeOfLid)(longId$$10), ad$$25, env$$211.eNameResEnv, typeNameResInfo, longId$$10);
  return TcItemThen(cenv$$140, overallTy$$29, env$$211, tpenv$$249, nameResolutionResult[0], nameResolutionResult[1], nameResolutionResult[2], nameResolutionResult[3], delayed$$14);
}

function TcItemThen(cenv$$141, overallTy$$30, env$$212, tpenv$$250, item$$40, mItem$$2, rest$$8, afterResolution$$3, delayed$$15) {
  TcItemThen: while (true) {
    const delayed$$16 = delayRest(rest$$8, mItem$$2, delayed$$15);
    const ad$$26 = env$$212.eAccessRights;
    var $target$$437, item$$41, nm$$55, ty$$91, methodName$$3, minfos$$2, minfos$$3, nm$$56, id$$50, sln, ty$$95, vref$$13, nm$$57, pinfos, finfo$$4, rfinfo$$2, einfo, nm$$58, usageTextOpt;

    if (item$$40.tag === 1) {
      $target$$437 = 0;
      item$$41 = item$$40;
    } else if (item$$40.tag === 4) {
      $target$$437 = 0;
      item$$41 = item$$40;
    } else if (item$$40.tag === 2) {
      $target$$437 = 0;
      item$$41 = item$$40;
    } else if (item$$40.tag === 14) {
      if (item$$40.fields[1].tail != null) {
        $target$$437 = 1;
        nm$$55 = item$$40.fields[0];
        ty$$91 = item$$40.fields[1].head;
      } else {
        $target$$437 = 13;
      }
    } else if (item$$40.tag === 10) {
      $target$$437 = 2;
      methodName$$3 = item$$40.fields[0];
      minfos$$2 = item$$40.fields[1];
    } else if (item$$40.tag === 11) {
      $target$$437 = 3;
      minfos$$3 = item$$40.fields[1];
      nm$$56 = item$$40.fields[0];
    } else if (item$$40.tag === 12) {
      $target$$437 = 4;
    } else if (item$$40.tag === 19) {
      $target$$437 = 5;
      id$$50 = item$$40.fields[0];
      sln = item$$40.fields[1];
    } else if (item$$40.tag === 13) {
      $target$$437 = 6;
      ty$$95 = item$$40.fields[0];
    } else if (item$$40.tag === 0) {
      $target$$437 = 7;
      vref$$13 = item$$40.fields[0];
    } else if (item$$40.tag === 9) {
      $target$$437 = 8;
      nm$$57 = item$$40.fields[0];
      pinfos = item$$40.fields[1];
    } else if (item$$40.tag === 7) {
      $target$$437 = 9;
      finfo$$4 = item$$40.fields[0];
    } else if (item$$40.tag === 5) {
      $target$$437 = 10;
      rfinfo$$2 = item$$40.fields[0];
    } else if (item$$40.tag === 8) {
      $target$$437 = 11;
      einfo = item$$40.fields[0];
    } else if (item$$40.tag === 15) {
      $target$$437 = 12;
      nm$$58 = item$$40.fields[0];
      usageTextOpt = item$$40.fields[1];
    } else {
      $target$$437 = 13;
    }

    switch ($target$$437) {
      case 0:
        {
          const ucaseAppTy = (0, _ConstraintSolver.NewInferenceType)();
          let patternInput$$331;

          if (item$$41.tag === 2) {
            const n$$13 = item$$41.fields[2] | 0;
            const apinfo$$1 = item$$41.fields[0];
            const aparity = (0, _List.length)((0, _TastOps.ActivePatternInfo$002Eget_Names)(apinfo$$1)) | 0;
            var $target$$438;

            switch (aparity) {
              case 0:
              case 1:
                $target$$438 = 0;
                break;

              default:
                $target$$438 = 1;
            }

            switch ($target$$438) {
              case 0:
                {
                  const mkConstrApp = function mkConstrApp(_mArgs, _arg21$$1) {
                    var $target$$439, arg$$21;

                    if (_arg21$$1.tail != null) {
                      if (_arg21$$1.tail.tail == null) {
                        $target$$439 = 0;
                        arg$$21 = _arg21$$1.head;
                      } else {
                        $target$$439 = 1;
                      }
                    } else {
                      $target$$439 = 1;
                    }

                    switch ($target$$439) {
                      case 0:
                        {
                          return arg$$21;
                        }

                      case 1:
                        {
                          return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("ApplyUnionCaseOrExn", mItem$$2));
                        }
                    }
                  };

                  patternInput$$331 = [(0, _Util.curry)(2, mkConstrApp), (0, _Types.L)(ucaseAppTy, (0, _Types.L)()), (0, _List.ofSeq)((0, _Seq.delay)(function () {
                    return (0, _Seq.collect)(function (matchValue$$160) {
                      return (0, _Seq.singleton)((0, _ast.mkSynId)(matchValue$$160[1], matchValue$$160[0]));
                    }, (0, _PrettyNaming.ActivePatternInfo$$get_ActiveTagsWithRanges)(apinfo$$1));
                  }))];
                  break;
                }

              case 1:
                {
                  const ucref$$1 = (0, _TastOps.mkChoiceCaseRef)(cenv$$141.g, mItem$$2, aparity, n$$13);
                  const patternInput$$330 = infoOfTyconRef(mItem$$2, (0, _tast.UnionCaseRef$$get_TyconRef)(ucref$$1));
                  const ucinfo$$1 = new _infos.UnionCaseInfo(0, "UnionCaseInfo", patternInput$$330[2], ucref$$1);
                  patternInput$$331 = ApplyUnionCaseOrExnTypes(mItem$$2, cenv$$141, env$$212, ucaseAppTy, new _NameResolution.Item(1, "UnionCase", ucinfo$$1, false));
                  break;
                }
            }
          } else {
            patternInput$$331 = ApplyUnionCaseOrExnTypes(mItem$$2, cenv$$141, env$$212, ucaseAppTy, item$$41);
          }

          const nargtys$$2 = (0, _List.length)(patternInput$$331[1]) | 0;
          const flexes$$5 = (0, _List.map)(function mapping$$74($arg$$49) {
            return !(0, _TastOps.isTyparTy)(cenv$$141.g, $arg$$49);
          }, patternInput$$331[1]);

          const $007CFittedArgs$007C_$007C = function $007CFittedArgs$007C_$007C(arg$$22) {
            var arg$$23, arg$$24, arg$$25, args$$65, args$$66, args$$67, args$$68;
            var $target$$440, args$$69;
            const activePatternResult48133 = (0, _ast.$007CSynExprParen$007C_$007C)(arg$$22);

            if (activePatternResult48133 != null) {
              if (activePatternResult48133[0].tag === 4) {
                if (args$$65 = activePatternResult48133[0].fields[0], nargtys$$2 > 1) {
                  $target$$440 = 0;
                  args$$69 = activePatternResult48133[0].fields[0];
                } else if (arg$$22.tag === 4) {
                  if (args$$66 = arg$$22.fields[0], nargtys$$2 > 1) {
                    $target$$440 = 0;
                    args$$69 = arg$$22.fields[0];
                  } else {
                    $target$$440 = 1;
                  }
                } else {
                  $target$$440 = 1;
                }
              } else if (arg$$22.tag === 4) {
                if (args$$67 = arg$$22.fields[0], nargtys$$2 > 1) {
                  $target$$440 = 0;
                  args$$69 = arg$$22.fields[0];
                } else {
                  $target$$440 = 1;
                }
              } else {
                $target$$440 = 1;
              }
            } else if (arg$$22.tag === 4) {
              if (args$$68 = arg$$22.fields[0], nargtys$$2 > 1) {
                $target$$440 = 0;
                args$$69 = arg$$22.fields[0];
              } else {
                $target$$440 = 1;
              }
            } else {
              $target$$440 = 1;
            }

            switch ($target$$440) {
              case 0:
                {
                  return args$$69;
                }

              case 1:
                {
                  var $target$$441, arg$$26;
                  const activePatternResult48132 = (0, _ast.$007CSynExprParen$007C_$007C)(arg$$22);

                  if (activePatternResult48132 != null) {
                    if (arg$$23 = activePatternResult48132[0], nargtys$$2 === 1) {
                      $target$$441 = 0;
                      arg$$26 = activePatternResult48132[0];
                    } else if (arg$$24 = arg$$22, nargtys$$2 === 1) {
                      $target$$441 = 0;
                      arg$$26 = arg$$22;
                    } else {
                      $target$$441 = 1;
                    }
                  } else if (arg$$25 = arg$$22, nargtys$$2 === 1) {
                    $target$$441 = 0;
                    arg$$26 = arg$$22;
                  } else {
                    $target$$441 = 1;
                  }

                  switch ($target$$441) {
                    case 0:
                      {
                        return (0, _Types.L)(arg$$26, (0, _Types.L)());
                      }

                    case 1:
                      {
                        return null;
                      }
                  }
                }
            }
          };

          var $target$$442, args$$70, atomicFlag$$3, mExprAndArg$$3, origArg, otherDelayed$$4;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 1) {
              const activePatternResult48149 = $007CFittedArgs$007C_$007C(delayed$$16.head.fields[1]);

              if (activePatternResult48149 != null) {
                $target$$442 = 0;
                args$$70 = activePatternResult48149;
                atomicFlag$$3 = delayed$$16.head.fields[0];
                mExprAndArg$$3 = delayed$$16.head.fields[2];
                origArg = delayed$$16.head.fields[1];
                otherDelayed$$4 = delayed$$16.tail;
              } else {
                $target$$442 = 1;
              }
            } else {
              $target$$442 = 1;
            }
          } else {
            $target$$442 = 1;
          }

          switch ($target$$442) {
            case 0:
              {
                if (otherDelayed$$4.tail == null) {
                  UnifyTypes(cenv$$141, env$$212, mExprAndArg$$3, overallTy$$30, ucaseAppTy);
                }

                const nargs$$2 = (0, _List.length)(args$$70) | 0;
                UnionCaseOrExnCheck(env$$212, nargtys$$2, nargs$$2, mExprAndArg$$3);
                let args$$71;
                const patternInput$$332 = GetMethodArgs(origArg);

                if (patternInput$$332[1].tail == null) {
                  args$$71 = args$$70;
                } else {
                  const fittedArgs = (0, _Array.fill)(new Array(nargtys$$2), 0, nargtys$$2, null);
                  let currentIndex = 0;
                  (0, _Seq.iterate)(function (arg$$27) {
                    fittedArgs[currentIndex] = arg$$27;
                    currentIndex = currentIndex + 1;
                  }, patternInput$$332[0]);
                  const SEEN_NAMED_ARGUMENT = -1 | 0;
                  (0, _Seq.iterate)(function (forLoopVar$$3) {
                    const matchValue$$161 = (0, _List.tryFindIndex)(function predicate$$35(id2$$1) {
                      return (0, _ast.Ident$$get_idText)(forLoopVar$$3[1]) === (0, _ast.Ident$$get_idText)(id2$$1);
                    }, patternInput$$331[2]);

                    if (matchValue$$161 == null) {
                      let isSpecialCaseForBackwardCompatibility;

                      if (currentIndex !== SEEN_NAMED_ARGUMENT ? currentIndex < nargtys$$2 : false) {
                        const matchValue$$162 = (0, _TastOps.stripTyEqns)(cenv$$141.g, (0, _List.item)(currentIndex, patternInput$$331[1]));

                        switch (matchValue$$162.tag) {
                          case 1:
                            {
                              const tcref$$34 = matchValue$$162.fields[0];
                              isSpecialCaseForBackwardCompatibility = (0, _TastOps.tyconRefEq)(cenv$$141.g, (0, _TcGlobals.TcGlobals$$get_bool_tcr)(cenv$$141.g), tcref$$34) ? true : (0, _TastOps.tyconRefEq)(cenv$$141.g, (0, _TcGlobals.TcGlobals$$get_system_Bool_tcref)(cenv$$141.g), tcref$$34);
                              break;
                            }

                          case 5:
                            {
                              isSpecialCaseForBackwardCompatibility = true;
                              break;
                            }

                          default:
                            {
                              isSpecialCaseForBackwardCompatibility = false;
                            }
                        }
                      } else {
                        isSpecialCaseForBackwardCompatibility = false;
                      }

                      if (isSpecialCaseForBackwardCompatibility) {
                        fittedArgs[currentIndex] = (0, _List.item)(currentIndex, args$$70);
                        currentIndex = currentIndex + 1;
                      } else {
                        let caseName$$1;

                        switch (item$$41.tag) {
                          case 1:
                            {
                              const uci$$3 = item$$41.fields[0];
                              caseName$$1 = (0, _infos.UnionCaseInfo$$get_Name)(uci$$3);
                              break;
                            }

                          case 4:
                            {
                              const tcref$$35 = item$$41.fields[0];
                              caseName$$1 = (0, _tast.EntityRef$$get_DisplayName)(tcref$$35);
                              break;
                            }

                          default:
                            {
                              throw new Error("impossible");
                            }
                        }

                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseConstructorDoesNotHaveFieldWithGivenName$$Z384F8060)(caseName$$1, (0, _ast.Ident$$get_idText)(forLoopVar$$3[1])), (0, _ast.Ident$$get_idRange)(forLoopVar$$3[1])));
                      }
                    } else {
                      const i$$21 = matchValue$$161 | 0;

                      if (fittedArgs[i$$21] == null) {
                        fittedArgs[i$$21] = forLoopVar$$3[2];
                        let argContainerOpt$$1;

                        switch (item$$41.tag) {
                          case 1:
                            {
                              const uci$$2 = item$$41.fields[0];
                              argContainerOpt$$1 = new _NameResolution.ArgumentContainer(2, "UnionCase", uci$$2);
                              break;
                            }

                          case 4:
                            {
                              const tref$$1 = item$$41.fields[0];
                              argContainerOpt$$1 = new _NameResolution.ArgumentContainer(1, "Type", tref$$1);
                              break;
                            }

                          default:
                            {
                              argContainerOpt$$1 = null;
                            }
                        }

                        const argItem$$1 = new _NameResolution.Item(20, "ArgName", (0, _List.item)(i$$21, patternInput$$331[2]), (0, _List.item)(i$$21, patternInput$$331[1]), argContainerOpt$$1);
                        (0, _NameResolution.CallNameResolutionSink)(cenv$$141.tcSink, (0, _ast.Ident$$get_idRange)(forLoopVar$$3[1]), TcEnv$$get_NameEnv(env$$212), argItem$$1, argItem$$1, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$212), ad$$26);
                      } else {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseFieldCannotBeUsedMoreThanOnce$$Z721C83C5)((0, _ast.Ident$$get_idText)(forLoopVar$$3[1])), (0, _ast.Ident$$get_idRange)(forLoopVar$$3[1])));
                      }

                      currentIndex = SEEN_NAMED_ARGUMENT;
                    }
                  }, patternInput$$332[1]);
                  args$$71 = (0, _List.ofArray)(fittedArgs);
                }

                const patternInput$$333 = TcExprs(cenv$$141, env$$212, mExprAndArg$$3, tpenv$$250, flexes$$5, patternInput$$331[1], args$$71);
                return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, patternInput$$333[1], mExprAndArg$$3, MakeApplicableExprNoFlex(cenv$$141, patternInput$$331[0](mExprAndArg$$3)(patternInput$$333[0])), ucaseAppTy, atomicFlag$$3, otherDelayed$$4);
              }

            case 1:
              {
                var $target$$443, _delayed$0027, _mExprAndTypeArgs$$1, _x$$5, mTypeArgs$$2;

                if (delayed$$16.tail != null) {
                  if (delayed$$16.head.tag === 0) {
                    $target$$443 = 0;
                    _delayed$0027 = delayed$$16.tail;
                    _mExprAndTypeArgs$$1 = delayed$$16.head.fields[2];
                    _x$$5 = delayed$$16.head.fields[0];
                    mTypeArgs$$2 = delayed$$16.head.fields[1];
                  } else {
                    $target$$443 = 1;
                  }
                } else {
                  $target$$443 = 1;
                }

                switch ($target$$443) {
                  case 0:
                    {
                      return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedTypeArguments)(), mTypeArgs$$2));
                    }

                  case 1:
                    {
                      let patternInput$$335;

                      if (nargtys$$2 === 1 ? item$$41.tag === 2 ? true : false : false) {
                        UnifyTypes(cenv$$141, env$$212, mItem$$2, (0, _List.head)(patternInput$$331[1]), (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$141.g));
                        patternInput$$335 = [1, function () {
                          return patternInput$$331[0](mItem$$2)((0, _Types.L)((0, _TastOps.mkUnit)(cenv$$141.g, mItem$$2), (0, _Types.L)()));
                        }];
                      } else if (nargtys$$2 === 0) {
                        patternInput$$335 = [0, function () {
                          return patternInput$$331[0](mItem$$2)((0, _Types.L)());
                        }];
                      } else {
                        patternInput$$335 = [nargtys$$2, function () {
                          const patternInput$$334 = (0, _List.unzip)((0, _List.mapIndexed)(function mapping$$75(i$$22, ty$$90) {
                            return (0, _TastOps.mkCompGenLocal)(mItem$$2, "arg" + (0, _Util.int32ToString)(i$$22), ty$$90);
                          }, patternInput$$331[1]));
                          const constrApp = patternInput$$331[0](mItem$$2)(patternInput$$334[1]);
                          const lam$$5 = (0, _TastOps.mkMultiLambda)(mItem$$2, patternInput$$334[0], constrApp, (0, _TastOps.tyOfExpr)(cenv$$141.g, constrApp));
                          return lam$$5;
                        }];
                      }

                      UnionCaseOrExnCheck(env$$212, nargtys$$2, patternInput$$335[0], mItem$$2);
                      const expr$$71 = patternInput$$335[1]();
                      const exprTy$$1 = (0, _TastOps.tyOfExpr)(cenv$$141.g, expr$$71);
                      return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, tpenv$$250, mItem$$2, MakeApplicableExprNoFlex(cenv$$141, expr$$71), exprTy$$1, 0, delayed$$16);
                    }
                }
              }
          }
        }

      case 1:
        {
          var $target$$444, _mTypeArgs$$1, longId$$11, mExprAndTypeArgs$$1, mLongId$$1, otherDelayed$$5, tyargs$$9, _delayed$0027$$1, _mTypeArgs$$2, mExprAndTypeArgs$$2, tyargs$$10;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 0) {
              if (delayed$$16.tail.tail != null) {
                if (delayed$$16.tail.head.tag === 2) {
                  $target$$444 = 0;
                  _mTypeArgs$$1 = delayed$$16.head.fields[1];
                  longId$$11 = delayed$$16.tail.head.fields[0];
                  mExprAndTypeArgs$$1 = delayed$$16.head.fields[2];
                  mLongId$$1 = delayed$$16.tail.head.fields[1];
                  otherDelayed$$5 = delayed$$16.tail.tail;
                  tyargs$$9 = delayed$$16.head.fields[0];
                } else {
                  $target$$444 = 1;
                  _delayed$0027$$1 = delayed$$16.tail;
                  _mTypeArgs$$2 = delayed$$16.head.fields[1];
                  mExprAndTypeArgs$$2 = delayed$$16.head.fields[2];
                  tyargs$$10 = delayed$$16.head.fields[0];
                }
              } else {
                $target$$444 = 1;
                _delayed$0027$$1 = delayed$$16.tail;
                _mTypeArgs$$2 = delayed$$16.head.fields[1];
                mExprAndTypeArgs$$2 = delayed$$16.head.fields[2];
                tyargs$$10 = delayed$$16.head.fields[0];
              }
            } else {
              $target$$444 = 2;
            }
          } else {
            $target$$444 = 2;
          }

          switch ($target$$444) {
            case 0:
              {
                const patternInput$$336 = TcNestedTypeApplication(cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$250, mExprAndTypeArgs$$1, ty$$91, tyargs$$9);
                const item$$42 = new _NameResolution.Item(14, "Types", nm$$55, (0, _Types.L)(patternInput$$336[0], (0, _Types.L)()));
                (0, _NameResolution.CallNameResolutionSink)(cenv$$141.tcSink, mExprAndTypeArgs$$1, TcEnv$$get_NameEnv(env$$212), item$$42, item$$42, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                const tupledArg$$56 = (0, _NameResolution.ResolveExprDotLongIdentAndComputeRange)(cenv$$141.tcSink, cenv$$141.nameResolver, (0, _range.unionRanges)(mExprAndTypeArgs$$1, mLongId$$1), ad$$26, env$$212.eNameResEnv, patternInput$$336[0], longId$$11, new _InfoReader.FindMemberFlag(0, "IgnoreOverrides"), true);
                cenv$$141 = cenv$$141;
                overallTy$$30 = overallTy$$30;
                env$$212 = env$$212;
                tpenv$$250 = patternInput$$336[1];
                item$$40 = tupledArg$$56[0];
                mItem$$2 = tupledArg$$56[1];
                rest$$8 = tupledArg$$56[2];
                afterResolution$$3 = tupledArg$$56[3];
                delayed$$15 = otherDelayed$$5;
                continue TcItemThen;
              }

            case 1:
              {
                const patternInput$$337 = TcNestedTypeApplication(cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$250, mExprAndTypeArgs$$2, ty$$91, tyargs$$10);
                const item$$44 = new _NameResolution.Item(14, "Types", nm$$55, (0, _Types.L)(patternInput$$337[0], (0, _Types.L)()));
                (0, _NameResolution.CallNameResolutionSink)(cenv$$141.tcSink, mExprAndTypeArgs$$2, TcEnv$$get_NameEnv(env$$212), item$$44, item$$44, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseOfTypeName)(), mItem$$2));
              }

            case 2:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseOfTypeName)(), mItem$$2));
              }
          }
        }

      case 2:
        {
          const meths$$3 = (0, _List.map)(function (minfo$$11) {
            return [minfo$$11, null];
          }, minfos$$2);
          var $target$$445, arg$$29, atomicFlag$$4, mExprAndArg$$4, otherDelayed$$6, mExprAndTypeArgs$$3, mTypeArgs$$3, otherDelayed$$7, tys$$2;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 1) {
              $target$$445 = 0;
              arg$$29 = delayed$$16.head.fields[1];
              atomicFlag$$4 = delayed$$16.head.fields[0];
              mExprAndArg$$4 = delayed$$16.head.fields[2];
              otherDelayed$$6 = delayed$$16.tail;
            } else if (delayed$$16.head.tag === 0) {
              $target$$445 = 1;
              mExprAndTypeArgs$$3 = delayed$$16.head.fields[2];
              mTypeArgs$$3 = delayed$$16.head.fields[1];
              otherDelayed$$7 = delayed$$16.tail;
              tys$$2 = delayed$$16.head.fields[0];
            } else {
              $target$$445 = 2;
            }
          } else {
            $target$$445 = 2;
          }

          switch ($target$$445) {
            case 0:
              {
                return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, tpenv$$250, null, (0, _Types.L)(), mExprAndArg$$4, mItem$$2, methodName$$3, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), false, meths$$3, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(arg$$29, (0, _Types.L)()), atomicFlag$$4, otherDelayed$$6);
              }

            case 1:
              {
                const patternInput$$338 = TcTypesOrMeasures(null, cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$250, tys$$2, mTypeArgs$$3);
                (0, _NameResolution.CallNameResolutionSink)(cenv$$141.tcSink, mExprAndTypeArgs$$3, TcEnv$$get_NameEnv(env$$212), item$$40, item$$40, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                var $target$$446, arg$$30, atomicFlag$$5, mExprAndArg$$5, otherDelayed$$8;

                if (otherDelayed$$7.tail != null) {
                  if (otherDelayed$$7.head.tag === 1) {
                    $target$$446 = 0;
                    arg$$30 = otherDelayed$$7.head.fields[1];
                    atomicFlag$$5 = otherDelayed$$7.head.fields[0];
                    mExprAndArg$$5 = otherDelayed$$7.head.fields[2];
                    otherDelayed$$8 = otherDelayed$$7.tail;
                  } else {
                    $target$$446 = 1;
                  }
                } else {
                  $target$$446 = 1;
                }

                switch ($target$$446) {
                  case 0:
                    {
                      return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, patternInput$$338[1], patternInput$$338[0], (0, _Types.L)(), mExprAndArg$$5, mItem$$2, methodName$$3, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), false, meths$$3, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(arg$$30, (0, _Types.L)()), atomicFlag$$5, otherDelayed$$8);
                    }

                  case 1:
                    {
                      return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, patternInput$$338[1], patternInput$$338[0], (0, _Types.L)(), mExprAndTypeArgs$$3, mItem$$2, methodName$$3, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), false, meths$$3, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), 0, otherDelayed$$7);
                    }
                }
              }

            case 2:
              {
                return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, tpenv$$250, null, (0, _Types.L)(), mItem$$2, mItem$$2, methodName$$3, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), false, meths$$3, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), 0, delayed$$16);
              }
          }
        }

      case 3:
        {
          let objTy$$8;

          if (minfos$$3.tail == null) {
            objTy$$8 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeHasNoAccessibleConstructor)(), mItem$$2));
          } else {
            const minfo$$12 = minfos$$3.head;
            objTy$$8 = (0, _infos.MethInfo$$get_ApparentEnclosingType)(minfo$$12);
          }

          var $target$$447, arg$$31, mExprAndArg$$6, otherDelayed$$9, _mTypeArgs$$3, arg$$32, mExprAndArg$$7, mExprAndTypeArgs$$4, otherDelayed$$10, tyargs$$12, _mTypeArgs$$4, mExprAndTypeArgs$$5, otherDelayed$$11, tyargs$$13;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 1) {
              $target$$447 = 0;
              arg$$31 = delayed$$16.head.fields[1];
              mExprAndArg$$6 = delayed$$16.head.fields[2];
              otherDelayed$$9 = delayed$$16.tail;
            } else if (delayed$$16.head.tag === 0) {
              if (delayed$$16.tail.tail != null) {
                if (delayed$$16.tail.head.tag === 1) {
                  $target$$447 = 1;
                  _mTypeArgs$$3 = delayed$$16.head.fields[1];
                  arg$$32 = delayed$$16.tail.head.fields[1];
                  mExprAndArg$$7 = delayed$$16.tail.head.fields[2];
                  mExprAndTypeArgs$$4 = delayed$$16.head.fields[2];
                  otherDelayed$$10 = delayed$$16.tail.tail;
                  tyargs$$12 = delayed$$16.head.fields[0];
                } else {
                  $target$$447 = 2;
                  _mTypeArgs$$4 = delayed$$16.head.fields[1];
                  mExprAndTypeArgs$$5 = delayed$$16.head.fields[2];
                  otherDelayed$$11 = delayed$$16.tail;
                  tyargs$$13 = delayed$$16.head.fields[0];
                }
              } else {
                $target$$447 = 2;
                _mTypeArgs$$4 = delayed$$16.head.fields[1];
                mExprAndTypeArgs$$5 = delayed$$16.head.fields[2];
                otherDelayed$$11 = delayed$$16.tail;
                tyargs$$13 = delayed$$16.head.fields[0];
              }
            } else {
              $target$$447 = 3;
            }
          } else {
            $target$$447 = 3;
          }

          switch ($target$$447) {
            case 0:
              {
                (0, _NameResolution.CallExprHasTypeSink)(cenv$$141.tcSink, mExprAndArg$$6, TcEnv$$get_NameEnv(env$$212), objTy$$8, TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                return TcCtorCall(true, cenv$$141, env$$212, tpenv$$250, overallTy$$30, objTy$$8, mItem$$2, item$$40, false, (0, _Types.L)(arg$$31, (0, _Types.L)()), mExprAndArg$$6, otherDelayed$$9, afterResolution$$3);
              }

            case 1:
              {
                const patternInput$$339 = TcNestedTypeApplication(cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$250, mExprAndTypeArgs$$4, objTy$$8, tyargs$$12);
                (0, _NameResolution.CallExprHasTypeSink)(cenv$$141.tcSink, mExprAndArg$$7, TcEnv$$get_NameEnv(env$$212), patternInput$$339[0], TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                const patternInput$$340 = [item$$40, minfos$$3];
                (0, _List.iterate)(function action$$23(minfo$$13) {
                  UnifyTypes(cenv$$141, env$$212, mExprAndTypeArgs$$4, (0, _infos.MethInfo$$get_ApparentEnclosingType)(minfo$$13), patternInput$$339[0]);
                }, patternInput$$340[1]);
                return TcCtorCall(true, cenv$$141, env$$212, patternInput$$339[1], overallTy$$30, patternInput$$339[0], mExprAndTypeArgs$$4, patternInput$$340[0], false, (0, _Types.L)(arg$$32, (0, _Types.L)()), mExprAndArg$$7, otherDelayed$$10, afterResolution$$3);
              }

            case 2:
              {
                const patternInput$$341 = TcNestedTypeApplication(cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$250, mExprAndTypeArgs$$5, objTy$$8, tyargs$$13);
                const resolvedItem = new _NameResolution.Item(14, "Types", nm$$56, (0, _Types.L)(patternInput$$341[0], (0, _Types.L)()));
                (0, _NameResolution.CallNameResolutionSink)(cenv$$141.tcSink, mExprAndTypeArgs$$5, TcEnv$$get_NameEnv(env$$212), resolvedItem, resolvedItem, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                (0, _List.iterate)(function action$$24(minfo$$14) {
                  UnifyTypes(cenv$$141, env$$212, mExprAndTypeArgs$$5, (0, _infos.MethInfo$$get_ApparentEnclosingType)(minfo$$14), patternInput$$341[0]);
                }, minfos$$3);
                return TcCtorCall(true, cenv$$141, env$$212, patternInput$$341[1], overallTy$$30, patternInput$$341[0], mExprAndTypeArgs$$5, item$$40, false, (0, _Types.L)(), mExprAndTypeArgs$$5, otherDelayed$$11, afterResolution$$3);
              }

            case 3:
              {
                return TcCtorCall(true, cenv$$141, env$$212, tpenv$$250, overallTy$$30, objTy$$8, mItem$$2, item$$40, false, (0, _Types.L)(), mItem$$2, delayed$$16, afterResolution$$3);
              }
          }
        }

      case 4:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseOfInterfaceType)(), mItem$$2));
        }

      case 5:
        {
          const isPrefix = (0, _PrettyNaming.IsPrefixOperator)((0, _ast.Ident$$get_idText)(id$$50));
          const isTernary = (0, _PrettyNaming.IsTernaryOperator)((0, _ast.Ident$$get_idText)(id$$50));
          const argData = isPrefix ? (0, _Types.L)(new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true), (0, _Types.L)()) : isTernary ? (0, _Types.L)(new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true), (0, _Types.L)(new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true), (0, _Types.L)(new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true), (0, _Types.L)()))) : (0, _Types.L)(new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true), (0, _Types.L)(new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true), (0, _Types.L)()));
          const retTyData = new _ast.SynTypar(0, "Typar", (0, _ast.mkSynId)(mItem$$2, (0, _ast.SynArgNameGenerator$$New)(cenv$$141.synArgNameGenerator)), new _ast.TyparStaticReq(1, "HeadTypeStaticReq"), true);
          const argTypars = (0, _List.map)(function mapping$$76(d$$13) {
            return (0, _tast.NewTypar)(new _tast.TyparKind(0, "Type"), new _tast.TyparRigidity(3, "Flexible"), d$$13, false, new _tast.TyparDynamicReq(1, "Yes"), (0, _Types.L)(), false, false);
          }, argData);
          const retTypar = (0, _tast.NewTypar)(new _tast.TyparKind(0, "Type"), new _tast.TyparRigidity(3, "Flexible"), retTyData, false, new _tast.TyparDynamicReq(1, "Yes"), (0, _Types.L)(), false, false);
          const argTys$$2 = (0, _List.map)(_tast.mkTyparTy, argTypars);
          const retTy$$3 = (0, _tast.mkTyparTy)(retTypar);
          const patternInput$$342 = (0, _List.unzip)((0, _List.mapIndexed)(function mapping$$77(i$$23, ty$$94) {
            return (0, _TastOps.mkCompGenLocal)(mItem$$2, "arg" + (0, _Util.int32ToString)(i$$23), ty$$94);
          }, argTys$$2));
          const memberFlags$$24 = (0, _ast.StaticMemberFlags)(new _ast.MemberKind(2, "Member"));
          const logicalCompiledName$$2 = ComputeLogicalName(id$$50, memberFlags$$24);
          const traitInfo$$2 = new _tast.TraitConstraintInfo(0, "TTrait", argTys$$2, logicalCompiledName$$2, memberFlags$$24, argTys$$2, retTy$$3, sln);
          const expr$$72 = new _tast.Expr(11, "Op", new _tast.TOp(29, "TraitCall", traitInfo$$2), (0, _Types.L)(), patternInput$$342[1], mItem$$2);
          const expr$$73 = (0, _TastOps.mkLambdas)(mItem$$2, (0, _Types.L)(), patternInput$$342[0], expr$$72, retTy$$3);

          const isSimpleArgument = function isSimpleArgument(e$$92) {
            isSimpleArgument: while (true) {
              var $target$$448, synExpr$$2, synExprs;

              switch (e$$92.tag) {
                case 0:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 3:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 21:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 38:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 39:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 31:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 40:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 41:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 42:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[0];
                  break;

                case 44:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[1];
                  break;

                case 1:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[2];
                  break;

                case 43:
                case 28:
                case 2:
                case 29:
                  $target$$448 = 1;
                  break;

                case 4:
                  $target$$448 = 2;
                  synExprs = e$$92.fields[0];
                  break;

                case 5:
                  $target$$448 = 2;
                  synExprs = e$$92.fields[0];
                  break;

                case 6:
                  $target$$448 = 2;
                  synExprs = e$$92.fields[1];
                  break;

                case 7:
                  $target$$448 = 3;
                  break;

                case 20:
                  $target$$448 = 4;
                  break;

                case 27:
                  $target$$448 = 5;
                  break;

                case 34:
                  $target$$448 = 6;
                  break;

                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 60:
                case 23:
                case 24:
                case 25:
                case 26:
                case 22:
                case 32:
                case 35:
                case 30:
                case 33:
                case 46:
                case 36:
                case 37:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 58:
                case 59:
                case 47:
                case 48:
                case 49:
                case 51:
                case 50:
                case 52:
                case 45:
                  $target$$448 = 7;
                  break;

                default:
                  $target$$448 = 0;
                  synExpr$$2 = e$$92.fields[2];
              }

              switch ($target$$448) {
                case 0:
                  {
                    e$$92 = synExpr$$2;
                    continue isSimpleArgument;
                  }

                case 1:
                  {
                    return true;
                  }

                case 2:
                  {
                    return (0, _List.forAll)(isSimpleArgument, synExprs);
                  }

                case 3:
                  {
                    const fields$$1 = e$$92.fields[2];
                    const copyOpt = e$$92.fields[1];

                    if ((0, _Seq.forAll)(function predicate$$36($arg$$50) {
                      return isSimpleArgument($arg$$50[0]);
                    }, (0, _Option.defaultArg)(copyOpt, [], function ($x$$51) {
                      return [$x$$51];
                    }))) {
                      return (0, _List.forAll)(function predicate$$37($arg$$53) {
                        return (0, _Seq.forAll)(isSimpleArgument, (0, _Option.defaultArg)((0, _lib.p23)($arg$$53[0], $arg$$53[1], $arg$$53[2]), [], function ($x$$52) {
                          return [$x$$52];
                        }));
                      }, fields$$1);
                    } else {
                      return false;
                    }
                  }

                case 4:
                  {
                    const synExpr2$$1 = e$$92.fields[3];
                    const synExpr$$3 = e$$92.fields[2];

                    if (isSimpleArgument(synExpr$$3)) {
                      e$$92 = synExpr2$$1;
                      continue isSimpleArgument;
                    } else {
                      return false;
                    }
                  }

                case 5:
                  {
                    const synExprOpt = e$$92.fields[2];
                    const synExpr2$$2 = e$$92.fields[1];
                    const synExpr$$4 = e$$92.fields[0];

                    if (isSimpleArgument(synExpr$$4) ? isSimpleArgument(synExpr2$$2) : false) {
                      return (0, _Seq.forAll)(isSimpleArgument, (0, _Option.defaultArg)(synExprOpt, [], function ($x$$54) {
                        return [$x$$54];
                      }));
                    } else {
                      return false;
                    }
                  }

                case 6:
                  {
                    const synExpr$$5 = e$$92.fields[0];
                    e$$92 = synExpr$$5;
                    continue isSimpleArgument;
                  }

                case 7:
                  {
                    return false;
                  }
              }
            }
          };

          Propagate(cenv$$141, overallTy$$30, env$$212, tpenv$$250, MakeApplicableExprNoFlex(cenv$$141, expr$$73), (0, _TastOps.tyOfExpr)(cenv$$141.g, expr$$73), delayed$$16);
          let patternInput$$343;

          const pred = function pred(_arg22$$1) {
            if (_arg22$$1.tag === 1) {
              const arg$$33 = _arg22$$1.fields[1];
              return isSimpleArgument(arg$$33);
            } else {
              return false;
            }
          };

          patternInput$$343 = [(0, _List.takeWhile)(pred, delayed$$16), (0, _List.skipWhile)(pred, delayed$$16)];
          const intermediateTy = patternInput$$343[1].tail == null ? overallTy$$30 : (0, _ConstraintSolver.NewInferenceType)();
          const patternInput$$344 = TcDelayed(cenv$$141, intermediateTy, env$$212, tpenv$$250, mItem$$2, MakeApplicableExprNoFlex(cenv$$141, expr$$73), (0, _TastOps.tyOfExpr)(cenv$$141.g, expr$$73), 1, patternInput$$343[0]);
          (0, _ConstraintSolver.AddCxMethodConstraint)(TcEnv$$get_DisplayEnv(env$$212), cenv$$141.css, mItem$$2, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), traitInfo$$2);
          const patternInput$$345 = TcDelayed(cenv$$141, overallTy$$30, env$$212, patternInput$$344[1], mItem$$2, MakeApplicableExprNoFlex(cenv$$141, patternInput$$344[0]), intermediateTy, 1, patternInput$$343[1]);
          return [patternInput$$345[0], patternInput$$345[1]];
        }

      case 6:
        {
          var $target$$449, arg$$34, atomicFlag$$6, mItemAndArg, otherDelayed$$12, _mTypeArgs$$5, arg$$35, atomicFlag$$7, mItemAndArg$$1, mItemAndTypeArgs, otherDelayed$$13, tyargs$$14;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 1) {
              $target$$449 = 0;
              arg$$34 = delayed$$16.head.fields[1];
              atomicFlag$$6 = delayed$$16.head.fields[0];
              mItemAndArg = delayed$$16.head.fields[2];
              otherDelayed$$12 = delayed$$16.tail;
            } else if (delayed$$16.head.tag === 0) {
              if (delayed$$16.tail.tail != null) {
                if (delayed$$16.tail.head.tag === 1) {
                  $target$$449 = 1;
                  _mTypeArgs$$5 = delayed$$16.head.fields[1];
                  arg$$35 = delayed$$16.tail.head.fields[1];
                  atomicFlag$$7 = delayed$$16.tail.head.fields[0];
                  mItemAndArg$$1 = delayed$$16.tail.head.fields[2];
                  mItemAndTypeArgs = delayed$$16.head.fields[2];
                  otherDelayed$$13 = delayed$$16.tail.tail;
                  tyargs$$14 = delayed$$16.head.fields[0];
                } else {
                  $target$$449 = 2;
                }
              } else {
                $target$$449 = 2;
              }
            } else {
              $target$$449 = 2;
            }
          } else {
            $target$$449 = 2;
          }

          switch ($target$$449) {
            case 0:
              {
                return TcNewDelegateThen(cenv$$141, overallTy$$30, env$$212, tpenv$$250, mItem$$2, mItemAndArg, ty$$95, arg$$34, atomicFlag$$6, otherDelayed$$12);
              }

            case 1:
              {
                const patternInput$$346 = TcNestedTypeApplication(cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$250, mItemAndTypeArgs, ty$$95, tyargs$$14);
                const item$$45 = new _NameResolution.Item(13, "DelegateCtor", patternInput$$346[0]);
                (0, _NameResolution.CallNameResolutionSink)(cenv$$141.tcSink, mItemAndTypeArgs, TcEnv$$get_NameEnv(env$$212), item$$45, item$$45, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$212), env$$212.eAccessRights);
                return TcNewDelegateThen(cenv$$141, overallTy$$30, env$$212, patternInput$$346[1], mItem$$2, mItemAndArg$$1, patternInput$$346[0], arg$$35, atomicFlag$$7, otherDelayed$$13);
              }

            case 2:
              {
                return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseOfDelegate)(), mItem$$2));
              }
          }
        }

      case 7:
        {
          var $target$$450, e2$$27, mStmt$$5, otherDelayed$$14, _mTypeArgs$$6, mExprAndTypeArgs$$6, otherDelayed$$15, tys$$3;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 4) {
              $target$$450 = 0;
              e2$$27 = delayed$$16.head.fields[0];
              mStmt$$5 = delayed$$16.head.fields[1];
              otherDelayed$$14 = delayed$$16.tail;
            } else if (delayed$$16.head.tag === 0) {
              $target$$450 = 1;
              _mTypeArgs$$6 = delayed$$16.head.fields[1];
              mExprAndTypeArgs$$6 = delayed$$16.head.fields[2];
              otherDelayed$$15 = delayed$$16.tail;
              tys$$3 = delayed$$16.head.fields[0];
            } else {
              $target$$450 = 2;
            }
          } else {
            $target$$450 = 2;
          }

          switch ($target$$450) {
            case 0:
              {
                if (!(otherDelayed$$14.tail == null)) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidAssignment)(), mStmt$$5));
                }

                UnifyTypes(cenv$$141, env$$212, mStmt$$5, overallTy$$30, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$141.g));
                (0, _tast.Val$$SetHasBeenReferenced)((0, _tast.ValRef$$get_Deref)(vref$$13));
                (0, _AccessibilityLogic.CheckValAccessible)(mItem$$2, env$$212.eAccessRights, vref$$13);
                (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckValAttributes)(cenv$$141.g, vref$$13, mItem$$2));
                const vty$$5 = (0, _tast.ValRef$$get_Type)(vref$$13);
                let vty2;

                if ((0, _TastOps.isByrefTy)(cenv$$141.g, vty$$5)) {
                  vty2 = (0, _TastOps.destByrefTy)(cenv$$141.g, vty$$5);
                } else {
                  if (!(0, _tast.ValRef$$get_IsMutable)(vref$$13)) {
                    (0, _ErrorLogger.error)(new ValNotMutable(TcEnv$$get_DisplayEnv(env$$212), vref$$13, mStmt$$5));
                  }

                  vty2 = vty$$5;
                }

                const patternInput$$347 = TcExprFlex(cenv$$141, true, false, vty2, env$$212, tpenv$$250, e2$$27);
                let vexp$$3;

                if ((0, _TastOps.isInByrefTy)(cenv$$141.g, vty$$5)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$writeToReadOnlyByref)(), mStmt$$5));
                  vexp$$3 = (0, _TastOps.mkAddrSet)(mStmt$$5, vref$$13, patternInput$$347[0]);
                } else if ((0, _TastOps.isByrefTy)(cenv$$141.g, vty$$5)) {
                  vexp$$3 = (0, _TastOps.mkAddrSet)(mStmt$$5, vref$$13, patternInput$$347[0]);
                } else {
                  vexp$$3 = (0, _TastOps.mkValSet)(mStmt$$5, vref$$13, patternInput$$347[0]);
                }

                return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, patternInput$$347[1], mStmt$$5, MakeApplicableExprNoFlex(cenv$$141, vexp$$3), (0, _TastOps.tyOfExpr)(cenv$$141.g, vexp$$3), 1, otherDelayed$$14);
              }

            case 1:
              {
                const checkTys$$1 = function checkTys$$1(tpenv$$259, kinds$$1) {
                  return TcTypesOrMeasures(kinds$$1, cenv$$141, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$212, tpenv$$259, tys$$3, mItem$$2);
                };

                const patternInput$$348 = TcVal(true, cenv$$141, env$$212, tpenv$$250, vref$$13, [new _tast.ValUseFlag(1, "NormalValUse"), (0, _Util.curry)(2, checkTys$$1)], afterResolution$$3, mItem$$2);
                const vexpFlex = patternInput$$348[2] ? MakeApplicableExprNoFlex(cenv$$141, patternInput$$348[1]) : MakeApplicableExprWithFlex(cenv$$141, env$$212, patternInput$$348[1]);
                return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, patternInput$$348[5], mExprAndTypeArgs$$6, vexpFlex, ApplicableExpr$$get_Type(vexpFlex), 0, otherDelayed$$15);
              }

            case 2:
              {
                const patternInput$$349 = TcVal(true, cenv$$141, env$$212, tpenv$$250, vref$$13, null, afterResolution$$3, mItem$$2);
                const vexpFlex$$1 = patternInput$$349[2] ? MakeApplicableExprNoFlex(cenv$$141, patternInput$$349[1]) : MakeApplicableExprWithFlex(cenv$$141, env$$212, patternInput$$349[1]);
                return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, patternInput$$349[5], mItem$$2, vexpFlex$$1, ApplicableExpr$$get_Type(vexpFlex$$1), 0, delayed$$16);
              }
          }
        }

      case 8:
        {
          if (pinfos.tail == null) {
            (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected error: empty property list", mItem$$2));
          }

          const pinfo = (0, _List.head)(pinfos);
          const patternInput$$350 = (0, _infos.PropInfo$$get_IsIndexer)(pinfo) ? GetMemberApplicationArgs(delayed$$16, cenv$$141, env$$212, tpenv$$250) : [0, null, (0, _Types.L)((0, _ast.mkSynUnit)(mItem$$2), (0, _Types.L)()), delayed$$16, tpenv$$250];

          if (!(0, _infos.PropInfo$$get_IsStatic)(pinfo)) {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyIsNotStatic$$Z721C83C5)(nm$$57), mItem$$2));
          }

          var $target$$451, e2$$28, mStmt$$6, otherDelayed$$16;

          if (patternInput$$350[3].tail != null) {
            if (patternInput$$350[3].head.tag === 4) {
              $target$$451 = 0;
              e2$$28 = patternInput$$350[3].head.fields[0];
              mStmt$$6 = patternInput$$350[3].head.fields[1];
              otherDelayed$$16 = patternInput$$350[3].tail;
            } else {
              $target$$451 = 1;
            }
          } else {
            $target$$451 = 1;
          }

          switch ($target$$451) {
            case 0:
              {
                if (!(otherDelayed$$16.tail == null)) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidAssignment)(), mStmt$$6));
                }

                UnifyTypes(cenv$$141, env$$212, mStmt$$6, overallTy$$30, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$141.g));
                const meths$$4 = (0, _infos.SettersOfPropInfos)(pinfos);

                if (meths$$4.tail == null) {
                  const meths$$5 = (0, _infos.GettersOfPropInfos)(pinfos);
                  const isByrefMethReturnSetter = (0, _List.exists)(function predicate$$38(_arg23$$1) {
                    if (_arg23$$1[1] != null) {
                      const pinfo$$1 = _arg23$$1[1];
                      return (0, _TastOps.isByrefTy)(cenv$$141.g, (0, _infos.PropInfo$$GetPropertyType$$73F6E43C)(pinfo$$1, cenv$$141.amap, mItem$$2));
                    } else {
                      return false;
                    }
                  }, meths$$5);

                  if (isByrefMethReturnSetter) {
                    if (meths$$5.tail == null) {
                      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyIsNotReadable$$Z721C83C5)(nm$$57), mItem$$2));
                    }

                    return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, patternInput$$350[4], patternInput$$350[1], (0, _Types.L)(), mItem$$2, mItem$$2, nm$$57, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), true, meths$$5, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), patternInput$$350[2], 0, patternInput$$350[3]);
                  } else {
                    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyCannotBeSet1$$Z721C83C5)(nm$$57), mItem$$2));
                  }
                } else {
                  const args$$74 = (0, _infos.PropInfo$$get_IsIndexer)(pinfo) ? patternInput$$350[2] : (0, _Types.L)();

                  if (meths$$4.tail == null) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyCannotBeSet1$$Z721C83C5)(nm$$57), mItem$$2));
                  }

                  return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, patternInput$$350[4], patternInput$$350[1], (0, _Types.L)(), mStmt$$6, mItem$$2, nm$$57, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), true, meths$$4, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), (0, _List.append)(args$$74, (0, _Types.L)(e2$$28, (0, _Types.L)())), 1, otherDelayed$$16);
                }
              }

            case 1:
              {
                const meths$$6 = (0, _infos.GettersOfPropInfos)(pinfos);

                if (meths$$6.tail == null) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyIsNotReadable$$Z721C83C5)(nm$$57), mItem$$2));
                }

                return TcMethodApplicationThen(cenv$$141, env$$212, overallTy$$30, null, patternInput$$350[4], patternInput$$350[1], (0, _Types.L)(), mItem$$2, mItem$$2, nm$$57, ad$$26, new _TastOps.Mutates(3, "NeverMutates"), true, meths$$6, afterResolution$$3, new _tast.ValUseFlag(1, "NormalValUse"), patternInput$$350[2], 0, patternInput$$350[3]);
              }
          }
        }

      case 9:
        {
          (0, _AccessibilityLogic.CheckILFieldInfoAccessible)(cenv$$141.g, cenv$$141.amap, mItem$$2, ad$$26, finfo$$4);

          if (!(0, _infos.ILFieldInfo$$get_IsStatic)(finfo$$4)) {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsNotStatic$$Z721C83C5)((0, _infos.ILFieldInfo$$get_FieldName)(finfo$$4)), mItem$$2));
          }

          (0, _AttributeChecking.CheckILFieldAttributes)(cenv$$141.g, finfo$$4, mItem$$2);
          const fref$$3 = (0, _infos.ILFieldInfo$$get_ILFieldRef)(finfo$$4);
          const exprty$$12 = (0, _infos.ILFieldInfo$$FieldType$$73F6E43C)(finfo$$4, cenv$$141.amap, mItem$$2);

          var $target$$452, _delayed$0027$$2, e2$$29, mStmt$$7;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 4) {
              $target$$452 = 0;
              _delayed$0027$$2 = delayed$$16.tail;
              e2$$29 = delayed$$16.head.fields[0];
              mStmt$$7 = delayed$$16.head.fields[1];
            } else {
              $target$$452 = 1;
            }
          } else {
            $target$$452 = 1;
          }

          switch ($target$$452) {
            case 0:
              {
                UnifyTypes(cenv$$141, env$$212, mStmt$$7, overallTy$$30, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$141.g));
                const patternInput$$351 = TcExprFlex(cenv$$141, true, false, exprty$$12, env$$212, tpenv$$250, e2$$29);
                const expr$$74 = BuildILStaticFieldSet(mStmt$$7, finfo$$4, patternInput$$351[0]);
                return [expr$$74, patternInput$$351[1]];
              }

            case 1:
              {
                let expr$$75;
                const matchValue$$163 = (0, _infos.ILFieldInfo$$get_LiteralValue)(finfo$$4);

                if (matchValue$$163 == null) {
                  const isValueType$$3 = (0, _infos.ILFieldInfo$$get_IsValueType)(finfo$$4);
                  const valu$$4 = isValueType$$3 ? new _il.ILBoxity(1, "AsValue") : new _il.ILBoxity(0, "AsObject");
                  const fspec$$6 = (0, _il.mkILFieldSpec)(fref$$3, (0, _il.mkILNamedTy)(valu$$4, fref$$3.DeclaringTypeRef, (0, _Types.L)()));
                  expr$$75 = (0, _TastOps.mkAsmExpr)((0, _List.append)((0, _Types.L)((0, _il.mkNormalLdsfld)(fspec$$6), (0, _Types.L)()), (0, _infos.ILFieldInfo$$get_IsInitOnly)(finfo$$4) ? (0, _Types.L)(new _il.ILInstr(33, "AI_nop"), (0, _Types.L)()) : (0, _Types.L)()), (0, _infos.ILFieldInfo$$get_TypeInst)(finfo$$4), (0, _Types.L)(), (0, _Types.L)(exprty$$12, (0, _Types.L)()), mItem$$2);
                } else {
                  const lit$$4 = matchValue$$163;
                  expr$$75 = new _tast.Expr(0, "Const", TcFieldInit(mItem$$2, lit$$4), mItem$$2, exprty$$12);
                }

                return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, tpenv$$250, mItem$$2, MakeApplicableExprWithFlex(cenv$$141, env$$212, expr$$75), exprty$$12, 0, delayed$$16);
              }
          }
        }

      case 10:
        {
          (0, _AccessibilityLogic.CheckRecdFieldInfoAccessible)(cenv$$141.amap, mItem$$2, ad$$26, rfinfo$$2);

          if (!(0, _infos.RecdFieldInfo$$get_IsStatic)(rfinfo$$2)) {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldIsNotStatic$$Z721C83C5)((0, _infos.RecdFieldInfo$$get_Name)(rfinfo$$2)), mItem$$2));
          }

          (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckRecdFieldInfoAttributes)(cenv$$141.g, rfinfo$$2, mItem$$2));
          const fref$$4 = (0, _infos.RecdFieldInfo$$get_RecdFieldRef)(rfinfo$$2);
          const fieldTy = (0, _infos.RecdFieldInfo$$get_FieldType)(rfinfo$$2);
          var $target$$453, e2$$30, mStmt$$8, otherDelayed$$17;

          if (delayed$$16.tail != null) {
            if (delayed$$16.head.tag === 4) {
              $target$$453 = 0;
              e2$$30 = delayed$$16.head.fields[0];
              mStmt$$8 = delayed$$16.head.fields[1];
              otherDelayed$$17 = delayed$$16.tail;
            } else {
              $target$$453 = 1;
            }
          } else {
            $target$$453 = 1;
          }

          switch ($target$$453) {
            case 0:
              {
                if (!(otherDelayed$$17.tail == null)) {
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidAssignment)(), mStmt$$8));
                }

                (0, _MethodCalls.CheckRecdFieldMutation)(mItem$$2, TcEnv$$get_DisplayEnv(env$$212), rfinfo$$2);
                UnifyTypes(cenv$$141, env$$212, mStmt$$8, overallTy$$30, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$141.g));
                const fieldTy$$1 = (0, _infos.RecdFieldInfo$$get_FieldType)(rfinfo$$2);
                const patternInput$$352 = TcExprFlex(cenv$$141, true, false, fieldTy$$1, env$$212, tpenv$$250, e2$$30);
                const expr$$76 = (0, _TastOps.mkStaticRecdFieldSet)((0, _infos.RecdFieldInfo$$get_RecdFieldRef)(rfinfo$$2), (0, _infos.RecdFieldInfo$$get_TypeInst)(rfinfo$$2), patternInput$$352[0], mStmt$$8);
                return [expr$$76, patternInput$$352[1]];
              }

            case 1:
              {
                const exprty$$13 = fieldTy;
                let expr$$77;
                const matchValue$$164 = (0, _infos.RecdFieldInfo$$get_LiteralValue)(rfinfo$$2);

                if (matchValue$$164 == null) {
                  expr$$77 = (0, _TastOps.mkStaticRecdFieldGet)(fref$$4, (0, _infos.RecdFieldInfo$$get_TypeInst)(rfinfo$$2), mItem$$2);
                } else {
                  const lit$$5 = matchValue$$164;
                  expr$$77 = new _tast.Expr(0, "Const", lit$$5, mItem$$2, exprty$$13);
                }

                return PropagateThenTcDelayed(cenv$$141, overallTy$$30, env$$212, tpenv$$250, mItem$$2, MakeApplicableExprWithFlex(cenv$$141, env$$212, expr$$77), exprty$$13, 0, delayed$$16);
              }
          }
        }

      case 11:
        {
          return TcEventValueThen(cenv$$141, overallTy$$30, env$$212, tpenv$$250, mItem$$2, mItem$$2, null, einfo, delayed$$16);
        }

      case 12:
        {
          RecordNameAndTypeResolutions_IdeallyWithoutHavingOtherEffects_Delayed(cenv$$141, env$$212, tpenv$$250, delayed$$16);
          const matchValue$$165 = usageTextOpt();

          if (matchValue$$165 != null) {
            const usageText = matchValue$$165;
            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationNotUsedCorrectly2$$Z384F8060)(nm$$58, usageText), mItem$$2));
          } else {
            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomOperationNotUsedCorrectly$$Z721C83C5)(nm$$58), mItem$$2));
          }
        }

      case 13:
        {
          return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLookupMayNotBeUsedHere)(), mItem$$2));
        }
    }
  }
}

function GetSynMemberApplicationArgs(delayed$$18, tpenv$$265) {
  var $target$$454, arg$$36, atomicFlag$$8, otherDelayed$$18, _mExprAndArg$$1, arg$$37, atomicFlag$$9, mTypeArgs$$4, otherDelayed$$19, tyargs$$15, mTypeArgs$$5, otherDelayed$$20, tyargs$$16, otherDelayed$$21;

  if (delayed$$18.tail != null) {
    if (delayed$$18.head.tag === 1) {
      $target$$454 = 0;
      arg$$36 = delayed$$18.head.fields[1];
      atomicFlag$$8 = delayed$$18.head.fields[0];
      otherDelayed$$18 = delayed$$18.tail;
    } else if (delayed$$18.head.tag === 0) {
      if (delayed$$18.tail.tail != null) {
        if (delayed$$18.tail.head.tag === 1) {
          $target$$454 = 1;
          _mExprAndArg$$1 = delayed$$18.tail.head.fields[2];
          arg$$37 = delayed$$18.tail.head.fields[1];
          atomicFlag$$9 = delayed$$18.tail.head.fields[0];
          mTypeArgs$$4 = delayed$$18.head.fields[1];
          otherDelayed$$19 = delayed$$18.tail.tail;
          tyargs$$15 = delayed$$18.head.fields[0];
        } else {
          $target$$454 = 2;
          mTypeArgs$$5 = delayed$$18.head.fields[1];
          otherDelayed$$20 = delayed$$18.tail;
          tyargs$$16 = delayed$$18.head.fields[0];
        }
      } else {
        $target$$454 = 2;
        mTypeArgs$$5 = delayed$$18.head.fields[1];
        otherDelayed$$20 = delayed$$18.tail;
        tyargs$$16 = delayed$$18.head.fields[0];
      }
    } else {
      $target$$454 = 3;
      otherDelayed$$21 = delayed$$18;
    }
  } else {
    $target$$454 = 3;
    otherDelayed$$21 = delayed$$18;
  }

  switch ($target$$454) {
    case 0:
      {
        return [atomicFlag$$8, null, (0, _Types.L)(arg$$36, (0, _Types.L)()), otherDelayed$$18, tpenv$$265];
      }

    case 1:
      {
        return [atomicFlag$$9, [tyargs$$15, mTypeArgs$$4], (0, _Types.L)(arg$$37, (0, _Types.L)()), otherDelayed$$19, tpenv$$265];
      }

    case 2:
      {
        return [0, [tyargs$$16, mTypeArgs$$5], (0, _Types.L)(), otherDelayed$$20, tpenv$$265];
      }

    case 3:
      {
        return [1, null, (0, _Types.L)(), otherDelayed$$21, tpenv$$265];
      }
  }
}

function TcMemberTyArgsOpt(cenv$$142, env$$213, tpenv$$266, tyargsOpt$$1) {
  if (tyargsOpt$$1 != null) {
    const tyargs$$17 = tyargsOpt$$1[0];
    const mTypeArgs$$6 = tyargsOpt$$1[1];
    const patternInput$$353 = TcTypesOrMeasures(null, cenv$$142, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$213, tpenv$$266, tyargs$$17, mTypeArgs$$6);
    return [patternInput$$353[0], patternInput$$353[1]];
  } else {
    return [null, tpenv$$266];
  }
}

function GetMemberApplicationArgs(delayed$$19, cenv$$143, env$$214, tpenv$$268) {
  const patternInput$$354 = GetSynMemberApplicationArgs(delayed$$19, tpenv$$268);
  const patternInput$$355 = TcMemberTyArgsOpt(cenv$$143, env$$214, patternInput$$354[4], patternInput$$354[1]);
  return [patternInput$$354[0], patternInput$$355[0], patternInput$$354[2], patternInput$$354[3], patternInput$$355[1]];
}

function TcLookupThen(cenv$$144, overallTy$$31, env$$215, tpenv$$271, mObjExpr, objExpr$$7, objExprTy, longId$$12, delayed$$21, mExprAndLongId) {
  const objArgs$$1 = (0, _Types.L)(objExpr$$7, (0, _Types.L)());
  const ad$$27 = env$$215.eAccessRights;
  let findFlag;
  const baseCall = (0, _MethodCalls.IsBaseCall)(objArgs$$1);
  findFlag = baseCall ? new _InfoReader.FindMemberFlag(1, "PreferOverrides") : new _InfoReader.FindMemberFlag(0, "IgnoreOverrides");

  if ((0, _TastOps.isTyparTy)(cenv$$144.g, objExprTy)) {
    GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$144, TcEnv$$get_DisplayEnv(env$$215), mExprAndLongId, (0, _TastOps.freeInTypeLeftToRight)(cenv$$144.g, false, objExprTy));
  }

  const patternInput$$356 = (0, _NameResolution.ResolveExprDotLongIdentAndComputeRange)(cenv$$144.tcSink, cenv$$144.nameResolver, mExprAndLongId, ad$$27, env$$215.eNameResEnv, objExprTy, longId$$12, findFlag, false);
  const mExprAndItem = (0, _range.unionRanges)(mObjExpr, patternInput$$356[1]);
  const delayed$$22 = delayRest(patternInput$$356[2], mExprAndItem, delayed$$21);
  var $target$$455;

  if (patternInput$$356[0].tag === 10) {
    $target$$455 = 0;
  } else if (patternInput$$356[0].tag === 9) {
    $target$$455 = 1;
  } else if (patternInput$$356[0].tag === 5) {
    $target$$455 = 2;
  } else if (patternInput$$356[0].tag === 7) {
    $target$$455 = 3;
  } else if (patternInput$$356[0].tag === 8) {
    $target$$455 = 4;
  } else if (patternInput$$356[0].tag === 12) {
    $target$$455 = 5;
  } else if (patternInput$$356[0].tag === 13) {
    $target$$455 = 5;
  } else {
    $target$$455 = 6;
  }

  switch ($target$$455) {
    case 0:
      {
        const minfos$$4 = patternInput$$356[0].fields[1];
        const methodName$$4 = patternInput$$356[0].fields[0];
        const patternInput$$357 = GetSynMemberApplicationArgs(delayed$$22, tpenv$$271);
        const mutates = (methodName$$4 === "MoveNext" ? true : methodName$$4 === "GetNextArg") ? new _TastOps.Mutates(1, "DefinitelyMutates") : new _TastOps.Mutates(2, "PossiblyMutates");
        const patternInput$$358 = TcMemberTyArgsOpt(cenv$$144, env$$215, patternInput$$357[4], patternInput$$357[1]);
        const meths$$7 = (0, _List.map)(function mapping$$78(minfo$$15) {
          return [minfo$$15, null];
        }, minfos$$4);
        return TcMethodApplicationThen(cenv$$144, env$$215, overallTy$$31, null, patternInput$$358[1], patternInput$$358[0], objArgs$$1, mExprAndItem, patternInput$$356[1], methodName$$4, ad$$27, mutates, false, meths$$7, patternInput$$356[3], new _tast.ValUseFlag(1, "NormalValUse"), patternInput$$357[2], patternInput$$357[0], patternInput$$357[3]);
      }

    case 1:
      {
        const pinfos$$4 = patternInput$$356[0].fields[1];
        const nm$$59 = patternInput$$356[0].fields[0];

        if (pinfos$$4.tail == null) {
          (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected error: empty property list", patternInput$$356[1]));
        }

        const pinfo$$2 = (0, _List.head)(pinfos$$4);
        const patternInput$$359 = (0, _infos.PropInfo$$get_IsIndexer)(pinfo$$2) ? GetMemberApplicationArgs(delayed$$22, cenv$$144, env$$215, tpenv$$271) : [0, null, (0, _Types.L)((0, _ast.mkSynUnit)(patternInput$$356[1]), (0, _Types.L)()), delayed$$22, tpenv$$271];

        if ((0, _infos.PropInfo$$get_IsStatic)(pinfo$$2)) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyIsStatic$$Z721C83C5)(nm$$59), patternInput$$356[1]));
        }

        var $target$$456, e2$$31, mStmt$$9, otherDelayed$$22;

        if (patternInput$$359[3].tail != null) {
          if (patternInput$$359[3].head.tag === 4) {
            $target$$456 = 0;
            e2$$31 = patternInput$$359[3].head.fields[0];
            mStmt$$9 = patternInput$$359[3].head.fields[1];
            otherDelayed$$22 = patternInput$$359[3].tail;
          } else {
            $target$$456 = 1;
          }
        } else {
          $target$$456 = 1;
        }

        switch ($target$$456) {
          case 0:
            {
              if (!(otherDelayed$$22.tail == null)) {
                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidAssignment)(), mStmt$$9));
              }

              UnifyTypes(cenv$$144, env$$215, mStmt$$9, overallTy$$31, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$144.g));
              const meths$$8 = (0, _infos.SettersOfPropInfos)(pinfos$$4);

              if (meths$$8.tail == null) {
                const meths$$9 = (0, _infos.GettersOfPropInfos)(pinfos$$4);
                const isByrefMethReturnSetter$$1 = (0, _List.exists)(function predicate$$39(_arg24$$1) {
                  if (_arg24$$1[1] != null) {
                    const pinfo$$3 = _arg24$$1[1];
                    return (0, _TastOps.isByrefTy)(cenv$$144.g, (0, _infos.PropInfo$$GetPropertyType$$73F6E43C)(pinfo$$3, cenv$$144.amap, patternInput$$356[1]));
                  } else {
                    return false;
                  }
                }, meths$$9);

                if (isByrefMethReturnSetter$$1) {
                  if (meths$$9.tail == null) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyIsNotReadable$$Z721C83C5)(nm$$59), patternInput$$356[1]));
                  }

                  return TcMethodApplicationThen(cenv$$144, env$$215, overallTy$$31, null, patternInput$$359[4], patternInput$$359[1], objArgs$$1, mExprAndItem, patternInput$$356[1], nm$$59, ad$$27, new _TastOps.Mutates(2, "PossiblyMutates"), true, meths$$9, patternInput$$356[3], new _tast.ValUseFlag(1, "NormalValUse"), patternInput$$359[2], patternInput$$359[0], patternInput$$359[3]);
                } else {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyCannotBeSet1$$Z721C83C5)(nm$$59), patternInput$$356[1]));
                }
              } else {
                const args$$78 = (0, _infos.PropInfo$$get_IsIndexer)(pinfo$$2) ? patternInput$$359[2] : (0, _Types.L)();
                const mut = (0, _TastOps.isStructTy)(cenv$$144.g, (0, _TastOps.tyOfExpr)(cenv$$144.g, objExpr$$7)) ? new _TastOps.Mutates(1, "DefinitelyMutates") : new _TastOps.Mutates(2, "PossiblyMutates");
                return TcMethodApplicationThen(cenv$$144, env$$215, overallTy$$31, null, patternInput$$359[4], patternInput$$359[1], objArgs$$1, mStmt$$9, patternInput$$356[1], nm$$59, ad$$27, mut, true, meths$$8, patternInput$$356[3], new _tast.ValUseFlag(1, "NormalValUse"), (0, _List.append)(args$$78, (0, _Types.L)(e2$$31, (0, _Types.L)())), patternInput$$359[0], (0, _Types.L)());
              }
            }

          case 1:
            {
              const meths$$10 = (0, _infos.GettersOfPropInfos)(pinfos$$4);

              if (meths$$10.tail == null) {
                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyIsNotReadable$$Z721C83C5)(nm$$59), patternInput$$356[1]));
              }

              return TcMethodApplicationThen(cenv$$144, env$$215, overallTy$$31, null, patternInput$$359[4], patternInput$$359[1], objArgs$$1, mExprAndItem, patternInput$$356[1], nm$$59, ad$$27, new _TastOps.Mutates(2, "PossiblyMutates"), true, meths$$10, patternInput$$356[3], new _tast.ValUseFlag(1, "NormalValUse"), patternInput$$359[2], patternInput$$359[0], patternInput$$359[3]);
            }
        }
      }

    case 2:
      {
        const rfinfo$$3 = patternInput$$356[0].fields[0];
        (0, _MethodCalls.RecdFieldInstanceChecks)(cenv$$144.g, cenv$$144.amap, ad$$27, patternInput$$356[1], rfinfo$$3);
        const tgty$$13 = (0, _infos.RecdFieldInfo$$get_DeclaringType)(rfinfo$$3);
        const valu$$5 = (0, _TastOps.isStructTy)(cenv$$144.g, tgty$$13);
        (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$215), cenv$$144.css, patternInput$$356[1], new _ConstraintSolver.OptionalTrace(0, "NoTrace"), tgty$$13, objExprTy);
        const objExpr$$8 = valu$$5 ? objExpr$$7 : (0, _TastOps.mkCoerceExpr)(objExpr$$7, tgty$$13, mExprAndItem, objExprTy);
        const fieldTy$$2 = (0, _infos.RecdFieldInfo$$get_FieldType)(rfinfo$$3);
        var $target$$457, e2$$32, mStmt$$10, otherDelayed$$23;

        if (delayed$$22.tail != null) {
          if (delayed$$22.head.tag === 4) {
            $target$$457 = 0;
            e2$$32 = delayed$$22.head.fields[0];
            mStmt$$10 = delayed$$22.head.fields[1];
            otherDelayed$$23 = delayed$$22.tail;
          } else {
            $target$$457 = 1;
          }
        } else {
          $target$$457 = 1;
        }

        switch ($target$$457) {
          case 0:
            {
              if (!(otherDelayed$$23.tail == null)) {
                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidAssignment)(), patternInput$$356[1]));
              }

              (0, _MethodCalls.CheckRecdFieldMutation)(patternInput$$356[1], TcEnv$$get_DisplayEnv(env$$215), rfinfo$$3);
              UnifyTypes(cenv$$144, env$$215, mStmt$$10, overallTy$$31, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$144.g));
              const patternInput$$360 = TcExprFlex(cenv$$144, true, false, fieldTy$$2, env$$215, tpenv$$271, e2$$32);
              return [BuildRecdFieldSet(cenv$$144.g, mStmt$$10, objExpr$$8, rfinfo$$3, patternInput$$360[0]), patternInput$$360[1]];
            }

          case 1:
            {
              const objExpr$0027 = (0, _TastOps.mkRecdFieldGet)(cenv$$144.g, objExpr$$8, (0, _infos.RecdFieldInfo$$get_RecdFieldRef)(rfinfo$$3), (0, _infos.RecdFieldInfo$$get_TypeInst)(rfinfo$$3), mExprAndItem);
              return PropagateThenTcDelayed(cenv$$144, overallTy$$31, env$$215, tpenv$$271, mExprAndItem, MakeApplicableExprWithFlex(cenv$$144, env$$215, objExpr$0027), fieldTy$$2, 0, delayed$$22);
            }
        }
      }

    case 3:
      {
        const finfo$$5 = patternInput$$356[0].fields[0];
        (0, _MethodCalls.ILFieldInstanceChecks)(cenv$$144.g, cenv$$144.amap, ad$$27, patternInput$$356[1], finfo$$5);
        const exprty$$14 = (0, _infos.ILFieldInfo$$FieldType$$73F6E43C)(finfo$$5, cenv$$144.amap, patternInput$$356[1]);

        var $target$$458, _delayed$0027$$3, e2$$33, mStmt$$11;

        if (delayed$$22.tail != null) {
          if (delayed$$22.head.tag === 4) {
            $target$$458 = 0;
            _delayed$0027$$3 = delayed$$22.tail;
            e2$$33 = delayed$$22.head.fields[0];
            mStmt$$11 = delayed$$22.head.fields[1];
          } else {
            $target$$458 = 1;
          }
        } else {
          $target$$458 = 1;
        }

        switch ($target$$458) {
          case 0:
            {
              UnifyTypes(cenv$$144, env$$215, mStmt$$11, overallTy$$31, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$144.g));
              const patternInput$$361 = TcExprFlex(cenv$$144, true, false, exprty$$14, env$$215, tpenv$$271, e2$$33);
              const expr$$78 = BuildILFieldSet(cenv$$144.g, mStmt$$11, objExpr$$7, finfo$$5, patternInput$$361[0]);
              return [expr$$78, patternInput$$361[1]];
            }

          case 1:
            {
              const expr$$79 = BuildILFieldGet(cenv$$144.g, cenv$$144.amap, mExprAndItem, objExpr$$7, finfo$$5);
              return PropagateThenTcDelayed(cenv$$144, overallTy$$31, env$$215, tpenv$$271, mExprAndItem, MakeApplicableExprWithFlex(cenv$$144, env$$215, expr$$79), exprty$$14, 0, delayed$$22);
            }
        }
      }

    case 4:
      {
        const einfo$$1 = patternInput$$356[0].fields[0];
        return TcEventValueThen(cenv$$144, overallTy$$31, env$$215, tpenv$$271, patternInput$$356[1], mExprAndItem, [objExpr$$7, objExprTy], einfo$$1, delayed$$22);
      }

    case 5:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorsCannotBeFirstClassValues)(), patternInput$$356[1]));
      }

    case 6:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcSyntaxFormUsedOnlyWithRecordLabelsPropertiesAndFields)(), patternInput$$356[1]));
      }
  }
}

function TcEventValueThen(cenv$$145, overallTy$$32, env$$216, tpenv$$277, mItem$$5, mExprAndItem$$1, objDetails, einfo$$2, delayed$$25) {
  const nm$$60 = (0, _infos.EventInfo$$get_EventName)(einfo$$2);
  const ad$$28 = env$$216.eAccessRights;
  const matchValue$$166 = [objDetails, (0, _infos.EventInfo$$get_IsStatic)(einfo$$2)];
  var $target$$459;

  if (matchValue$$166[0] == null) {
    if (matchValue$$166[1]) {
      $target$$459 = 2;
    } else {
      $target$$459 = 1;
    }
  } else if (matchValue$$166[1]) {
    $target$$459 = 0;
  } else {
    $target$$459 = 2;
  }

  switch ($target$$459) {
    case 0:
      {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcEventIsStatic$$Z721C83C5)(nm$$60), mItem$$5));
        break;
      }

    case 1:
      {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcEventIsNotStatic$$Z721C83C5)(nm$$60), mItem$$5));
        break;
      }
  }

  const delegateType = (0, _infos.EventInfo$$GetDelegateType$$73F6E43C)(einfo$$2, cenv$$145.amap, mItem$$5);
  const patternInput$$362 = (0, _InfoReader.GetSigOfFunctionForDelegate)(cenv$$145.infoReader, delegateType, mItem$$5, ad$$28);
  const invokeMethInfo = patternInput$$362.fields[0];
  const compiledViewOfDelArgTys = patternInput$$362.fields[1];
  const objArgs$$2 = (0, _List.ofArray)((0, _Option.defaultArg)((0, _Option.defaultArg)(objDetails, null, function (tuple$$22) {
    return tuple$$22[0];
  }), [], function ($x$$55) {
    return [$x$$55];
  }));
  (0, _MethodCalls.MethInfoChecks)(cenv$$145.g, cenv$$145.amap, true, null, objArgs$$2, env$$216.eAccessRights, mItem$$5, invokeMethInfo);
  const argsTy = (0, _InfoReader.ArgsTypOfEventInfo)(cenv$$145.infoReader, mItem$$5, ad$$28, einfo$$2);

  if (!(0, _TastOps.slotSigHasVoidReturnTy)((0, _infos.MethInfo$$GetSlotSig$$73F6E43C)(invokeMethInfo, cenv$$145.amap, mItem$$5))) {
    (0, _ErrorLogger.errorR)((0, _infos.nonStandardEventError)((0, _infos.EventInfo$$get_EventName)(einfo$$2), mItem$$5));
  }

  const delEventTy = (0, _TastOps.mkIEventType)(cenv$$145.g, delegateType, argsTy);

  const bindObjArgs = function bindObjArgs(f$$36) {
    if (objDetails != null) {
      const objExprTy$$1 = objDetails[1];
      const objExpr$$9 = objDetails[0];
      return (0, _TastOps.mkCompGenLetIn)(mItem$$5, "eventTarget", objExprTy$$1, objExpr$$9, function (tupledArg$$58) {
        return f$$36((0, _Types.L)(tupledArg$$58[1], (0, _Types.L)()));
      });
    } else {
      return f$$36((0, _Types.L)());
    }
  };

  const expr$$80 = bindObjArgs(function (objVars) {
    var patternInput$$363, patternInput$$364, patternInput$$365, patternInput$$366, fvty, patternInput$$367, createExpr;
    return (0, _TastOps.mkCallCreateEvent)(cenv$$145.g, mItem$$5, delegateType, argsTy, (patternInput$$363 = (0, _TastOps.mkCompGenLocal)(mItem$$5, "eventDelegate", delegateType), (patternInput$$364 = BuildPossiblyConditionalMethodCall(cenv$$145, env$$216, new _TastOps.Mutates(2, "PossiblyMutates"), mItem$$5, false, (0, _infos.EventInfo$$get_AddMethod)(einfo$$2), new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), objVars, (0, _Types.L)(patternInput$$363[1], (0, _Types.L)())), (0, _TastOps.mkLambda)(mItem$$5, patternInput$$363[0], patternInput$$364[0], (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$145.g)))), (patternInput$$365 = (0, _TastOps.mkCompGenLocal)(mItem$$5, "eventDelegate", delegateType), (patternInput$$366 = BuildPossiblyConditionalMethodCall(cenv$$145, env$$216, new _TastOps.Mutates(2, "PossiblyMutates"), mItem$$5, false, (0, _infos.EventInfo$$get_RemoveMethod)(einfo$$2), new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(), objVars, (0, _Types.L)(patternInput$$365[1], (0, _Types.L)())), (0, _TastOps.mkLambda)(mItem$$5, patternInput$$365[0], patternInput$$366[0], (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$145.g)))), (fvty = (0, _TastOps.op_MinusMinusGreater)((0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$145.g), (0, _TastOps.op_MinusMinusGreater)(argsTy, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$145.g))), (patternInput$$367 = (0, _TastOps.mkCompGenLocal)(mItem$$5, "callback", fvty), (createExpr = (0, _MethodCalls.BuildNewDelegateExpr)(einfo$$2, cenv$$145.g, cenv$$145.amap, delegateType, invokeMethInfo, compiledViewOfDelArgTys, patternInput$$367[1], fvty, mItem$$5), (0, _TastOps.mkLambda)(mItem$$5, patternInput$$367[0], createExpr, delegateType)))));
  });
  const exprty$$15 = delEventTy;
  return PropagateThenTcDelayed(cenv$$145, overallTy$$32, env$$216, tpenv$$277, mExprAndItem$$1, MakeApplicableExprNoFlex(cenv$$145, expr$$80), exprty$$15, 0, delayed$$25);
}

function TcMethodApplicationThen(cenv$$146, env$$217, overallTy$$33, objTyOpt, tpenv$$278, callerTyArgs, objArgs$$3, m$$309, mItem$$6, methodName$$5, ad$$29, mut$$1, isProp$$1, meths$$11, afterResolution$$6, isSuperInit$$1, args$$79, atomicFlag$$13, delayed$$26) {
  const mWholeExpr$$7 = (0, _List.fold)(function folder$$5(m$$310, arg$$38) {
    return (0, _range.unionRanges)(m$$310, (0, _ast.SynExpr$$get_Range)(arg$$38));
  }, m$$309, args$$79);
  const exprTy$$2 = delayed$$26.tail == null ? overallTy$$33 : (0, _ConstraintSolver.NewInferenceType)();
  const patternInput$$368 = TcMethodApplication(false, cenv$$146, env$$217, tpenv$$278, callerTyArgs, objArgs$$3, mWholeExpr$$7, mItem$$6, methodName$$5, objTyOpt, ad$$29, mut$$1, isProp$$1, meths$$11, afterResolution$$6, isSuperInit$$1, args$$79, exprTy$$2, delayed$$26);
  const expr$$81 = patternInput$$368[0][0];
  const delayed$$27 = patternInput$$368[0][2];
  const attributeAssignedNamedItems = patternInput$$368[0][1];

  if (!(attributeAssignedNamedItems.tail == null)) {
    const id$$51 = (0, _List.head)(attributeAssignedNamedItems).fields[0];
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNamedArgumentDidNotMatch$$Z721C83C5)((0, _ast.Ident$$get_idText)(id$$51)), (0, _ast.Ident$$get_idRange)(id$$51)));
  }

  const exprty$$16 = (0, _TastOps.tyOfExpr)(cenv$$146.g, expr$$81);
  return PropagateThenTcDelayed(cenv$$146, overallTy$$33, env$$217, patternInput$$368[1], mWholeExpr$$7, MakeApplicableExprNoFlex(cenv$$146, expr$$81), exprty$$16, atomicFlag$$13, delayed$$27);
}

function GetNewInferenceTypeForMethodArg(cenv$$147, env$$218, tpenv$$280, x$$109) {
  GetNewInferenceTypeForMethodArg: while (true) {
    const activePatternResult48222 = (0, _ast.$007CSynExprParen$007C_$007C)(x$$109);

    if (activePatternResult48222 != null) {
      cenv$$147 = cenv$$147;
      env$$218 = env$$218;
      tpenv$$280 = tpenv$$280;
      x$$109 = activePatternResult48222[0];
      continue GetNewInferenceTypeForMethodArg;
    } else {
      var $target$$461, a$$52, m$$311, a$$53, a$$54, raw$$2;

      if (x$$109.tag === 44) {
        if (x$$109.fields[0]) {
          $target$$461 = 0;
          a$$52 = x$$109.fields[1];
          m$$311 = x$$109.fields[3];
        } else {
          $target$$461 = 3;
        }
      } else if (x$$109.tag === 15) {
        $target$$461 = 1;
        a$$53 = x$$109.fields[3];
      } else if (x$$109.tag === 1) {
        $target$$461 = 2;
        a$$54 = x$$109.fields[2];
        raw$$2 = x$$109.fields[1];
      } else {
        $target$$461 = 3;
      }

      switch ($target$$461) {
        case 0:
          {
            return (0, _TastOps.mkByrefTyWithInference)(cenv$$147.g, GetNewInferenceTypeForMethodArg(cenv$$147, env$$218, tpenv$$280, a$$52), (0, _ConstraintSolver.NewByRefKindInferenceType)(cenv$$147.g, m$$311));
          }

        case 1:
          {
            return (0, _TastOps.mkFunTy)((0, _ConstraintSolver.NewInferenceType)(), GetNewInferenceTypeForMethodArg(cenv$$147, env$$218, tpenv$$280, a$$53));
          }

        case 2:
          {
            if (raw$$2) {
              return (0, _TastOps.mkRawQuotedExprTy)(cenv$$147.g);
            } else {
              return (0, _TastOps.mkQuotedExprTy)(cenv$$147.g, GetNewInferenceTypeForMethodArg(cenv$$147, env$$218, tpenv$$280, a$$54));
            }
          }

        case 3:
          {
            return (0, _ConstraintSolver.NewInferenceType)();
          }
      }
    }
  }
}

function TcMethodApplication(isCheckingAttributeCall, cenv$$148, env$$219, tpenv$$281, tyargsOpt$$6, objArgs$$4, mMethExpr, mItem$$7, methodName$$6, objTyOpt$$1, ad$$30, mut$$2, isProp$$2, calledMethsAndProps, afterResolution$$7, isSuperInit$$2, curriedCallerArgs, exprTy$$3, delayed$$28) {
  var calledMeth, calledMeth$$5, curriedCalledArgs$$1, calledMeth$$3, curriedCalledArgs, unrefinedItem, result$$2, callSink$$2;
  const denv$$24 = TcEnv$$get_DisplayEnv(env$$219);

  const isSimpleFormalArg = function isSimpleFormalArg(tupledArg$$59) {
    if ((!tupledArg$$59[0] ? !tupledArg$$59[2] : false) ? !(0, _infos.OptionalArgInfo$$get_IsOptional)(tupledArg$$59[3]) : false) {
      return (0, _Util.equals)(tupledArg$$59[4], new _infos.CallerInfo(0, "NoCallerInfo"));
    } else {
      return false;
    }
  };

  const callerObjArgTys = (0, _List.map)(function mapping$$79(arg10$0040$$27) {
    return (0, _TastOps.tyOfExpr)(cenv$$148.g, arg10$0040$$27);
  }, objArgs$$4);
  const calledMeths = (0, _List.map)(function mapping$$80(tuple$$23) {
    return tuple$$23[0];
  }, calledMethsAndProps);
  const patternInput$$370 = calledMeths.tail != null ? calledMeths.tail.tail == null ? (calledMeth = calledMeths.head, !isProp$$2 ? (0, _List.length)((0, _infos.MethInfo$$get_NumArgs)(calledMeth)) > 1 : false) ? [(0, _Types.L)(), (0, _ConstraintSolver.NewInferenceType)(), (0, _List.append)((0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.map)(function (x$$110) {
      return new DelayedItem(1, "DelayedApp", 1, x$$110, (0, _ast.SynExpr$$get_Range)(x$$110));
    }, curriedCallerArgs);
  })), delayed$$28)] : (!isProp$$2 ? (0, _List.exists)(function predicate$$40(calledMeth$$2) {
    return (0, _List.length)((0, _infos.MethInfo$$get_NumArgs)(calledMeth$$2)) > 1;
  }, calledMeths) : false) ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOverloadsCannotHaveCurriedArguments)(), mMethExpr)) : [curriedCallerArgs, exprTy$$3, delayed$$28] : (!isProp$$2 ? (0, _List.exists)(function predicate$$40(calledMeth$$2) {
    return (0, _List.length)((0, _infos.MethInfo$$get_NumArgs)(calledMeth$$2)) > 1;
  }, calledMeths) : false) ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOverloadsCannotHaveCurriedArguments)(), mMethExpr)) : [curriedCallerArgs, exprTy$$3, delayed$$28] : (!isProp$$2 ? (0, _List.exists)(function predicate$$40(calledMeth$$2) {
    return (0, _List.length)((0, _infos.MethInfo$$get_NumArgs)(calledMeth$$2)) > 1;
  }, calledMeths) : false) ? (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOverloadsCannotHaveCurriedArguments)(), mMethExpr)) : [curriedCallerArgs, exprTy$$3, delayed$$28];
  let candidateMethsAndProps;
  const matchValue$$167 = (0, _List.filter)(function predicate$$41(tupledArg$$60) {
    return (0, _AccessibilityLogic.IsMethInfoAccessible)(cenv$$148.amap, mItem$$7, ad$$30, tupledArg$$60[0]);
  }, calledMethsAndProps);

  if (matchValue$$167.tail == null) {
    candidateMethsAndProps = calledMethsAndProps;
  } else {
    const accessibleMeths = matchValue$$167;
    candidateMethsAndProps = accessibleMeths;
  }

  const candidates = (0, _List.map)(function mapping$$81(tuple$$24) {
    return tuple$$24[0];
  }, candidateMethsAndProps);
  let patternInput$$373;

  if (patternInput$$370[0].tail == null) {
    patternInput$$373 = [null, null, patternInput$$370[1]];
  } else {
    const patternInput$$371 = (0, _List.unzip)((0, _List.map)(GetMethodArgs, patternInput$$370[0]));
    const patternInput$$372 = isProp$$2 ? [(0, _Types.L)((0, _List.concat)(patternInput$$371[0]), (0, _Types.L)()), (0, _Types.L)((0, _List.concat)(patternInput$$371[1]), (0, _Types.L)())] : [patternInput$$371[0], patternInput$$371[1]];

    const MakeUnnamedCallerArgInfo = function MakeUnnamedCallerArgInfo(x$$111) {
      return [x$$111, GetNewInferenceTypeForMethodArg(cenv$$148, env$$219, tpenv$$281, x$$111), (0, _ast.SynExpr$$get_Range)(x$$111)];
    };

    var $target$$462, calledMeth$$4;

    if (candidates.tail != null) {
      if (candidates.tail.tail == null) {
        if (calledMeth$$3 = candidates.head, (0, _List.forAll)(function predicate$$42(l$$87) {
          return l$$87.tail == null;
        }, patternInput$$372[1]) ? (curriedCalledArgs = (0, _infos.MethInfo$$GetParamAttribs$$73F6E43C)(calledMeth$$3, cenv$$148.amap, mItem$$7), ((0, _List.length)(curriedCalledArgs) === 1 ? (0, _List.length)((0, _List.head)(curriedCalledArgs)) === 1 : false) ? isSimpleFormalArg((0, _List.head)((0, _List.head)(curriedCalledArgs))) : false) : false) {
          $target$$462 = 0;
          calledMeth$$4 = candidates.head;
        } else {
          $target$$462 = 1;
        }
      } else {
        $target$$462 = 1;
      }
    } else {
      $target$$462 = 1;
    }

    switch ($target$$462) {
      case 0:
        {
          const unnamedCurriedCallerArgs$$2 = (0, _List.map)(function mapping$$82($arg$$56) {
            return (0, _Types.L)(MakeUnnamedCallerArgInfo($arg$$56), (0, _Types.L)());
          }, patternInput$$370[0]);
          const namedCurriedCallerArgs$$2 = (0, _List.map)(function mapping$$83(_arg63) {
            return (0, _Types.L)();
          }, patternInput$$372[1]);
          patternInput$$373 = [[unnamedCurriedCallerArgs$$2, namedCurriedCallerArgs$$2], null, patternInput$$370[1]];
          break;
        }

      case 1:
        {
          var $target$$463, calledMeth$$6;

          if (candidates.tail != null) {
            if (candidates.tail.tail == null) {
              if (calledMeth$$5 = candidates.head, (((0, _List.forAll)(function predicate$$43(l$$89) {
                return l$$89.tail == null;
              }, patternInput$$372[1]) ? (0, _List.length)(patternInput$$372[0]) === 1 : false) ? (0, _List.length)((0, _List.head)(patternInput$$372[0])) === 1 : false) ? (curriedCalledArgs$$1 = (0, _infos.MethInfo$$GetParamAttribs$$73F6E43C)(calledMeth$$5, cenv$$148.amap, mItem$$7), ((0, _List.length)(curriedCalledArgs$$1) === 1 ? (0, _List.length)((0, _List.head)(curriedCalledArgs$$1)) > 1 : false) ? (0, _List.forAll)(isSimpleFormalArg, (0, _List.head)(curriedCalledArgs$$1)) : false) : false) {
                $target$$463 = 0;
                calledMeth$$6 = candidates.head;
              } else {
                $target$$463 = 1;
              }
            } else {
              $target$$463 = 1;
            }
          } else {
            $target$$463 = 1;
          }

          switch ($target$$463) {
            case 0:
              {
                const exprTy$$5 = (0, _TastOps.mkFunTy)((0, _ConstraintSolver.NewInferenceType)(), patternInput$$370[1]);
                patternInput$$373 = [null, (0, _List.head)((0, _List.head)(patternInput$$372[0])), exprTy$$5];
                break;
              }

            case 1:
              {
                const unnamedCurriedCallerArgs$$3 = (0, _illib.List$$$mapSquared)(MakeUnnamedCallerArgInfo, patternInput$$372[0]);
                const namedCurriedCallerArgs$$3 = (0, _illib.List$$$mapSquared)(function f$$37(tupledArg$$61) {
                  const ty$$97 = GetNewInferenceTypeForMethodArg(cenv$$148, env$$219, tpenv$$281, tupledArg$$61[2]);
                  const ty$$98 = tupledArg$$61[0] ? (0, _TastOps.mkOptionTy)(denv$$24.g, ty$$97) : ty$$97;
                  return [tupledArg$$61[1], tupledArg$$61[0], tupledArg$$61[2], ty$$98, (0, _ast.SynExpr$$get_Range)(tupledArg$$61[2])];
                }, patternInput$$372[1]);
                patternInput$$373 = [[unnamedCurriedCallerArgs$$3, namedCurriedCallerArgs$$3], null, patternInput$$370[1]];
                break;
              }
          }

          break;
        }
    }
  }

  const CalledMethHasSingleArgumentGroupOfThisLength = function CalledMethHasSingleArgumentGroupOfThisLength(n$$14, calledMeth$$7) {
    const curriedMethodArgAttribs = (0, _infos.MethInfo$$GetParamAttribs$$73F6E43C)(calledMeth$$7, cenv$$148.amap, mItem$$7);

    if ((0, _List.length)(curriedMethodArgAttribs) === 1) {
      return (0, _List.length)((0, _List.head)(curriedMethodArgAttribs)) === n$$14;
    } else {
      return false;
    }
  };

  const GenerateMatchingSimpleArgumentTypes = function GenerateMatchingSimpleArgumentTypes(calledMeth$$8) {
    const curriedMethodArgAttribs$$1 = (0, _infos.MethInfo$$GetParamAttribs$$73F6E43C)(calledMeth$$8, cenv$$148.amap, mItem$$7);
    return (0, _List.map)(function mapping$$84($arg$$57) {
      return (0, _ConstraintSolver.NewInferenceTypes)((0, _List.filter)(isSimpleFormalArg, $arg$$57));
    }, curriedMethodArgAttribs$$1);
  };

  const UnifyMatchingSimpleArgumentTypes = function UnifyMatchingSimpleArgumentTypes(exprTy$$7, calledMeth$$9) {
    const curriedArgTys$$1 = GenerateMatchingSimpleArgumentTypes(calledMeth$$9);
    const returnTy$$11 = (0, _List.fold)(function folder$$6(exprTy$$8, argTys$$3) {
      const patternInput$$374 = UnifyFunctionType(null, cenv$$148, denv$$24, mMethExpr, exprTy$$8);
      UnifyTypes(cenv$$148, env$$219, mMethExpr, patternInput$$374[0], (0, _TastOps.mkRefTupledTy)(cenv$$148.g, argTys$$3));
      return patternInput$$374[1];
    }, exprTy$$7, curriedArgTys$$1);
    return [curriedArgTys$$1, returnTy$$11];
  };

  if (isProp$$2 ? patternInput$$373[0] == null : false) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$parsIndexerPropertyRequiresAtLeastOneArgument)(), mItem$$7));
  }

  let patternInput$$378;
  const dummyExpr = (0, _ast.mkSynUnit)(mItem$$7);
  let patternInput$$377;
  const matchValue$$168 = [patternInput$$373[0], candidates];
  var $target$$464, calledMeth$$10, namedCurriedCallerArgs$$6, unnamedCurriedCallerArgs$$6;

  if (matchValue$$168[0] != null) {
    $target$$464 = 2;
    namedCurriedCallerArgs$$6 = matchValue$$168[0][1];
    unnamedCurriedCallerArgs$$6 = matchValue$$168[0][0];
  } else if (matchValue$$168[1].tail != null) {
    if (matchValue$$168[1].tail.tail == null) {
      $target$$464 = 0;
      calledMeth$$10 = matchValue$$168[1].head;
    } else {
      $target$$464 = 1;
    }
  } else {
    $target$$464 = 1;
  }

  switch ($target$$464) {
    case 0:
      {
        const patternInput$$375 = UnifyMatchingSimpleArgumentTypes(patternInput$$373[2], calledMeth$$10);
        const unnamedCurriedCallerArgs$$4 = (0, _illib.List$$$mapSquared)(function f$$38(ty$$99) {
          return new _MethodCalls.CallerArg$00601(0, "CallerArg", ty$$99, mMethExpr, false, dummyExpr);
        }, patternInput$$375[0]);
        const namedCurriedCallerArgs$$4 = (0, _List.map)(function mapping$$85(_arg64) {
          return (0, _Types.L)();
        }, unnamedCurriedCallerArgs$$4);
        patternInput$$377 = [unnamedCurriedCallerArgs$$4, namedCurriedCallerArgs$$4, patternInput$$375[1]];
        break;
      }

    case 1:
      {
        const patternInput$$376 = UnifyFunctionType(null, cenv$$148, denv$$24, mMethExpr, patternInput$$373[2]);
        const argTys$$4 = (0, _TastOps.isUnitTy)(cenv$$148.g, patternInput$$376[0]) ? (0, _Types.L)() : (0, _TastOps.tryDestRefTupleTy)(cenv$$148.g, patternInput$$376[0]);
        const argTys$$5 = (0, _List.exists)((0, _Util.partialApply)(1, CalledMethHasSingleArgumentGroupOfThisLength, [(0, _List.length)(argTys$$4)]), candidates) ? argTys$$4 : (0, _Types.L)(patternInput$$376[0], (0, _Types.L)());
        const unnamedCurriedCallerArgs$$5 = (0, _Types.L)((0, _List.map)(function mapping$$86(ty$$100) {
          return new _MethodCalls.CallerArg$00601(0, "CallerArg", ty$$100, mMethExpr, false, dummyExpr);
        }, argTys$$5), (0, _Types.L)());
        const namedCurriedCallerArgs$$5 = (0, _List.map)(function mapping$$87(_arg65) {
          return (0, _Types.L)();
        }, unnamedCurriedCallerArgs$$5);
        patternInput$$377 = [unnamedCurriedCallerArgs$$5, namedCurriedCallerArgs$$5, patternInput$$376[1]];
        break;
      }

    case 2:
      {
        const unnamedCurriedCallerArgs$$7 = (0, _illib.List$$$mapSquared)(function f$$39(tupledArg$$62) {
          return new _MethodCalls.CallerArg$00601(0, "CallerArg", tupledArg$$62[1], tupledArg$$62[2], false, tupledArg$$62[0]);
        }, unnamedCurriedCallerArgs$$6);
        const namedCurriedCallerArgs$$7 = (0, _illib.List$$$mapSquared)(function f$$40(tupledArg$$63) {
          return new _MethodCalls.CallerNamedArg$00601(0, "CallerNamedArg", tupledArg$$63[0], new _MethodCalls.CallerArg$00601(0, "CallerArg", tupledArg$$63[3], tupledArg$$63[4], tupledArg$$63[1], tupledArg$$63[2]));
        }, namedCurriedCallerArgs$$6);
        patternInput$$377 = [unnamedCurriedCallerArgs$$7, namedCurriedCallerArgs$$7, patternInput$$373[2]];
        break;
      }
  }

  const callerArgCounts = [(0, _List.sumBy)(_List.length, patternInput$$377[0], {
    GetZero() {
      return 0;
    },

    Add($x$$58, $y$$59) {
      return $x$$58 + $y$$59;
    }

  }), (0, _List.sumBy)(_List.length, patternInput$$377[1], {
    GetZero() {
      return 0;
    },

    Add($x$$60, $y$$61) {
      return $x$$60 + $y$$61;
    }

  })];
  const callerArgs = (0, _List.zip)(patternInput$$377[0], patternInput$$377[1]);

  const makeOneCalledMeth = function makeOneCalledMeth(tupledArg$$64) {
    const minst$$5 = (0, _ConstraintSolver.FreshenMethInfo)(mItem$$7, tupledArg$$64[0]);
    let callerTyArgs$$1;

    if (tyargsOpt$$6 == null) {
      callerTyArgs$$1 = minst$$5;
    } else {
      const tyargs$$18 = tyargsOpt$$6;
      callerTyArgs$$1 = (0, _infos.MethInfo$$AdjustUserTypeInstForFSharpStyleIndexedExtensionMembers$$50B4DF78)(tupledArg$$64[0], tyargs$$18);
    }

    return (0, _MethodCalls.CalledMeth$00601$$$$002Ector$$Z3D1385F)(cenv$$148.infoReader, TcEnv$$get_NameEnv(env$$219), isCheckingAttributeCall, _ConstraintSolver.FreshenMethInfo, mMethExpr, ad$$30, tupledArg$$64[0], minst$$5, callerTyArgs$$1, tupledArg$$64[1], callerObjArgTys, callerArgs, tupledArg$$64[2], true, objTyOpt$$1);
  };

  const preArgumentTypeCheckingCalledMethGroup = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$169) {
      const meth$$1 = makeOneCalledMeth([matchValue$$169[0], matchValue$$169[1], true]);
      return (0, _Seq.append)((0, _Seq.singleton)(meth$$1), (0, _Seq.delay)(function () {
        return (0, _MethodCalls.CalledMeth$00601$$get_UsesParamArrayConversion)(meth$$1) ? (0, _Seq.singleton)(makeOneCalledMeth([matchValue$$169[0], matchValue$$169[1], false])) : (0, _Seq.empty)();
      }));
    }, candidateMethsAndProps);
  }));
  let uniquelyResolved;
  const csenv$$3 = (0, _ConstraintSolver.MakeConstraintSolverEnv)(new _ConstraintSolver.ContextInfo(0, "NoContext"), cenv$$148.css, mMethExpr, denv$$24);
  uniquelyResolved = (0, _ConstraintSolver.UnifyUniqueOverloading)(csenv$$3, callerArgCounts[0], callerArgCounts[1], methodName$$6, ad$$30, preArgumentTypeCheckingCalledMethGroup, patternInput$$377[2]);
  patternInput$$378 = [uniquelyResolved, preArgumentTypeCheckingCalledMethGroup];
  let patternInput$$383;

  if (patternInput$$373[0] != null) {
    const unnamedCurriedCallerArgs$$10 = patternInput$$373[0][0];
    const namedCurriedCallerArgs$$10 = patternInput$$373[0][1];
    const unnamedCurriedCallerArgs$$11 = (0, _illib.List$$$mapSquared)(function f$$43(tupledArg$$66) {
      return new _MethodCalls.CallerArg$00601(0, "CallerArg", tupledArg$$66[1], tupledArg$$66[2], false, tupledArg$$66[0]);
    }, unnamedCurriedCallerArgs$$10);
    const namedCurriedCallerArgs$$11 = (0, _illib.List$$$mapSquared)(function f$$44(tupledArg$$67) {
      return new _MethodCalls.CallerNamedArg$00601(0, "CallerNamedArg", tupledArg$$67[0], new _MethodCalls.CallerArg$00601(0, "CallerArg", tupledArg$$67[3], tupledArg$$67[4], tupledArg$$67[1], tupledArg$$67[2]));
    }, namedCurriedCallerArgs$$10);
    const lambdaPropagationInfo = (0, _List.length)(patternInput$$378[1]) > 1 ? (0, _Array.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (meth$$2) {
        const matchValue$$170 = (0, _MethodCalls.ExamineMethodForLambdaPropagation)(meth$$2);

        if (matchValue$$170 == null) {
          return (0, _Seq.empty)();
        } else {
          const unnamedInfo = matchValue$$170[0];
          const namedInfo = matchValue$$170[1];
          const calledObjArgTys = (0, _MethodCalls.CalledMeth$00601$$CalledObjArgTys$$4DB9192C)(meth$$2, mMethExpr);
          return (0, _Seq.forAll2)(function predicate$$48(calledTy, callerTy) {
            return (0, _ConstraintSolver.AddCxTypeMustSubsumeTypeMatchingOnlyUndoIfFailed)(denv$$24, cenv$$148.css, mMethExpr, calledTy, callerTy);
          }, calledObjArgTys, callerObjArgTys) ? (0, _Seq.singleton)([(0, _illib.List$$$toArraySquared)(unnamedInfo), (0, _illib.List$$$toArraySquared)(namedInfo)]) : (0, _Seq.empty)();
        }
      }, patternInput$$378[1]);
    }), Array) : [];
    const patternInput$$381 = TcUnnamedMethodArgs(cenv$$148, env$$219, lambdaPropagationInfo, tpenv$$281, unnamedCurriedCallerArgs$$11);
    const tpenv$$282 = patternInput$$381[1][1];
    const lambdaPropagationInfo$$1 = patternInput$$381[1][0];
    const patternInput$$382 = TcMethodNamedArgs(cenv$$148, env$$219, lambdaPropagationInfo$$1, tpenv$$282, namedCurriedCallerArgs$$11);
    const tpenv$$283 = patternInput$$382[1][1];
    patternInput$$383 = [patternInput$$381[0], patternInput$$382[0], null, patternInput$$373[2], tpenv$$283];
  } else {
    let patternInput$$380;
    var $target$$465, calledMeth$$11;

    if (candidates.tail != null) {
      if (candidates.tail.tail == null) {
        $target$$465 = 0;
        calledMeth$$11 = candidates.head;
      } else {
        $target$$465 = 1;
      }
    } else {
      $target$$465 = 1;
    }

    switch ($target$$465) {
      case 0:
        {
          patternInput$$380 = UnifyMatchingSimpleArgumentTypes(patternInput$$373[2], calledMeth$$11);
          break;
        }

      case 1:
        {
          const patternInput$$379 = UnifyFunctionType(null, cenv$$148, denv$$24, mMethExpr, patternInput$$373[2]);
          const argTys$$6 = (0, _TastOps.isUnitTy)(cenv$$148.g, patternInput$$379[0]) ? (0, _Types.L)() : (0, _TastOps.tryDestRefTupleTy)(cenv$$148.g, patternInput$$379[0]);
          const argTys$$7 = (0, _List.exists)((0, _Util.partialApply)(1, CalledMethHasSingleArgumentGroupOfThisLength, [(0, _List.length)(argTys$$6)]), candidates) ? argTys$$6 : (0, _Types.L)(patternInput$$379[0], (0, _Types.L)());
          patternInput$$380 = [(0, _Types.L)(argTys$$7, (0, _Types.L)()), patternInput$$379[1]];
          break;
        }
    }

    const lambdaVarsAndExprs = (0, _illib.List$$$mapiSquared)(function f$$41(i$$24, j, ty$$101) {
      return (0, _TastOps.mkCompGenLocal)(mMethExpr, "arg" + (0, _Util.int32ToString)(i$$24) + (0, _Util.int32ToString)(j), ty$$101);
    }, patternInput$$380[0]);
    const unnamedCurriedCallerArgs$$9 = (0, _illib.List$$$mapSquared)(function f$$42(tupledArg$$65) {
      return new _MethodCalls.CallerArg$00601(0, "CallerArg", (0, _TastOps.tyOfExpr)(cenv$$148.g, tupledArg$$65[1]), (0, _TastOps.Expr$002Eget_Range)(tupledArg$$65[1]), false, tupledArg$$65[1]);
    }, lambdaVarsAndExprs);
    const namedCurriedCallerArgs$$9 = (0, _List.map)(function mapping$$88(_arg67) {
      return (0, _Types.L)();
    }, lambdaVarsAndExprs);
    const lambdaVars = (0, _illib.List$$$mapSquared)(function (tuple$$25) {
      return tuple$$25[0];
    }, lambdaVarsAndExprs);
    patternInput$$383 = [unnamedCurriedCallerArgs$$9, namedCurriedCallerArgs$$9, lambdaVars, patternInput$$380[1], tpenv$$281];
  }

  const preArgumentTypeCheckingCalledMethGroup$$2 = (0, _List.map)(function mapping$$89(cmeth) {
    return [(0, _MethodCalls.CalledMeth$00601$$get_Method)(cmeth), (0, _MethodCalls.CalledMeth$00601$$get_CalledTyArgs)(cmeth), (0, _MethodCalls.CalledMeth$00601$$get_AssociatedPropertyInfo)(cmeth), (0, _MethodCalls.CalledMeth$00601$$get_UsesParamArrayConversion)(cmeth)];
  }, patternInput$$378[1]);
  let uniquelyResolved$$2;

  if (patternInput$$378[0].tag === 1) {
    if (afterResolution$$7.tag === 1) {
      const onFailure = afterResolution$$7.fields[3];
      onFailure();
    }
  }

  uniquelyResolved$$2 = (0, _ErrorLogger.CommitOperationResult)(patternInput$$378[0]);
  let finalCalledMeth;
  const callerArgs$$1 = (0, _List.zip)(patternInput$$383[0], patternInput$$383[1]);
  const postArgumentTypeCheckingCalledMethGroup = (0, _List.map)(function mapping$$90(tupledArg$$68) {
    let callerTyArgs$$2;

    if (tyargsOpt$$6 == null) {
      callerTyArgs$$2 = tupledArg$$68[1];
    } else {
      const tyargs$$19 = tyargsOpt$$6;
      callerTyArgs$$2 = (0, _infos.MethInfo$$AdjustUserTypeInstForFSharpStyleIndexedExtensionMembers$$50B4DF78)(tupledArg$$68[0], tyargs$$19);
    }

    return (0, _MethodCalls.CalledMeth$00601$$$$002Ector$$Z3D1385F)(cenv$$148.infoReader, TcEnv$$get_NameEnv(env$$219), isCheckingAttributeCall, _ConstraintSolver.FreshenMethInfo, mMethExpr, ad$$30, tupledArg$$68[0], tupledArg$$68[1], callerTyArgs$$2, tupledArg$$68[2], callerObjArgTys, callerArgs$$1, tupledArg$$68[3], true, objTyOpt$$1);
  }, preArgumentTypeCheckingCalledMethGroup$$2);
  const callerArgCounts$$1 = [(0, _List.length)(patternInput$$383[0]), (0, _List.length)(patternInput$$383[1])];
  const csenv$$4 = (0, _ConstraintSolver.MakeConstraintSolverEnv)(new _ConstraintSolver.ContextInfo(0, "NoContext"), cenv$$148.css, mMethExpr, denv$$24);

  if (!uniquelyResolved$$2) {
    GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$148, denv$$24, mItem$$7, (0, _illib.List$$$collectSquared)(function f$$45(callerArg) {
      return (0, _TastOps.freeInTypeLeftToRight)(cenv$$148.g, false, (0, _MethodCalls.CallerArg$00601$$get_Type)(callerArg));
    }, patternInput$$383[0]));
  }

  const patternInput$$384 = (0, _ConstraintSolver.ResolveOverloading)(csenv$$4, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), methodName$$6, 0, null, callerArgCounts$$1[0], callerArgCounts$$1[1], ad$$30, postArgumentTypeCheckingCalledMethGroup, true, patternInput$$383[3]);
  const matchValue$$171 = [afterResolution$$7, patternInput$$384[0]];
  var $target$$466, callSink$$3, result$$3, unrefinedItem$$1;

  if (matchValue$$171[0].tag === 1) {
    if (matchValue$$171[0].fields[0] != null) {
      if (matchValue$$171[1] != null) {
        if (unrefinedItem = matchValue$$171[0].fields[0], (result$$2 = matchValue$$171[1], (callSink$$2 = matchValue$$171[0].fields[2], (0, _infos.MethInfo$$get_IsVirtual)((0, _MethodCalls.CalledMeth$00601$$get_Method)(result$$2))))) {
          $target$$466 = 1;
          callSink$$3 = matchValue$$171[0].fields[2];
          result$$3 = matchValue$$171[1];
          unrefinedItem$$1 = matchValue$$171[0].fields[0];
        } else {
          $target$$466 = 2;
        }
      } else {
        $target$$466 = 2;
      }
    } else {
      $target$$466 = 2;
    }
  } else {
    $target$$466 = 0;
  }

  switch ($target$$466) {
    case 1:
      {
        let overriding;

        switch (unrefinedItem$$1.tag) {
          case 10:
            {
              const overridenMeths = unrefinedItem$$1.fields[1];
              overriding = (0, _List.map)(function mapping$$91(minfo$$19) {
                return [minfo$$19, null];
              }, overridenMeths);
              break;
            }

          case 9:
            {
              const pinfos$$6 = unrefinedItem$$1.fields[1];
              overriding = (0, _String.startsWith)((0, _infos.MethInfo$$get_LogicalName)((0, _MethodCalls.CalledMeth$00601$$get_Method)(result$$3)), "set_", 4) ? (0, _infos.SettersOfPropInfos)(pinfos$$6) : (0, _infos.GettersOfPropInfos)(pinfos$$6);
              break;
            }

          default:
            {
              overriding = (0, _Types.L)();
            }
        }

        const overridingInfo = (0, _List.tryFind)(function predicate$$49(tupledArg$$69) {
          if ((0, _infos.MethInfo$$get_IsVirtual)(tupledArg$$69[0])) {
            return (0, _infos.MethInfosEquivByNameAndSig)(new _TastOps.Erasure(2, "EraseNone"), true, cenv$$148.g, cenv$$148.amap, _range.range0, (0, _MethodCalls.CalledMeth$00601$$get_Method)(result$$3), tupledArg$$69[0]);
          } else {
            return false;
          }
        }, overriding);

        if (overridingInfo == null) {
          callSink$$3([(0, _MethodCalls.CalledMeth$00601$$get_Method)(result$$3), (0, _MethodCalls.CalledMeth$00601$$get_AssociatedPropertyInfo)(result$$3), (0, _MethodCalls.CalledMeth$00601$$get_CalledTyparInst)(result$$3)]);
        } else {
          const pinfoOpt$$3 = overridingInfo[1];
          const minfo$$21 = overridingInfo[0];
          const tps$$12 = (0, _infos.MethInfo$$get_FormalMethodTypars)(minfo$$21);
          const tyargs$$20 = (0, _MethodCalls.CalledMeth$00601$$get_CalledTyArgs)(result$$3);
          const tpinst$$1 = (0, _List.length)(tps$$12) === (0, _List.length)(tyargs$$20) ? (0, _TastOps.mkTyparInst)(tps$$12, tyargs$$20) : (0, _Types.L)();
          callSink$$3([minfo$$21, pinfoOpt$$3, tpinst$$1]);
        }

        break;
      }

    case 2:
      {
        if (matchValue$$171[0].tag === 1) {
          if (matchValue$$171[1] == null) {
            matchValue$$171[0].fields[3]();
          } else {
            const result$$4 = matchValue$$171[1];
            matchValue$$171[0].fields[2]([(0, _MethodCalls.CalledMeth$00601$$get_Method)(result$$4), (0, _MethodCalls.CalledMeth$00601$$get_AssociatedPropertyInfo)(result$$4), (0, _MethodCalls.CalledMeth$00601$$get_CalledTyparInst)(result$$4)]);
          }
        } else {
          throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 9692, 14);
        }

        break;
      }
  }

  (0, _ErrorLogger.RaiseOperationResult)(patternInput$$384[1]);

  if (patternInput$$384[0] != null) {
    const res$$27 = patternInput$$384[0];
    finalCalledMeth = res$$27;
  } else {
    finalCalledMeth = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("at least one error should be returned by failed method overloading", mItem$$7));
  }

  const finalCalledMethInfo = (0, _MethodCalls.CalledMeth$00601$$get_Method)(finalCalledMeth);
  const finalCalledMethInst = (0, _MethodCalls.CalledMeth$00601$$get_CalledTyArgs)(finalCalledMeth);
  const finalArgSets = (0, _MethodCalls.CalledMeth$00601$$get_ArgSets)(finalCalledMeth);
  const finalAssignedItemSetters = (0, _MethodCalls.CalledMeth$00601$$get_AssignedItemSetters)(finalCalledMeth);
  const finalCalledPropInfoOpt = (0, _MethodCalls.CalledMeth$00601$$get_AssociatedPropertyInfo)(finalCalledMeth);
  const finalAttributeAssignedNamedItems = (0, _MethodCalls.CalledMeth$00601$$get_AttributeAssignedNamedArgs)(finalCalledMeth);
  const finalUnnamedCalledOptArgs = (0, _MethodCalls.CalledMeth$00601$$get_UnnamedCalledOptArgs)(finalCalledMeth);
  const finalUnnamedCalledOutArgs = (0, _MethodCalls.CalledMeth$00601$$get_UnnamedCalledOutArgs)(finalCalledMeth);
  const finalAssignedNamedArgs = (0, _List.collect)(function mapping$$92(argSet) {
    return argSet.AssignedNamedArgs;
  }, finalArgSets);
  const finalParamArrayCallerArgs = (0, _List.collect)(function mapping$$93(argSet$$1) {
    return argSet$$1.ParamArrayCallerArgs;
  }, finalArgSets);
  const finalUnnamedCalledArgs = (0, _List.collect)(function mapping$$94(argSet$$2) {
    return argSet$$2.UnnamedCalledArgs;
  }, finalArgSets);
  const finalUnnamedCallerArgs = (0, _List.collect)(function mapping$$95(argSet$$3) {
    return argSet$$3.UnnamedCallerArgs;
  }, finalArgSets);
  (0, _Seq.iterate)(function action$$25(pinfo$$4) {
    (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckPropInfoAttributes)(pinfo$$4, mItem$$7));
  }, (0, _Option.defaultArg)(finalCalledPropInfoOpt, [], function ($x$$62) {
    return [$x$$62];
  }));
  const isInstance$$1 = !(objArgs$$4.tail == null);
  (0, _MethodCalls.MethInfoChecks)(cenv$$148.g, cenv$$148.amap, isInstance$$1, tyargsOpt$$6, objArgs$$4, ad$$30, mItem$$7, finalCalledMethInfo);

  if (((isInstance$$1 ? (0, _infos.MethInfo$$get_IsInstance)(finalCalledMethInfo) : false) ? (0, _TastOps.typeEquiv)(cenv$$148.g, (0, _infos.MethInfo$$get_ApparentEnclosingType)(finalCalledMethInfo), (0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$148.g)) : false) ? (0, _infos.MethInfo$$get_LogicalName)(finalCalledMethInfo) === "GetHashCode" ? true : (0, _infos.MethInfo$$get_LogicalName)(finalCalledMethInfo) === "Equals" : false) {
    (0, _List.iterate)(function action$$26(expr$$82) {
      (0, _ConstraintSolver.AddCxTypeMustSupportEquality)(TcEnv$$get_DisplayEnv(env$$219), cenv$$148.css, mMethExpr, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), (0, _TastOps.tyOfExpr)(cenv$$148.g, expr$$82));
    }, objArgs$$4);
  }

  if (((0, _infos.HasHeadType)(cenv$$148.g, (0, _TcGlobals.TcGlobals$$get_tcref_System_Collections_Generic_Dictionary)(cenv$$148.g), (0, _infos.MethInfo$$get_ApparentEnclosingType)(finalCalledMethInfo)) ? (0, _infos.MethInfo$$get_IsConstructor)(finalCalledMethInfo) : false) ? !(0, _illib.List$$$existsSquared)(function f$$46(_arg69) {
    const ty$$102 = _arg69.fields[7];
    return (0, _infos.HasHeadType)(cenv$$148.g, (0, _TcGlobals.TcGlobals$$get_tcref_System_Collections_Generic_IEqualityComparer)(cenv$$148.g), ty$$102);
  }, (0, _infos.MethInfo$$GetParamDatas$$Z5D984B3C)(finalCalledMethInfo, cenv$$148.amap, mItem$$7, (0, _MethodCalls.CalledMeth$00601$$get_CalledTyArgs)(finalCalledMeth))) : false) {
    const matchValue$$172 = (0, _TastOps.argsOfAppTy)(cenv$$148.g, (0, _infos.MethInfo$$get_ApparentEnclosingType)(finalCalledMethInfo));
    var $target$$467, dty$$1;

    if (matchValue$$172.tail != null) {
      if (matchValue$$172.tail.tail != null) {
        if (matchValue$$172.tail.tail.tail == null) {
          $target$$467 = 0;
          dty$$1 = matchValue$$172.head;
        } else {
          $target$$467 = 1;
        }
      } else {
        $target$$467 = 1;
      }
    } else {
      $target$$467 = 1;
    }

    switch ($target$$467) {
      case 0:
        {
          (0, _ConstraintSolver.AddCxTypeMustSupportEquality)(TcEnv$$get_DisplayEnv(env$$219), cenv$$148.css, mMethExpr, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), dty$$1);
          break;
        }
    }
  }

  if ((0, _illib.List$$$existsi)(function f$$48(i$$25, argSet$$4) {
    return (0, _illib.List$$$existsi)(function f$$47(j$$1, ca) {
      return !(0, _Util.equalArrays)(ca.Position, [i$$25, j$$1]);
    }, argSet$$4.UnnamedCalledArgs);
  }, finalArgSets)) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcUnnamedArgumentsDoNotFormPrefix)(), mMethExpr));
  }

  const emptyPreBinder = function emptyPreBinder(e$$94) {
    return e$$94;
  };

  let patternInput$$386;
  const matchValue$$173 = [objArgs$$4, patternInput$$383[2]];
  var $target$$468, objArg;

  if (matchValue$$173[0].tail != null) {
    if (matchValue$$173[0].tail.tail == null) {
      if (matchValue$$173[1] != null) {
        $target$$468 = 0;
        objArg = matchValue$$173[0].head;
      } else {
        $target$$468 = 1;
      }
    } else {
      $target$$468 = 1;
    }
  } else {
    $target$$468 = 1;
  }

  switch ($target$$468) {
    case 0:
      {
        const objArgTy = (0, _TastOps.tyOfExpr)(cenv$$148.g, objArg);
        const patternInput$$385 = (0, _TastOps.mkCompGenLocal)(mMethExpr, "objectArg", objArgTy);
        patternInput$$386 = [function (body$$14) {
          return (0, _TastOps.mkCompGenLet)(mMethExpr, patternInput$$385[0], objArg, body$$14);
        }, (0, _Types.L)(patternInput$$385[1], (0, _Types.L)())];
        break;
      }

    case 1:
      {
        patternInput$$386 = [emptyPreBinder, objArgs$$4];
        break;
      }
  }

  const coerceExpr = function coerceExpr(isOutArg$$1, calledArgTy, reflArgInfo, callerArgTy, m$$312, callerArgExpr) {
    const g$$38 = cenv$$148.g;

    if ((0, _TastOps.isByrefTy)(g$$38, calledArgTy) ? (0, _TastOps.isRefCellTy)(g$$38, callerArgTy) : false) {
      return [null, new _tast.Expr(11, "Op", new _tast.TOp(23, "RefAddrGet", false), (0, _Types.L)((0, _TastOps.destRefCellTy)(g$$38, callerArgTy), (0, _Types.L)()), (0, _Types.L)(callerArgExpr, (0, _Types.L)()), m$$312)];
    } else if ((0, _TastOps.isDelegateTy)(cenv$$148.g, calledArgTy) ? (0, _TastOps.isFunTy)(cenv$$148.g, callerArgTy) : false) {
      return [null, (0, _MethodCalls.CoerceFromFSharpFuncToDelegate)(cenv$$148.g, cenv$$148.amap, cenv$$148.infoReader, ad$$30, callerArgTy, m$$312, callerArgExpr, calledArgTy)];
    } else if (((0, _TastOps.isLinqExpressionTy)(cenv$$148.g, calledArgTy) ? (0, _TastOps.isDelegateTy)(cenv$$148.g, (0, _TastOps.destLinqExpressionTy)(cenv$$148.g, calledArgTy)) : false) ? (0, _TastOps.isFunTy)(cenv$$148.g, callerArgTy) : false) {
      const delegateTy = (0, _TastOps.destLinqExpressionTy)(cenv$$148.g, calledArgTy);
      const expr$$83 = (0, _MethodCalls.CoerceFromFSharpFuncToDelegate)(cenv$$148.g, cenv$$148.amap, cenv$$148.infoReader, ad$$30, callerArgTy, m$$312, callerArgExpr, delegateTy);
      return [null, (0, _TastOps.mkCallQuoteToLinqLambdaExpression)(cenv$$148.g, m$$312, delegateTy, new _tast.Expr(12, "Quote", expr$$83, new _Types.FSharpRef(null), false, m$$312, (0, _TastOps.mkQuotedExprTy)(cenv$$148.g, delegateTy)))];
    } else if (((0, _infos.ReflectedArgInfo$$get_AutoQuote)(reflArgInfo) ? (0, _TastOps.isQuotedExprTy)(cenv$$148.g, calledArgTy) : false) ? !(0, _TastOps.isQuotedExprTy)(cenv$$148.g, callerArgTy) : false) {
      if (reflArgInfo.tag === 0) {
        throw new Error("unreachable");
      } else if (reflArgInfo.fields[0]) {
        return [null, (0, _TastOps.mkCallLiftValueWithDefn)(cenv$$148.g, m$$312, calledArgTy, callerArgExpr)];
      } else {
        return [null, new _tast.Expr(12, "Quote", callerArgExpr, new _Types.FSharpRef(null), false, m$$312, calledArgTy)];
      }
    } else if (isOutArg$$1) {
      return [null, callerArgExpr];
    } else {
      return [null, (0, _TastOps.mkCoerceIfNeeded)(cenv$$148.g, calledArgTy, callerArgTy, callerArgExpr)];
    }
  };

  let patternInput$$397;
  const normalUnnamedArgs = (0, _List.map2)(function mapping$$96(called, caller) {
    return new _MethodCalls.AssignedCalledArg$00601(null, called, caller);
  }, finalUnnamedCalledArgs, finalUnnamedCallerArgs);
  let patternInput$$388;
  const matchValue$$174 = (0, _MethodCalls.CalledMeth$00601$$get_ParamArrayCalledArgOpt)(finalCalledMeth);

  if (matchValue$$174 != null) {
    const paramArrayCalledArg = matchValue$$174;
    const paramArrayCalledArgElementType = (0, _TastOps.destArrayTy)(cenv$$148.g, paramArrayCalledArg.CalledArgumentType);
    const patternInput$$387 = (0, _List.unzip)((0, _List.map)(function mapping$$97(callerArg$$1) {
      const m$$313 = callerArg$$1.fields[1];
      const isOutArg$$2 = callerArg$$1.fields[2];
      const callerArgTy$$1 = callerArg$$1.fields[0];
      const callerArgExpr$$1 = callerArg$$1.fields[3];
      return coerceExpr(isOutArg$$2, paramArrayCalledArgElementType, paramArrayCalledArg.ReflArgInfo, callerArgTy$$1, m$$313, callerArgExpr$$1);
    }, finalParamArrayCallerArgs));
    const arg$$40 = (0, _Types.L)(new _MethodCalls.AssignedCalledArg$00601(null, paramArrayCalledArg, new _MethodCalls.CallerArg$00601(0, "CallerArg", paramArrayCalledArg.CalledArgumentType, mMethExpr, false, new _tast.Expr(11, "Op", new _tast.TOp(3, "Array"), (0, _Types.L)(paramArrayCalledArgElementType, (0, _Types.L)()), patternInput$$387[1], mMethExpr))), (0, _Types.L)());
    patternInput$$388 = [patternInput$$387[0], arg$$40];
  } else {
    patternInput$$388 = [(0, _Types.L)(), (0, _Types.L)()];
  }

  const patternInput$$392 = (0, _List.mapFold)(function mapping$$98(wrapper, calledArg) {
    var callerName$$2;
    const calledArgTy$$1 = calledArg.CalledArgumentType;
    let patternInput$$391;

    if (calledArg.OptArgInfo.tag === 2) {
      const dfltVal = calledArg.OptArgInfo.fields[0];

      const build = function build(currCalledArgTy, currDfltVal) {
        var callerName, inst$$2;

        build: while (true) {
          switch (currDfltVal.tag) {
            case 1:
              {
                return [emptyPreBinder, (0, _TastOps.mkDefault)(mMethExpr, currCalledArgTy)];
              }

            case 0:
              {
                const fieldInit = currDfltVal.fields[0];
                var $target$$471, inst$$3;
                const activePatternResult48295 = (0, _TastOps.$007CNullableTy$007C_$007C)(cenv$$148.g, currCalledArgTy);

                if (activePatternResult48295 != null) {
                  if (inst$$2 = activePatternResult48295, !(0, _Util.equals)(fieldInit, new _il.ILFieldInit(13, "Null"))) {
                    $target$$471 = 0;
                    inst$$3 = activePatternResult48295;
                  } else {
                    $target$$471 = 1;
                  }
                } else {
                  $target$$471 = 1;
                }

                switch ($target$$471) {
                  case 0:
                    {
                      const nullableTy = (0, _il.mkILNonGenericBoxedTy)((0, _TcGlobals.TcGlobals$$FindSysILTypeRef$$Z721C83C5)(cenv$$148.g, "System.Nullable`1"));
                      const ctor = (0, _il.ILMethodSpec$$get_MethodRef)((0, _il.mkILCtorMethSpecForTy)(nullableTy, (0, _Types.L)(new _il.ILType(7, "TypeVar", 0), (0, _Types.L)())));
                      const ctorArgs = (0, _Types.L)(new _tast.Expr(0, "Const", TcFieldInit(mMethExpr, fieldInit), mMethExpr, inst$$3), (0, _Types.L)());
                      return [emptyPreBinder, new _tast.Expr(11, "Op", new _tast.TOp(31, "ILCall", false, false, true, true, new _tast.ValUseFlag(1, "NormalValUse"), false, false, ctor, (0, _Types.L)(inst$$3, (0, _Types.L)()), (0, _Types.L)(), (0, _Types.L)(currCalledArgTy, (0, _Types.L)())), (0, _Types.L)(), ctorArgs, mMethExpr)];
                    }

                  case 1:
                    {
                      const activePatternResult48293 = (0, _TastOps.$007CByrefTy$007C_$007C)(cenv$$148.g, currCalledArgTy);

                      if (activePatternResult48293 != null) {
                        const inst$$4 = activePatternResult48293;
                        currCalledArgTy = inst$$4;
                        currDfltVal = new _infos.OptionalArgCallerSideValue(5, "PassByRef", inst$$4, currDfltVal);
                        continue build;
                      } else {
                        const matchValue$$176 = [calledArg.CallerInfo, env$$219.eCallerMemberName];
                        var $target$$472;

                        if (matchValue$$176[0].tag === 1) {
                          if ((0, _TastOps.typeEquiv)(cenv$$148.g, currCalledArgTy, (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$148.g))) {
                            $target$$472 = 0;
                          } else {
                            $target$$472 = 1;
                          }
                        } else {
                          $target$$472 = 1;
                        }

                        switch ($target$$472) {
                          case 0:
                            {
                              return [emptyPreBinder, new _tast.Expr(0, "Const", new _tast.Const(5, "Int32", (0, _range.range$$get_StartLine)(mMethExpr)), mMethExpr, currCalledArgTy)];
                            }

                          case 1:
                            {
                              var $target$$473;

                              if (matchValue$$176[0].tag === 3) {
                                if ((0, _TastOps.typeEquiv)(cenv$$148.g, currCalledArgTy, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$148.g))) {
                                  $target$$473 = 0;
                                } else {
                                  $target$$473 = 1;
                                }
                              } else {
                                $target$$473 = 1;
                              }

                              switch ($target$$473) {
                                case 0:
                                  {
                                    return [emptyPreBinder, new _tast.Expr(0, "Const", new _tast.Const(14, "String", (0, _adapters.System$002EIO$002EPath$$$GetFullPath)((0, _range.range$$get_FileName)(mMethExpr))), mMethExpr, currCalledArgTy)];
                                  }

                                case 1:
                                  {
                                    var $target$$474, callerName$$1;

                                    if (matchValue$$176[0].tag === 2) {
                                      if (matchValue$$176[1] != null) {
                                        if (callerName = matchValue$$176[1], (0, _TastOps.typeEquiv)(cenv$$148.g, currCalledArgTy, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$148.g))) {
                                          $target$$474 = 0;
                                          callerName$$1 = matchValue$$176[1];
                                        } else {
                                          $target$$474 = 1;
                                        }
                                      } else {
                                        $target$$474 = 1;
                                      }
                                    } else {
                                      $target$$474 = 1;
                                    }

                                    switch ($target$$474) {
                                      case 0:
                                        {
                                          return [emptyPreBinder, new _tast.Expr(0, "Const", new _tast.Const(14, "String", callerName$$1), mMethExpr, currCalledArgTy)];
                                        }

                                      case 1:
                                        {
                                          return [emptyPreBinder, new _tast.Expr(0, "Const", TcFieldInit(mMethExpr, fieldInit), mMethExpr, currCalledArgTy)];
                                        }
                                    }
                                  }
                              }
                            }
                        }
                      }
                    }
                }
              }

            case 3:
              {
                const matchValue$$177 = (0, _TcGlobals.TcGlobals$$TryFindSysILTypeRef$$Z721C83C5)(cenv$$148.g, "System.Runtime.InteropServices.DispatchWrapper");

                if (matchValue$$177 != null) {
                  const tref$$2 = matchValue$$177;
                  const ty$$103 = (0, _il.mkILNonGenericBoxedTy)(tref$$2);
                  const mref$$1 = (0, _il.ILMethodSpec$$get_MethodRef)((0, _il.mkILCtorMethSpecForTy)(ty$$103, (0, _Types.L)((0, _il.ILGlobals$$get_typ_Object)((0, _TcGlobals.TcGlobals$$get_ilg)(cenv$$148.g)), (0, _Types.L)())));
                  const expr$$84 = new _tast.Expr(11, "Op", new _tast.TOp(31, "ILCall", false, false, false, true, new _tast.ValUseFlag(1, "NormalValUse"), false, false, mref$$1, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$148.g), (0, _Types.L)())), (0, _Types.L)(), (0, _Types.L)((0, _TastOps.mkDefault)(mMethExpr, currCalledArgTy), (0, _Types.L)()), mMethExpr);
                  return [emptyPreBinder, expr$$84];
                } else {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$fscSystemRuntimeInteropServicesIsRequired)(), mMethExpr));
                }
              }

            case 4:
              {
                const matchValue$$178 = (0, _TcGlobals.TcGlobals$$TryFindSysILTypeRef$$Z721C83C5)(cenv$$148.g, "System.Runtime.InteropServices.UnknownWrapper");

                if (matchValue$$178 != null) {
                  const tref$$3 = matchValue$$178;
                  const ty$$104 = (0, _il.mkILNonGenericBoxedTy)(tref$$3);
                  const mref$$2 = (0, _il.ILMethodSpec$$get_MethodRef)((0, _il.mkILCtorMethSpecForTy)(ty$$104, (0, _Types.L)((0, _il.ILGlobals$$get_typ_Object)((0, _TcGlobals.TcGlobals$$get_ilg)(cenv$$148.g)), (0, _Types.L)())));
                  const expr$$85 = new _tast.Expr(11, "Op", new _tast.TOp(31, "ILCall", false, false, false, true, new _tast.ValUseFlag(1, "NormalValUse"), false, false, mref$$2, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$148.g), (0, _Types.L)())), (0, _Types.L)(), (0, _Types.L)((0, _TastOps.mkDefault)(mMethExpr, currCalledArgTy), (0, _Types.L)()), mMethExpr);
                  return [emptyPreBinder, expr$$85];
                } else {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$fscSystemRuntimeInteropServicesIsRequired)(), mMethExpr));
                }
              }

            case 5:
              {
                const ty$$105 = currDfltVal.fields[0];
                const dfltVal2 = currDfltVal.fields[1];
                const patternInput$$389 = (0, _TastOps.mkCompGenLocal)(mMethExpr, "defaultByrefArg", ty$$105);
                const patternInput$$390 = build(currCalledArgTy, dfltVal2);
                return [function ($arg$$63) {
                  return (0, _TastOps.mkCompGenLet)(mMethExpr, patternInput$$389[0], patternInput$$390[1], patternInput$$390[0]($arg$$63));
                }, (0, _TastOps.mkValAddr)(mMethExpr, false, (0, _tast.mkLocalValRef)(patternInput$$389[0]))];
              }

            default:
              {
                return [emptyPreBinder, (0, _TastOps.mkAsmExpr)((0, _Types.L)((0, _il.mkNormalLdsfld)((0, _TastOps.fspec_Missing_Value)(cenv$$148.g)), (0, _Types.L)(new _il.ILInstr(33, "AI_nop"), (0, _Types.L)())), (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(currCalledArgTy, (0, _Types.L)()), mMethExpr)];
              }
          }
        }
      };

      patternInput$$391 = build(calledArgTy$$1, dfltVal);
    } else if (calledArg.OptArgInfo.tag === 1) {
      const calledNonOptTy = (0, _TastOps.isOptionTy)(cenv$$148.g, calledArgTy$$1) ? (0, _TastOps.destOptionTy)(cenv$$148.g, calledArgTy$$1) : calledArgTy$$1;
      const matchValue$$179 = [calledArg.CallerInfo, env$$219.eCallerMemberName];
      var $target$$475;

      if (matchValue$$179[0].tag === 1) {
        if ((0, _TastOps.typeEquiv)(cenv$$148.g, calledNonOptTy, (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$148.g))) {
          $target$$475 = 0;
        } else {
          $target$$475 = 1;
        }
      } else {
        $target$$475 = 1;
      }

      switch ($target$$475) {
        case 0:
          {
            const lineExpr = new _tast.Expr(0, "Const", new _tast.Const(5, "Int32", (0, _range.range$$get_StartLine)(mMethExpr)), mMethExpr, calledNonOptTy);
            patternInput$$391 = [emptyPreBinder, (0, _TastOps.mkUnionCaseExpr)((0, _TastOps.mkSomeCase)(cenv$$148.g), (0, _Types.L)(calledNonOptTy, (0, _Types.L)()), (0, _Types.L)(lineExpr, (0, _Types.L)()), mMethExpr)];
            break;
          }

        case 1:
          {
            var $target$$476;

            if (matchValue$$179[0].tag === 3) {
              if ((0, _TastOps.typeEquiv)(cenv$$148.g, calledNonOptTy, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$148.g))) {
                $target$$476 = 0;
              } else {
                $target$$476 = 1;
              }
            } else {
              $target$$476 = 1;
            }

            switch ($target$$476) {
              case 0:
                {
                  const filePathExpr = new _tast.Expr(0, "Const", new _tast.Const(14, "String", (0, _adapters.System$002EIO$002EPath$$$GetFullPath)((0, _range.range$$get_FileName)(mMethExpr))), mMethExpr, calledNonOptTy);
                  patternInput$$391 = [emptyPreBinder, (0, _TastOps.mkUnionCaseExpr)((0, _TastOps.mkSomeCase)(cenv$$148.g), (0, _Types.L)(calledNonOptTy, (0, _Types.L)()), (0, _Types.L)(filePathExpr, (0, _Types.L)()), mMethExpr)];
                  break;
                }

              case 1:
                {
                  var $target$$477, callerName$$3;

                  if (matchValue$$179[0].tag === 2) {
                    if (matchValue$$179[1] != null) {
                      if (callerName$$2 = matchValue$$179[1], (0, _TastOps.typeEquiv)(cenv$$148.g, calledNonOptTy, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$148.g))) {
                        $target$$477 = 0;
                        callerName$$3 = matchValue$$179[1];
                      } else {
                        $target$$477 = 1;
                      }
                    } else {
                      $target$$477 = 1;
                    }
                  } else {
                    $target$$477 = 1;
                  }

                  switch ($target$$477) {
                    case 0:
                      {
                        const memberNameExpr = new _tast.Expr(0, "Const", new _tast.Const(14, "String", callerName$$3), mMethExpr, calledNonOptTy);
                        patternInput$$391 = [emptyPreBinder, (0, _TastOps.mkUnionCaseExpr)((0, _TastOps.mkSomeCase)(cenv$$148.g), (0, _Types.L)(calledNonOptTy, (0, _Types.L)()), (0, _Types.L)(memberNameExpr, (0, _Types.L)()), mMethExpr)];
                        break;
                      }

                    case 1:
                      {
                        patternInput$$391 = [emptyPreBinder, (0, _TastOps.mkUnionCaseExpr)((0, _TastOps.mkNoneCase)(cenv$$148.g), (0, _Types.L)(calledNonOptTy, (0, _Types.L)()), (0, _Types.L)(), mMethExpr)];
                        break;
                      }
                  }

                  break;
                }
            }

            break;
          }
      }
    } else {
      patternInput$$391 = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected NotOptional", mItem$$7));
    }

    const wrapper$$1 = function wrapper$$1($arg$$64) {
      return patternInput$$391[0](wrapper($arg$$64));
    };

    const callerArg$$2 = new _MethodCalls.CallerArg$00601(0, "CallerArg", calledArgTy$$1, mMethExpr, false, patternInput$$391[1]);
    return [new _MethodCalls.AssignedCalledArg$00601(null, calledArg, callerArg$$2), wrapper$$1];
  }, emptyPreBinder, finalUnnamedCalledOptArgs);

  const wrapOptionalArg = function wrapOptionalArg(assignedArg) {
    const m$$314 = assignedArg.CallerArg.fields[1];
    const isOptCallerArg = assignedArg.CallerArg.fields[2];
    const expr$$87 = assignedArg.CallerArg.fields[3];
    const callerArgTy$$2 = assignedArg.CallerArg.fields[0];

    if (assignedArg.CalledArg.OptArgInfo.tag === 0) {
      if (isOptCallerArg) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFormalArgumentIsNotOptional)(), m$$314));
      }

      return assignedArg;
    } else {
      let expr$$88;

      if (assignedArg.CalledArg.OptArgInfo.tag === 2) {
        expr$$88 = isOptCallerArg ? (0, _TastOps.mkUnionCaseFieldGetUnprovenViaExprAddr)(expr$$87, (0, _TastOps.mkSomeCase)(cenv$$148.g), (0, _Types.L)((0, _TastOps.destOptionTy)(cenv$$148.g, callerArgTy$$2), (0, _Types.L)()), 0, m$$314) : expr$$87;
      } else if (assignedArg.CalledArg.OptArgInfo.tag === 1) {
        if (isOptCallerArg) {
          expr$$88 = expr$$87;
        } else {
          const calledArgTy$$2 = assignedArg.CalledArg.CalledArgumentType;

          if ((0, _TastOps.isOptionTy)(cenv$$148.g, calledArgTy$$2)) {
            const calledNonOptTy$$1 = (0, _TastOps.destOptionTy)(cenv$$148.g, calledArgTy$$2);
            expr$$88 = (0, _TastOps.mkUnionCaseExpr)((0, _TastOps.mkSomeCase)(cenv$$148.g), (0, _Types.L)(calledNonOptTy$$1, (0, _Types.L)()), (0, _Types.L)((0, _TastOps.mkCoerceIfNeeded)(cenv$$148.g, calledNonOptTy$$1, callerArgTy$$2, expr$$87), (0, _Types.L)()), m$$314);
          } else {
            expr$$88 = expr$$87;
          }
        }
      } else {
        throw new Error("Unreachable");
      }

      return new _MethodCalls.AssignedCalledArg$00601(assignedArg.NamedArgIdOpt, assignedArg.CalledArg, new _MethodCalls.CallerArg$00601(0, "CallerArg", (0, _TastOps.tyOfExpr)(cenv$$148.g, expr$$88), m$$314, isOptCallerArg, expr$$88));
    }
  };

  const patternInput$$395 = (0, _List.unzip)((0, _List.map)(function mapping$$99(calledArg$$1) {
    const calledArgTy$$3 = calledArg$$1.CalledArgumentType;
    const outArgTy = (0, _TastOps.destByrefTy)(cenv$$148.g, calledArgTy$$3);
    const patternInput$$394 = (0, _TastOps.mkMutableCompGenLocal)(mMethExpr, "outArg", outArgTy);
    const expr$$89 = (0, _TastOps.mkDefault)(mMethExpr, outArgTy);
    const callerArg$$3 = new _MethodCalls.CallerArg$00601(0, "CallerArg", calledArgTy$$3, mMethExpr, false, (0, _TastOps.mkValAddr)(mMethExpr, false, (0, _tast.mkLocalValRef)(patternInput$$394[0])));
    const outArg = new _MethodCalls.AssignedCalledArg$00601(null, calledArg$$1, callerArg$$3);
    return [[outArg, patternInput$$394[1]], (0, _TastOps.mkCompGenBind)(patternInput$$394[0], expr$$89)];
  }, finalUnnamedCalledOutArgs));
  const patternInput$$396 = (0, _List.unzip)(patternInput$$395[0]);
  const allArgs = (0, _List.append)((0, _List.map)(wrapOptionalArg, normalUnnamedArgs), (0, _List.append)((0, _List.map)(wrapOptionalArg, finalAssignedNamedArgs), (0, _List.append)(patternInput$$388[1], (0, _List.append)(patternInput$$392[0], patternInput$$396[0]))));
  const allArgs$$1 = (0, _List.sortBy)(function projection$$2(x$$114) {
    return (0, _MethodCalls.AssignedCalledArg$00601$$get_Position)(x$$114);
  }, allArgs, {
    Compare: _Util.compareArrays
  });
  patternInput$$397 = [patternInput$$392[1], patternInput$$388[0], allArgs$$1, patternInput$$396[1], patternInput$$395[1]];

  const coerce = function coerce(assignedArg$$1) {
    const isOutArg$$3 = assignedArg$$1.CalledArg.IsOutArg;
    const reflArgInfo$$1 = assignedArg$$1.CalledArg.ReflArgInfo;
    const calledArgTy$$4 = assignedArg$$1.CalledArg.CalledArgumentType;
    const m$$315 = assignedArg$$1.CallerArg.fields[1];
    const e$$95 = assignedArg$$1.CallerArg.fields[3];
    const callerArgTy$$3 = assignedArg$$1.CallerArg.fields[0];
    return coerceExpr(isOutArg$$3, calledArgTy$$4, reflArgInfo$$1, callerArgTy$$3, m$$315, e$$95);
  };

  (0, _List.iterate)(function action$$27(assignedArg$$2) {
    if (assignedArg$$2.NamedArgIdOpt != null) {
      const id$$54 = assignedArg$$2.NamedArgIdOpt;
      const item$$47 = new _NameResolution.Item(20, "ArgName", (0, _Option.defaultArg)(assignedArg$$2.CalledArg.NameOpt, id$$54), assignedArg$$2.CalledArg.CalledArgumentType, new _NameResolution.ArgumentContainer(0, "Method", finalCalledMethInfo));
      (0, _NameResolution.CallNameResolutionSink)(cenv$$148.tcSink, (0, _ast.Ident$$get_idRange)(id$$54), TcEnv$$get_NameEnv(env$$219), item$$47, item$$47, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$219), ad$$30);
    }
  }, patternInput$$397[2]);
  const patternInput$$399 = (0, _List.unzip)((0, _List.map)(coerce, patternInput$$397[2]));
  const patternInput$$400 = BuildPossiblyConditionalMethodCall(cenv$$148, env$$219, mut$$2, mMethExpr, isProp$$2, finalCalledMethInfo, isSuperInit$$2, finalCalledMethInst, patternInput$$386[1], patternInput$$399[1]);
  let expr$$91;
  const vty$$6 = (0, _TastOps.tyOfExpr)(cenv$$148.g, patternInput$$400[0]);

  if ((0, _TastOps.isByrefTy)(cenv$$148.g, vty$$6)) {
    const patternInput$$401 = (0, _TastOps.mkCompGenLocal)(mMethExpr, "byrefReturn", vty$$6);
    expr$$91 = (0, _TastOps.mkCompGenLet)(mMethExpr, patternInput$$401[0], patternInput$$400[0], (0, _TastOps.mkAddrGet)(mMethExpr, (0, _tast.mkLocalValRef)(patternInput$$401[0])));
  } else {
    expr$$91 = patternInput$$400[0];
  }

  let patternInput$$402;

  if (patternInput$$397[4].tail == null) {
    patternInput$$402 = [expr$$91, patternInput$$400[1]];
  } else {
    const outArgTys = (0, _List.map)(function mapping$$100(arg10$0040$$34) {
      return (0, _TastOps.tyOfExpr)(cenv$$148.g, arg10$0040$$34);
    }, patternInput$$397[3]);
    const expr$$92 = (0, _TastOps.isUnitTy)(cenv$$148.g, patternInput$$400[1]) ? (0, _TastOps.mkCompGenSequential)(mMethExpr, expr$$91, (0, _TastOps.mkRefTupled)(cenv$$148.g, mMethExpr, patternInput$$397[3], outArgTys)) : (0, _TastOps.mkRefTupled)(cenv$$148.g, mMethExpr, (0, _Types.L)(expr$$91, patternInput$$397[3]), (0, _Types.L)(patternInput$$400[1], outArgTys));
    const expr$$93 = (0, _TastOps.mkLetsBind)(mMethExpr, patternInput$$397[4], expr$$92);
    patternInput$$402 = [expr$$93, (0, _TastOps.tyOfExpr)(cenv$$148.g, expr$$93)];
  }

  let patternInput$$409;

  if (isCheckingAttributeCall) {
    patternInput$$409 = [(0, _Types.L)(), patternInput$$402[0]];
  } else if (finalAssignedItemSetters.tail == null) {
    patternInput$$409 = [(0, _Types.L)(), patternInput$$402[0]];
  } else {
    const patternInput$$403 = (0, _TastOps.mkMutableCompGenLocal)(mMethExpr, "returnVal", patternInput$$402[1]);
    const patternInput$$408 = (0, _List.mapFold)(function mapping$$101(acc$$17, _arg70) {
      const setter = _arg70.fields[1];
      const m$$316 = _arg70.fields[2].fields[1];
      const isOptCallerArg$$1 = _arg70.fields[2].fields[2];
      const id$$55 = _arg70.fields[0];
      const callerArgTy$$4 = _arg70.fields[2].fields[0];
      const argExpr$$7 = _arg70.fields[2].fields[3];

      if (isOptCallerArg$$1) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidOptionalAssignmentToPropertyOrField)(), m$$316));
      }

      let patternInput$$407;

      switch (setter.tag) {
        case 1:
          {
            const finfo$$6 = setter.fields[0];
            (0, _MethodCalls.ILFieldInstanceChecks)(cenv$$148.g, cenv$$148.amap, ad$$30, m$$316, finfo$$6);
            const calledArgTy$$6 = (0, _infos.ILFieldInfo$$FieldType$$73F6E43C)(finfo$$6, cenv$$148.amap, m$$316);
            const patternInput$$405 = coerceExpr(false, calledArgTy$$6, new _infos.ReflectedArgInfo(0, "None"), callerArgTy$$4, m$$316, argExpr$$7);
            const action$$29 = BuildILFieldSet(cenv$$148.g, m$$316, patternInput$$403[1], finfo$$6, patternInput$$405[1]);
            patternInput$$407 = [patternInput$$405[0], action$$29, new _NameResolution.Item(7, "ILField", finfo$$6)];
            break;
          }

        case 2:
          {
            const rfinfo$$4 = setter.fields[0];
            (0, _MethodCalls.RecdFieldInstanceChecks)(cenv$$148.g, cenv$$148.amap, ad$$30, m$$316, rfinfo$$4);
            const calledArgTy$$7 = (0, _infos.RecdFieldInfo$$get_FieldType)(rfinfo$$4);
            (0, _MethodCalls.CheckRecdFieldMutation)(m$$316, denv$$24, rfinfo$$4);
            const patternInput$$406 = coerceExpr(false, calledArgTy$$7, new _infos.ReflectedArgInfo(0, "None"), callerArgTy$$4, m$$316, argExpr$$7);
            const action$$30 = BuildRecdFieldSet(cenv$$148.g, m$$316, patternInput$$403[1], rfinfo$$4, patternInput$$406[1]);
            patternInput$$407 = [patternInput$$406[0], action$$30, new _NameResolution.Item(5, "RecdField", rfinfo$$4)];
            break;
          }

        default:
          {
            const pminst = setter.fields[2];
            const pminfo = setter.fields[1];
            const pinfo$$5 = setter.fields[0];
            (0, _MethodCalls.MethInfoChecks)(cenv$$148.g, cenv$$148.amap, true, null, (0, _Types.L)(patternInput$$403[1], (0, _Types.L)()), ad$$30, m$$316, pminfo);
            const calledArgTy$$5 = (0, _List.head)((0, _List.head)((0, _infos.MethInfo$$GetParamTypes$$Z5D984B3C)(pminfo, cenv$$148.amap, m$$316, pminst)));
            const patternInput$$404 = coerceExpr(false, calledArgTy$$5, new _infos.ReflectedArgInfo(0, "None"), callerArgTy$$4, m$$316, argExpr$$7);
            const mut$$3 = (0, _TastOps.isStructTy)(cenv$$148.g, (0, _TastOps.tyOfExpr)(cenv$$148.g, patternInput$$403[1])) ? new _TastOps.Mutates(1, "DefinitelyMutates") : new _TastOps.Mutates(2, "PossiblyMutates");
            const action$$28 = BuildPossiblyConditionalMethodCall(cenv$$148, env$$219, mut$$3, m$$316, true, pminfo, new _tast.ValUseFlag(1, "NormalValUse"), pminst, (0, _Types.L)(patternInput$$403[1], (0, _Types.L)()), (0, _Types.L)(patternInput$$404[1], (0, _Types.L)()))[0];
            patternInput$$407 = [patternInput$$404[0], action$$28, new _NameResolution.Item(9, "Property", (0, _infos.PropInfo$$get_PropertyName)(pinfo$$5), (0, _Types.L)(pinfo$$5, (0, _Types.L)()))];
          }
      }

      const item$$48 = new _NameResolution.Item(21, "SetterArg", id$$55, patternInput$$407[2]);
      (0, _NameResolution.CallNameResolutionSink)(cenv$$148.tcSink, (0, _ast.Ident$$get_idRange)(id$$55), TcEnv$$get_NameEnv(env$$219), item$$48, item$$48, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$219), ad$$30);
      return [patternInput$$407[0], (0, _TastOps.mkCompGenSequential)(m$$316, acc$$17, patternInput$$407[1])];
    }, (0, _TastOps.mkUnit)(cenv$$148.g, mMethExpr), finalAssignedItemSetters);
    const expr$$95 = (0, _TastOps.mkCompGenLet)(mMethExpr, patternInput$$403[0], patternInput$$402[0], (0, _TastOps.mkCompGenSequential)(mMethExpr, patternInput$$408[1], patternInput$$403[1]));
    patternInput$$409 = [patternInput$$408[0], expr$$95];
  }

  let expr$$98;

  if (patternInput$$383[2] != null) {
    const curriedLambdaVars = patternInput$$383[2];

    const mkLambda = function mkLambda(vs$$13, expr$$97) {
      if (vs$$13.tail == null) {
        return (0, _TastOps.mkUnitDelayLambda)(cenv$$148.g, mMethExpr, expr$$97);
      } else {
        return (0, _TastOps.mkMultiLambda)(mMethExpr, vs$$13, expr$$97, (0, _TastOps.tyOfExpr)(cenv$$148.g, expr$$97));
      }
    };

    expr$$98 = (0, _List.foldBack)(mkLambda, curriedLambdaVars, patternInput$$409[1]);
  } else {
    expr$$98 = patternInput$$409[1];
  }

  let patternInput$$411;

  if (patternInput$$373[1] == null) {
    patternInput$$411 = [expr$$98, patternInput$$383[4]];
  } else {
    const synArgExpr = patternInput$$373[1];
    var $target$$478, lambdaVars$$2;

    if (patternInput$$383[2] != null) {
      if (patternInput$$383[2].tail != null) {
        if (patternInput$$383[2].tail.tail == null) {
          $target$$478 = 0;
          lambdaVars$$2 = patternInput$$383[2].head;
        } else {
          $target$$478 = 1;
        }
      } else {
        $target$$478 = 1;
      }
    } else {
      $target$$478 = 1;
    }

    switch ($target$$478) {
      case 0:
        {
          const patternInput$$410 = TcExpr(cenv$$148, (0, _TastOps.mkRefTupledVarsTy)(cenv$$148.g, lambdaVars$$2), env$$219, patternInput$$383[4], synArgExpr);
          patternInput$$411 = [(0, _TastOps.mkApps)(cenv$$148.g, [expr$$98, (0, _TastOps.tyOfExpr)(cenv$$148.g, expr$$98)], (0, _Types.L)(), (0, _Types.L)(patternInput$$410[0], (0, _Types.L)()), mMethExpr), patternInput$$410[1]];
          break;
        }

      case 1:
        {
          patternInput$$411 = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("unreachable - expected some lambda vars for a tuple mismatch", mItem$$7));
          break;
        }
    }
  }

  const expr$$101 = (0, _List.fold)(function folder$$7(expr$$100, argPreBinder) {
    if (argPreBinder != null) {
      const f$$49 = argPreBinder;
      return f$$49(expr$$100);
    } else {
      return expr$$100;
    }
  }, patternInput$$411[0], patternInput$$409[0]);
  const expr$$103 = (0, _List.fold)(function folder$$8(expr$$102, argPreBinder$$1) {
    if (argPreBinder$$1 != null) {
      const f$$50 = argPreBinder$$1;
      return f$$50(expr$$102);
    } else {
      return expr$$102;
    }
  }, expr$$101, patternInput$$397[1]);
  const expr$$105 = (0, _List.fold)(function folder$$9(expr$$104, argPreBinder$$2) {
    if (argPreBinder$$2 != null) {
      const f$$51 = argPreBinder$$2;
      return f$$51(expr$$104);
    } else {
      return expr$$104;
    }
  }, expr$$103, patternInput$$399[0]);
  const expr$$106 = patternInput$$397[0](expr$$105);
  const expr$$107 = patternInput$$386[0](expr$$106);
  return [[expr$$107, finalAttributeAssignedNamedItems, patternInput$$370[2]], patternInput$$411[1]];
}

function TcUnnamedMethodArgs(cenv$$149, env$$220, lambdaPropagationInfo$$2, tpenv$$287, args$$80) {
  return (0, _illib.List$$$mapiFoldSquared)(function (tupledArg$$70, tupledArg$$71) {
    return TcUnnamedMethodArg(cenv$$149, env$$220, tupledArg$$70[0], tupledArg$$70[1], tupledArg$$71[0], tupledArg$$71[1], tupledArg$$71[2]);
  }, [lambdaPropagationInfo$$2, tpenv$$287], args$$80);
}

function TcUnnamedMethodArg(cenv$$150, env$$221, lambdaPropagationInfo$$4, tpenv$$289, i$$27, j$$3, _arg5$$6) {
  const mArg$$6 = _arg5$$6.fields[1];
  const isOpt$$8 = _arg5$$6.fields[2];
  const argTy$$5 = _arg5$$6.fields[0];
  const argExpr$$12 = _arg5$$6.fields[3];
  const lambdaPropagationInfoForArg = (0, _Array.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$183) {
      return (0, _Seq.singleton)((i$$27 < matchValue$$183[0].length ? j$$3 < matchValue$$183[0][i$$27].length : false) ? matchValue$$183[0][i$$27][j$$3] : new _MethodCalls.ArgumentAnalysis(0, "NoInfo"));
    }, lambdaPropagationInfo$$4);
  }), Array);
  return TcMethodArg(cenv$$150, env$$221, lambdaPropagationInfo$$4, tpenv$$289, lambdaPropagationInfoForArg, new _MethodCalls.CallerArg$00601(0, "CallerArg", argTy$$5, mArg$$6, isOpt$$8, argExpr$$12));
}

function TcMethodNamedArgs(cenv$$151, env$$222, lambdaPropagationInfo$$5, tpenv$$290, args$$81) {
  return (0, _illib.List$$$mapFoldSquared)(function (tupledArg$$72, arg30$0040$$15) {
    return TcMethodNamedArg(cenv$$151, env$$222, tupledArg$$72[0], tupledArg$$72[1], arg30$0040$$15);
  }, [lambdaPropagationInfo$$5, tpenv$$290], args$$81);
}

function TcMethodNamedArg(cenv$$152, env$$223, lambdaPropagationInfo$$7, tpenv$$292, _arg6$$6) {
  const id$$56 = _arg6$$6.fields[0];
  const arg$$41 = _arg6$$6.fields[1];
  const lambdaPropagationInfoForArg$$1 = (0, _Array.map)(function mapping$$102(x$$115) {
    return (0, _Option.defaultArg)(x$$115, new _MethodCalls.ArgumentAnalysis(0, "NoInfo"));
  }, (0, _Array.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$184) {
      return (0, _Seq.singleton)((0, _Array.tryPick)(function chooser$$6(namedInfoForArgSet) {
        return (0, _Array.tryPick)(function chooser$$5(tupledArg$$73) {
          if ((0, _ast.Ident$$get_idText)(tupledArg$$73[0]) === (0, _ast.Ident$$get_idText)(id$$56)) {
            return tupledArg$$73[1];
          } else {
            return null;
          }
        }, namedInfoForArgSet);
      }, matchValue$$184[1]));
    }, lambdaPropagationInfo$$7);
  }), Array), Array);
  const patternInput$$412 = TcMethodArg(cenv$$152, env$$223, lambdaPropagationInfo$$7, tpenv$$292, lambdaPropagationInfoForArg$$1, arg$$41);
  const tpenv$$293 = patternInput$$412[1][1];
  const lambdaPropagationInfo$$8 = patternInput$$412[1][0];
  return [new _MethodCalls.CallerNamedArg$00601(0, "CallerNamedArg", id$$56, patternInput$$412[0]), [lambdaPropagationInfo$$8, tpenv$$293]];
}

function TcMethodArg(cenv$$153, env$$224, lambdaPropagationInfo$$9, tpenv$$294, lambdaPropagationInfoForArg$$2, _arg7$$3) {
  const mArg$$7 = _arg7$$3.fields[1];
  const isOpt$$9 = _arg7$$3.fields[2];
  const argTy$$6 = _arg7$$3.fields[0];
  const argExpr$$13 = _arg7$$3.fields[3];

  if (lambdaPropagationInfoForArg$$2.length > 0) {
    const allOverloadsAreNotCalledArgMatchesForThisArg = lambdaPropagationInfoForArg$$2.every(function predicate$$50(_arg25$$1) {
      var $target$$479;

      switch (_arg25$$1.tag) {
        case 2:
        case 0:
          $target$$479 = 0;
          break;

        case 3:
          $target$$479 = 1;
          break;

        default:
          $target$$479 = 0;
      }

      switch ($target$$479) {
        case 0:
          {
            return true;
          }

        case 1:
          {
            return false;
          }
      }
    });

    if (allOverloadsAreNotCalledArgMatchesForThisArg) {
      const overloadsWhichAreFuncAtThisPosition = (0, _Array.choose)(function chooser$$7(_arg26$$1) {
        if (_arg26$$1.tag === 2) {
          const r$$7 = _arg26$$1.fields[0];
          return (0, _Array.ofList)(r$$7, Array);
        } else {
          return null;
        }
      }, lambdaPropagationInfoForArg$$2, Array);

      if (overloadsWhichAreFuncAtThisPosition.length > 0) {
        const minFuncArity = (0, _Array.minBy)(function projection$$3(array$$6) {
          return array$$6.length;
        }, overloadsWhichAreFuncAtThisPosition, {
          Compare: _Util.comparePrimitives
        }).length | 0;
        const prefixOfLambdaArgsForEachOverload = (0, _Array.map)(function mapping$$103(array$$9) {
          return (0, _Array.take)(minFuncArity, array$$9, Array);
        }, overloadsWhichAreFuncAtThisPosition, Array);

        if (prefixOfLambdaArgsForEachOverload.length > 0) {
          const numLambdaVars = prefixOfLambdaArgsForEachOverload[0].length | 0;

          const loop$$1 = function loop$$1(callerLambdaTy, lambdaVarNum) {
            if (lambdaVarNum < numLambdaVars) {
              const calledLambdaArgTy = prefixOfLambdaArgsForEachOverload[0][lambdaVarNum];
              const allRowsGiveSameArgumentType = prefixOfLambdaArgsForEachOverload.every(function predicate$$51(row) {
                return (0, _TastOps.typeEquiv)(cenv$$153.g, calledLambdaArgTy, row[lambdaVarNum]);
              });

              if (allRowsGiveSameArgumentType) {
                const matchValue$$185 = UnifyFunctionTypeUndoIfFailed(cenv$$153, TcEnv$$get_DisplayEnv(env$$224), mArg$$7, callerLambdaTy);

                if (matchValue$$185 == null) {} else {
                  const callerLambdaRangeTy = matchValue$$185[1];
                  const callerLambdaDomainTy = matchValue$$185[0];

                  if ((0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$224), cenv$$153.css, mArg$$7, calledLambdaArgTy, callerLambdaDomainTy)) {
                    loop$$1(callerLambdaRangeTy, lambdaVarNum + 1);
                  }
                }
              }
            }
          };

          loop$$1(argTy$$6, 0);
        }
      }
    }
  }

  const patternInput$$413 = TcExpr(cenv$$153, argTy$$6, env$$224, tpenv$$294, argExpr$$13);
  const lambdaPropagationInfo$$10 = (0, _Array.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$186) {
      var $target$$480;

      if (matchValue$$186[1].tag === 0) {
        $target$$480 = 1;
      } else if (matchValue$$186[1].tag === 2) {
        $target$$480 = 1;
      } else if (matchValue$$186[1].tag === 3) {
        $target$$480 = 2;
      } else {
        $target$$480 = 0;
      }

      switch ($target$$480) {
        case 0:
          {
            return (0, _Seq.empty)();
          }

        case 1:
          {
            return (0, _Seq.singleton)(matchValue$$186[0]);
          }

        case 2:
          {
            const adjustedCalledTy = matchValue$$186[1].fields[0];
            return (0, _ConstraintSolver.AddCxTypeMustSubsumeTypeMatchingOnlyUndoIfFailed)(TcEnv$$get_DisplayEnv(env$$224), cenv$$153.css, mArg$$7, adjustedCalledTy, argTy$$6) ? (0, _Seq.singleton)(matchValue$$186[0]) : (0, _Seq.empty)();
          }
      }
    }, (0, _Array.zip)(lambdaPropagationInfo$$9, lambdaPropagationInfoForArg$$2));
  }), Array);
  return [new _MethodCalls.CallerArg$00601(0, "CallerArg", argTy$$6, mArg$$7, isOpt$$9, patternInput$$413[0]), [lambdaPropagationInfo$$10, patternInput$$413[1]]];
}

function TcNewDelegateThen(cenv$$154, overallTy$$34, env$$225, tpenv$$296, mDelTy, mExprAndArg$$8, delegateTy$$1, arg$$42, atomicFlag$$14, delayed$$30) {
  const ad$$31 = env$$225.eAccessRights;
  UnifyTypes(cenv$$154, env$$225, mExprAndArg$$8, overallTy$$34, delegateTy$$1);
  const patternInput$$414 = (0, _InfoReader.GetSigOfFunctionForDelegate)(cenv$$154.infoReader, delegateTy$$1, mDelTy, ad$$31);
  const invokeMethInfo$$1 = patternInput$$414.fields[0];
  const fty$$7 = patternInput$$414.fields[3];
  const delArgTys = patternInput$$414.fields[1];
  (0, _MethodCalls.MethInfoChecks)(cenv$$154.g, cenv$$154.amap, true, null, (0, _Types.L)(), env$$225.eAccessRights, mExprAndArg$$8, invokeMethInfo$$1);
  const args$$82 = GetMethodArgs(arg$$42);
  var $target$$481, farg;

  if (args$$82[0].tail != null) {
    if (args$$82[0].tail.tail == null) {
      if (args$$82[1].tail == null) {
        $target$$481 = 0;
        farg = args$$82[0].head;
      } else {
        $target$$481 = 1;
      }
    } else {
      $target$$481 = 1;
    }
  } else {
    $target$$481 = 1;
  }

  switch ($target$$481) {
    case 0:
      {
        const m$$317 = (0, _ast.SynExpr$$get_Range)(arg$$42);
        const patternInput$$415 = TcMethodArg(cenv$$154, env$$225, new Array(0), tpenv$$296, new Array(0), new _MethodCalls.CallerArg$00601(0, "CallerArg", fty$$7, m$$317, false, farg));
        const tpenv$$297 = patternInput$$415[1][1];
        const expr$$108 = (0, _MethodCalls.BuildNewDelegateExpr)(null, cenv$$154.g, cenv$$154.amap, delegateTy$$1, invokeMethInfo$$1, delArgTys, (0, _MethodCalls.CallerArg$00601$$get_Expr)(patternInput$$415[0]), fty$$7, m$$317);
        return PropagateThenTcDelayed(cenv$$154, overallTy$$34, env$$225, tpenv$$297, m$$317, MakeApplicableExprNoFlex(cenv$$154, expr$$108), delegateTy$$1, atomicFlag$$14, delayed$$30);
      }

    case 1:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDelegateConstructorMustBePassed)(), mExprAndArg$$8));
      }
  }
}

function bindLetRec(binds$$9, m$$318, e$$96) {
  if (binds$$9.tail == null) {
    return e$$96;
  } else {
    return new _tast.Expr(6, "LetRec", binds$$9, e$$96, m$$318, (0, _tast.NewFreeVarsCache)());
  }
}

function CheckRecursiveBindingIds(binds$$10) {
  const hashOfBinds = new Set([]);
  (0, _Seq.iterate)(function (forLoopVar$$4) {
    const m$$319 = forLoopVar$$4.fields[10];
    const b$$52 = forLoopVar$$4.fields[7];
    const nm$$63 = b$$52.tag === 2 ? (0, _ast.Ident$$get_idText)(b$$52.fields[1]) : b$$52.tag === 7 ? b$$52.fields[0].fields[0].tail != null ? b$$52.fields[0].fields[0].tail.tail == null ? (0, _ast.Ident$$get_idText)(b$$52.fields[0].fields[0].head) : "" : "" : "";

    if (nm$$63 !== "" ? !(0, _Util.addToSet)(nm$$63, hashOfBinds) : false) {
      (0, _ErrorLogger.error)(new _tast.Duplicate("value", nm$$63, m$$319));
    }
  }, binds$$10);
}

function TcLinearExprs($arg$$482, $arg$$483, $arg$$484, $arg$$485, $arg$$486, $arg$$487, $arg$$488, $arg$$489) {
  var m$$322, isUse, isRec$$1, body$$15, binds$$11, sp$$8, m$$320, e2$$34, e1$$38;

  TcLinearExprs: while (true) {
    const bodyChecker = $arg$$482,
          cenv$$155 = $arg$$483,
          env$$226 = $arg$$484,
          overallTy$$35 = $arg$$485,
          tpenv$$298 = $arg$$486,
          isCompExpr = $arg$$487,
          expr$$109 = $arg$$488,
          cont = $arg$$489;
    var $target$$490, e1$$39, e2$$35, m$$321, sp$$9;

    if (expr$$109.tag === 26) {
      if (expr$$109.fields[1]) {
        if (sp$$8 = expr$$109.fields[0], (m$$320 = expr$$109.fields[4], (e2$$34 = expr$$109.fields[3], (e1$$38 = expr$$109.fields[2], !isCompExpr)))) {
          $target$$490 = 0;
          e1$$39 = expr$$109.fields[2];
          e2$$35 = expr$$109.fields[3];
          m$$321 = expr$$109.fields[4];
          sp$$9 = expr$$109.fields[0];
        } else {
          $target$$490 = 1;
        }
      } else {
        $target$$490 = 1;
      }
    } else {
      $target$$490 = 1;
    }

    switch ($target$$490) {
      case 0:
        {
          const patternInput$$416 = TcStmtThatCantBeCtorBody(cenv$$155, env$$226, tpenv$$298, e1$$39);
          const env$$227 = ShrinkContext(env$$226, m$$321, (0, _ast.SynExpr$$get_Range)(e2$$35));
          $arg$$482 = bodyChecker;
          $arg$$483 = cenv$$155;
          $arg$$484 = env$$227;
          $arg$$485 = overallTy$$35;
          $arg$$486 = tpenv$$298;
          $arg$$487 = isCompExpr;
          $arg$$488 = e2$$35;

          $arg$$489 = function (tupledArg$$74) {
            return cont([new _tast.Expr(2, "Sequential", patternInput$$416[0], tupledArg$$74[0], new _tast.SequentialOpKind(0, "NormalSeq"), sp$$9, m$$321), tupledArg$$74[1]]);
          };

          continue TcLinearExprs;
        }

      case 1:
        {
          var $target$$491, binds$$12, body$$16, isRec$$2, isUse$$1, m$$323;

          if (expr$$109.tag === 22) {
            if (m$$322 = expr$$109.fields[4], (isUse = expr$$109.fields[1], (isRec$$1 = expr$$109.fields[0], (body$$15 = expr$$109.fields[3], (binds$$11 = expr$$109.fields[2], !(isUse ? isCompExpr : false)))))) {
              $target$$491 = 0;
              binds$$12 = expr$$109.fields[2];
              body$$16 = expr$$109.fields[3];
              isRec$$2 = expr$$109.fields[0];
              isUse$$1 = expr$$109.fields[1];
              m$$323 = expr$$109.fields[4];
            } else {
              $target$$491 = 1;
            }
          } else {
            $target$$491 = 1;
          }

          switch ($target$$491) {
            case 0:
              {
                if (isRec$$2) {
                  CheckRecursiveBindingIds(binds$$12);
                  const binds$$13 = (0, _List.map)(function (x$$116) {
                    return new RecDefnBindingInfo(0, "RecDefnBindingInfo", ExprContainerInfo, new NewSlotsOK(1, "NoNewSlots"), new DeclKind(5, "ExpressionBinding"), x$$116);
                  }, binds$$12);

                  if (isUse$$1) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcBindingCannotBeUseAndRec)(), m$$323));
                  }

                  const patternInput$$417 = TcLetrec(new OverridesOK(2, "ErrorOnOverrides"), cenv$$155, env$$226, tpenv$$298, binds$$13, m$$323, m$$323);
                  const patternInput$$418 = bodyChecker(overallTy$$35, patternInput$$417[1], patternInput$$417[2], body$$16);
                  const bodyExpr$$10 = bindLetRec(patternInput$$417[0], m$$323, patternInput$$418[0]);
                  return cont([bodyExpr$$10, patternInput$$418[1]]);
                } else {
                  const patternInput$$419 = TcLetBinding(cenv$$155, isUse$$1, env$$226, ExprContainerInfo, new DeclKind(5, "ExpressionBinding"), tpenv$$298, binds$$12, m$$323, (0, _ast.SynExpr$$get_Range)(body$$16));
                  const envinner$$20 = ShrinkContext(patternInput$$419[1], m$$323, (0, _ast.SynExpr$$get_Range)(body$$16));
                  $arg$$482 = bodyChecker;
                  $arg$$483 = cenv$$155;
                  $arg$$484 = envinner$$20;
                  $arg$$485 = overallTy$$35;
                  $arg$$486 = patternInput$$419[2];
                  $arg$$487 = isCompExpr;
                  $arg$$488 = body$$16;

                  $arg$$489 = function (tupledArg$$75) {
                    return cont([patternInput$$419[0]([tupledArg$$75[0], overallTy$$35])[0], tupledArg$$75[1]]);
                  };

                  continue TcLinearExprs;
                }
              }

            case 1:
              {
                return cont(bodyChecker(overallTy$$35, env$$226, tpenv$$298, expr$$109));
              }
          }
        }
    }
  }
}

function TcAndPatternCompileMatchClauses(mExpr$$6, matchm$$2, actionOnFailure$$2, cenv$$156, inputTy$$5, resultTy$$17, env$$228, tpenv$$304, clauses$$12) {
  const patternInput$$420 = TcMatchClauses(cenv$$156, inputTy$$5, resultTy$$17, env$$228, tpenv$$304, clauses$$12);
  const patternInput$$421 = CompilePatternForMatchClauses(cenv$$156, env$$228, mExpr$$6, matchm$$2, true, actionOnFailure$$2, inputTy$$5, resultTy$$17, patternInput$$420[0]);
  return [patternInput$$421[0], patternInput$$421[1], patternInput$$420[1]];
}

function TcMatchPattern(cenv$$157, inputTy$$6, env$$229, tpenv$$306, pat$$34, optWhenExpr$$1) {
  const m$$324 = (0, _ast.SynPat$$get_Range)(pat$$34);
  const patternInput$$422 = TcPat(new _NameResolution.WarnOnUpperFlag(0, "WarnOnUpperCase"), cenv$$157, env$$229, null, new _tast.ValInline(2, "Optional"), permitInferTypars, noArgOrRetAttribs, false, null, false, tpenv$$306, (0, _Map.empty)({
    Compare: _Util.comparePrimitives
  }), (0, _Set.empty)({
    Compare: _Util.comparePrimitives
  }), inputTy$$6, pat$$34);
  const tpenv$$307 = patternInput$$422[1][0];
  const names$$19 = patternInput$$422[1][1];
  const patternInput$$423 = MakeAndPublishSimpleVals(cenv$$157, env$$229, m$$324, names$$19, false);
  let patternInput$$425;

  if (optWhenExpr$$1 == null) {
    patternInput$$425 = [null, tpenv$$307];
  } else {
    const whenExpr = optWhenExpr$$1;
    const guardEnv = new TcEnv(patternInput$$423[0].eNameResEnv, patternInput$$423[0].eUngeneralizableItems, patternInput$$423[0].ePath, patternInput$$423[0].eCompPath, patternInput$$423[0].eAccessPath, patternInput$$423[0].eAccessRights, patternInput$$423[0].eInternalsVisibleCompPaths, patternInput$$423[0].eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(12, "PatternMatchGuard", (0, _ast.SynExpr$$get_Range)(whenExpr)), patternInput$$423[0].eFamilyType, patternInput$$423[0].eCtorInfo, patternInput$$423[0].eCallerMemberName);
    const patternInput$$424 = TcExpr(cenv$$157, (0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$157.g), guardEnv, tpenv$$307, whenExpr);
    patternInput$$425 = [patternInput$$424[0], patternInput$$424[1]];
  }

  return [patternInput$$422[0](new TcPatPhase2Input(0, "TcPatPhase2Input", patternInput$$423[1], true)), patternInput$$425[0], (0, _illib.NameMapModule$$$range)(patternInput$$423[2]), patternInput$$423[0], patternInput$$425[1]];
}

function TcMatchClauses(cenv$$158, inputTy$$7, resultTy$$18, env$$230, tpenv$$310, clauses$$13) {
  const first$$2 = new _Types.FSharpRef(true);

  const isFirst$$1 = function isFirst$$1() {
    if (first$$2.contents) {
      first$$2.contents = false;
      return true;
    } else {
      return false;
    }
  };

  return (0, _List.mapFold)(function (clause$$1, arg60$0040) {
    return TcMatchClause(cenv$$158, inputTy$$7, resultTy$$18, env$$230, isFirst$$1(), clause$$1, arg60$0040);
  }, tpenv$$310, clauses$$13);
}

function TcMatchClause(cenv$$159, inputTy$$8, resultTy$$19, env$$231, isFirst$$3, tpenv$$311, _arg8$$3) {
  const spTgt = _arg8$$3.fields[4];
  const patm$$3 = _arg8$$3.fields[3];
  const pat$$35 = _arg8$$3.fields[0];
  const optWhenExpr$$2 = _arg8$$3.fields[1];
  const e$$97 = _arg8$$3.fields[2];
  const patternInput$$426 = TcMatchPattern(cenv$$159, inputTy$$8, env$$231, tpenv$$311, pat$$35, optWhenExpr$$2);
  const resultEnv = isFirst$$3 ? patternInput$$426[3] : new TcEnv(patternInput$$426[3].eNameResEnv, patternInput$$426[3].eUngeneralizableItems, patternInput$$426[3].ePath, patternInput$$426[3].eCompPath, patternInput$$426[3].eAccessPath, patternInput$$426[3].eAccessRights, patternInput$$426[3].eInternalsVisibleCompPaths, patternInput$$426[3].eModuleOrNamespaceTypeAccumulator, new _ConstraintSolver.ContextInfo(11, "FollowingPatternMatchClause", (0, _ast.SynExpr$$get_Range)(e$$97)), patternInput$$426[3].eFamilyType, patternInput$$426[3].eCtorInfo, patternInput$$426[3].eCallerMemberName);
  const patternInput$$427 = TcExprThatCanBeCtorBody(cenv$$159, resultTy$$19, resultEnv, patternInput$$426[4], e$$97);
  return [new _PatternMatchCompilation.TypedMatchClause(0, "TClause", patternInput$$426[0], patternInput$$426[1], new _tast.DecisionTreeTarget(0, "TTarget", patternInput$$426[2], patternInput$$427[0], spTgt), patm$$3), patternInput$$427[1]];
}

function TcStaticOptimizationConstraint(cenv$$160, env$$232, tpenv$$314, c$$33) {
  if (c$$33.tag === 1) {
    const tp$$46 = c$$33.fields[0];
    const m$$326 = c$$33.fields[1];

    if (!(0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$160.g)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticOptimizationConditionalsOnlyForFSharpLibrary)(), m$$326));
    }

    const patternInput$$430 = TcTypar(cenv$$160, env$$232, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), tpenv$$314, tp$$46);
    return [new _tast.StaticOptimization(1, "TTyconIsStruct", (0, _tast.mkTyparTy)(patternInput$$430[0])), patternInput$$430[1]];
  } else {
    const ty$$106 = c$$33.fields[1];
    const tp$$45 = c$$33.fields[0];
    const m$$325 = c$$33.fields[2];

    if (!(0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$160.g)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticOptimizationConditionalsOnlyForFSharpLibrary)(), m$$325));
    }

    const patternInput$$428 = TcType(cenv$$160, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$232, tpenv$$314, ty$$106);
    const patternInput$$429 = TcTypar(cenv$$160, env$$232, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), patternInput$$428[1], tp$$45);
    return [new _tast.StaticOptimization(0, "TTyconEqualsTycon", (0, _tast.mkTyparTy)(patternInput$$429[0]), patternInput$$428[0]), patternInput$$429[1]];
  }
}

function mkConvToNativeInt(g$$39, e$$98, m$$327) {
  return new _tast.Expr(11, "Op", new _tast.TOp(22, "ILAsm", (0, _Types.L)(new _il.ILInstr(11, "AI_conv", new _il.ILBasicType(11, "DT_I")), (0, _Types.L)()), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_nativeint_ty)(g$$39), (0, _Types.L)())), (0, _Types.L)(), (0, _Types.L)(e$$98, (0, _Types.L)()), m$$327);
}

function TcAndBuildFixedExpr(cenv$$161, env$$233, overallPatTy, fixedExpr, overallExprTy, mBinding$$6) {
  var ty$$107, ty$$109, ty$$111;
  (0, _ErrorLogger.warning)(new _ErrorLogger.PossibleUnverifiableCode(mBinding$$6));

  if (ty$$107 = overallExprTy, (0, _TastOps.isByrefTy)(cenv$$161.g, ty$$107)) {
    const ty$$108 = overallExprTy;
    let okByRef;
    const matchValue$$187 = (0, _TastOps.stripExpr)(fixedExpr);

    if (matchValue$$187.tag === 11) {
      const tyargs$$21 = matchValue$$187.fields[1];
      const op$$3 = matchValue$$187.fields[0];
      const args$$83 = matchValue$$187.fields[2];
      const matchValue$$188 = [op$$3, tyargs$$21, args$$83];
      var $target$$492, rfref$$3, fspec$$7;

      if (matchValue$$188[0].tag === 13) {
        if (matchValue$$188[2].tail != null) {
          if (matchValue$$188[2].tail.tail == null) {
            $target$$492 = 0;
            rfref$$3 = matchValue$$188[0].fields[0];
          } else {
            $target$$492 = 4;
          }
        } else {
          $target$$492 = 4;
        }
      } else if (matchValue$$188[0].tag === 22) {
        if (matchValue$$188[0].fields[0].tail != null) {
          if (matchValue$$188[0].fields[0].head.tag === 62) {
            if (matchValue$$188[0].fields[0].tail.tail == null) {
              $target$$492 = 1;
              fspec$$7 = matchValue$$188[0].fields[0].head.fields[0];
            } else {
              $target$$492 = 4;
            }
          } else if (matchValue$$188[0].fields[0].head.tag === 80) {
            if (matchValue$$188[0].fields[0].tail.tail == null) {
              $target$$492 = 2;
            } else {
              $target$$492 = 4;
            }
          } else {
            $target$$492 = 4;
          }
        } else {
          $target$$492 = 4;
        }
      } else if (matchValue$$188[0].tag === 23) {
        $target$$492 = 3;
      } else {
        $target$$492 = 4;
      }

      switch ($target$$492) {
        case 0:
          {
            okByRef = !(0, _tast.Entity$$get_IsStructOrEnumTycon)((0, _tast.RecdFieldRef$$get_Tycon)(rfref$$3));
            break;
          }

        case 1:
          {
            okByRef = (0, _Util.equals)((0, _il.ILType$$get_Boxity)(fspec$$7.DeclaringType), new _il.ILBoxity(0, "AsObject"));
            break;
          }

        case 2:
          {
            okByRef = true;
            break;
          }

        case 3:
          {
            okByRef = true;
            break;
          }

        case 4:
          {
            okByRef = false;
            break;
          }
      }
    } else {
      okByRef = false;
    }

    if (!okByRef) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFixedNotAllowed)(), mBinding$$6));
    }

    const elemTy$$3 = (0, _TastOps.destByrefTy)(cenv$$161.g, overallExprTy);
    UnifyTypes(cenv$$161, env$$233, mBinding$$6, (0, _TastOps.mkNativePtrTy)(cenv$$161.g, elemTy$$3), overallPatTy);
    return (0, _TastOps.mkCompGenLetIn)(mBinding$$6, "pinnedByref", ty$$108, fixedExpr, function (tupledArg$$76) {
      (0, _tast.Val$$SetIsFixed)(tupledArg$$76[0]);
      return mkConvToNativeInt(cenv$$161.g, tupledArg$$76[1], mBinding$$6);
    });
  } else if (ty$$109 = overallExprTy, (0, _TastOps.isStringTy)(cenv$$161.g, ty$$109)) {
    const ty$$110 = overallExprTy;
    const charPtrTy = (0, _TastOps.mkNativePtrTy)(cenv$$161.g, (0, _TcGlobals.TcGlobals$$get_char_ty)(cenv$$161.g));
    UnifyTypes(cenv$$161, env$$233, mBinding$$6, charPtrTy, overallPatTy);
    return (0, _TastOps.mkCompGenLetIn)(mBinding$$6, "pinnedString", (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$161.g), fixedExpr, function (tupledArg$$77) {
      (0, _tast.Val$$SetIsFixed)(tupledArg$$77[0]);
      const addrOffset = BuildOffsetToStringData(cenv$$161, env$$233, mBinding$$6);
      const stringAsNativeInt = mkConvToNativeInt(cenv$$161.g, tupledArg$$77[1], mBinding$$6);
      const plusOffset = new _tast.Expr(11, "Op", new _tast.TOp(22, "ILAsm", (0, _Types.L)(new _il.ILInstr(0, "AI_add"), (0, _Types.L)()), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_nativeint_ty)(cenv$$161.g), (0, _Types.L)())), (0, _Types.L)(), (0, _Types.L)(stringAsNativeInt, (0, _Types.L)(addrOffset, (0, _Types.L)())), mBinding$$6);
      return (0, _TastOps.mkNullTest)(cenv$$161.g, mBinding$$6, tupledArg$$77[1], plusOffset, tupledArg$$77[1]);
    });
  } else if (ty$$111 = overallExprTy, (0, _TastOps.isArray1DTy)(cenv$$161.g, ty$$111)) {
    const ty$$112 = overallExprTy;
    const elemTy$$4 = (0, _TastOps.destArrayTy)(cenv$$161.g, overallExprTy);
    const elemPtrTy = (0, _TastOps.mkNativePtrTy)(cenv$$161.g, elemTy$$4);
    UnifyTypes(cenv$$161, env$$233, mBinding$$6, elemPtrTy, overallPatTy);
    return (0, _TastOps.mkCompGenLetIn)(mBinding$$6, "tmpArray", overallExprTy, fixedExpr, function (tupledArg$$78) {
      const elemZeroAddress = (0, _TastOps.mkArrayElemAddress)(cenv$$161.g, false, new _il.ILReadonly(1, "NormalAddress"), false, (0, _il.ILArrayShape$$$get_SingleDimensional)(), elemTy$$4, (0, _Types.L)(tupledArg$$78[1], (0, _Types.L)((0, _TastOps.mkInt32)(cenv$$161.g, mBinding$$6, 0), (0, _Types.L)())), mBinding$$6);
      const zero = mkConvToNativeInt(cenv$$161.g, (0, _TastOps.mkInt32)(cenv$$161.g, mBinding$$6, 0), mBinding$$6);
      const arrayLengthExpr = (0, _TastOps.mkCallArrayLength)(cenv$$161.g, mBinding$$6, elemTy$$4, tupledArg$$78[1]);
      return (0, _TastOps.mkNullTest)(cenv$$161.g, mBinding$$6, tupledArg$$78[1], (0, _TastOps.mkNullTest)(cenv$$161.g, mBinding$$6, arrayLengthExpr, (0, _TastOps.mkCompGenLetIn)(mBinding$$6, "pinnedByref", (0, _TastOps.mkByrefTy)(cenv$$161.g, elemTy$$4), elemZeroAddress, function (tupledArg$$79) {
        (0, _tast.Val$$SetIsFixed)(tupledArg$$79[0]);
        return mkConvToNativeInt(cenv$$161.g, tupledArg$$79[1], mBinding$$6);
      }), zero), zero);
    });
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFixedNotAllowed)(), mBinding$$6));
  }
}

function TcNormalizedBinding(declKind$$12, cenv$$162, env$$234, tpenv$$318, overallTy$$36, safeThisValOpt$$2, safeInitInfo$$4, enclosingDeclaredTypars$$6, _arg9$$2, bind$$9) {
  var memberFlags$$26;
  const flex$$9 = _arg9$$2;
  const declaredTypars$$13 = flex$$9.fields[1];
  const envinner$$23 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(1, "NoCheckForDuplicateTypars"), (0, _List.append)(enclosingDeclaredTypars$$6, declaredTypars$$13), env$$234);
  const vis$$23 = bind$$9.fields[0];
  const valSynData$$20 = bind$$9.fields[7];
  const spatsL$$2 = bind$$9.fields[9].fields[0];
  const spBind$$14 = bind$$9.fields[11];
  const rtyOpt$$2 = bind$$9.fields[9].fields[1];
  const rhsExpr$$27 = bind$$9.fields[9].fields[2];
  const pat$$36 = bind$$9.fields[8];
  const mBinding$$7 = bind$$9.fields[10];
  const isMutable$$14 = bind$$9.fields[3];
  const isInline$$4 = bind$$9.fields[2];
  const doc$$4 = bind$$9.fields[5];
  const bkind$$2 = bind$$9.fields[1];
  const attrs$$9 = bind$$9.fields[4];
  const valSynInfo$$12 = valSynData$$20.fields[1];
  const memberFlagsOpt$$9 = valSynData$$20.fields[0];
  let callerName$$4;
  const matchValue$$189 = [declKind$$12, bkind$$2, pat$$36];
  var $target$$493, name$$5;

  if (matchValue$$189[0].tag === 5) {
    $target$$493 = 0;
  } else if (matchValue$$189[0].tag === 3) {
    if (matchValue$$189[2].tag === 2) {
      $target$$493 = 1;
      name$$5 = matchValue$$189[2].fields[1];
    } else if (matchValue$$189[0].fields[0]) {
      if (matchValue$$189[1].tag === 2) {
        $target$$493 = 3;
      } else {
        $target$$493 = 5;
      }
    } else if (matchValue$$189[1].tag === 2) {
      $target$$493 = 2;
    } else {
      $target$$493 = 5;
    }
  } else if (matchValue$$189[0].tag === 0) {
    if (matchValue$$189[2].tag === 2) {
      $target$$493 = 1;
      name$$5 = matchValue$$189[2].fields[1];
    } else if (matchValue$$189[1].tag === 0) {
      $target$$493 = 4;
    } else {
      $target$$493 = 5;
    }
  } else if (matchValue$$189[2].tag === 2) {
    $target$$493 = 1;
    name$$5 = matchValue$$189[2].fields[1];
  } else {
    $target$$493 = 5;
  }

  switch ($target$$493) {
    case 0:
      {
        callerName$$4 = envinner$$23.eCallerMemberName;
        break;
      }

    case 1:
      {
        if (memberFlagsOpt$$9 != null) {
          const memberFlags$$25 = memberFlagsOpt$$9;
          var $target$$494;

          if (memberFlags$$25.MemberKind.tag === 3) {
            $target$$494 = 0;
          } else if (memberFlags$$25.MemberKind.tag === 4) {
            $target$$494 = 0;
          } else if (memberFlags$$25.MemberKind.tag === 5) {
            $target$$494 = 0;
          } else if (memberFlags$$25.MemberKind.tag === 0) {
            $target$$494 = 1;
          } else if (memberFlags$$25.MemberKind.tag === 1) {
            $target$$494 = 2;
          } else {
            $target$$494 = 3;
          }

          switch ($target$$494) {
            case 0:
              {
                callerName$$4 = (0, _ast.Ident$$get_idText)(name$$5).substr(4);
                break;
              }

            case 1:
              {
                callerName$$4 = ".ctor";
                break;
              }

            case 2:
              {
                callerName$$4 = ".ctor";
                break;
              }

            case 3:
              {
                callerName$$4 = (0, _ast.Ident$$get_idText)(name$$5);
                break;
              }
          }
        } else {
          callerName$$4 = (0, _ast.Ident$$get_idText)(name$$5);
        }

        break;
      }

    case 2:
      {
        callerName$$4 = ".ctor";
        break;
      }

    case 3:
      {
        callerName$$4 = ".cctor";
        break;
      }

    case 4:
      {
        callerName$$4 = ".cctor";
        break;
      }

    case 5:
      {
        callerName$$4 = envinner$$23.eCallerMemberName;
        break;
      }
  }

  const envinner$$24 = new TcEnv(envinner$$23.eNameResEnv, envinner$$23.eUngeneralizableItems, envinner$$23.ePath, envinner$$23.eCompPath, envinner$$23.eAccessPath, envinner$$23.eAccessRights, envinner$$23.eInternalsVisibleCompPaths, envinner$$23.eModuleOrNamespaceTypeAccumulator, envinner$$23.eContextInfo, envinner$$23.eFamilyType, envinner$$23.eCtorInfo, callerName$$4);
  const attrTgt$$4 = DeclKind$$$AllowedAttribTargets(memberFlagsOpt$$9, declKind$$12) | 0;
  let patternInput$$431;

  if (rhsExpr$$27.tag === 60) {
    const e$$99 = rhsExpr$$27.fields[0];
    patternInput$$431 = [true, e$$99, (0, _ConstraintSolver.NewInferenceType)(), overallTy$$36];
  } else {
    const e$$100 = rhsExpr$$27;
    patternInput$$431 = [false, e$$100, overallTy$$36, overallTy$$36];
  }

  const TcAttrs = function TcAttrs(tgt, attrs$$10) {
    const attrs$$11 = TcAttributes(cenv$$162, envinner$$24, tgt, attrs$$10);

    if (attrTgt$$4 === 0 ? !(attrs$$11.tail == null) : false) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributesAreNotPermittedOnLetBindings)(), mBinding$$7));
    }

    return attrs$$11;
  };

  const valAttribs = TcAttrs(attrTgt$$4, attrs$$9);
  const isVolatile = (0, _TastOps.HasFSharpAttribute)(cenv$$162.g, (0, _TcGlobals.TcGlobals$$get_attrib_VolatileFieldAttribute)(cenv$$162.g), valAttribs);
  const inlineFlag$$13 = ComputeInlineFlag(memberFlagsOpt$$9, isInline$$4, isMutable$$14, mBinding$$7);
  const argAttribs$$6 = (0, _List.map)(function mapping$$105($arg$$74) {
    return (0, _List.map)(function mapping$$104($arg$$73) {
      return TcAttrs(2048, (0, _ast.SynInfo$$$AttribsOfArgData)($arg$$73));
    }, (0, _ast.SynInfo$$$InferSynArgInfoFromSimplePats)($arg$$74));
  }, spatsL$$2);
  let retAttribs$$1;

  if (rtyOpt$$2 == null) {
    retAttribs$$1 = (0, _Types.L)();
  } else {
    const retAttrs = rtyOpt$$2.fields[2];
    retAttribs$$1 = TcAttrs(8192, retAttrs);
  }

  const argAndRetAttribs = new ArgAndRetAttribs(0, "ArgAndRetAttribs", argAttribs$$6, retAttribs$$1);

  if ((0, _TastOps.HasFSharpAttribute)(cenv$$162.g, (0, _TcGlobals.TcGlobals$$get_attrib_DefaultValueAttribute)(cenv$$162.g), valAttribs)) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDefaultValueAttributeRequiresVal)(), mBinding$$7));
  }

  const isThreadStatic = (0, _TastOps.isThreadOrContextStatic)(cenv$$162.g, valAttribs);

  if (isThreadStatic) {
    (0, _ErrorLogger.errorR)(new DeprecatedThreadStaticBindingWarning(mBinding$$7));
  }

  if (isVolatile) {
    if (declKind$$12.tag === 3) {} else {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcVolatileOnlyOnClassLetBindings)(), mBinding$$7));
    }

    if (!isMutable$$14 ? true : isThreadStatic) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcVolatileFieldsMustBeMutable)(), mBinding$$7));
    }
  }

  if (patternInput$$431[0] ? (!(0, _Util.equals)(declKind$$12, new DeclKind(5, "ExpressionBinding")) ? true : isInline$$4) ? true : isMutable$$14 : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFixedNotAllowed)(), mBinding$$7));
  }

  if ((!DeclKind$$get_CanBeDllImport(declKind$$12) ? true : memberFlagsOpt$$9 != null ? (memberFlags$$26 = memberFlagsOpt$$9, memberFlags$$26.IsInstance) : false) ? (0, _TastOps.HasFSharpAttributeOpt)(cenv$$162.g, (0, _TcGlobals.TcGlobals$$get_attrib_DllImportAttribute)(cenv$$162.g), valAttribs) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDllImportNotAllowed)(), mBinding$$7));
  }

  if (memberFlagsOpt$$9 == null ? (0, _TastOps.HasFSharpAttribute)(cenv$$162.g, (0, _TcGlobals.TcGlobals$$get_attrib_ConditionalAttribute)(cenv$$162.g), valAttribs) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConditionalAttributeRequiresMembers)(), mBinding$$7));
  }

  if ((0, _TastOps.HasFSharpAttribute)(cenv$$162.g, (0, _TcGlobals.TcGlobals$$get_attrib_EntryPointAttribute)(cenv$$162.g), valAttribs)) {
    if (memberFlagsOpt$$9 != null) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcEntryPointAttributeRequiresFunctionInModule)(), mBinding$$7));
    } else {
      UnifyTypes(cenv$$162, env$$234, mBinding$$7, patternInput$$431[2], (0, _TastOps.op_MinusMinusGreater)((0, _TastOps.mkArrayType)(cenv$$162.g, (0, _TcGlobals.TcGlobals$$get_string_ty)(cenv$$162.g)), (0, _TcGlobals.TcGlobals$$get_int_ty)(cenv$$162.g)));
    }
  }

  if (isMutable$$14 ? isInline$$4 : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMutableValuesCannotBeInline)(), mBinding$$7));
  }

  if (isMutable$$14 ? !(declaredTypars$$13.tail == null) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMutableValuesMayNotHaveGenericParameters)(), mBinding$$7));
  }

  const flex$$10 = isMutable$$14 ? dontInferTypars : flex$$9;

  if (isMutable$$14 ? !(spatsL$$2.tail == null) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMutableValuesSyntax)(), mBinding$$7));
  }

  let isInline$$5;

  if ((isInline$$4 ? spatsL$$2.tail == null : false) ? declaredTypars$$13.tail == null : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlyFunctionsCanBeInline)(), mBinding$$7));
    isInline$$5 = false;
  } else {
    isInline$$5 = isInline$$4;
  }

  const compgen$$10 = false;
  const partialValReprInfo$$7 = TranslateTopValSynInfo(mBinding$$7, function (attrTgt$$5, synAttribs$$3) {
    return TcAttributes(cenv$$162, env$$234, attrTgt$$5, synAttribs$$3);
  }, valSynInfo$$12);
  const patternInput$$432 = TcPat(new _NameResolution.WarnOnUpperFlag(1, "AllIdsOK"), cenv$$162, envinner$$24, partialValReprInfo$$7, inlineFlag$$13, flex$$10, argAndRetAttribs, isMutable$$14, vis$$23, compgen$$10, tpenv$$318, (0, _illib.NameMapModule$$$empty)(), (0, _Set.empty)({
    Compare: _Util.comparePrimitives
  }), patternInput$$431[2], pat$$36);
  const tpenv$$319 = patternInput$$432[1][0];
  const nameToPrelimValSchemeMap$$1 = patternInput$$432[1][1];
  let apinfoOpt;
  const matchValue$$191 = (0, _illib.NameMapModule$$$range)(nameToPrelimValSchemeMap$$1);
  var $target$$495, id$$59, ty$$113;

  if (matchValue$$191.tail != null) {
    if (matchValue$$191.tail.tail == null) {
      $target$$495 = 0;
      id$$59 = matchValue$$191.head.fields[0];
      ty$$113 = matchValue$$191.head.fields[2];
    } else {
      $target$$495 = 1;
    }
  } else {
    $target$$495 = 1;
  }

  switch ($target$$495) {
    case 0:
      {
        const matchValue$$192 = (0, _PrettyNaming.ActivePatternInfoOfValName)((0, _ast.Ident$$get_idText)(id$$59), (0, _ast.Ident$$get_idRange)(id$$59));

        if (matchValue$$192 == null) {
          apinfoOpt = null;
        } else {
          const apinfo$$2 = matchValue$$192;
          apinfoOpt = [apinfo$$2, ty$$113, (0, _ast.Ident$$get_idRange)(id$$59)];
        }

        break;
      }

    case 1:
      {
        apinfoOpt = null;
        break;
      }
  }

  let envinner$$25;

  if (apinfoOpt == null) {
    envinner$$25 = envinner$$24;
  } else {
    const ty$$114 = apinfoOpt[1];
    const m$$328 = apinfoOpt[2];
    const apinfo$$3 = apinfoOpt[0];

    if (memberFlagsOpt$$9 != null ? true : !(0, _PrettyNaming.ActivePatternInfo$$get_IsTotal)(apinfo$$3) ? (0, _List.length)((0, _PrettyNaming.ActivePatternInfo$$get_ActiveTags)(apinfo$$3)) > 1 : false) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidActivePatternName)(), mBinding$$7));
    }

    (0, _List.iterateIndexed)(function action$$32(i$$28, tupledArg$$80) {
      const item$$49 = new _NameResolution.Item(2, "ActivePatternResult", apinfo$$3, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$162.g), i$$28, tupledArg$$80[1]);
      (0, _NameResolution.CallNameResolutionSink)(cenv$$162.tcSink, tupledArg$$80[1], TcEnv$$get_NameEnv(env$$234), item$$49, item$$49, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$234), env$$234.eAccessRights);
    }, (0, _PrettyNaming.ActivePatternInfo$$get_ActiveTagsWithRanges)(apinfo$$3));
    envinner$$25 = new TcEnv((0, _NameResolution.AddActivePatternResultTagsToNameEnv)(apinfo$$3, envinner$$24.eNameResEnv, ty$$114, m$$328), envinner$$24.eUngeneralizableItems, envinner$$24.ePath, envinner$$24.eCompPath, envinner$$24.eAccessPath, envinner$$24.eAccessRights, envinner$$24.eInternalsVisibleCompPaths, envinner$$24.eModuleOrNamespaceTypeAccumulator, envinner$$24.eContextInfo, envinner$$24.eFamilyType, envinner$$24.eCtorInfo, envinner$$24.eCallerMemberName);
  }

  let isCtor$$1;

  if (memberFlagsOpt$$9 != null) {
    const memberFlags$$27 = memberFlagsOpt$$9;
    isCtor$$1 = (0, _Util.equals)(memberFlags$$27.MemberKind, new _ast.MemberKind(1, "Constructor"));
  } else {
    isCtor$$1 = false;
  }

  let patternInput$$433;
  const atTopNonLambdaDefn = (DeclKind$$$IsModuleOrMemberOrExtensionBinding$$Z6CE1C8BD(declKind$$12) ? patternInput$$431[1].tag === 15 ? false : true : false) ? (0, _ast.synExprContainsError)(patternInput$$431[1]) : false;
  patternInput$$433 = (0, _ErrorLogger.conditionallySuppressErrorReporting)(atTopNonLambdaDefn, function () {
    return isCtor$$1 ? TcExprThatIsCtorBody(safeThisValOpt$$2, safeInitInfo$$4, cenv$$162, patternInput$$431[3], envinner$$25, tpenv$$319, patternInput$$431[1]) : TcExprThatCantBeCtorBody(cenv$$162, patternInput$$431[3], envinner$$25, tpenv$$319, patternInput$$431[1]);
  });

  if ((0, _Util.equals)(bkind$$2, new _ast.SynBindingKind(0, "StandaloneExpression")) ? !cenv$$162.isScript : false) {
    UnifyUnitType(cenv$$162, env$$234, mBinding$$7, patternInput$$431[2], patternInput$$433[0]);
  }

  const rhsExprChecked$$1 = patternInput$$431[0] ? TcAndBuildFixedExpr(cenv$$162, env$$234, patternInput$$431[2], patternInput$$433[0], patternInput$$431[3], mBinding$$7) : patternInput$$433[0];

  if (apinfoOpt == null) {} else {
    const ty$$115 = apinfoOpt[1];
    const apinfo$$4 = apinfoOpt[0];
    const activePatResTys$$1 = (0, _ConstraintSolver.NewInferenceTypes)((0, _PrettyNaming.ActivePatternInfo$$get_ActiveTags)(apinfo$$4));
    const patternInput$$434 = (0, _TastOps.stripFunTy)(cenv$$162.g, ty$$115);
    UnifyTypes(cenv$$162, env$$234, mBinding$$7, (0, _TastOps.ActivePatternInfo$002EResultType)(apinfo$$4, cenv$$162.g, (0, _ast.SynExpr$$get_Range)(patternInput$$431[1]), activePatResTys$$1), patternInput$$434[1]);
  }

  const patternInput$$435 = TcLiteral(cenv$$162, patternInput$$431[3], env$$234, patternInput$$433[1], valAttribs, patternInput$$431[1]);

  if (patternInput$$435[0]) {
    if (isThreadStatic) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIllegalAttributesForLiteral)(), mBinding$$7));
    }

    if (isMutable$$14) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLiteralCannotBeMutable)(), mBinding$$7));
    }

    if (isInline$$5) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLiteralCannotBeInline)(), mBinding$$7));
    }

    if (!(declaredTypars$$13.tail == null)) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLiteralCannotHaveGenericParameters)(), mBinding$$7));
    }
  }

  return [new CheckedBindingInfo(0, "CheckedBindingInfo", inlineFlag$$13, valAttribs, doc$$4, patternInput$$432[0], flex$$10, nameToPrelimValSchemeMap$$1, rhsExprChecked$$1, argAndRetAttribs, patternInput$$431[2], mBinding$$7, spBind$$14, compgen$$10, patternInput$$435[1], patternInput$$431[0]), patternInput$$433[1]];
}

function TcLiteral(cenv$$163, overallTy$$37, env$$235, tpenv$$321, attrs$$12, synLiteralValExpr) {
  const hasLiteralAttr$$1 = (0, _TastOps.HasFSharpAttribute)(cenv$$163.g, (0, _TcGlobals.TcGlobals$$get_attrib_LiteralAttribute)(cenv$$163.g), attrs$$12);

  if (hasLiteralAttr$$1) {
    const patternInput$$436 = TcExpr(cenv$$163, overallTy$$37, env$$235, tpenv$$321, synLiteralValExpr);
    const matchValue$$193 = (0, _TastOps.EvalLiteralExprOrAttribArg)(cenv$$163.g, patternInput$$436[0]);

    if (matchValue$$193.tag === 0) {
      const ty$$116 = matchValue$$193.fields[2];
      const c$$34 = matchValue$$193.fields[0];

      if ((0, _Util.equals)(c$$34, new _tast.Const(17, "Zero")) ? (0, _TastOps.isStructTy)(cenv$$163.g, ty$$116) : false) {
        (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIllegalStructTypeForConstantExpression)(), (0, _ast.SynExpr$$get_Range)(synLiteralValExpr)));
        return [false, null];
      } else {
        return [true, c$$34];
      }
    } else {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidConstantExpression)(), (0, _ast.SynExpr$$get_Range)(synLiteralValExpr)));
      return [true, new _tast.Const(16, "Unit")];
    }
  } else {
    return [hasLiteralAttr$$1, null];
  }
}

function TcBindingTyparDecls(alwaysRigid, cenv$$164, env$$236, tpenv$$322, _arg10$$2) {
  const synTypars$$3 = _arg10$$2.fields[0];
  const synTyparConstraints$$1 = _arg10$$2.fields[2];
  const infer$$1 = _arg10$$2.fields[1];
  const declaredTypars$$14 = TcTyparDecls(cenv$$164, env$$236, synTypars$$3);
  const envinner$$26 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), declaredTypars$$14, env$$236);
  const tpenv$$323 = TcTyparConstraints(cenv$$164, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$26, tpenv$$322, synTyparConstraints$$1);
  let rigidCopyOfDeclaredTypars$$1;

  if (alwaysRigid) {
    (0, _List.iterate)(function action$$33(tp$$47) {
      SetTyparRigid(cenv$$164.g, TcEnv$$get_DisplayEnv(env$$236), (0, _tast.Typar$$get_Range)(tp$$47), tp$$47);
    }, declaredTypars$$14);
    rigidCopyOfDeclaredTypars$$1 = declaredTypars$$14;
  } else {
    const rigidCopyOfDeclaredTypars = (0, _tast.copyTypars)(declaredTypars$$14);
    (0, _List.iterate)(function action$$34(tp$$48) {
      SetTyparRigid(cenv$$164.g, TcEnv$$get_DisplayEnv(env$$236), (0, _tast.Typar$$get_Range)(tp$$48), tp$$48);
    }, rigidCopyOfDeclaredTypars);
    (0, _List.iterate)(function action$$35(tp$$49) {
      (0, _tast.Typar$$SetRigidity$$Z10E5307B)(tp$$49, new _tast.TyparRigidity(1, "WillBeRigid"));
    }, declaredTypars$$14);
    rigidCopyOfDeclaredTypars$$1 = rigidCopyOfDeclaredTypars;
  }

  return [new ExplicitTyparInfo(0, "ExplicitTyparInfo", rigidCopyOfDeclaredTypars$$1, declaredTypars$$14, infer$$1), tpenv$$323];
}

function TcNonrecBindingTyparDecls(cenv$$165, env$$237, tpenv$$324, bind$$10) {
  const synTyparDecls$$3 = bind$$10.fields[6];
  return TcBindingTyparDecls(true, cenv$$165, env$$237, tpenv$$324, synTyparDecls$$3);
}

function TcNonRecursiveBinding(declKind$$13, cenv$$166, env$$238, tpenv$$325, ty$$117, b$$53) {
  const b$$54 = BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(1, "ValOrMemberBinding"), cenv$$166, env$$238, b$$53);
  const patternInput$$437 = TcNonrecBindingTyparDecls(cenv$$166, env$$238, tpenv$$325, b$$54);
  return TcNormalizedBinding(declKind$$13, cenv$$166, env$$238, patternInput$$437[1], ty$$117, null, new SafeInitData(1, "NoSafeInitInfo"), (0, _Types.L)(), patternInput$$437[0], b$$54);
}

function TcAttribute(canFail, cenv$$167, env$$239, attrTgt$$6, synAttr) {
  var id$$78, id$$76, id$$74, id$$72, id$$70, id$$68, id$$66, id$$64, id$$62, id$$60, d$$14;
  const tycon$$2 = synAttr.TypeName.fields[0];
  const arg$$43 = synAttr.ArgExpr;
  const targetIndicator = synAttr.Target;
  const isAppliedToGetterOrSetter = synAttr.AppliesToGetterAndSetter;
  const mAttr = synAttr.Range;
  const patternInput$$439 = (0, _illib.List$$$frontAndBack)(tycon$$2);
  const tpenv$$327 = emptyUnscopedTyparEnv;
  const attrTgt$$7 = (isAppliedToGetterOrSetter ? attrTgt$$6 ^ 128 | 64 : attrTgt$$6) | 0;
  let patternInput$$440;

  const try1 = function try1(n$$15) {
    const tyid$$1 = (0, _ast.mkSynId)((0, _ast.Ident$$get_idRange)(patternInput$$439[1]), n$$15);
    const tycon$$3 = (0, _List.append)(patternInput$$439[0], (0, _Types.L)(tyid$$1, (0, _Types.L)()));
    const ad$$32 = env$$239.eAccessRights;
    const matchValue$$194 = (0, _NameResolution.ResolveTypeLongIdent)(cenv$$167.tcSink, cenv$$167.nameResolver, new _NameResolution.ItemOccurence(3, "UseInAttribute"), new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$239.eNameResEnv, ad$$32, tycon$$3, (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$get_DefiniteEmpty)(), new _NameResolution.PermitDirectReferenceToGeneratedType(1, "No"));

    if (matchValue$$194.tag === 1) {
      const err$$1 = matchValue$$194.fields[0];
      return (0, _illib.ResultOrExceptionModule$$$raze)(err$$1);
    } else {
      return (0, _illib.ResultOrExceptionModule$$$success)(TcTypeAndRecover(cenv$$167, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(3, "UseInAttribute"), env$$239, tpenv$$327, new _ast.SynType(1, "App", new _ast.SynType(0, "LongIdent", new _ast.LongIdentWithDots(0, "LongIdentWithDots", tycon$$3, (0, _Types.L)())), null, (0, _Types.L)(), (0, _Types.L)(), null, false, mAttr)));
    }
  };

  patternInput$$440 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)((0, _illib.ResultOrExceptionModule$$$otherwise)(function f$$52() {
    return try1((0, _ast.Ident$$get_idText)(patternInput$$439[1]));
  }, try1((0, _ast.Ident$$get_idText)(patternInput$$439[1]) + "Attribute")));
  const ad$$33 = env$$239.eAccessRights;

  if (!(0, _AccessibilityLogic.IsTypeAccessible)(cenv$$167.g, cenv$$167.amap, mAttr, ad$$33, patternInput$$440[0])) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeIsInaccessible)(), mAttr));
  }

  const tcref$$36 = (0, _TastOps.tcrefOfAppTy)(cenv$$167.g, patternInput$$440[0]);
  const conditionalCallDefineOpt$$1 = (0, _TastOps.TryFindTyconRefStringAttribute)(cenv$$167.g, mAttr, (0, _TcGlobals.TcGlobals$$get_attrib_ConditionalAttribute)(cenv$$167.g), tcref$$36);
  var $target$$496, d$$15;

  if (conditionalCallDefineOpt$$1 != null) {
    if (d$$14 = conditionalCallDefineOpt$$1, !(0, _List.contains)(d$$14, cenv$$167.conditionalDefines, {
      Equals($x$$77, $y$$78) {
        return $x$$77 === $y$$78;
      },

      GetHashCode: _Util.structuralHash
    })) {
      $target$$496 = 0;
      d$$15 = conditionalCallDefineOpt$$1;
    } else {
      $target$$496 = 1;
    }
  } else {
    $target$$496 = 1;
  }

  switch ($target$$496) {
    case 0:
      {
        return [(0, _Types.L)(), false];
      }

    case 1:
      {
        let patternInput$$441;
        const validOnDefault = 32767;
        const inheritedDefault = true;

        if ((0, _tast.EntityRef$$get_IsILTycon)(tcref$$36)) {
          const tdef = (0, _tast.EntityRef$$get_ILTyconRawMetadata)(tcref$$36);
          const tref$$4 = (0, _TcGlobals.BuiltinAttribInfo$$get_TypeRef)((0, _TcGlobals.TcGlobals$$get_attrib_AttributeUsageAttribute)(cenv$$167.g));
          const matchValue$$195 = (0, _TastOps.TryDecodeILAttribute)(cenv$$167.g, tref$$4, (0, _il.ILTypeDef$$get_CustomAttrs)(tdef));

          var $target$$497, named, validOn, _allowMultiple, inherited$$1, validOn$$1;

          if (matchValue$$195 != null) {
            if (matchValue$$195[0].tail != null) {
              if (matchValue$$195[0].head.tag === 5) {
                if (matchValue$$195[0].tail.tail != null) {
                  if (matchValue$$195[0].tail.head.tag === 1) {
                    if (matchValue$$195[0].tail.tail.tail != null) {
                      if (matchValue$$195[0].tail.tail.head.tag === 1) {
                        if (matchValue$$195[0].tail.tail.tail.tail == null) {
                          $target$$497 = 1;
                          _allowMultiple = matchValue$$195[0].tail.head.fields[0];
                          inherited$$1 = matchValue$$195[0].tail.tail.head.fields[0];
                          validOn$$1 = matchValue$$195[0].head.fields[0];
                        } else {
                          $target$$497 = 2;
                        }
                      } else {
                        $target$$497 = 2;
                      }
                    } else {
                      $target$$497 = 2;
                    }
                  } else {
                    $target$$497 = 2;
                  }
                } else {
                  $target$$497 = 0;
                  named = matchValue$$195[1];
                  validOn = matchValue$$195[0].head.fields[0];
                }
              } else {
                $target$$497 = 2;
              }
            } else {
              $target$$497 = 2;
            }
          } else {
            $target$$497 = 2;
          }

          switch ($target$$497) {
            case 0:
              {
                let inherited;
                const matchValue$$196 = (0, _List.tryPick)(function (_arg27$$1) {
                  var $target$$498;

                  if (_arg27$$1[0] === "Inherited") {
                    if (_arg27$$1[3].tag === 1) {
                      $target$$498 = 0;
                    } else {
                      $target$$498 = 1;
                    }
                  } else {
                    $target$$498 = 1;
                  }

                  switch ($target$$498) {
                    case 0:
                      {
                        const res$$29 = _arg27$$1[3].fields[0];
                        return res$$29;
                      }

                    case 1:
                      {
                        return null;
                      }
                  }
                }, named);

                if (matchValue$$196 != null) {
                  const x$$120 = matchValue$$196;
                  inherited = x$$120;
                } else {
                  inherited = inheritedDefault;
                }

                patternInput$$441 = [validOn, inherited];
                break;
              }

            case 1:
              {
                patternInput$$441 = [validOn$$1, inherited$$1];
                break;
              }

            case 2:
              {
                patternInput$$441 = [validOnDefault, inheritedDefault];
                break;
              }
          }
        } else {
          const matchValue$$197 = (0, _TastOps.TryFindFSharpAttribute)(cenv$$167.g, (0, _TcGlobals.TcGlobals$$get_attrib_AttributeUsageAttribute)(cenv$$167.g), (0, _tast.EntityRef$$get_Attribs)(tcref$$36));
          var $target$$499, validOn$$2;

          if (matchValue$$197 != null) {
            if (matchValue$$197.fields[2].tail != null) {
              const activePatternResult48491 = (0, _TastOps.$007CAttribInt32Arg$007C_$007C)(matchValue$$197.fields[2].head);

              if (activePatternResult48491 != null) {
                if (matchValue$$197.fields[2].tail.tail == null) {
                  $target$$499 = 0;
                  validOn$$2 = activePatternResult48491;
                } else {
                  $target$$499 = 1;
                }
              } else {
                $target$$499 = 1;
              }
            } else {
              $target$$499 = 1;
            }
          } else {
            $target$$499 = 1;
          }

          switch ($target$$499) {
            case 0:
              {
                patternInput$$441 = [validOn$$2, inheritedDefault];
                break;
              }

            case 1:
              {
                var $target$$500, _allowMultiple$$1, inherited$$2, validOn$$3;

                if (matchValue$$197 != null) {
                  if (matchValue$$197.fields[2].tail != null) {
                    const activePatternResult48488 = (0, _TastOps.$007CAttribInt32Arg$007C_$007C)(matchValue$$197.fields[2].head);

                    if (activePatternResult48488 != null) {
                      if (matchValue$$197.fields[2].tail.tail != null) {
                        const activePatternResult48489 = (0, _TastOps.$007CAttribBoolArg$007C_$007C)(matchValue$$197.fields[2].tail.head);

                        if (activePatternResult48489 != null) {
                          if (matchValue$$197.fields[2].tail.tail.tail != null) {
                            const activePatternResult48490 = (0, _TastOps.$007CAttribBoolArg$007C_$007C)(matchValue$$197.fields[2].tail.tail.head);

                            if (activePatternResult48490 != null) {
                              if (matchValue$$197.fields[2].tail.tail.tail.tail == null) {
                                $target$$500 = 0;
                                _allowMultiple$$1 = activePatternResult48489;
                                inherited$$2 = activePatternResult48490;
                                validOn$$3 = activePatternResult48488;
                              } else {
                                $target$$500 = 1;
                              }
                            } else {
                              $target$$500 = 1;
                            }
                          } else {
                            $target$$500 = 1;
                          }
                        } else {
                          $target$$500 = 1;
                        }
                      } else {
                        $target$$500 = 1;
                      }
                    } else {
                      $target$$500 = 1;
                    }
                  } else {
                    $target$$500 = 1;
                  }
                } else {
                  $target$$500 = 1;
                }

                switch ($target$$500) {
                  case 0:
                    {
                      patternInput$$441 = [validOn$$3, inherited$$2];
                      break;
                    }

                  case 1:
                    {
                      if (matchValue$$197 != null) {
                        (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnexpectedConditionInImportedAssembly)(), mAttr));
                        patternInput$$441 = [validOnDefault, inheritedDefault];
                      } else {
                        patternInput$$441 = [validOnDefault, inheritedDefault];
                      }

                      break;
                    }
                }

                break;
              }
          }
        }

        const possibleTgts = patternInput$$441[0] & attrTgt$$7 | 0;
        let directedTgts;
        var $target$$501, id$$61;

        if (targetIndicator != null) {
          if (id$$60 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$60) === "assembly") {
            $target$$501 = 0;
            id$$61 = targetIndicator;
          } else {
            $target$$501 = 1;
          }
        } else {
          $target$$501 = 1;
        }

        switch ($target$$501) {
          case 0:
            {
              directedTgts = 1;
              break;
            }

          case 1:
            {
              var $target$$502, id$$63;

              if (targetIndicator != null) {
                if (id$$62 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$62) === "module") {
                  $target$$502 = 0;
                  id$$63 = targetIndicator;
                } else {
                  $target$$502 = 1;
                }
              } else {
                $target$$502 = 1;
              }

              switch ($target$$502) {
                case 0:
                  {
                    directedTgts = 2;
                    break;
                  }

                case 1:
                  {
                    var $target$$503, id$$65;

                    if (targetIndicator != null) {
                      if (id$$64 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$64) === "return") {
                        $target$$503 = 0;
                        id$$65 = targetIndicator;
                      } else {
                        $target$$503 = 1;
                      }
                    } else {
                      $target$$503 = 1;
                    }

                    switch ($target$$503) {
                      case 0:
                        {
                          directedTgts = 8192;
                          break;
                        }

                      case 1:
                        {
                          var $target$$504, id$$67;

                          if (targetIndicator != null) {
                            if (id$$66 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$66) === "field") {
                              $target$$504 = 0;
                              id$$67 = targetIndicator;
                            } else {
                              $target$$504 = 1;
                            }
                          } else {
                            $target$$504 = 1;
                          }

                          switch ($target$$504) {
                            case 0:
                              {
                                directedTgts = 256;
                                break;
                              }

                            case 1:
                              {
                                var $target$$505, id$$69;

                                if (targetIndicator != null) {
                                  if (id$$68 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$68) === "property") {
                                    $target$$505 = 0;
                                    id$$69 = targetIndicator;
                                  } else {
                                    $target$$505 = 1;
                                  }
                                } else {
                                  $target$$505 = 1;
                                }

                                switch ($target$$505) {
                                  case 0:
                                    {
                                      directedTgts = 128;
                                      break;
                                    }

                                  case 1:
                                    {
                                      var $target$$506, id$$71;

                                      if (targetIndicator != null) {
                                        if (id$$70 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$70) === "method") {
                                          $target$$506 = 0;
                                          id$$71 = targetIndicator;
                                        } else {
                                          $target$$506 = 1;
                                        }
                                      } else {
                                        $target$$506 = 1;
                                      }

                                      switch ($target$$506) {
                                        case 0:
                                          {
                                            directedTgts = 64;
                                            break;
                                          }

                                        case 1:
                                          {
                                            var $target$$507, id$$73;

                                            if (targetIndicator != null) {
                                              if (id$$72 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$72) === "param") {
                                                $target$$507 = 0;
                                                id$$73 = targetIndicator;
                                              } else {
                                                $target$$507 = 1;
                                              }
                                            } else {
                                              $target$$507 = 1;
                                            }

                                            switch ($target$$507) {
                                              case 0:
                                                {
                                                  directedTgts = 2048;
                                                  break;
                                                }

                                              case 1:
                                                {
                                                  var $target$$508, id$$75;

                                                  if (targetIndicator != null) {
                                                    if (id$$74 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$74) === "type") {
                                                      $target$$508 = 0;
                                                      id$$75 = targetIndicator;
                                                    } else {
                                                      $target$$508 = 1;
                                                    }
                                                  } else {
                                                    $target$$508 = 1;
                                                  }

                                                  switch ($target$$508) {
                                                    case 0:
                                                      {
                                                        directedTgts = AttributeTargets$$$TyconDecl;
                                                        break;
                                                      }

                                                    case 1:
                                                      {
                                                        var $target$$509, id$$77;

                                                        if (targetIndicator != null) {
                                                          if (id$$76 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$76) === "constructor") {
                                                            $target$$509 = 0;
                                                            id$$77 = targetIndicator;
                                                          } else {
                                                            $target$$509 = 1;
                                                          }
                                                        } else {
                                                          $target$$509 = 1;
                                                        }

                                                        switch ($target$$509) {
                                                          case 0:
                                                            {
                                                              directedTgts = 32;
                                                              break;
                                                            }

                                                          case 1:
                                                            {
                                                              var $target$$510, id$$79;

                                                              if (targetIndicator != null) {
                                                                if (id$$78 = targetIndicator, (0, _ast.Ident$$get_idText)(id$$78) === "event") {
                                                                  $target$$510 = 0;
                                                                  id$$79 = targetIndicator;
                                                                } else {
                                                                  $target$$510 = 1;
                                                                }
                                                              } else {
                                                                $target$$510 = 1;
                                                              }

                                                              switch ($target$$510) {
                                                                case 0:
                                                                  {
                                                                    directedTgts = 512;
                                                                    break;
                                                                  }

                                                                case 1:
                                                                  {
                                                                    if (targetIndicator != null) {
                                                                      const id$$80 = targetIndicator;
                                                                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnrecognizedAttributeTarget)(), (0, _ast.Ident$$get_idRange)(id$$80)));
                                                                      directedTgts = possibleTgts;
                                                                    } else {
                                                                      directedTgts = possibleTgts;
                                                                    }

                                                                    break;
                                                                  }
                                                              }

                                                              break;
                                                            }
                                                        }

                                                        break;
                                                      }
                                                  }

                                                  break;
                                                }
                                            }

                                            break;
                                          }
                                      }

                                      break;
                                    }
                                }

                                break;
                              }
                          }

                          break;
                        }
                    }

                    break;
                  }
              }

              break;
            }
        }

        const constrainedTgts = possibleTgts & directedTgts | 0;

        if (constrainedTgts === 0) {
          if (directedTgts === 1 ? true : directedTgts === 2) {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributeIsNotValidForLanguageElementUseDo)(), mAttr));
          } else {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributeIsNotValidForLanguageElement)(), mAttr));
          }
        }

        const matchValue$$198 = (0, _NameResolution.ResolveObjectConstructor)(cenv$$167.nameResolver, TcEnv$$get_DisplayEnv(env$$239), mAttr, ad$$33, patternInput$$440[0]);
        var $target$$511;

        if (matchValue$$198.tag === 1) {
          if (canFail) {
            $target$$511 = 0;
          } else {
            $target$$511 = 1;
          }
        } else {
          $target$$511 = 1;
        }

        switch ($target$$511) {
          case 0:
            {
              return [(0, _Types.L)(), true];
            }

          case 1:
            {
              const res$$30 = matchValue$$198;
              const item$$50 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)(res$$30);
              let attrib;

              if (item$$50.tag === 11) {
                const minfos$$5 = item$$50.fields[1];
                const methodName$$7 = item$$50.fields[0];
                const meths$$12 = (0, _List.map)(function mapping$$106(minfo$$22) {
                  return [minfo$$22, null];
                }, minfos$$5);
                const afterResolution$$8 = ForNewConstructors(cenv$$167.tcSink, env$$239, (0, _ast.Ident$$get_idRange)(patternInput$$439[1]), methodName$$7, minfos$$5);
                const patternInput$$442 = TcMethodApplication(true, cenv$$167, env$$239, patternInput$$440[1], null, (0, _Types.L)(), mAttr, mAttr, methodName$$7, null, ad$$33, new _TastOps.Mutates(2, "PossiblyMutates"), false, meths$$12, afterResolution$$8, new _tast.ValUseFlag(1, "NormalValUse"), (0, _Types.L)(arg$$43, (0, _Types.L)()), (0, _ConstraintSolver.NewInferenceType)(), (0, _Types.L)());
                const expr$$111 = patternInput$$442[0][0];
                const attributeAssignedNamedItems$$1 = patternInput$$442[0][1];
                UnifyTypes(cenv$$167, env$$239, mAttr, patternInput$$440[0], (0, _TastOps.tyOfExpr)(cenv$$167.g, expr$$111));

                const mkAttribExpr = function mkAttribExpr(e$$101) {
                  return new _tast.AttribExpr(0, "AttribExpr", e$$101, (0, _TastOps.EvalLiteralExprOrAttribArg)(cenv$$167.g, e$$101));
                };

                const namedAttribArgMap = (0, _List.map)(function mapping$$107(_arg72) {
                  var rfinfo$$5;
                  const m$$329 = _arg72.fields[1].fields[1];
                  const isOpt$$10 = _arg72.fields[1].fields[2];
                  const id$$81 = _arg72.fields[0];
                  const callerArgExpr$$2 = _arg72.fields[1].fields[3];
                  const argtyv = _arg72.fields[1].fields[0];

                  if (isOpt$$10) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOptionalArgumentsCannotBeUsedInCustomAttribute)(), m$$329));
                  }

                  const m$$330 = (0, _TastOps.Expr$002Eget_Range)(callerArgExpr$$2);
                  const patternInput$$443 = (0, _NameResolution.ResolveLongIdentInType)(cenv$$167.tcSink, cenv$$167.nameResolver, TcEnv$$get_NameEnv(env$$239), new _NameResolution.LookupKind(2, "Expr"), m$$330, ad$$33, id$$81, new _InfoReader.FindMemberFlag(0, "IgnoreOverrides"), (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), patternInput$$440[0]);
                  let patternInput$$444;
                  var $target$$512, pinfo$$6, finfo$$7, rfinfo$$6;

                  if (patternInput$$443[0].tag === 9) {
                    if (patternInput$$443[0].fields[1].tail != null) {
                      if (patternInput$$443[0].fields[1].tail.tail == null) {
                        $target$$512 = 0;
                        pinfo$$6 = patternInput$$443[0].fields[1].head;
                      } else {
                        $target$$512 = 3;
                      }
                    } else {
                      $target$$512 = 3;
                    }
                  } else if (patternInput$$443[0].tag === 7) {
                    $target$$512 = 1;
                    finfo$$7 = patternInput$$443[0].fields[0];
                  } else if (patternInput$$443[0].tag === 5) {
                    if (rfinfo$$5 = patternInput$$443[0].fields[0], !(0, _infos.RecdFieldInfo$$get_IsStatic)(rfinfo$$5)) {
                      $target$$512 = 2;
                      rfinfo$$6 = patternInput$$443[0].fields[0];
                    } else {
                      $target$$512 = 3;
                    }
                  } else {
                    $target$$512 = 3;
                  }

                  switch ($target$$512) {
                    case 0:
                      {
                        if (!(0, _infos.PropInfo$$get_HasSetter)(pinfo$$6)) {
                          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyCannotBeSet0)(), m$$330));
                        }

                        patternInput$$444 = [(0, _ast.Ident$$get_idText)(id$$81), true, (0, _infos.PropInfo$$GetPropertyType$$73F6E43C)(pinfo$$6, cenv$$167.amap, m$$330)];
                        break;
                      }

                    case 1:
                      {
                        (0, _AccessibilityLogic.CheckILFieldInfoAccessible)(cenv$$167.g, cenv$$167.amap, m$$330, ad$$33, finfo$$7);
                        (0, _AttributeChecking.CheckILFieldAttributes)(cenv$$167.g, finfo$$7, m$$330);
                        patternInput$$444 = [(0, _ast.Ident$$get_idText)(id$$81), false, (0, _infos.ILFieldInfo$$FieldType$$73F6E43C)(finfo$$7, cenv$$167.amap, m$$330)];
                        break;
                      }

                    case 2:
                      {
                        (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckRecdFieldInfoAttributes)(cenv$$167.g, rfinfo$$6, m$$330));
                        (0, _AccessibilityLogic.CheckRecdFieldInfoAccessible)(cenv$$167.amap, m$$330, ad$$33, rfinfo$$6);
                        const nm$$64 = (0, _TastOps.ComputeFieldName)((0, _infos.RecdFieldInfo$$get_Tycon)(rfinfo$$6), (0, _infos.RecdFieldInfo$$get_RecdField)(rfinfo$$6));
                        patternInput$$444 = [nm$$64, false, (0, _infos.RecdFieldInfo$$get_FieldType)(rfinfo$$6)];
                        break;
                      }

                    case 3:
                      {
                        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcPropertyOrFieldNotFoundInAttribute)(), m$$330));
                        patternInput$$444 = [(0, _ast.Ident$$get_idText)(id$$81), false, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$167.g)];
                        break;
                      }
                  }

                  const propNameItem = new _NameResolution.Item(21, "SetterArg", id$$81, patternInput$$443[0]);
                  (0, _NameResolution.CallNameResolutionSink)(cenv$$167.tcSink, (0, _ast.Ident$$get_idRange)(id$$81), TcEnv$$get_NameEnv(env$$239), propNameItem, propNameItem, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(1, "Use"), TcEnv$$get_DisplayEnv(env$$239), ad$$33);
                  (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), TcEnv$$get_DisplayEnv(env$$239), cenv$$167.css, m$$330, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), patternInput$$444[2], argtyv);
                  return new _tast.AttribNamedArg(0, "AttribNamedArg", [patternInput$$444[0], patternInput$$444[2], patternInput$$444[1], mkAttribExpr(callerArgExpr$$2)]);
                }, attributeAssignedNamedItems$$1);

                var $target$$513, _rtys, args$$84, ilMethRef, m$$331, valu$$6, args$$86, vref$$14;

                if (expr$$111.tag === 11) {
                  if (expr$$111.fields[0].tag === 31) {
                    if (expr$$111.fields[0].fields[8].tail == null) {
                      if (expr$$111.fields[0].fields[9].tail == null) {
                        if (expr$$111.fields[1].tail == null) {
                          $target$$513 = 0;
                          _rtys = expr$$111.fields[0].fields[10];
                          args$$84 = expr$$111.fields[2];
                          ilMethRef = expr$$111.fields[0].fields[7];
                          m$$331 = expr$$111.fields[3];
                          valu$$6 = expr$$111.fields[0].fields[2];
                        } else {
                          $target$$513 = 2;
                        }
                      } else {
                        $target$$513 = 2;
                      }
                    } else {
                      $target$$513 = 2;
                    }
                  } else {
                    $target$$513 = 2;
                  }
                } else if (expr$$111.tag === 5) {
                  const activePatternResult48498 = (0, _TastOps.$007CExprValWithPossibleTypeInst$007C_$007C)((0, _TastOps.$007CInnerExprPat$007C)(expr$$111.fields[0]));

                  if (activePatternResult48498 != null) {
                    $target$$513 = 1;
                    args$$86 = expr$$111.fields[3];
                    vref$$14 = activePatternResult48498[0];
                  } else {
                    $target$$513 = 2;
                  }
                } else {
                  $target$$513 = 2;
                }

                switch ($target$$513) {
                  case 0:
                    {
                      if (valu$$6) {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomAttributeMustBeReferenceType)(), m$$331));
                      }

                      if ((0, _List.length)(args$$84) !== (0, _List.length)((0, _il.ILMethodRef$$get_ArgTypes)(ilMethRef))) {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomAttributeArgumentMismatch)(), m$$331));
                      }

                      const args$$85 = (0, _List.map)(mkAttribExpr, args$$84);
                      attrib = new _tast.Attrib(0, "Attrib", tcref$$36, new _tast.AttribKind(0, "ILAttrib", ilMethRef), args$$85, namedAttribArgMap, isAppliedToGetterOrSetter, constrainedTgts, m$$331);
                      break;
                    }

                  case 1:
                    {
                      const args$$87 = (0, _List.map)(mkAttribExpr, (0, _List.collect)(function mapping$$108(_arg28$$1) {
                        var $target$$514, expr$$112;

                        if (_arg28$$1.tag === 0) {
                          if (_arg28$$1.fields[0].tag === 16) {
                            $target$$514 = 0;
                          } else {
                            $target$$514 = 1;
                            expr$$112 = _arg28$$1;
                          }
                        } else {
                          $target$$514 = 1;
                          expr$$112 = _arg28$$1;
                        }

                        switch ($target$$514) {
                          case 0:
                            {
                              return (0, _Types.L)();
                            }

                          case 1:
                            {
                              return (0, _TastOps.tryDestRefTupleExpr)(expr$$112);
                            }
                        }
                      }, args$$86));
                      attrib = new _tast.Attrib(0, "Attrib", tcref$$36, new _tast.AttribKind(1, "FSAttrib", vref$$14), args$$87, namedAttribArgMap, isAppliedToGetterOrSetter, constrainedTgts, mAttr);
                      break;
                    }

                  case 2:
                    {
                      attrib = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCustomAttributeMustInvokeConstructor)(), mAttr));
                      break;
                    }
                }
              } else {
                attrib = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributeExpressionsMustBeConstructorCalls)(), mAttr));
              }

              return [(0, _Types.L)([constrainedTgts, attrib], (0, _Types.L)()), false];
            }
        }
      }
  }
}

function TcAttributesWithPossibleTargets(canFail$$1, cenv$$168, env$$240, attrTgt$$8, synAttribs$$4) {
  return (0, _illib.List$$$collectFold)(function f$$53(didFail, synAttrib) {
    try {
      const patternInput$$445 = TcAttribute(canFail$$1, cenv$$168, env$$240, attrTgt$$8, synAttrib);
      const attribs$$1 = (0, _List.map)(function (tuple$$27) {
        return tuple$$27[1];
      }, patternInput$$445[0]);

      if (((0, _TastOps.HasFSharpAttribute)(cenv$$168.g, (0, _TcGlobals.TcGlobals$$get_attrib_TypeForwardedToAttribute)(cenv$$168.g), attribs$$1) ? true : (0, _TastOps.HasFSharpAttribute)(cenv$$168.g, (0, _TcGlobals.TcGlobals$$get_attrib_CompilationArgumentCountsAttribute)(cenv$$168.g), attribs$$1)) ? true : (0, _TastOps.HasFSharpAttribute)(cenv$$168.g, (0, _TcGlobals.TcGlobals$$get_attrib_CompilationMappingAttribute)(cenv$$168.g), attribs$$1)) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnsupportedAttribute)(), synAttrib.Range));
      }

      return [patternInput$$445[0], didFail ? true : patternInput$$445[1]];
    } catch (e$$102) {
      (0, _ErrorLogger.errorRecovery)(e$$102, synAttrib.Range);
      return [(0, _Types.L)(), false];
    }
  }, false, synAttribs$$4);
}

function TcAttributesMaybeFail(canFail$$2, cenv$$169, env$$241, attrTgt$$9, synAttribs$$5) {
  const patternInput$$446 = TcAttributesWithPossibleTargets(canFail$$2, cenv$$169, env$$241, attrTgt$$9, synAttribs$$5);
  return [(0, _List.map)(function mapping$$109(tuple$$28) {
    return tuple$$28[1];
  }, patternInput$$446[0]), patternInput$$446[1]];
}

function TcAttributesCanFail(cenv$$170, env$$242, attrTgt$$10, synAttribs$$6) {
  const patternInput$$447 = TcAttributesMaybeFail(true, cenv$$170, env$$242, attrTgt$$10, synAttribs$$6);
  return [patternInput$$447[0], function () {
    return patternInput$$447[1] ? TcAttributes(cenv$$170, env$$242, attrTgt$$10, synAttribs$$6) : patternInput$$447[0];
  }];
}

function TcAttributes(cenv$$171, env$$243, attrTgt$$11, synAttribs$$7) {
  return TcAttributesMaybeFail(false, cenv$$171, env$$243, attrTgt$$11, synAttribs$$7)[0];
}

function TcLetBinding(cenv$$172, isUse$$2, env$$244, containerInfo$$1, declKind$$14, tpenv$$329, binds$$15, bindsm$$1, scopem$$11) {
  const patternInput$$448 = (0, _List.mapFold)(function (tpenv$$330, b$$55) {
    return TcNonRecursiveBinding(declKind$$14, cenv$$172, env$$244, tpenv$$330, (0, _ConstraintSolver.NewInferenceType)(), b$$55);
  }, tpenv$$329, binds$$15);
  const altActualParent$$3 = containerInfo$$1.fields[0];
  const denv$$25 = TcEnv$$get_DisplayEnv(env$$244);
  GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$172, denv$$25, bindsm$$1, (0, _List.collect)(function mapping$$110(tbinfo) {
    const tauTy$$2 = tbinfo.fields[8];
    const flex$$12 = tbinfo.fields[4];
    const declaredTypars$$15 = flex$$12.fields[1];
    const maxInferredTypars$$1 = (0, _TastOps.freeInTypeLeftToRight)(cenv$$172.g, false, tauTy$$2);
    return (0, _List.append)(declaredTypars$$15, maxInferredTypars$$1);
  }, patternInput$$448[0]));
  const lazyFreeInEnv = new _Util.Lazy(function () {
    return GeneralizationHelpers$$$ComputeUngeneralizableTypars(env$$244);
  });
  return (0, _List.fold)(function folder$$11(tupledArg$$81, tbinfo$$1) {
    var v$$55, pat1$$4, generalizedTypars$0027;
    const tcPatPhase2$$1 = tbinfo$$1.fields[3];
    const tauTy$$3 = tbinfo$$1.fields[8];
    const spBind$$15 = tbinfo$$1.fields[10];
    const rhsExpr$$29 = tbinfo$$1.fields[6];
    const nameToPrelimValSchemeMap$$2 = tbinfo$$1.fields[5];
    const m$$332 = tbinfo$$1.fields[9];
    const konst$$3 = tbinfo$$1.fields[12];
    const isFixed$$1 = tbinfo$$1.fields[13];
    const inlineFlag$$14 = tbinfo$$1.fields[0];
    const flex$$13 = tbinfo$$1.fields[4];
    const doc$$5 = tbinfo$$1.fields[2];
    const attrs$$14 = tbinfo$$1.fields[1];
    const enclosingDeclaredTypars$$7 = (0, _Types.L)();
    const declaredTypars$$16 = flex$$13.fields[1];
    const canInferTypars$$4 = flex$$13.fields[2];
    const allDeclaredTypars$$5 = (0, _List.append)(enclosingDeclaredTypars$$7, declaredTypars$$16);
    let patternInput$$449;
    const canInferTypars$$5 = GeneralizationHelpers$$$ComputeCanInferExtraGeneralizableTypars(ContainerInfo$$get_ParentRef(containerInfo$$1), canInferTypars$$4, null);
    const maxInferredTypars$$2 = (0, _TastOps.freeInTypeLeftToRight)(cenv$$172.g, false, tauTy$$3);
    let generalizedTypars$$24;

    if (maxInferredTypars$$2.tail == null ? allDeclaredTypars$$5.tail == null : false) {
      generalizedTypars$$24 = (0, _Types.L)();
    } else {
      const freeInEnv$$5 = lazyFreeInEnv.Value;
      generalizedTypars$$24 = GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars(cenv$$172, denv$$25, m$$332, freeInEnv$$5, canInferTypars$$5, GeneralizationHelpers$$$CanGeneralizeConstrainedTyparsForDecl(declKind$$14), inlineFlag$$14, rhsExpr$$29, allDeclaredTypars$$5, maxInferredTypars$$2, tauTy$$3, false);
    }

    const prelimValSchemes2 = GeneralizeVals(cenv$$172, denv$$25, enclosingDeclaredTypars$$7, generalizedTypars$$24, nameToPrelimValSchemeMap$$2);
    patternInput$$449 = [generalizedTypars$$24, prelimValSchemes2];
    const tpenv$$333 = HideUnscopedTypars(patternInput$$449[0], tupledArg$$81[2]);
    const valSchemes$$2 = (0, _illib.NameMapModule$$$map)(function (prelimScheme$$5) {
      return UseCombinedArity(cenv$$172.g, declKind$$14, rhsExpr$$29, prelimScheme$$5);
    }, patternInput$$449[1]);
    const values$$16 = MakeAndPublishVals(cenv$$172, tupledArg$$81[1], altActualParent$$3, false, declKind$$14, new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), valSchemes$$2, attrs$$14, doc$$5, konst$$3);
    const pat$0027$$9 = tcPatPhase2$$1(new TcPatPhase2Input(0, "TcPatPhase2Input", values$$16, true));
    const prelimRecValues = (0, _illib.NameMapModule$$$map)(function (tuple$$30) {
      return tuple$$30[0];
    }, values$$16);
    const rhsExpr$$30 = (0, _TastOps.mkTypeLambda)(m$$332, patternInput$$449[0], rhsExpr$$29, tauTy$$3);
    var $target$$515;

    if (pat$0027$$9.tag === 1) {
      if ((!isUse$$2 ? !isFixed$$1 : false) ? patternInput$$449[0].tail == null : false) {
        $target$$515 = 0;
      } else {
        $target$$515 = 1;
      }
    } else if (pat$0027$$9.tag === 0) {
      if (pat$0027$$9.fields[0].tag === 16) {
        if ((!isUse$$2 ? !isFixed$$1 : false) ? patternInput$$449[0].tail == null : false) {
          $target$$515 = 0;
        } else {
          $target$$515 = 1;
        }
      } else {
        $target$$515 = 1;
      }
    } else {
      $target$$515 = 1;
    }

    switch ($target$$515) {
      case 0:
        {
          const mk_seq_bind = function mk_seq_bind(tupledArg$$82) {
            return [(0, _TastOps.mkSequential)(new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq"), m$$332, rhsExpr$$30, tupledArg$$82[0]), tupledArg$$82[1]];
          };

          return [function ($arg$$79) {
            return mk_seq_bind(tupledArg$$81[0]($arg$$79));
          }, tupledArg$$81[1], tpenv$$333];
        }

      case 1:
        {
          let patternInput$$451;
          var $target$$516, generalizedTypars$0027$$1, pat1$$5, v$$56;

          if (pat$0027$$9.tag === 2) {
            if (v$$55 = pat$0027$$9.fields[1].fields[0], (pat1$$4 = pat$0027$$9.fields[0], (generalizedTypars$0027 = pat$0027$$9.fields[1].fields[1].fields[0], (0, _illib.List$$$lengthsEqAndForall2)(_tast.typarRefEq, patternInput$$449[0], generalizedTypars$0027)))) {
              $target$$516 = 0;
              generalizedTypars$0027$$1 = pat$0027$$9.fields[1].fields[1].fields[0];
              pat1$$5 = pat$0027$$9.fields[0];
              v$$56 = pat$0027$$9.fields[1].fields[0];
            } else {
              $target$$516 = 1;
            }
          } else {
            $target$$516 = 1;
          }

          switch ($target$$516) {
            case 0:
              {
                patternInput$$451 = [v$$56, pat1$$5];
                break;
              }

            case 1:
              {
                if ((0, _tast.ValInline$$get_MustInline)(inlineFlag$$14)) {
                  patternInput$$451 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidInlineSpecification)(), m$$332));
                } else {
                  const patternInput$$450 = (0, _TastOps.mkCompGenLocal)(m$$332, "patternInput", (0, _TastOps.op_PlusMinusGreater)(patternInput$$449[0], tauTy$$3));

                  if (isUse$$2 ? true : isFixed$$1) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseBinding)(), m$$332));
                  }

                  if (DeclKind$$$MustHaveArity$$Z6CE1C8BD(declKind$$14)) {
                    (0, _TastOps.AdjustValToTopVal)(patternInput$$450[0], altActualParent$$3, (0, _TastOps.InferArityOfExprBinding)(cenv$$172.g, new _TastOps.AllowTypeDirectedDetupling(0, "Yes"), patternInput$$450[0], rhsExpr$$30));
                  }

                  patternInput$$451 = [patternInput$$450[0], pat$0027$$9];
                }

                break;
              }
          }

          const mkRhsBind = function mkRhsBind(tupledArg$$83) {
            const letExpr = (0, _TastOps.mkLet)(spBind$$15, m$$332, patternInput$$451[0], rhsExpr$$30, tupledArg$$83[0]);
            return [letExpr, tupledArg$$83[1]];
          };

          const allValsDefinedByPattern = (0, _illib.NameMapModule$$$range)(prelimRecValues);

          const mkPatBind = function mkPatBind(tupledArg$$84) {
            const valsDefinedByMatching$$1 = (0, _lib.ListSet$$$remove)(_tast.valEq, patternInput$$451[0], allValsDefinedByPattern);
            const matchx = CompilePatternForMatch(cenv$$172, tupledArg$$81[1], m$$332, m$$332, true, new _PatternMatchCompilation.ActionOnFailure(0, "ThrowIncompleteMatchException"), patternInput$$451[0], patternInput$$449[0], (0, _Types.L)(new _PatternMatchCompilation.TypedMatchClause(0, "TClause", patternInput$$451[1], null, new _tast.DecisionTreeTarget(0, "TTarget", valsDefinedByMatching$$1, tupledArg$$84[0], new _ast.SequencePointInfoForTarget(1, "SuppressSequencePointAtTarget")), m$$332), (0, _Types.L)()), tauTy$$3, tupledArg$$84[1]);
            const matchx$$1 = DeclKind$$$ConvertToLinearBindings$$Z6CE1C8BD(declKind$$14) ? (0, _TastOps.LinearizeTopMatch)(cenv$$172.g, altActualParent$$3, matchx) : matchx;
            return [matchx$$1, tupledArg$$84[1]];
          };

          const mkCleanup = function mkCleanup(tupledArg$$85) {
            if (isUse$$2 ? !isFixed$$1 : false) {
              return (0, _List.foldBack)(function folder$$10(v$$57, tupledArg$$86) {
                (0, _ConstraintSolver.AddCxTypeMustSubsumeType)(new _ConstraintSolver.ContextInfo(0, "NoContext"), denv$$25, cenv$$172.css, (0, _tast.Val$$get_Range)(v$$57), new _ConstraintSolver.OptionalTrace(0, "NoTrace"), (0, _TcGlobals.TcGlobals$$get_system_IDisposable_ty)(cenv$$172.g), (0, _tast.Val$$get_Type)(v$$57));
                const cleanupE$$1 = BuildDisposableCleanup(cenv$$172, tupledArg$$81[1], m$$332, v$$57);
                return [(0, _TastOps.mkTryFinally)(cenv$$172.g, tupledArg$$86[0], cleanupE$$1, m$$332, tupledArg$$86[1], new _ast.SequencePointInfoForTry(1, "SequencePointInBodyOfTry"), new _ast.SequencePointInfoForFinally(1, "NoSequencePointAtFinally")), tupledArg$$86[1]];
              }, allValsDefinedByPattern, [tupledArg$$85[0], tupledArg$$85[1]]);
            } else {
              return [tupledArg$$85[0], tupledArg$$85[1]];
            }
          };

          return [function ($arg$$82) {
            return mkRhsBind(mkPatBind(mkCleanup(tupledArg$$81[0]($arg$$82))));
          }, AddLocalValMap(cenv$$172.tcSink, scopem$$11, prelimRecValues, tupledArg$$81[1]), tpenv$$333];
        }
    }
  }, [function (x$$121) {
    return x$$121;
  }, env$$244, patternInput$$448[1]], patternInput$$448[0]);
}

function TcLetBindings(cenv$$173, env$$246, containerInfo$$2, declKind$$15, tpenv$$334, binds$$16, bindsm$$2, scopem$$12) {
  const patternInput$$452 = TcLetBinding(cenv$$173, false, env$$246, containerInfo$$2, declKind$$15, tpenv$$334, binds$$16, bindsm$$2, scopem$$12);
  const unite = (0, _TastOps.mkUnit)(cenv$$173.g, bindsm$$2);
  const patternInput$$453 = patternInput$$452[0]([unite, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$173.g)]);

  const stripLets = function stripLets(acc$$18, _arg29$$1) {
    stripLets: while (true) {
      var $target$$517, bind$$11, body$$17, m$$333, e1$$40, e2$$36, m$$334;

      if (_arg29$$1.tag === 7) {
        $target$$517 = 0;
        bind$$11 = _arg29$$1.fields[0];
        body$$17 = _arg29$$1.fields[1];
        m$$333 = _arg29$$1.fields[2];
      } else if (_arg29$$1.tag === 2) {
        if (_arg29$$1.fields[2].tag === 0) {
          $target$$517 = 1;
          e1$$40 = _arg29$$1.fields[0];
          e2$$36 = _arg29$$1.fields[1];
          m$$334 = _arg29$$1.fields[4];
        } else {
          $target$$517 = 3;
        }
      } else if (_arg29$$1.tag === 0) {
        if (_arg29$$1.fields[0].tag === 16) {
          $target$$517 = 2;
        } else {
          $target$$517 = 3;
        }
      } else {
        $target$$517 = 3;
      }

      switch ($target$$517) {
        case 0:
          {
            acc$$18 = (0, _Types.L)(new _tast.ModuleOrNamespaceExpr(2, "TMDefLet", bind$$11, m$$333), acc$$18);
            _arg29$$1 = body$$17;
            continue stripLets;
          }

        case 1:
          {
            acc$$18 = (0, _Types.L)(new _tast.ModuleOrNamespaceExpr(3, "TMDefDo", e1$$40, m$$334), acc$$18);
            _arg29$$1 = e2$$36;
            continue stripLets;
          }

        case 2:
          {
            return (0, _List.reverse)(acc$$18);
          }

        case 3:
          {
            throw new Error("TcLetBindings: let sequence is non linear. Maybe a LHS pattern was not linearised?");
          }
      }
    }
  };

  const binds$$17 = stripLets((0, _Types.L)(), patternInput$$453[0]);
  return [binds$$17, patternInput$$452[1], patternInput$$452[2]];
}

function CheckMemberFlags(optIntfSlotTy, newslotsOK, overridesOK, memberFlags$$28, m$$335) {
  if ((0, _Util.equals)(newslotsOK, new NewSlotsOK(1, "NoNewSlots")) ? memberFlags$$28.IsDispatchSlot : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAbstractMembersIllegalInAugmentation)(), m$$335));
  }

  if ((0, _Util.equals)(overridesOK, new OverridesOK(2, "ErrorOnOverrides")) ? (0, _Util.equals)(memberFlags$$28.MemberKind, new _ast.MemberKind(1, "Constructor")) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorsIllegalInAugmentation)(), m$$335));
  }

  if (((0, _Util.equals)(overridesOK, new OverridesOK(1, "WarnOnOverrides")) ? memberFlags$$28.IsOverrideOrExplicitImpl : false) ? optIntfSlotTy == null : false) {
    (0, _ErrorLogger.warning)(new OverrideInIntrinsicAugmentation(m$$335));
  }

  if ((0, _Util.equals)(overridesOK, new OverridesOK(2, "ErrorOnOverrides")) ? memberFlags$$28.IsOverrideOrExplicitImpl : false) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMethodOverridesIllegalHere)(), m$$335));
  }
}

function ApplyTypesFromArgumentPatterns(cenv$$174, env$$248, optArgsOK$$3, ty$$119, m$$336, tpenv$$336, _arg11$$2, memberFlagsOpt$$10) {
  var memFlags;
  const retInfoOpt = _arg11$$2.fields[1];
  const pushedPats$$1 = _arg11$$2.fields[0];
  const e$$103 = _arg11$$2.fields[2];

  if (pushedPats$$1.tail != null) {
    const pushedPat = pushedPats$$1.head;
    const morePushedPats = pushedPats$$1.tail;
    const patternInput$$455 = UnifyFunctionType(null, cenv$$174, TcEnv$$get_DisplayEnv(env$$248), m$$336, ty$$119);
    TcSimplePats(cenv$$174, optArgsOK$$3, new CheckConstraints(0, "CheckCxs"), patternInput$$455[0], env$$248, tpenv$$336, (0, _Map.empty)({
      Compare: _Util.comparePrimitives
    }), (0, _Set.empty)({
      Compare: _Util.comparePrimitives
    }), pushedPat);
    ApplyTypesFromArgumentPatterns(cenv$$174, env$$248, optArgsOK$$3, patternInput$$455[1], m$$336, tpenv$$336, new NormalizedBindingRhs(0, "NormalizedBindingRhs", morePushedPats, retInfoOpt, e$$103), memberFlagsOpt$$10);
  } else {
    if (retInfoOpt != null) {
      const retInfoTy = retInfoOpt.fields[0];
      const m$$337 = retInfoOpt.fields[1];
      const patternInput$$454 = TcTypeAndRecover(cenv$$174, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$248, tpenv$$336, retInfoTy);
      UnifyTypes(cenv$$174, env$$248, m$$337, ty$$119, patternInput$$454[0]);
    }

    var $target$$518, memFlags$$1;

    if (memberFlagsOpt$$10 != null) {
      if (memFlags = memberFlagsOpt$$10, (0, _Util.equals)(memFlags.MemberKind, new _ast.MemberKind(4, "PropertySet"))) {
        $target$$518 = 0;
        memFlags$$1 = memberFlagsOpt$$10;
      } else {
        $target$$518 = 1;
      }
    } else {
      $target$$518 = 1;
    }

    switch ($target$$518) {
      case 0:
        {
          UnifyTypes(cenv$$174, env$$248, m$$336, ty$$119, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$174.g));
          break;
        }
    }
  }
}

function ComputeIsComplete(enclosingDeclaredTypars$$8, declaredTypars$$17, ty$$120) {
  return (0, _zset.ZsetModule$$$isEmpty)((0, _List.fold)(function (acc$$19, v$$58) {
    return (0, _zset.ZsetModule$$$remove)(v$$58, acc$$19);
  }, (0, _TastOps.freeInType)(_TastOps.CollectAllNoCaching, ty$$120).FreeTypars, (0, _List.append)(enclosingDeclaredTypars$$8, declaredTypars$$17)));
}

function ApplyAbstractSlotInference(cenv$$175, envinner$$27, bindingTy$$2, m$$338, synTyparDecls$$4, declaredTypars$$18, memberId$$6, tcrefObjTy$$1, renaming$$4, _objTy, optIntfSlotTy$$1, valSynData$$21, memberFlags$$29, attribs$$2) {
  var meths$$14;
  const ad$$34 = envinner$$27.eAccessRights;
  let typToSearchForAbstractMembers;

  if (optIntfSlotTy$$1 == null) {
    typToSearchForAbstractMembers = [tcrefObjTy$$1, null];
  } else {
    const ty$$121 = optIntfSlotTy$$1[0];
    const abstractSlots = optIntfSlotTy$$1[1];
    typToSearchForAbstractMembers = [ty$$121, abstractSlots];
  }

  if (memberFlags$$29.IsOverrideOrExplicitImpl) {
    const methInfosEquivByNameAndSig = function methInfosEquivByNameAndSig(meths$$13) {
      if (meths$$13.tail != null) {
        const tail = meths$$13.tail;
        const head = meths$$13.head;
        return (0, _List.forAll)(function predicate$$52(minfo2) {
          return (0, _infos.MethInfosEquivByNameAndSig)(new _TastOps.Erasure(2, "EraseNone"), false, cenv$$175.g, cenv$$175.amap, m$$338, head, minfo2);
        }, tail);
      } else {
        return false;
      }
    };

    var $target$$519, k$$2;

    if (memberFlags$$29.MemberKind.tag === 2) {
      $target$$519 = 0;
    } else if (memberFlags$$29.MemberKind.tag === 3) {
      $target$$519 = 1;
      k$$2 = memberFlags$$29.MemberKind;
    } else if (memberFlags$$29.MemberKind.tag === 4) {
      $target$$519 = 1;
      k$$2 = memberFlags$$29.MemberKind;
    } else {
      $target$$519 = 2;
    }

    switch ($target$$519) {
      case 0:
        {
          const patternInput$$456 = (0, _MethodOverrides.GetAbstractMethInfosForSynMethodDecl)(cenv$$175.infoReader, ad$$34, memberId$$6, m$$338, typToSearchForAbstractMembers, valSynData$$21);
          let uniqueAbstractMethSigs;

          if (patternInput$$456[0].tail == null) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoMemberFoundForOverride)(), (0, _ast.Ident$$get_idRange)(memberId$$6)));
            uniqueAbstractMethSigs = (0, _Types.L)();
          } else {
            const slots = patternInput$$456[0];

            if (meths$$14 = patternInput$$456[1], methInfosEquivByNameAndSig(meths$$14)) {
              const meths$$15 = patternInput$$456[1];
              uniqueAbstractMethSigs = meths$$15;
            } else if (patternInput$$456[1].tail == null) {
              const details = (0, _String.join)("", ...(0, _Seq.map)(function (arg20$$2) {
                return (0, _String.toText)((0, _String.printf)("%s   %s"))("\n")(arg20$$2);
              }, (0, _Seq.map)(function mapping$$111(d$$16) {
                return (0, _NicePrint.stringOfMethInfo)(cenv$$175.amap, m$$338, TcEnv$$get_DisplayEnv(envinner$$27), d$$16);
              }, slots)));
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOverrideArityMismatch$$Z721C83C5)(details), (0, _ast.Ident$$get_idRange)(memberId$$6)));
              uniqueAbstractMethSigs = (0, _Types.L)();
            } else {
              uniqueAbstractMethSigs = (0, _Types.L)();
            }
          }

          let declaredTypars$$20;

          if (uniqueAbstractMethSigs.tail != null) {
            const uniqueAbstractMeth = uniqueAbstractMethSigs.head;
            const uniqueAbstractMeth$$1 = (0, _infos.MethInfo$$Instantiate$$7463DE7B)(uniqueAbstractMeth, cenv$$175.amap, m$$338, renaming$$4);
            const patternInput$$457 = FreshenAbstractSlot(cenv$$175.g, cenv$$175.amap, m$$338, synTyparDecls$$4, uniqueAbstractMeth$$1);
            const declaredTypars$$19 = patternInput$$457[0] ? patternInput$$457[1] : declaredTypars$$18;
            const absSlotTy = (0, _TastOps.mkMethodTy)(cenv$$175.g, patternInput$$457[2], patternInput$$457[3]);
            UnifyTypes(cenv$$175, envinner$$27, m$$338, bindingTy$$2, absSlotTy);
            declaredTypars$$20 = declaredTypars$$19;
          } else {
            declaredTypars$$20 = declaredTypars$$18;
          }

          let optInferredImplSlotTys;

          if (optIntfSlotTy$$1 == null) {
            optInferredImplSlotTys = (0, _List.map)(function mapping$$113(x$$123) {
              return (0, _infos.MethInfo$$get_ApparentEnclosingType)(x$$123);
            }, uniqueAbstractMethSigs);
          } else {
            const x$$122 = optIntfSlotTy$$1[0];
            optInferredImplSlotTys = (0, _Types.L)(x$$122, (0, _Types.L)());
          }

          return [optInferredImplSlotTys, declaredTypars$$20];
        }

      case 1:
        {
          const dispatchSlots$$3 = (0, _MethodOverrides.GetAbstractPropInfosForSynPropertyDecl)(cenv$$175.infoReader, ad$$34, memberId$$6, m$$338, typToSearchForAbstractMembers, k$$2, valSynData$$21);
          const dispatchSlots$$4 = (0, _List.filter)(function predicate$$53(pinfo$$7) {
            if ((0, _infos.PropInfo$$get_HasGetter)(pinfo$$7) ? (0, _Util.equals)(k$$2, new _ast.MemberKind(3, "PropertyGet")) : false) {
              return true;
            } else if ((0, _infos.PropInfo$$get_HasSetter)(pinfo$$7)) {
              return (0, _Util.equals)(k$$2, new _ast.MemberKind(4, "PropertySet"));
            } else {
              return false;
            }
          }, dispatchSlots$$3);
          let uniqueAbstractPropSigs;
          var $target$$520;

          if (dispatchSlots$$4.tail == null) {
            if (!(0, _TastOps.CompileAsEvent)(cenv$$175.g, attribs$$2)) {
              $target$$520 = 0;
            } else {
              $target$$520 = 1;
            }
          } else {
            $target$$520 = 1;
          }

          switch ($target$$520) {
            case 0:
              {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoPropertyFoundForOverride)(), (0, _ast.Ident$$get_idRange)(memberId$$6)));
                uniqueAbstractPropSigs = (0, _Types.L)();
                break;
              }

            case 1:
              {
                var $target$$521, uniqueAbstractProp;

                if (dispatchSlots$$4.tail != null) {
                  if (dispatchSlots$$4.tail.tail == null) {
                    $target$$521 = 0;
                    uniqueAbstractProp = dispatchSlots$$4.head;
                  } else {
                    $target$$521 = 1;
                  }
                } else {
                  $target$$521 = 1;
                }

                switch ($target$$521) {
                  case 0:
                    {
                      uniqueAbstractPropSigs = (0, _Types.L)(uniqueAbstractProp, (0, _Types.L)());
                      break;
                    }

                  case 1:
                    {
                      uniqueAbstractPropSigs = (0, _Types.L)();
                      break;
                    }
                }

                break;
              }
          }

          (0, _List.iterate)(function action$$36(uniqueAbstractProp$$1) {
            const kIsGet = (0, _Util.equals)(k$$2, new _ast.MemberKind(3, "PropertyGet"));

            if (!(kIsGet ? (0, _infos.PropInfo$$get_HasGetter)(uniqueAbstractProp$$1) : (0, _infos.PropInfo$$get_HasSetter)(uniqueAbstractProp$$1))) {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAbstractPropertyMissingGetOrSet$$Z721C83C5)(kIsGet ? "getter" : "setter"), (0, _ast.Ident$$get_idRange)(memberId$$6)));
            }

            const uniqueAbstractMeth$$2 = kIsGet ? (0, _infos.PropInfo$$get_GetterMethod)(uniqueAbstractProp$$1) : (0, _infos.PropInfo$$get_SetterMethod)(uniqueAbstractProp$$1);
            const uniqueAbstractMeth$$3 = (0, _infos.MethInfo$$Instantiate$$7463DE7B)(uniqueAbstractMeth$$2, cenv$$175.amap, m$$338, renaming$$4);
            const patternInput$$458 = FreshenAbstractSlot(cenv$$175.g, cenv$$175.amap, m$$338, synTyparDecls$$4, uniqueAbstractMeth$$3);

            if (!(patternInput$$458[1].tail == null)) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("Unexpected generic property", (0, _ast.Ident$$get_idRange)(memberId$$6)));
            }

            let absSlotTy$$1;

            if ((0, _Util.equals)(memberFlags$$29.MemberKind, new _ast.MemberKind(3, "PropertyGet"))) {
              absSlotTy$$1 = (0, _TastOps.mkMethodTy)(cenv$$175.g, patternInput$$458[2], patternInput$$458[3]);
            } else {
              var $target$$522, argTysFromAbsSlot$$4;

              if (patternInput$$458[2].tail != null) {
                if (patternInput$$458[2].tail.tail == null) {
                  $target$$522 = 0;
                  argTysFromAbsSlot$$4 = patternInput$$458[2].head;
                } else {
                  $target$$522 = 1;
                }
              } else {
                $target$$522 = 1;
              }

              switch ($target$$522) {
                case 0:
                  {
                    absSlotTy$$1 = (0, _TastOps.op_MinusMinusGreater)((0, _TastOps.mkRefTupledTy)(cenv$$175.g, argTysFromAbsSlot$$4), (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$175.g));
                    break;
                  }

                case 1:
                  {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidSignatureForSet)(), (0, _ast.Ident$$get_idRange)(memberId$$6)));
                    absSlotTy$$1 = (0, _TastOps.op_MinusMinusGreater)(patternInput$$458[3], (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$175.g));
                    break;
                  }
              }
            }

            UnifyTypes(cenv$$175, envinner$$27, m$$338, bindingTy$$2, absSlotTy$$1);
          }, uniqueAbstractPropSigs);
          let optInferredImplSlotTys$$1;

          if (optIntfSlotTy$$1 == null) {
            optInferredImplSlotTys$$1 = (0, _List.map)(function mapping$$114(pinfo$$8) {
              return (0, _infos.PropInfo$$get_ApparentEnclosingType)(pinfo$$8);
            }, uniqueAbstractPropSigs);
          } else {
            const x$$124 = optIntfSlotTy$$1[0];
            optInferredImplSlotTys$$1 = (0, _Types.L)(x$$124, (0, _Types.L)());
          }

          return [optInferredImplSlotTys$$1, declaredTypars$$18];
        }

      case 2:
        {
          if (optIntfSlotTy$$1 == null) {
            return [(0, _Types.L)(), declaredTypars$$18];
          } else {
            const x$$125 = optIntfSlotTy$$1[0];
            return [(0, _Types.L)(x$$125, (0, _Types.L)()), declaredTypars$$18];
          }
        }
    }
  } else {
    return [(0, _Types.L)(), declaredTypars$$18];
  }
}

function CheckForNonAbstractInterface(declKind$$16, tcref$$37, memberFlags$$30, m$$339) {
  if ((0, _TastOps.isInterfaceTyconRef)(tcref$$37)) {
    if ((0, _Util.equals)(memberFlags$$30.MemberKind, new _ast.MemberKind(0, "ClassConstructor"))) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticInitializersIllegalInInterface)(), m$$339));
    } else if ((0, _Util.equals)(memberFlags$$30.MemberKind, new _ast.MemberKind(1, "Constructor"))) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcObjectConstructorsIllegalInInterface)(), m$$339));
    } else if (memberFlags$$30.IsOverrideOrExplicitImpl) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMemberOverridesIllegalInInterface)(), m$$339));
    } else if (!((0, _Util.equals)(declKind$$16, new DeclKind(2, "ExtrinsicExtensionBinding")) ? true : memberFlags$$30.IsDispatchSlot)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConcreteMembersIllegalInInterface)(), m$$339));
    }
  }
}

function AnalyzeRecursiveStaticMemberOrValDecl(cenv$$176, envinner$$28, tpenv$$337, declKind$$17, newslotsOK$$1, overridesOK$$1, tcrefContainerInfo$$1, vis1$$3, id$$82, vis2$$6, declaredTypars$$21, memberFlagsOpt$$11, thisIdOpt$$4, bindingAttribs$$5, valSynInfo$$13, ty$$122, bindingRhs$$8, mBinding$$8, flex$$14) {
  var v$$59;
  const vis$$24 = CombineVisibilityAttribs(vis1$$3, vis2$$6, mBinding$$8);
  const matchValue$$200 = [tcrefContainerInfo$$1, memberFlagsOpt$$11];

  var $target$$523, _safeInitInfo, baseValOpt$$1, declaredTyconTypars$$4, memberFlags$$31, optIntfSlotTy$$2, tcref$$38;

  if (matchValue$$200[0] != null) {
    if (matchValue$$200[1] != null) {
      $target$$523 = 0;
      _safeInitInfo = matchValue$$200[0].fields[3];
      baseValOpt$$1 = matchValue$$200[0].fields[2];
      declaredTyconTypars$$4 = matchValue$$200[0].fields[4];
      memberFlags$$31 = matchValue$$200[1];
      optIntfSlotTy$$2 = matchValue$$200[0].fields[1];
      tcref$$38 = matchValue$$200[0].fields[0];
    } else {
      $target$$523 = 1;
    }
  } else {
    $target$$523 = 1;
  }

  switch ($target$$523) {
    case 0:
      {
        CheckMemberFlags(null, newslotsOK$$1, overridesOK$$1, memberFlags$$31, (0, _ast.Ident$$get_idRange)(id$$82));
        CheckForNonAbstractInterface(declKind$$17, tcref$$38, memberFlags$$31, (0, _ast.Ident$$get_idRange)(id$$82));

        if ((0, _Util.equals)(memberFlags$$31.MemberKind, new _ast.MemberKind(1, "Constructor")) ? (0, _tast.Entity$$get_IsExceptionDecl)((0, _tast.EntityRef$$get_Deref)(tcref$$38)) : false) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorsDisallowedInExceptionAugmentation)(), (0, _ast.Ident$$get_idRange)(id$$82)));
        }

        const isExtrinsic$$5 = (0, _Util.equals)(declKind$$17, new DeclKind(2, "ExtrinsicExtensionBinding"));
        const patternInput$$459 = FreshenObjectArgType(cenv$$176, mBinding$$8, new _tast.TyparRigidity(1, "WillBeRigid"), tcref$$38, isExtrinsic$$5, declaredTyconTypars$$4);
        const envinner$$29 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), patternInput$$459[1], envinner$$28);
        const envinner$$30 = MakeInnerEnvForTyconRef(envinner$$29, tcref$$38, isExtrinsic$$5);
        let patternInput$$460;

        if (memberFlags$$31.MemberKind.tag === 1) {
          if ((0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref$$38) ? valSynInfo$$13.fields[0].tail != null ? valSynInfo$$13.fields[0].head.tail == null ? valSynInfo$$13.fields[0].tail.tail == null ? true : false : false : false : false) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructsCannotHaveConstructorWithNoArguments)(), mBinding$$8));
          }

          if (!(0, _tast.EntityRef$$get_IsFSharpObjectModelTycon)(tcref$$38)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConstructorsIllegalForThisType)(), (0, _ast.Ident$$get_idRange)(id$$82)));
          }

          const safeThisValOpt$$3 = MakeAndPublishSafeThisVal(cenv$$176, envinner$$30, thisIdOpt$$4, patternInput$$459[4]);
          let baseValOpt$$2;
          const matchValue$$202 = (0, _infos.GetSuperTypeOfType)(cenv$$176.g, cenv$$176.amap, mBinding$$8, patternInput$$459[3]);

          if (matchValue$$202 == null) {
            baseValOpt$$2 = null;
          } else {
            const superTy$$2 = matchValue$$202;
            baseValOpt$$2 = MakeAndPublishBaseVal(cenv$$176, envinner$$30, baseValOpt$$1 != null ? (v$$59 = baseValOpt$$1, (0, _tast.Val$$get_Id)(v$$59)) : null, superTy$$2);
          }

          const domainTy$$11 = (0, _ConstraintSolver.NewInferenceType)();
          UnifyTypes(cenv$$176, envinner$$30, mBinding$$8, ty$$122, (0, _TastOps.op_MinusMinusGreater)(domainTy$$11, patternInput$$459[3]));
          patternInput$$460 = [safeThisValOpt$$3, baseValOpt$$2];
        } else {
          patternInput$$460 = [null, null];
        }

        let memberInfo$$7;
        const isExtrinsic$$6 = (0, _Util.equals)(declKind$$17, new DeclKind(2, "ExtrinsicExtensionBinding"));
        memberInfo$$7 = MakeMemberDataAndMangledNameForMemberVal(cenv$$176.g, tcref$$38, isExtrinsic$$6, bindingAttribs$$5, (0, _Types.L)(), memberFlags$$31, valSynInfo$$13, id$$82, false);
        return [envinner$$30, tpenv$$337, id$$82, null, memberInfo$$7, vis$$24, vis2$$6, patternInput$$460[0], patternInput$$459[1], patternInput$$460[1], flex$$14, bindingRhs$$8, declaredTypars$$21];
      }

    case 1:
      {
        return [envinner$$28, tpenv$$337, id$$82, null, null, vis$$24, vis2$$6, null, (0, _Types.L)(), null, flex$$14, bindingRhs$$8, declaredTypars$$21];
      }
  }
}

function AnalyzeRecursiveInstanceMemberDecl(cenv$$177, envinner$$31, tpenv$$338, declKind$$18, synTyparDecls$$5, valSynInfo$$14, flex$$15, newslotsOK$$2, overridesOK$$2, vis1$$4, thisId$$6, memberId$$7, toolId$$4, bindingAttribs$$6, vis2$$7, tcrefContainerInfo$$2, memberFlagsOpt$$12, ty$$123, bindingRhs$$9, mBinding$$9) {
  var v$$60;
  const vis$$25 = CombineVisibilityAttribs(vis1$$4, vis2$$7, mBinding$$9);
  const infer$$2 = flex$$15.fields[2];
  const declaredTypars$$22 = flex$$15.fields[1];
  const matchValue$$203 = [tcrefContainerInfo$$2, memberFlagsOpt$$12];

  var $target$$524, _safeInitInfo$$1, baseValOpt$$4, declaredTyconTypars$$5, memberFlags$$32, optIntfSlotTy$$3, tcref$$39;

  if (matchValue$$203[0] != null) {
    if (matchValue$$203[1] != null) {
      $target$$524 = 0;
      _safeInitInfo$$1 = matchValue$$203[0].fields[3];
      baseValOpt$$4 = matchValue$$203[0].fields[2];
      declaredTyconTypars$$5 = matchValue$$203[0].fields[4];
      memberFlags$$32 = matchValue$$203[1];
      optIntfSlotTy$$3 = matchValue$$203[0].fields[1];
      tcref$$39 = matchValue$$203[0].fields[0];
    } else {
      $target$$524 = 1;
    }
  } else {
    $target$$524 = 1;
  }

  switch ($target$$524) {
    case 0:
      {
        CheckMemberFlags(optIntfSlotTy$$3, newslotsOK$$2, overridesOK$$2, memberFlags$$32, mBinding$$9);

        if (vis$$25 != null ? memberFlags$$32.IsOverrideOrExplicitImpl : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOverridesCannotHaveVisibilityDeclarations)(), (0, _ast.Ident$$get_idRange)(memberId$$7)));
        }

        const bindingRhs$$10 = PushOnePatternToRhs(cenv$$177, true, (0, _ast.mkSynThisPatVar)(thisId$$6), bindingRhs$$9);
        const isExtrinsic$$7 = (0, _Util.equals)(declKind$$18, new DeclKind(2, "ExtrinsicExtensionBinding"));
        const patternInput$$461 = FreshenObjectArgType(cenv$$177, mBinding$$9, new _tast.TyparRigidity(1, "WillBeRigid"), tcref$$39, isExtrinsic$$7, declaredTyconTypars$$5);
        const envinner$$32 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), patternInput$$461[1], envinner$$31);
        const envinner$$33 = MakeInnerEnvForTyconRef(envinner$$32, tcref$$39, isExtrinsic$$7);
        const baseValOpt$$5 = (0, _tast.EntityRef$$get_IsFSharpObjectModelTycon)(tcref$$39) ? baseValOpt$$4 : null;
        const bindingTy$$3 = (0, _ConstraintSolver.NewInferenceType)();
        UnifyTypes(cenv$$177, envinner$$33, mBinding$$9, ty$$123, (0, _TastOps.op_MinusMinusGreater)(patternInput$$461[4], bindingTy$$3));
        CheckForNonAbstractInterface(declKind$$18, tcref$$39, memberFlags$$32, (0, _ast.Ident$$get_idRange)(memberId$$7));
        const patternInput$$462 = ApplyAbstractSlotInference(cenv$$177, envinner$$33, bindingTy$$3, mBinding$$9, synTyparDecls$$5, declaredTypars$$22, memberId$$7, patternInput$$461[0], patternInput$$461[2], patternInput$$461[3], optIntfSlotTy$$3, valSynInfo$$14, memberFlags$$32, bindingAttribs$$6);
        const flex$$16 = new ExplicitTyparInfo(0, "ExplicitTyparInfo", patternInput$$462[1], patternInput$$462[1], infer$$2);
        let baseValOpt$$6;
        const matchValue$$204 = (0, _infos.GetSuperTypeOfType)(cenv$$177.g, cenv$$177.amap, mBinding$$9, patternInput$$461[3]);

        if (matchValue$$204 == null) {
          baseValOpt$$6 = null;
        } else {
          const superTy$$3 = matchValue$$204;
          baseValOpt$$6 = MakeAndPublishBaseVal(cenv$$177, envinner$$33, baseValOpt$$5 != null ? (v$$60 = baseValOpt$$5, (0, _tast.Val$$get_Id)(v$$60)) : null, superTy$$3);
        }

        const memberInfo$$8 = MakeMemberDataAndMangledNameForMemberVal(cenv$$177.g, tcref$$39, isExtrinsic$$7, bindingAttribs$$6, patternInput$$462[0], memberFlags$$32, valSynInfo$$14, memberId$$7, false);
        return [envinner$$33, tpenv$$338, memberId$$7, toolId$$4, memberInfo$$8, vis$$25, vis2$$7, null, patternInput$$461[1], baseValOpt$$6, flex$$16, bindingRhs$$10, patternInput$$462[1]];
      }

    case 1:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRecursiveBindingsWithMembersMustBeDirectAugmentation)(), mBinding$$9));
      }
  }
}

function AnalyzeRecursiveDecl(cenv$$178, envinner$$34, tpenv$$339, declKind$$19, synTyparDecls$$6, declaredTypars$$24, thisIdOpt$$5, valSynInfo$$15, flex$$17, newslotsOK$$3, overridesOK$$3, vis1$$5, declPattern$$3, bindingAttribs$$7, tcrefContainerInfo$$3, memberFlagsOpt$$13, ty$$124, bindingRhs$$11, mBinding$$10) {
  const analyzeRecursiveDeclPat = function analyzeRecursiveDeclPat(tpenv$$340, p$$29) {
    analyzeRecursiveDeclPat: while (true) {
      var $target$$525, pat$0027$$10, cty$$8, pat$0027$$11, _attribs, _pat$0027, m$$340, m$$341, id$$84, vis2$$8, memberId$$8, thisId$$7, toolId$$5, vis2$$9;

      if (p$$29.tag === 19) {
        $target$$525 = 0;
        pat$0027$$10 = p$$29.fields[0];
      } else if (p$$29.tag === 3) {
        $target$$525 = 1;
        cty$$8 = p$$29.fields[1];
        pat$0027$$11 = p$$29.fields[0];
      } else if (p$$29.tag === 4) {
        $target$$525 = 2;
        _attribs = p$$29.fields[1];
        _pat$0027 = p$$29.fields[0];
        m$$340 = p$$29.fields[2];
      } else if (p$$29.tag === 0) {
        if (p$$29.fields[0].tag === 0) {
          $target$$525 = 3;
          m$$341 = p$$29.fields[1];
        } else {
          $target$$525 = 6;
        }
      } else if (p$$29.tag === 1) {
        $target$$525 = 3;
        m$$341 = p$$29.fields[0];
      } else if (p$$29.tag === 2) {
        if (p$$29.fields[0].tag === 1) {
          $target$$525 = 4;
          id$$84 = p$$29.fields[1];
          vis2$$8 = p$$29.fields[3];
        } else {
          $target$$525 = 6;
        }
      } else if (p$$29.tag === 18) {
        $target$$525 = 5;
        memberId$$8 = p$$29.fields[1];
        thisId$$7 = p$$29.fields[0];
        toolId$$5 = p$$29.fields[2];
        vis2$$9 = p$$29.fields[3];
      } else {
        $target$$525 = 6;
      }

      switch ($target$$525) {
        case 0:
          {
            tpenv$$340 = tpenv$$340;
            p$$29 = pat$0027$$10;
            continue analyzeRecursiveDeclPat;
          }

        case 1:
          {
            const patternInput$$463 = TcTypeAndRecover(cenv$$178, new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$34, tpenv$$340, cty$$8);
            UnifyTypes(cenv$$178, envinner$$34, mBinding$$10, ty$$124, patternInput$$463[0]);
            tpenv$$340 = patternInput$$463[1];
            p$$29 = pat$0027$$11;
            continue analyzeRecursiveDeclPat;
          }

        case 2:
          {
            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributesInvalidInPatterns)(), m$$340));
          }

        case 3:
          {
            const id$$83 = (0, _ast.ident)((0, _ast.NiceNameGenerator$$FreshCompilerGeneratedName$$7EA1AB7)(cenv$$178.niceNameGen, "doval", m$$341), m$$341);
            tpenv$$340 = tpenv$$340;
            p$$29 = new _ast.SynPat(2, "Named", new _ast.SynPat(1, "Wild", m$$341), id$$83, false, null, m$$341);
            continue analyzeRecursiveDeclPat;
          }

        case 4:
          {
            return AnalyzeRecursiveStaticMemberOrValDecl(cenv$$178, envinner$$34, tpenv$$340, declKind$$19, newslotsOK$$3, overridesOK$$3, tcrefContainerInfo$$3, vis1$$5, id$$84, vis2$$8, declaredTypars$$24, memberFlagsOpt$$13, thisIdOpt$$5, bindingAttribs$$7, valSynInfo$$15, ty$$124, bindingRhs$$11, mBinding$$10, flex$$17);
          }

        case 5:
          {
            return AnalyzeRecursiveInstanceMemberDecl(cenv$$178, envinner$$34, tpenv$$340, declKind$$19, synTyparDecls$$6, valSynInfo$$15, flex$$17, newslotsOK$$3, overridesOK$$3, vis1$$5, thisId$$7, memberId$$8, toolId$$5, bindingAttribs$$7, vis2$$9, tcrefContainerInfo$$3, memberFlagsOpt$$13, ty$$124, bindingRhs$$11, mBinding$$10);
          }

        case 6:
          {
            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlySimplePatternsInLetRec)(), mBinding$$10));
          }
      }
    }
  };

  return analyzeRecursiveDeclPat(tpenv$$339, declPattern$$3);
}

function AnalyzeAndMakeAndPublishRecursiveValue(overridesOK$$4, isGeneratedEventVal$$1, cenv$$179, env$$249, tpenv$$342, recBindIdx, _arg12$$2) {
  var tid, copyOfStruct$$4;
  const newslotsOK$$4 = _arg12$$2.fields[1];
  const declKind$$20 = _arg12$$2.fields[2];
  const containerInfo$$3 = _arg12$$2.fields[0];
  const binding$$2 = _arg12$$2.fields[3];
  const vis1$$6 = binding$$2.fields[0];
  const valSynData$$22 = binding$$2.fields[7];
  const synTyparDecls$$7 = binding$$2.fields[6];
  const spBind$$16 = binding$$2.fields[11];
  const mBinding$$11 = binding$$2.fields[10];
  const isMutable$$15 = binding$$2.fields[3];
  const isInline$$6 = binding$$2.fields[2];
  const declPattern$$4 = binding$$2.fields[8];
  const bindingXmlDoc$$1 = binding$$2.fields[5];
  const bindingSynAttribs$$1 = binding$$2.fields[4];
  const bindingRhs$$12 = binding$$2.fields[9];
  const bindingKind$$1 = binding$$2.fields[1];
  const bindingExpr = bindingRhs$$12.fields[2];
  const valSynInfo$$16 = valSynData$$22.fields[1];
  const thisIdOpt$$6 = valSynData$$22.fields[2];
  const memberFlagsOpt$$14 = valSynData$$22.fields[0];
  const tcrefContainerInfo$$4 = containerInfo$$3.fields[1];
  const altActualParent$$4 = containerInfo$$3.fields[0];
  const attrTgt$$12 = DeclKind$$$AllowedAttribTargets(memberFlagsOpt$$14, declKind$$20) | 0;
  const bindingAttribs$$8 = TcAttributes(cenv$$179, env$$249, attrTgt$$12, bindingSynAttribs$$1);
  const ty$$125 = (0, _ConstraintSolver.NewInferenceType)();
  const inlineFlag$$15 = ComputeInlineFlag(memberFlagsOpt$$14, isInline$$6, isMutable$$15, mBinding$$11);

  if (isMutable$$15) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlyRecordFieldsAndSimpleLetCanBeMutable)(), mBinding$$11));
  }

  const patternInput$$464 = TcBindingTyparDecls(false, cenv$$179, env$$249, tpenv$$342, synTyparDecls$$7);
  const declaredTypars$$25 = patternInput$$464[0].fields[1];
  const envinner$$35 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), declaredTypars$$25, env$$249);
  const patternInput$$465 = AnalyzeRecursiveDecl(cenv$$179, envinner$$35, patternInput$$464[1], declKind$$20, synTyparDecls$$7, declaredTypars$$25, thisIdOpt$$6, valSynInfo$$16, patternInput$$464[0], newslotsOK$$4, overridesOK$$4, vis1$$6, declPattern$$4, bindingAttribs$$8, tcrefContainerInfo$$4, memberFlagsOpt$$14, ty$$125, bindingRhs$$12, mBinding$$11);
  const optArgsOK$$4 = memberFlagsOpt$$14 != null;
  ApplyTypesFromArgumentPatterns(cenv$$179, patternInput$$465[0], optArgsOK$$4, ty$$125, mBinding$$11, patternInput$$465[1], patternInput$$465[11], memberFlagsOpt$$14);
  const isComplete$$4 = ComputeIsComplete(patternInput$$465[8], patternInput$$465[12], ty$$125);
  const prelimTyscheme = new _TastOps.TypeScheme(0, "TypeScheme", (0, _List.append)(patternInput$$465[8], patternInput$$465[12]), ty$$125);
  const partialValReprInfo$$8 = TranslateTopValSynInfo(mBinding$$11, function (attrTgt$$13, synAttribs$$8) {
    return TcAttributes(cenv$$179, patternInput$$465[0], attrTgt$$13, synAttribs$$8);
  }, valSynInfo$$16);
  const topValInfo$$12 = UseSyntacticArity(declKind$$20, prelimTyscheme, partialValReprInfo$$8);
  const hasDeclaredTypars$$5 = !(patternInput$$465[12].tail == null);
  const prelimValScheme = new ValScheme(0, "ValScheme", patternInput$$465[2], prelimTyscheme, topValInfo$$12, patternInput$$465[4], false, inlineFlag$$15, new _tast.ValBaseOrThisInfo(2, "NormalVal"), patternInput$$465[5], false, false, false, hasDeclaredTypars$$5);
  const patternInput$$466 = TcLiteral(cenv$$179, ty$$125, env$$249, patternInput$$465[1], bindingAttribs$$8, bindingExpr);
  let patternInput$$469;
  const extraBindings = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.map)(function (extraBinding$$1) {
      return new NormalizedRecBindingDefn(0, "NormalizedRecBindingDefn", containerInfo$$3, newslotsOK$$4, declKind$$20, extraBinding$$1);
    }, EventDeclarationNormalization$$$GenerateExtraBindings(cenv$$179, bindingAttribs$$8, binding$$2));
  }));
  const patternInput$$467 = (0, _List.mapFold)(function (tupledArg$$87, arg50$0040$$2) {
    return AnalyzeAndMakeAndPublishRecursiveValue(overridesOK$$4, true, cenv$$179, env$$249, tupledArg$$87[0], tupledArg$$87[1], arg50$0040$$2);
  }, [patternInput$$465[1], recBindIdx], extraBindings);
  const tpenv$$346 = patternInput$$467[1][0];
  const recBindIdx$$2 = patternInput$$467[1][1] | 0;
  const patternInput$$468 = (0, _List.unzip)(patternInput$$467[0]);
  patternInput$$469 = [(0, _List.concat)(patternInput$$468[0]), (0, _List.concat)(patternInput$$468[1]), tpenv$$346, recBindIdx$$2];
  const vspec$$6 = MakeAndPublishVal(cenv$$179, patternInput$$465[0], altActualParent$$4, false, declKind$$20, new _tast.ValRecursiveScopeInfo(0, "ValInRecScope", isComplete$$4), prelimValScheme, bindingAttribs$$8, bindingXmlDoc$$1, patternInput$$466[1], isGeneratedEventVal$$1);
  var $target$$526, tid$$1;

  if (patternInput$$465[3] != null) {
    if (tid = patternInput$$465[3], !(copyOfStruct$$4 = (0, _ast.Ident$$get_idRange)(tid), (0, _range.range$$get_IsSynthetic)(copyOfStruct$$4)) ? !(0, _Util.equals)((0, _ast.Ident$$get_idRange)(tid), (0, _ast.Ident$$get_idRange)(patternInput$$465[2])) : false) {
      $target$$526 = 0;
      tid$$1 = patternInput$$465[3];
    } else {
      $target$$526 = 1;
    }
  } else {
    $target$$526 = 1;
  }

  switch ($target$$526) {
    case 0:
      {
        const item$$51 = new _NameResolution.Item(0, "Value", (0, _tast.mkLocalValRef)(vspec$$6));
        (0, _NameResolution.CallNameResolutionSink)(cenv$$179.tcSink, (0, _ast.Ident$$get_idRange)(tid$$1), TcEnv$$get_NameEnv(env$$249), item$$51, item$$51, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(6, "RelatedText"), TcEnv$$get_DisplayEnv(env$$249), env$$249.eAccessRights);
        break;
      }
  }

  const mangledId = (0, _ast.ident)((0, _tast.Val$$get_LogicalName)(vspec$$6), (0, _tast.Val$$get_Range)(vspec$$6));
  const revisedBinding = new NormalizedBinding(0, "NormalizedBinding", vis1$$6, bindingKind$$1, isInline$$6, isMutable$$15, bindingSynAttribs$$1, bindingXmlDoc$$1, synTyparDecls$$7, valSynData$$22, (0, _ast.mkSynPatVar)(patternInput$$465[6], mangledId), patternInput$$465[11], mBinding$$11, spBind$$16);
  let rbinfo;
  let safeInitInfo$$6;

  if (tcrefContainerInfo$$4 != null) {
    const safeInitInfo$$5 = tcrefContainerInfo$$4.fields[3];
    safeInitInfo$$6 = safeInitInfo$$5;
  } else {
    safeInitInfo$$6 = new SafeInitData(1, "NoSafeInitInfo");
  }

  rbinfo = new RecursiveBindingInfo(0, "RBInfo", patternInput$$469[3], containerInfo$$3, patternInput$$465[8], inlineFlag$$15, vspec$$6, patternInput$$465[10], partialValReprInfo$$8, patternInput$$465[4], patternInput$$465[9], patternInput$$465[7], safeInitInfo$$6, patternInput$$465[5], ty$$125, declKind$$20);
  const recBindIdx$$4 = patternInput$$469[3] + 1 | 0;
  const primaryBinding = new PreCheckingRecursiveBinding(revisedBinding, rbinfo);
  return [[(0, _Types.L)(primaryBinding, patternInput$$469[0]), (0, _Types.L)(vspec$$6, patternInput$$469[1])], [patternInput$$469[2], recBindIdx$$4]];
}

function AnalyzeAndMakeAndPublishRecursiveValues(overridesOK$$5, cenv$$180, env$$250, tpenv$$348, binds$$18) {
  const recBindIdx$$5 = 0;
  const patternInput$$470 = (0, _List.mapFold)(function (tupledArg$$88, arg50$0040$$3) {
    return AnalyzeAndMakeAndPublishRecursiveValue(overridesOK$$5, false, cenv$$180, env$$250, tupledArg$$88[0], tupledArg$$88[1], arg50$0040$$3);
  }, [tpenv$$348, recBindIdx$$5], binds$$18);
  const patternInput$$471 = (0, _List.unzip)(patternInput$$470[0]);
  return [(0, _List.concat)(patternInput$$471[0]), (0, _List.concat)(patternInput$$471[1]), patternInput$$470[1]];
}

function TcLetrecBinding(cenv$$181, envRec, scopem$$13, extraGeneralizableTypars, reqdThisValTyOpt, envNonRec, generalizedRecBinds, preGeneralizationRecBinds, tpenv$$351, uncheckedRecBindsTable, rbind) {
  const vspec$$7 = rbind.RecBindingInfo.fields[4];
  const tau$$12 = rbind.RecBindingInfo.fields[12];
  const safeThisValOpt$$6 = rbind.RecBindingInfo.fields[9];
  const safeInitInfo$$7 = rbind.RecBindingInfo.fields[10];
  const flex$$20 = rbind.RecBindingInfo.fields[5];
  const enclosingDeclaredTypars$$12 = rbind.RecBindingInfo.fields[2];
  const declKind$$21 = rbind.RecBindingInfo.fields[13];
  const baseValOpt$$8 = rbind.RecBindingInfo.fields[8];
  const allDeclaredTypars$$6 = (0, _List.append)(enclosingDeclaredTypars$$12, RecursiveBindingInfo$$get_DeclaredTypars(rbind.RecBindingInfo));
  const envRec$$1 = (0, _Seq.foldBack)(function (v$$61, env$$251) {
    return AddLocalVal(cenv$$181.tcSink, scopem$$13, v$$61, env$$251);
  }, (0, _Option.defaultArg)(baseValOpt$$8, [], function ($x$$87) {
    return [$x$$87];
  }), envRec);
  const envRec$$2 = (0, _Seq.foldBack)(function (v$$62, env$$252) {
    return AddLocalVal(cenv$$181.tcSink, scopem$$13, v$$62, env$$252);
  }, (0, _Option.defaultArg)(safeThisValOpt$$6, [], function ($x$$88) {
    return [$x$$88];
  }), envRec$$1);
  const envRec$$3 = MakeInnerEnvForMember(envRec$$2, vspec$$7);
  const patternInput$$473 = TcNormalizedBinding(declKind$$21, cenv$$181, envRec$$3, tpenv$$351, tau$$12, safeThisValOpt$$6, safeInitInfo$$7, enclosingDeclaredTypars$$12, flex$$20, rbind.SyntacticBinding);

  try {
    UnifyTypes(cenv$$181, envRec$$3, (0, _tast.Val$$get_Range)(vspec$$7), (0, _TastOps.op_PlusMinusGreater)(allDeclaredTypars$$6, tau$$12), (0, _tast.Val$$get_Type)(vspec$$7));
  } catch (e$$104) {
    (0, _ErrorLogger.error)(new Recursion(TcEnv$$get_DisplayEnv(envRec$$3), (0, _tast.Val$$get_Id)(vspec$$7), tau$$12, (0, _tast.Val$$get_Type)(vspec$$7), (0, _tast.Val$$get_Range)(vspec$$7)));
  }

  if (reqdThisValTyOpt != null) {
    const reqdThisValTy = reqdThisValTyOpt;
    let patternInput$$474;
    const matchValue$$205 = GetInstanceMemberThisVariable(vspec$$7, CheckedBindingInfo$$get_Expr(patternInput$$473[0]));

    if (matchValue$$205 != null) {
      const thisVal$$1 = matchValue$$205;
      patternInput$$474 = [reqdThisValTy, (0, _tast.Val$$get_Type)(thisVal$$1), (0, _tast.Val$$get_Range)(thisVal$$1)];
    } else {
      const reqdThisValTy$$1 = (0, _TastOps.isByrefTy)(cenv$$181.g, reqdThisValTy) ? (0, _TastOps.destByrefTy)(cenv$$181.g, reqdThisValTy) : reqdThisValTy;
      const enclosingTyconRef = (0, _TastOps.tcrefOfAppTy)(cenv$$181.g, reqdThisValTy$$1);
      patternInput$$474 = [reqdThisValTy$$1, (0, _TastOps.mkAppTy)(enclosingTyconRef, (0, _List.map)(_tast.mkTyparTy, enclosingDeclaredTypars$$12)), (0, _tast.Val$$get_Range)(vspec$$7)];
    }

    if (!(0, _ConstraintSolver.AddCxTypeEqualsTypeUndoIfFailed)(TcEnv$$get_DisplayEnv(envRec$$3), cenv$$181.css, patternInput$$474[2], patternInput$$474[1], patternInput$$474[0])) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNonUniformMemberUse$$Z721C83C5)((0, _tast.Val$$get_DisplayName)(vspec$$7)), (0, _tast.Val$$get_Range)(vspec$$7)));
    }
  }

  const preGeneralizationRecBind = new PreGeneralizationRecursiveBinding(extraGeneralizableTypars, patternInput$$473[0], rbind.RecBindingInfo);
  let uncheckedRecBindsTable$$1;
  uncheckedRecBindsTable$$1 = (0, _Map.FSharpMap$$Remove$$2B595)(uncheckedRecBindsTable, (0, _tast.Val$$get_Stamp)(RecursiveBindingInfo$$get_Val(rbind.RecBindingInfo)));
  const preGeneralizationRecBinds$$1 = (0, _Types.L)(preGeneralizationRecBind, preGeneralizationRecBinds);
  return TcIncrementalLetRecGeneralization(cenv$$181, scopem$$13, envNonRec, generalizedRecBinds, preGeneralizationRecBinds$$1, patternInput$$473[1], uncheckedRecBindsTable$$1);
}

function TcIncrementalLetRecGeneralization(cenv$$182, scopem$$14, envNonRec$$1, generalizedRecBinds$$1, preGeneralizationRecBinds$$2, tpenv$$353, uncheckedRecBindsTable$$2) {
  const denv$$27 = TcEnv$$get_DisplayEnv(envNonRec$$1);
  const freeInEnv$$6 = GeneralizationHelpers$$$ComputeUngeneralizableTypars(envNonRec$$1);
  let patternInput$$478;
  const freeInUncheckedRecBinds = new _Util.Lazy(function () {
    return (0, _Map.fold)(function folder$$12(acc$$20, vStamp, _arg73) {
      const matchValue$$206 = (0, _Map.tryFind)(vStamp, uncheckedRecBindsTable$$2);

      if (matchValue$$206 == null) {
        return acc$$20;
      } else {
        const fwdBind = matchValue$$206;
        return (0, _TastOps.accFreeInType)(_TastOps.CollectAllNoCaching, (0, _tast.Val$$get_Type)(RecursiveBindingInfo$$get_Val(fwdBind.RecBindingInfo)), acc$$20);
      }
    }, _TastOps.emptyFreeTyvars, (0, _TastOps.ValMultiMap$00601$$get_Contents)(cenv$$182.recUses));
  });

  const loop$$2 = function loop$$2(tupledArg$$89) {
    loop$$2: while (true) {
      const frozenBindingTypes = (0, _List.map)(function mapping$$115(pgrbind$$5) {
        return (0, _tast.Val$$get_Type)(RecursiveBindingInfo$$get_Val(pgrbind$$5.RecBindingInfo));
      }, tupledArg$$89[1]);
      const freeInFrozenAndLaterBindings = frozenBindingTypes.tail == null ? freeInUncheckedRecBinds : new _Util.Lazy(function () {
        return (0, _TastOps.accFreeInTypes)(_TastOps.CollectAllNoCaching, frozenBindingTypes, freeInUncheckedRecBinds.Value);
      });
      const patternInput$$475 = (0, _List.partition)(function predicate$$54(pgrbind$$6) {
        const freeInBinding = (0, _TastOps.freeInType)(_TastOps.CollectAllNoCaching, (0, _tast.Val$$get_TauType)(RecursiveBindingInfo$$get_Val(pgrbind$$6.RecBindingInfo))).FreeTypars;

        if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(freeInBinding)) {
          return true;
        } else {
          const freeInBinding$$1 = (0, _zset.ZsetModule$$$diff)(freeInBinding, (0, _lib.Zset$$$ofList)(_TastOps.typarOrder, (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$182.g, pgrbind$$6.ExtraGeneralizableTypars)));

          if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(freeInBinding$$1)) {
            return true;
          } else {
            const freeInBinding$$2 = (0, _zset.ZsetModule$$$diff)(freeInBinding$$1, (0, _lib.Zset$$$ofList)(_TastOps.typarOrder, (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$182.g, RecursiveBindingInfo$$get_DeclaredTypars(pgrbind$$6.RecBindingInfo))));

            if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(freeInBinding$$2)) {
              return true;
            } else {
              const freeInBinding$$3 = (0, _zset.ZsetModule$$$diff)(freeInBinding$$2, freeInEnv$$6);

              if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(freeInBinding$$3)) {
                return true;
              } else {
                const freeInBinding$$4 = (0, _zset.ZsetModule$$$inter)(freeInFrozenAndLaterBindings.Value.FreeTypars, freeInBinding$$3);

                if ((0, _TaggedCollections.Set$00602$$get_IsEmpty)(freeInBinding$$4)) {
                  return true;
                } else {
                  return false;
                }
              }
            }
          }
        }
      }, tupledArg$$89[0]);

      if (patternInput$$475[1].tail == null) {
        return [patternInput$$475[0], tupledArg$$89[1]];
      } else {
        tupledArg$$89 = [patternInput$$475[0], (0, _List.append)(patternInput$$475[1], tupledArg$$89[1])];
        continue loop$$2;
      }
    }
  };

  const patternInput$$476 = loop$$2([preGeneralizationRecBinds$$2, (0, _Types.L)()]);
  const freeInEnv$$8 = (0, _List.fold)(function folder$$13(freeInEnv$$7, pgrbind$$7) {
    if (GeneralizationHelpers$$$IsGeneralizableValue(cenv$$182.g, CheckedBindingInfo$$get_Expr(pgrbind$$7.CheckedBinding))) {
      return freeInEnv$$7;
    } else {
      const freeInBinding$$5 = (0, _TastOps.freeInType)(_TastOps.CollectAllNoCaching, (0, _tast.Val$$get_TauType)(RecursiveBindingInfo$$get_Val(pgrbind$$7.RecBindingInfo))).FreeTypars;
      const freeInBinding$$6 = (0, _zset.ZsetModule$$$diff)(freeInBinding$$5, (0, _lib.Zset$$$ofList)(_TastOps.typarOrder, (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$182.g, pgrbind$$7.ExtraGeneralizableTypars)));
      const freeInBinding$$7 = (0, _zset.ZsetModule$$$diff)(freeInBinding$$6, (0, _lib.Zset$$$ofList)(_TastOps.typarOrder, (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$182.g, RecursiveBindingInfo$$get_DeclaredTypars(pgrbind$$7.RecBindingInfo))));
      return (0, _zset.ZsetModule$$$union)(freeInBinding$$7, freeInEnv$$7);
    }
  }, freeInEnv$$6, patternInput$$476[0]);
  let patternInput$$477;

  if (patternInput$$476[0].tail == null) {
    patternInput$$477 = [(0, _Types.L)(), tpenv$$353];
  } else {
    const supportForBindings = (0, _List.collect)(function mapping$$116(pgrbind$$8) {
      return TcLetrecComputeSupportForBinding(cenv$$182, pgrbind$$8);
    }, patternInput$$476[0]);
    GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$182, denv$$27, scopem$$14, supportForBindings);
    const generalizedTyparsL = (0, _List.map)(function mapping$$117(pgrbind$$9) {
      return TcLetrecComputeAndGeneralizeGenericTyparsForBinding(cenv$$182, denv$$27, freeInEnv$$8, pgrbind$$9);
    }, patternInput$$476[0]);
    const newGeneralizedRecBinds = (0, _List.map2)(function mapping$$118(generalizedTypars$$26, pgrbind$$10) {
      return TcLetrecGeneralizeBinding(cenv$$182, denv$$27, generalizedTypars$$26, pgrbind$$10);
    }, generalizedTyparsL, patternInput$$476[0]);
    const tpenv$$354 = HideUnscopedTypars((0, _List.concat)(generalizedTyparsL), tpenv$$353);
    patternInput$$477 = [newGeneralizedRecBinds, tpenv$$354];
  }

  patternInput$$478 = [patternInput$$477[0], patternInput$$476[1], patternInput$$477[1]];
  const envNonRec$$2 = AddLocalVals(cenv$$182.tcSink, scopem$$14, (0, _List.map)(function mapping$$119(b$$56) {
    return RecursiveBindingInfo$$get_Val(b$$56.RecBindingInfo);
  }, patternInput$$478[0]), envNonRec$$1);
  const generalizedRecBinds$$2 = (0, _List.append)(patternInput$$478[0], generalizedRecBinds$$1);
  return [envNonRec$$2, generalizedRecBinds$$2, patternInput$$478[1], patternInput$$478[2], uncheckedRecBindsTable$$2];
}

function TcLetrecComputeAndGeneralizeGenericTyparsForBinding(cenv$$183, denv$$28, freeInEnv$$9, pgrbind$$11) {
  const freeInEnv$$10 = (0, _zset.ZsetModule$$$diff)(freeInEnv$$9, (0, _lib.Zset$$$ofList)(_TastOps.typarOrder, (0, _TastOps.NormalizeDeclaredTyparsForEquiRecursiveInference)(cenv$$183.g, pgrbind$$11.ExtraGeneralizableTypars)));
  const rbinfo$$1 = pgrbind$$11.RecBindingInfo;
  const vspec$$8 = RecursiveBindingInfo$$get_Val(rbinfo$$1);
  const m$$342 = pgrbind$$11.CheckedBinding.fields[9];
  const inlineFlag$$16 = pgrbind$$11.CheckedBinding.fields[0];
  const expr$$114 = pgrbind$$11.CheckedBinding.fields[6];
  const patternInput$$480 = RecursiveBindingInfo$$get_ExplicitTyparInfo(rbinfo$$1);
  const rigidCopyOfDeclaredTypars$$2 = patternInput$$480.fields[0];
  const declaredTypars$$27 = patternInput$$480.fields[1];
  const allDeclaredTypars$$7 = (0, _List.append)(RecursiveBindingInfo$$get_EnclosingDeclaredTypars(rbinfo$$1), declaredTypars$$27);
  (0, _ConstraintSolver.CheckDeclaredTypars)(denv$$28, cenv$$183.css, m$$342, rigidCopyOfDeclaredTypars$$2, declaredTypars$$27);
  const memFlagsOpt$$4 = (0, _Option.defaultArg)((0, _tast.Val$$get_MemberInfo)(vspec$$8), null, function mapping$$120(memInfo$$1) {
    return memInfo$$1.MemberFlags;
  });
  let isCtor$$2;

  if (memFlagsOpt$$4 != null) {
    const memberFlags$$33 = memFlagsOpt$$4;
    isCtor$$2 = (0, _Util.equals)(memberFlags$$33.MemberKind, new _ast.MemberKind(1, "Constructor"));
  } else {
    isCtor$$2 = false;
  }

  GeneralizationHelpers$$$CheckDeclaredTyparsPermitted(memFlagsOpt$$4, declaredTypars$$27, m$$342);
  const canInferTypars$$6 = CanInferExtraGeneralizedTyparsForRecBinding(pgrbind$$11);
  const tau$$13 = (0, _tast.Val$$get_TauType)(vspec$$8);
  const maxInferredTypars$$3 = (0, _TastOps.freeInTypeLeftToRight)(cenv$$183.g, false, tau$$13);
  const canGeneralizeConstrained = GeneralizationHelpers$$$CanGeneralizeConstrainedTyparsForDecl(RecursiveBindingInfo$$get_DeclKind(rbinfo$$1));
  const generalizedTypars$$27 = GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars(cenv$$183, denv$$28, m$$342, freeInEnv$$10, canInferTypars$$6, canGeneralizeConstrained, inlineFlag$$16, expr$$114, allDeclaredTypars$$7, maxInferredTypars$$3, tau$$13, isCtor$$2);
  return generalizedTypars$$27;
}

function TcLetrecComputeSupportForBinding(cenv$$184, pgrbind$$12) {
  const rbinfo$$2 = pgrbind$$12.RecBindingInfo;
  const allDeclaredTypars$$8 = (0, _List.append)(RecursiveBindingInfo$$get_EnclosingDeclaredTypars(rbinfo$$2), RecursiveBindingInfo$$get_DeclaredTypars(rbinfo$$2));
  const maxInferredTypars$$4 = (0, _TastOps.freeInTypeLeftToRight)(cenv$$184.g, false, (0, _tast.Val$$get_TauType)(RecursiveBindingInfo$$get_Val(rbinfo$$2)));
  return (0, _List.append)(allDeclaredTypars$$8, maxInferredTypars$$4);
}

function TcLetrecGeneralizeBinding(cenv$$185, denv$$29, generalizedTypars$$28, pgrbind$$13) {
  const vspec$$9 = pgrbind$$13.RecBindingInfo.fields[4];
  const vis$$27 = pgrbind$$13.RecBindingInfo.fields[11];
  const partialValReprInfo$$9 = pgrbind$$13.RecBindingInfo.fields[6];
  const memberInfoOpt$$10 = pgrbind$$13.RecBindingInfo.fields[7];
  const flex$$21 = pgrbind$$13.RecBindingInfo.fields[5];
  const enclosingDeclaredTypars$$13 = pgrbind$$13.RecBindingInfo.fields[2];
  const declKind$$22 = pgrbind$$13.RecBindingInfo.fields[13];
  const isFixed$$2 = pgrbind$$13.CheckedBinding.fields[13];
  const inlineFlag$$17 = pgrbind$$13.CheckedBinding.fields[0];
  const expr$$115 = pgrbind$$13.CheckedBinding.fields[6];
  const compgen$$11 = pgrbind$$13.CheckedBinding.fields[11];
  const argAttribs$$7 = pgrbind$$13.CheckedBinding.fields[7];

  if (isFixed$$2) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFixedNotAllowed)(), (0, _TastOps.Expr$002Eget_Range)(expr$$115)));
  }

  const patternInput$$483 = (0, _tast.Val$$get_TypeScheme)(vspec$$9);
  const pvalscheme1 = new PrelimValScheme1(0, "PrelimValScheme1", (0, _tast.Val$$get_Id)(vspec$$9), flex$$21, patternInput$$483[1], partialValReprInfo$$9, memberInfoOpt$$10, false, inlineFlag$$17, new _tast.ValBaseOrThisInfo(2, "NormalVal"), argAttribs$$7, vis$$27, compgen$$11);
  const pvalscheme2 = GeneralizeVal(cenv$$185, denv$$29, enclosingDeclaredTypars$$13, generalizedTypars$$28, pvalscheme1);
  const valscheme$$4 = UseCombinedArity(cenv$$185.g, declKind$$22, expr$$115, pvalscheme2);
  AdjustRecType(cenv$$185, vspec$$9, valscheme$$4);
  return new PostGeneralizationRecursiveBinding(valscheme$$4, pgrbind$$13.CheckedBinding, pgrbind$$13.RecBindingInfo);
}

function TcLetrecComputeCtorSafeThisValBind(cenv$$186, safeThisValOpt$$7) {
  if (safeThisValOpt$$7 != null) {
    const v$$63 = safeThisValOpt$$7;
    const m$$343 = (0, _tast.Val$$get_Range)(v$$63);
    const ty$$126 = (0, _TastOps.destRefCellTy)(cenv$$186.g, (0, _tast.Val$$get_Type)(v$$63));
    return (0, _TastOps.mkCompGenBind)(v$$63, (0, _TastOps.mkRefCell)(cenv$$186.g, m$$343, ty$$126, (0, _TastOps.mkNull)(m$$343, ty$$126)));
  } else {
    return null;
  }
}

function MakeCheckSafeInitField(g$$42, tinst$$22, thisValOpt, rfref$$4, reqExpr, expr$$116) {
  const m$$344 = (0, _TastOps.Expr$002Eget_Range)(expr$$116);
  let availExpr;

  if (thisValOpt != null) {
    const thisVar = thisValOpt;
    availExpr = (0, _TastOps.mkRecdFieldGetViaExprAddr)((0, _TastOps.exprForVal)(m$$344, thisVar), rfref$$4, tinst$$22, m$$344);
  } else {
    availExpr = (0, _TastOps.mkStaticRecdFieldGet)(rfref$$4, tinst$$22, m$$344);
  }

  const failureExpr = thisValOpt != null ? (0, _TastOps.mkCallFailInit)(g$$42, m$$344) : (0, _TastOps.mkCallFailStaticInit)(g$$42, m$$344);
  return (0, _TastOps.mkCompGenSequential)(m$$344, (0, _TastOps.mkIfThen)(g$$42, m$$344, (0, _TastOps.mkILAsmClt)(g$$42, m$$344, availExpr, reqExpr), failureExpr), expr$$116);
}

function MakeCheckSafeInit(g$$43, tinst$$23, safeInitInfo$$8, reqExpr$$1, expr$$117) {
  if (safeInitInfo$$8.tag === 1) {
    return expr$$117;
  } else {
    const rfref$$5 = safeInitInfo$$8.fields[0];
    return MakeCheckSafeInitField(g$$43, tinst$$23, null, rfref$$5, reqExpr$$1, expr$$117);
  }
}

function TcLetrecAdjustMemberForSpecialVals(cenv$$187, pgrbind$$14) {
  const vspec$$10 = pgrbind$$14.RecBindingInfo.fields[4];
  const safeThisValOpt$$8 = pgrbind$$14.RecBindingInfo.fields[9];
  const safeInitInfo$$9 = pgrbind$$14.RecBindingInfo.fields[10];
  const baseValOpt$$9 = pgrbind$$14.RecBindingInfo.fields[8];
  const expr$$118 = CheckedBindingInfo$$get_Expr(pgrbind$$14.CheckedBinding);
  const spBind$$17 = CheckedBindingInfo$$get_SeqPoint(pgrbind$$14.CheckedBinding);
  let expr$$119;
  const matchValue$$207 = TcLetrecComputeCtorSafeThisValBind(cenv$$187, safeThisValOpt$$8);

  if (matchValue$$207 != null) {
    const bind$$12 = matchValue$$207;
    const m$$345 = (0, _TastOps.Expr$002Eget_Range)(expr$$118);
    const patternInput$$485 = (0, _TastOps.stripTopLambda)(expr$$118, (0, _tast.Val$$get_Type)(vspec$$10));
    expr$$119 = (0, _TastOps.mkMultiLambdas)(m$$345, patternInput$$485[0], patternInput$$485[1], (0, _TastOps.mkLetBind)(m$$345, bind$$12, patternInput$$485[2]), patternInput$$485[3]);
  } else {
    expr$$119 = expr$$118;
  }

  let expr$$120;

  if (((0, _tast.Val$$get_IsInstanceMember)(vspec$$10) ? !(0, _tast.Val$$get_IsExtensionMember)(vspec$$10) : false) ? !(0, _tast.Val$$get_IsConstructor)(vspec$$10) : false) {
    if (safeInitInfo$$9.tag === 1) {
      expr$$120 = expr$$119;
    } else {
      const rfref$$6 = safeInitInfo$$9.fields[0];
      const m$$346 = (0, _TastOps.Expr$002Eget_Range)(expr$$119);
      const patternInput$$486 = (0, _TastOps.stripTopLambda)(expr$$119, (0, _tast.Val$$get_Type)(vspec$$10));
      const thisVar$$1 = (0, _List.head)((0, _List.head)(patternInput$$486[1]));
      const thisTypeInst = (0, _TastOps.argsOfAppTy)(cenv$$187.g, (0, _tast.Val$$get_Type)(thisVar$$1));
      const newBody = MakeCheckSafeInitField(cenv$$187.g, thisTypeInst, thisVar$$1, rfref$$6, (0, _TastOps.mkOne)(cenv$$187.g, m$$346), patternInput$$486[2]);
      expr$$120 = (0, _TastOps.mkMultiLambdas)(m$$346, patternInput$$486[0], patternInput$$486[1], newBody, patternInput$$486[3]);
    }
  } else {
    expr$$120 = expr$$119;
  }

  let expr$$121;

  if (baseValOpt$$9 == null) {
    expr$$121 = expr$$120;
  } else {
    const m$$347 = (0, _TastOps.Expr$002Eget_Range)(expr$$120);
    const patternInput$$487 = (0, _TastOps.stripTopLambda)(expr$$120, (0, _tast.Val$$get_Type)(vspec$$10));
    expr$$121 = (0, _TastOps.mkMemberLambdas)(m$$347, patternInput$$487[0], null, baseValOpt$$9, patternInput$$487[1], patternInput$$487[2], patternInput$$487[3]);
  }

  return new PostBindCtorThisVarRefCellRecursiveBinding(pgrbind$$14.ValScheme, new _tast.Binding(0, "TBind", vspec$$10, expr$$121, spBind$$17));
}

function FixupLetrecBind(cenv$$188, denv$$30, generalizedTyparsForRecursiveBlock, bind$$13) {
  const vspec$$11 = bind$$13.Binding.fields[0];
  const spBind$$18 = bind$$13.Binding.fields[2];
  const expr$$122 = bind$$13.Binding.fields[1];

  if ((0, _tast.Val$$get_MemberInfo)(vspec$$11) != null) {
    const matchValue$$209 = (0, _TastOps.PartitionValTyparsForApparentEnclosingType)(cenv$$188.g, vspec$$11);

    if (matchValue$$209 == null) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMemberIsNotSufficientlyGeneric)(), (0, _tast.Val$$get_Range)(vspec$$11)));
    } else {
      const parentTypars = matchValue$$209[0];
      const memberParentTypars = matchValue$$209[1];
      (0, _SignatureConformance.Checker$$CheckTypars)((0, _SignatureConformance.Checker$$$$002Ector$$675B03B6)(cenv$$188.g, cenv$$188.amap, denv$$30, (0, _TastOps.SignatureRepackageInfo$$$get_Empty)(), false), (0, _tast.Val$$get_Range)(vspec$$11), (0, _TastOps.TypeEquivEnv$$$get_Empty)(), memberParentTypars, parentTypars);
    }
  }

  const fixupPoints$$1 = GetAllUsesOfRecValue(cenv$$188, vspec$$11);
  AdjustAndForgetUsesOfRecValue(cenv$$188, (0, _tast.mkLocalValRef)(vspec$$11), bind$$13.ValScheme);
  const expr$$123 = (0, _TastOps.mkGenericBindRhs)(cenv$$188.g, (0, _tast.Val$$get_Range)(vspec$$11), generalizedTyparsForRecursiveBlock, ValScheme$$get_TypeScheme(bind$$13.ValScheme), expr$$122);
  return new PreInitializationGraphEliminationBinding(fixupPoints$$1, new _tast.Binding(0, "TBind", vspec$$11, expr$$123, spBind$$18));
}

function unionGeneralizedTypars(typarSets) {
  return (0, _List.foldBack)(function (l1$$1, l2$$1) {
    return (0, _lib.ListSet$$$unionFavourRight)(_tast.typarEq, l1$$1, l2$$1);
  }, typarSets, (0, _Types.L)());
}

function TcLetrec(overridesOK$$6, cenv$$189, env$$254, tpenv$$357, binds$$19, bindsm$$3, scopem$$15) {
  const binds$$20 = (0, _List.map)(function mapping$$121(_arg74) {
    const c$$35 = _arg74.fields[2];
    const bind$$14 = _arg74.fields[3];
    const b$$57 = _arg74.fields[1];
    const a$$55 = _arg74.fields[0];
    return new NormalizedRecBindingDefn(0, "NormalizedRecBindingDefn", a$$55, b$$57, c$$35, BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(1, "ValOrMemberBinding"), cenv$$189, env$$254, bind$$14));
  }, binds$$19);
  const patternInput$$489 = AnalyzeAndMakeAndPublishRecursiveValues(overridesOK$$6, cenv$$189, env$$254, tpenv$$357, binds$$20);
  const tpenv$$358 = patternInput$$489[2][0];
  const envRec$$4 = AddLocalVals(cenv$$189.tcSink, scopem$$15, patternInput$$489[1], env$$254);
  const uncheckedRecBindsTable$$3 = (0, _Map.ofList)((0, _List.map)(function mapping$$122(rbind$$1) {
    return [(0, _tast.Val$$get_Stamp)(RecursiveBindingInfo$$get_Val(rbind$$1.RecBindingInfo)), rbind$$1];
  }, patternInput$$489[0]), {
    Compare: _Long.compare
  });
  const patternInput$$490 = (0, _List.fold)(function folder$$14(tupledArg$$90, rbind$$2) {
    return TcLetrecBinding(cenv$$189, envRec$$4, scopem$$15, (0, _Types.L)(), null, tupledArg$$90[0], tupledArg$$90[1], tupledArg$$90[2], tupledArg$$90[3], tupledArg$$90[4], rbind$$2);
  }, [env$$254, (0, _Types.L)(), (0, _Types.L)(), tpenv$$358, uncheckedRecBindsTable$$3], patternInput$$489[0]);
  const generalizedRecBinds$$5 = (0, _List.sortBy)(function projection$$4(pgrbind$$15) {
    return RecursiveBindingInfo$$get_Index(pgrbind$$15.RecBindingInfo);
  }, patternInput$$490[1], {
    Compare: _Util.comparePrimitives
  });
  const generalizedTyparsForRecursiveBlock$$1 = unionGeneralizedTypars((0, _List.map)(function mapping$$123(pgrbind$$16) {
    return PostGeneralizationRecursiveBinding$$get_GeneralizedTypars(pgrbind$$16);
  }, generalizedRecBinds$$5));
  const vxbinds = (0, _List.map)(function mapping$$124(pgrbind$$17) {
    return TcLetrecAdjustMemberForSpecialVals(cenv$$189, pgrbind$$17);
  }, generalizedRecBinds$$5);
  const vxbinds$$1 = (0, _List.map)(function mapping$$125(bind$$15) {
    return FixupLetrecBind(cenv$$189, TcEnv$$get_DisplayEnv(env$$254), generalizedTyparsForRecursiveBlock$$1, bind$$15);
  }, vxbinds);
  let binds$$21;
  const bindsWithoutLaziness = vxbinds$$1;
  let mustHaveArity$$1;

  if (patternInput$$489[0].tail != null) {
    const rbind$$3 = patternInput$$489[0].head;
    mustHaveArity$$1 = DeclKind$$$MustHaveArity$$Z6CE1C8BD(RecursiveBindingInfo$$get_DeclKind(rbind$$3.RecBindingInfo));
  } else {
    mustHaveArity$$1 = false;
  }

  const results = EliminateInitializationGraphs(function (_arg75) {
    throw new Error("unreachable 2 - no type definitions in recursivve group");
  }, function (_arg77, _arg76) {
    throw new Error("unreachable 3 - no type definitions in recursivve group");
  }, function (x$$126) {
    return x$$126;
  }, function (morpher, oldBinds) {
    return morpher(oldBinds);
  }, cenv$$189.g, mustHaveArity$$1, TcEnv$$get_DisplayEnv(env$$254), (0, _Types.L)(new MutRecShape$00605(1, "Lets", bindsWithoutLaziness), (0, _Types.L)()), bindsm$$3);
  var $target$$527, newBinds, newBinds2, newBinds$$1;

  if (results.tail != null) {
    if (results.head.tag === 1) {
      if (results.tail.tail == null) {
        $target$$527 = 1;
        newBinds$$1 = results.head.fields[0];
      } else if (results.tail.head.tag === 1) {
        if (results.tail.tail.tail == null) {
          $target$$527 = 0;
          newBinds = results.head.fields[0];
          newBinds2 = results.tail.head.fields[0];
        } else {
          $target$$527 = 2;
        }
      } else {
        $target$$527 = 2;
      }
    } else {
      $target$$527 = 2;
    }
  } else {
    $target$$527 = 2;
  }

  switch ($target$$527) {
    case 0:
      {
        binds$$21 = (0, _List.append)(newBinds, newBinds2);
        break;
      }

    case 1:
      {
        binds$$21 = newBinds$$1;
        break;
      }

    case 2:
      {
        throw new Error("unreachable 4 - gave a Lets shape, expected at most one pre-lets shape back");
        break;
      }
  }

  const envbody = AddLocalVals(cenv$$189.tcSink, scopem$$15, patternInput$$489[1], env$$254);
  return [binds$$21, envbody, patternInput$$490[3]];
}

function TcAndPublishValSpec(cenv$$190, env$$255, containerInfo$$4, declKind$$23, memFlagsOpt$$5, tpenv$$361, valSpfn$$2) {
  const vis$$28 = valSpfn$$2.fields[8];
  const synTypars$$4 = valSpfn$$2.fields[2].fields[0];
  const synCanInferTypars = valSpfn$$2.fields[2].fields[1];
  const synAttrs$$1 = valSpfn$$2.fields[0];
  const mutableFlag = valSpfn$$2.fields[6];
  const m$$348 = valSpfn$$2.fields[10];
  const literalExprOpt = valSpfn$$2.fields[9];
  const isInline$$7 = valSpfn$$2.fields[5];
  const doc$$6 = valSpfn$$2.fields[7];
  GeneralizationHelpers$$$CheckDeclaredTyparsPermitted(memFlagsOpt$$5, synTypars$$4, m$$348);
  const canInferTypars$$7 = GeneralizationHelpers$$$ComputeCanInferExtraGeneralizableTypars(ContainerInfo$$get_ParentRef(containerInfo$$4), synCanInferTypars, memFlagsOpt$$5);
  const attrTgt$$14 = DeclKind$$$AllowedAttribTargets(memFlagsOpt$$5, declKind$$23) | 0;
  const attrs$$15 = TcAttributes(cenv$$190, env$$255, attrTgt$$14, synAttrs$$1);
  const newOk$$18 = canInferTypars$$7 ? new ImplictlyBoundTyparsAllowed(1, "NewTyparsOK") : new ImplictlyBoundTyparsAllowed(2, "NoNewTypars");
  const patternInput$$491 = TcValSpec(cenv$$190, env$$255, declKind$$23, newOk$$18, containerInfo$$4, memFlagsOpt$$5, null, tpenv$$361, valSpfn$$2, attrs$$15);
  const denv$$32 = TcEnv$$get_DisplayEnv(env$$255);
  return (0, _List.mapFold)(function mapping$$127(tpenv$$363, valSpecResult) {
    const ty$$127 = valSpecResult.fields[5];
    const partialValReprInfo$$10 = valSpecResult.fields[6];
    const memberInfoOpt$$11 = valSpecResult.fields[1];
    const id$$85 = valSpecResult.fields[2];
    const enclosingDeclaredTypars$$14 = valSpecResult.fields[3];
    const declaredTypars$$28 = valSpecResult.fields[4];
    const declKind$$24 = valSpecResult.fields[7];
    const altActualParent$$5 = valSpecResult.fields[0];
    const inlineFlag$$18 = ComputeInlineFlag((0, _Option.defaultArg)(memberInfoOpt$$11, null, function mapping$$126(_arg1$$42) {
      const memberInfo$$9 = _arg1$$42.fields[0];
      return memberInfo$$9.MemberFlags;
    }), isInline$$7, mutableFlag, m$$348);
    const freeInType = (0, _TastOps.freeInTypeLeftToRight)(cenv$$190.g, false, ty$$127);
    const allDeclaredTypars$$9 = (0, _List.append)(enclosingDeclaredTypars$$14, declaredTypars$$28);
    const flex$$22 = new ExplicitTyparInfo(0, "ExplicitTyparInfo", declaredTypars$$28, declaredTypars$$28, synCanInferTypars);
    const generalizedTypars$$29 = GeneralizationHelpers$$$ComputeAndGeneralizeGenericTypars(cenv$$190, denv$$32, (0, _ast.Ident$$get_idRange)(id$$85), _TastOps.emptyFreeTypars, canInferTypars$$7, new GeneralizeConstrainedTyparOptions(0, "CanGeneralizeConstrainedTypars"), inlineFlag$$18, null, allDeclaredTypars$$9, freeInType, ty$$127, false);
    const valscheme1 = new PrelimValScheme1(0, "PrelimValScheme1", id$$85, flex$$22, ty$$127, partialValReprInfo$$10, memberInfoOpt$$11, mutableFlag, inlineFlag$$18, new _tast.ValBaseOrThisInfo(2, "NormalVal"), noArgOrRetAttribs, vis$$28, false);
    const valscheme2 = GeneralizeVal(cenv$$190, denv$$32, enclosingDeclaredTypars$$14, generalizedTypars$$29, valscheme1);
    const tpenv$$364 = HideUnscopedTypars(generalizedTypars$$29, tpenv$$363);
    const valscheme$$5 = BuildValScheme(declKind$$24, partialValReprInfo$$10, valscheme2);
    let konst$$6;

    if (literalExprOpt != null) {
      const e$$105 = literalExprOpt;
      const patternInput$$492 = TcLiteral(cenv$$190, ty$$127, env$$255, tpenv$$364, attrs$$15, e$$105);

      if (!patternInput$$492[0]) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcValueInSignatureRequiresLiteralAttribute)(), (0, _ast.SynExpr$$get_Range)(e$$105)));
      }

      konst$$6 = patternInput$$492[1];
    } else {
      const hasLiteralAttr$$2 = (0, _TastOps.HasFSharpAttribute)(cenv$$190.g, (0, _TcGlobals.TcGlobals$$get_attrib_LiteralAttribute)(cenv$$190.g), attrs$$15);

      if (hasLiteralAttr$$2) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLiteralAttributeRequiresConstantValue)(), m$$348));
      }

      konst$$6 = null;
    }

    const vspec$$12 = MakeAndPublishVal(cenv$$190, env$$255, altActualParent$$5, true, declKind$$24, new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), valscheme$$5, attrs$$15, (0, _ast.PreXmlDoc$$ToXmlDoc)(doc$$6), konst$$6, false);
    return [vspec$$12, tpenv$$364];
  }, patternInput$$491[1], patternInput$$491[0]);
}

const NotUpperCaseConstructor = (0, _Types.declare)(function NotUpperCaseConstructor(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.NotUpperCaseConstructor = NotUpperCaseConstructor;

function CheckNamespaceModuleOrTypeName(g$$44, id$$86) {
  if (!(0, _TcGlobals.TcGlobals$$get_compilingFslib)(g$$44) ? (0, _String.indexOfAny)((0, _ast.Ident$$get_idText)(id$$86), _PrettyNaming.IllegalCharactersInTypeAndNamespaceNames) !== -1 : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidNamespaceModuleTypeUnionName)(), (0, _ast.Ident$$get_idRange)(id$$86)));
  }
}

function CheckDuplicates(idf, k$$3, elems$$3) {
  (0, _List.iterateIndexed)(function action$$38(i$$29, uc1) {
    (0, _List.iterateIndexed)(function action$$37(j$$4, uc2) {
      const id1$$1 = idf(uc1);
      const id2$$2 = idf(uc2);

      if (j$$4 > i$$29 ? (0, _ast.Ident$$get_idText)(id1$$1) === (0, _ast.Ident$$get_idText)(id2$$2) : false) {
        (0, _ErrorLogger.errorR)(new _tast.Duplicate(k$$3, (0, _ast.Ident$$get_idText)(id1$$1), (0, _ast.Ident$$get_idRange)(id1$$1)));
      }
    }, elems$$3);
  }, elems$$3);
  return elems$$3;
}

function TcRecdUnionAndEnumDeclarations$$$CombineReprAccess(parent$$2, vis$$29) {
  if (parent$$2.tag === 0) {
    const tcref$$40 = parent$$2.fields[0];
    return (0, _tast.combineAccess)(vis$$29, (0, _tast.EntityRef$$get_TypeReprAccessibility)(tcref$$40));
  } else {
    return vis$$29;
  }
}

function TcRecdUnionAndEnumDeclarations$$$MakeRecdFieldSpec(_cenv$$3, env$$256, parent$$3, isStatic$$1, konst$$7, ty$0027$$9, attrsForProperty, attrsForField, id$$87, nameGenerated, isMutable$$16, vol, xmldoc, vis$$30, m$$349) {
  const patternInput$$493 = ComputeAccessAndCompPath(env$$256, null, m$$349, vis$$30, null, parent$$3);
  const vis$$32 = TcRecdUnionAndEnumDeclarations$$$CombineReprAccess(parent$$3, patternInput$$493[0]);
  return (0, _tast.NewRecdField)(isStatic$$1, konst$$7, id$$87, nameGenerated, ty$0027$$9, isMutable$$16, vol, attrsForProperty, attrsForField, xmldoc, vis$$32, false);
}

function TcRecdUnionAndEnumDeclarations$$$TcFieldDecl(cenv$$191, env$$257, parent$$4, isIncrClass$$2, tpenv$$365, isStatic$$2, synAttrs$$2, id$$88, nameGenerated$$1, ty$$128, isMutable$$17, xmldoc$$1, vis$$33, m$$350) {
  var tcref$$41;
  const patternInput$$494 = TcAttributesWithPossibleTargets(false, cenv$$191, env$$257, AttributeTargets$$$FieldDecl, synAttrs$$2);
  const patternInput$$495 = (0, _List.partition)(function predicate$$55(tupledArg$$91) {
    return (tupledArg$$91[0] & 128) !== 0;
  }, patternInput$$494[0]);
  const attrsForProperty$$2 = (0, _List.map)(function (tuple$$31) {
    return tuple$$31[1];
  }, patternInput$$495[0]);
  const attrsForField$$2 = (0, _List.map)(function (tuple$$32) {
    return tuple$$32[1];
  }, patternInput$$495[1]);
  const patternInput$$496 = TcTypeAndRecover(cenv$$191, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$257, tpenv$$365, ty$$128);
  const zeroInit = (0, _TastOps.HasFSharpAttribute)(cenv$$191.g, (0, _TcGlobals.TcGlobals$$get_attrib_DefaultValueAttribute)(cenv$$191.g), attrsForField$$2);
  const isVolatile$$1 = (0, _TastOps.HasFSharpAttribute)(cenv$$191.g, (0, _TcGlobals.TcGlobals$$get_attrib_VolatileFieldAttribute)(cenv$$191.g), attrsForField$$2);
  const isThreadStatic$$1 = (0, _TastOps.isThreadOrContextStatic)(cenv$$191.g, attrsForField$$2);

  if (isThreadStatic$$1 ? !zeroInit ? true : !isStatic$$2 : false) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcThreadStaticAndContextStaticMustBeStatic)(), m$$350));
  }

  if (isVolatile$$1) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcVolatileOnlyOnClassLetBindings)(), m$$350));
  }

  if (isIncrClass$$2 ? !zeroInit ? true : !isMutable$$17 : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUninitializedValFieldsMustBeMutable)(), m$$350));
  }

  if (isStatic$$2 ? (!zeroInit ? true : !isMutable$$17) ? true : !(0, _Util.equals)(vis$$33, new _ast.SynAccess(2, "Private")) : false) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticValFieldsMustBeMutableAndPrivate)(), m$$350));
  }

  const konst$$8 = zeroInit ? new _tast.Const(17, "Zero") : null;
  const rfspec = TcRecdUnionAndEnumDeclarations$$$MakeRecdFieldSpec(cenv$$191, env$$257, parent$$4, isStatic$$2, konst$$8, patternInput$$496[0], attrsForProperty$$2, attrsForField$$2, id$$88, nameGenerated$$1, isMutable$$17, isVolatile$$1, xmldoc$$1, vis$$33, m$$350);
  var $target$$531, tcref$$42;

  if (parent$$4.tag === 0) {
    if (tcref$$41 = parent$$4.fields[0], (0, _TastOps.useGenuineField)((0, _tast.EntityRef$$get_Deref)(tcref$$41), rfspec)) {
      $target$$531 = 0;
      tcref$$42 = parent$$4.fields[0];
    } else {
      $target$$531 = 1;
    }
  } else {
    $target$$531 = 1;
  }

  switch ($target$$531) {
    case 0:
      {
        TcAttributesWithPossibleTargets(false, cenv$$191, env$$257, AttributeTargets$$$FieldDeclRestricted, synAttrs$$2);
        break;
      }
  }

  return rfspec;
}

function TcRecdUnionAndEnumDeclarations$$$TcAnonFieldDecl(cenv$$192, env$$258, parent$$5, tpenv$$366, nm$$66, _arg1$$44) {
  const xmldoc$$2 = _arg1$$44.fields[5];
  const vis$$34 = _arg1$$44.fields[6];
  const ty$$129 = _arg1$$44.fields[3];
  const m$$351 = _arg1$$44.fields[7];
  const isStatic$$3 = _arg1$$44.fields[1];
  const isMutable$$18 = _arg1$$44.fields[4];
  const idOpt = _arg1$$44.fields[2];
  const attribs$$3 = _arg1$$44.fields[0];
  let id$$90;

  if (idOpt != null) {
    const id$$89 = idOpt;
    id$$90 = id$$89;
  } else {
    id$$90 = (0, _ast.mkSynId)(m$$351, nm$$66);
  }

  const f$$54 = TcRecdUnionAndEnumDeclarations$$$TcFieldDecl(cenv$$192, env$$258, parent$$5, false, tpenv$$366, isStatic$$3, attribs$$3, id$$90, idOpt == null, ty$$129, isMutable$$18, (0, _ast.PreXmlDoc$$ToXmlDoc)(xmldoc$$2), vis$$34, m$$351);

  if (idOpt != null) {
    const id$$91 = idOpt;
    const item$$52 = new _NameResolution.Item(20, "ArgName", id$$91, (0, _tast.RecdField$$get_FormalType)(f$$54), null);
    (0, _NameResolution.CallNameResolutionSink)(cenv$$192.tcSink, (0, _ast.Ident$$get_idRange)(id$$91), TcEnv$$get_NameEnv(env$$258), item$$52, item$$52, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$258), TcEnv$$get_AccessRights(env$$258));
  }

  return f$$54;
}

function TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecl(cenv$$193, env$$259, parent$$6, isIncrClass$$3, tpenv$$367, _arg1$$45) {
  const xmldoc$$3 = _arg1$$45.fields[5];
  const vis$$35 = _arg1$$45.fields[6];
  const ty$$130 = _arg1$$45.fields[3];
  const m$$352 = _arg1$$45.fields[7];
  const isStatic$$4 = _arg1$$45.fields[1];
  const isMutable$$19 = _arg1$$45.fields[4];
  const id$$92 = _arg1$$45.fields[2];
  const attribs$$4 = _arg1$$45.fields[0];

  if (id$$92 != null) {
    const id$$93 = id$$92;
    return TcRecdUnionAndEnumDeclarations$$$TcFieldDecl(cenv$$193, env$$259, parent$$6, isIncrClass$$3, tpenv$$367, isStatic$$4, attribs$$4, id$$93, false, ty$$130, isMutable$$19, (0, _ast.PreXmlDoc$$ToXmlDoc)(xmldoc$$3), vis$$35, m$$352);
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldRequiresName)(), m$$352));
  }
}

function TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecls(cenv$$194, env$$260, parent$$7, isIncrClass$$4, tpenv$$368, fields$$2) {
  return (0, _List.map)(function mapping$$128(arg50$0040$$4) {
    return TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecl(cenv$$194, env$$260, parent$$7, isIncrClass$$4, tpenv$$368, arg50$0040$$4);
  }, fields$$2);
}

function TcRecdUnionAndEnumDeclarations$$$CheckUnionCaseName(cenv$$195, realUnionCaseName, m$$353) {
  CheckNamespaceModuleOrTypeName(cenv$$195.g, (0, _ast.mkSynId)(m$$353, realUnionCaseName));

  if ((!(0, _illib.String$$$isUpper)(realUnionCaseName) ? realUnionCaseName !== _PrettyNaming.opNameCons : false) ? realUnionCaseName !== _PrettyNaming.opNameNil : false) {
    (0, _ErrorLogger.errorR)(new NotUpperCaseConstructor(m$$353));
  }
}

function TcRecdUnionAndEnumDeclarations$$$ValidateFieldNames(synFields, tastFields) {
  const seen = new Map([]);
  (0, _Seq.iterate)(function (forLoopVar$$5) {
    const patternInput$$497 = (0, _Util.tryGetValue)(seen, (0, _tast.RecdField$$get_Name)(forLoopVar$$5[1]), null);

    if (patternInput$$497[0]) {
      const matchValue$$210 = [forLoopVar$$5[0], patternInput$$497[1]];
      var $target$$532, id$$94, id$$95;

      if (matchValue$$210[0].fields[2] == null) {
        if (matchValue$$210[1].fields[2] != null) {
          $target$$532 = 1;
          id$$95 = matchValue$$210[1].fields[2];
        } else {
          $target$$532 = 2;
        }
      } else if (matchValue$$210[1].fields[2] == null) {
        $target$$532 = 1;
        id$$95 = matchValue$$210[0].fields[2];
      } else {
        $target$$532 = 0;
        id$$94 = matchValue$$210[0].fields[2];
      }

      switch ($target$$532) {
        case 0:
          {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldNameIsUsedModeThanOnce$$Z721C83C5)((0, _ast.Ident$$get_idText)(id$$94)), (0, _ast.Ident$$get_idRange)(id$$94)));
            break;
          }

        case 1:
          {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldNameConflictsWithGeneratedNameForAnonymousField$$Z721C83C5)((0, _ast.Ident$$get_idText)(id$$95)), (0, _ast.Ident$$get_idRange)(id$$95)));
            break;
          }
      }
    } else {
      seen.set((0, _tast.RecdField$$get_Name)(forLoopVar$$5[1]), forLoopVar$$5[0]);
    }
  }, (0, _List.zip)(synFields, tastFields));
}

function TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecl(cenv$$196, env$$261, parent$$8, thisTy$$9, tpenv$$369, _arg1$$46) {
  const xmldoc$$4 = _arg1$$46.fields[3];
  const vis$$36 = _arg1$$46.fields[4];
  const synAttrs$$3 = _arg1$$46.fields[0];
  const m$$354 = _arg1$$46.fields[5];
  const id$$96 = _arg1$$46.fields[1];
  const args$$88 = _arg1$$46.fields[2];
  const attrs$$17 = TcAttributes(cenv$$196, env$$261, AttributeTargets$$$UnionCaseDecl, synAttrs$$3);
  const patternInput$$498 = ComputeAccessAndCompPath(env$$261, null, m$$354, vis$$36, null, parent$$8);
  const vis$$38 = TcRecdUnionAndEnumDeclarations$$$CombineReprAccess(parent$$8, patternInput$$498[0]);
  const realUnionCaseName$$1 = (0, _ast.Ident$$get_idText)(id$$96) === _PrettyNaming.opNameCons ? "Cons" : (0, _ast.Ident$$get_idText)(id$$96) === _PrettyNaming.opNameNil ? "Empty" : (0, _ast.Ident$$get_idText)(id$$96);

  if (realUnionCaseName$$1 === "Tags") {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnionCaseNameConflictsWithGeneratedType$$Z384F8060)(realUnionCaseName$$1, "Tags"), m$$354));
  }

  TcRecdUnionAndEnumDeclarations$$$CheckUnionCaseName(cenv$$196, realUnionCaseName$$1, (0, _ast.Ident$$get_idRange)(id$$96));

  const mkName = function mkName(nFields, i$$30) {
    if (nFields <= 1) {
      return "Item";
    } else {
      return "Item" + (0, _Util.int32ToString)(i$$30 + 1);
    }
  };

  let patternInput$$501;

  if (args$$88.tag === 1) {
    const ty$$131 = args$$88.fields[0][0];
    const arity$$1 = args$$88.fields[0][1];
    const patternInput$$499 = TcTypeAndRecover(cenv$$196, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$261, tpenv$$369, ty$$131);
    const patternInput$$500 = (0, _TastOps.GetTopTauTypeInFSharpForm)(cenv$$196.g, (0, _tast.ValReprInfo$$get_ArgInfos)(TranslatePartialArity((0, _Types.L)(), TranslateTopValSynInfo(m$$354, function tcAttributes$$4(attrTgt$$15, synAttribs$$9) {
      return TcAttributes(cenv$$196, env$$261, attrTgt$$15, synAttribs$$9);
    }, arity$$1))), patternInput$$499[0], m$$354);

    if ((0, _List.length)(patternInput$$500[0]) > 1) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIllegalFormForExplicitTypeDeclaration)(), m$$354));
    }

    const argtys$$19 = (0, _List.concat)(patternInput$$500[0]);
    const nFields$$2 = (0, _List.length)(argtys$$19) | 0;
    const rfields$$1 = (0, _List.mapIndexed)(function mapping$$130(i$$32, tupledArg$$92) {
      let id$$98;
      const matchValue$$211 = tupledArg$$92[1].Name;

      if (matchValue$$211 == null) {
        id$$98 = (0, _ast.mkSynId)(m$$354, mkName(nFields$$2, i$$32));
      } else {
        const id$$97 = matchValue$$211;
        id$$98 = id$$97;
      }

      return TcRecdUnionAndEnumDeclarations$$$MakeRecdFieldSpec(cenv$$196, env$$261, parent$$8, false, null, tupledArg$$92[0], (0, _Types.L)(), (0, _Types.L)(), id$$98, tupledArg$$92[1].Name == null, false, false, (0, _ast.XmlDoc$$$get_Empty)(), null, m$$354);
    }, argtys$$19);

    if (!(0, _TastOps.typeEquiv)(cenv$$196.g, patternInput$$500[1], thisTy$$9)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcReturnTypesForUnionMustBeSameAsType)(), m$$354));
    }

    patternInput$$501 = [rfields$$1, patternInput$$500[1]];
  } else {
    const flds$$6 = args$$88.fields[0];
    const nFields$$1 = (0, _List.length)(flds$$6) | 0;
    const rfields = (0, _List.mapIndexed)(function mapping$$129(i$$31, fld$$2) {
      return TcRecdUnionAndEnumDeclarations$$$TcAnonFieldDecl(cenv$$196, env$$261, parent$$8, tpenv$$369, mkName(nFields$$1, i$$31), fld$$2);
    }, flds$$6);
    TcRecdUnionAndEnumDeclarations$$$ValidateFieldNames(flds$$6, rfields);
    patternInput$$501 = [rfields, thisTy$$9];
  }

  return (0, _tast.NewUnionCase)(id$$96, realUnionCaseName$$1, patternInput$$501[0], patternInput$$501[1], attrs$$17, (0, _ast.PreXmlDoc$$ToXmlDoc)(xmldoc$$4), vis$$38);
}

function TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecls(cenv$$197, env$$262, parent$$9, thisTy$$10, tpenv$$370, unionCases) {
  const unionCases$0027 = (0, _List.map)(function mapping$$131(arg50$0040$$5) {
    return TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecl(cenv$$197, env$$262, parent$$9, thisTy$$10, tpenv$$370, arg50$0040$$5);
  }, unionCases);
  return CheckDuplicates(function idf$$1(uc$$1) {
    return uc$$1.Id;
  }, "union case", unionCases$0027);
}

function TcRecdUnionAndEnumDeclarations$$$TcEnumDecl(cenv$$198, env$$263, parent$$10, thisTy$$11, fieldTy$$3, _arg1$$47) {
  const xmldoc$$5 = _arg1$$47.fields[3];
  const v$$64 = _arg1$$47.fields[2];
  const synAttrs$$4 = _arg1$$47.fields[0];
  const m$$355 = _arg1$$47.fields[4];
  const id$$99 = _arg1$$47.fields[1];
  const attrs$$18 = TcAttributes(cenv$$198, env$$263, 256, synAttrs$$4);
  var $target$$533;

  switch (v$$64.tag) {
    case 18:
    case 19:
    case 16:
      $target$$533 = 0;
      break;

    default:
      $target$$533 = 1;
  }

  switch ($target$$533) {
    case 0:
      {
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidEnumerationLiteral)(), m$$355));
      }

    case 1:
      {
        const v$$65 = TcConst(cenv$$198, fieldTy$$3, m$$355, env$$263, v$$64);
        const patternInput$$502 = ComputeAccessAndCompPath(env$$263, null, m$$355, null, null, parent$$10);
        const vis$$40 = TcRecdUnionAndEnumDeclarations$$$CombineReprAccess(parent$$10, patternInput$$502[0]);

        if ((0, _ast.Ident$$get_idText)(id$$99) === "value__") {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNotValidEnumCaseName)(), (0, _ast.Ident$$get_idRange)(id$$99)));
        }

        return (0, _tast.NewRecdField)(true, v$$65, id$$99, false, thisTy$$11, false, false, (0, _Types.L)(), attrs$$18, (0, _ast.PreXmlDoc$$ToXmlDoc)(xmldoc$$5), vis$$40, false);
      }
  }
}

function TcRecdUnionAndEnumDeclarations$$$TcEnumDecls(cenv$$199, env$$264, parent$$11, thisTy$$12, enumCases) {
  const fieldTy$$4 = (0, _ConstraintSolver.NewInferenceType)();
  const enumCases$0027 = CheckDuplicates(function idf$$2(f$$56) {
    return (0, _tast.RecdField$$get_Id)(f$$56);
  }, "enum element", (0, _List.map)(function mapping$$132(arg50$0040$$6) {
    return TcRecdUnionAndEnumDeclarations$$$TcEnumDecl(cenv$$199, env$$264, parent$$11, thisTy$$12, fieldTy$$4, arg50$0040$$6);
  }, enumCases));
  return [fieldTy$$4, enumCases$0027];
}

function PublishInterface(cenv$$200, denv$$33, tcref$$43, m$$356, compgen$$12, ty$0027$$12) {
  if (!(0, _TastOps.isInterfaceTy)(cenv$$200.g, ty$0027$$12)) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeIsNotInterfaceType1$$Z721C83C5)((0, _NicePrint.minimalStringOfType)(denv$$33, ty$0027$$12)), m$$356));
  }

  const tcaug$$1 = (0, _tast.EntityRef$$get_TypeContents)(tcref$$43);

  if ((0, _TastOps.EntityRef$002EHasInterface)(tcref$$43, cenv$$200.g, ty$0027$$12)) {
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDuplicateSpecOfInterface)(), m$$356));
  }

  tcaug$$1.tcaug_interfaces = (0, _Types.L)([ty$0027$$12, compgen$$12, m$$356], tcaug$$1.tcaug_interfaces);
}

function TcAndPublishMemberSpec(cenv$$201, env$$265, containerInfo$$5, declKind$$25, tpenv$$371, memb) {
  switch (memb.tag) {
    case 2:
      {
        const m$$358 = memb.fields[1];
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInheritIllegalHere)(), m$$358));
      }

    case 4:
      {
        const m$$359 = memb.fields[1];
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypesCannotContainNestedTypes)(), m$$359));
      }

    case 0:
      {
        const valSpfn$$3 = memb.fields[0];
        const memberFlags$$34 = memb.fields[1];
        return TcAndPublishValSpec(cenv$$201, env$$265, containerInfo$$5, declKind$$25, memberFlags$$34, tpenv$$371, valSpfn$$3);
      }

    case 1:
      {
        return [(0, _Types.L)(), tpenv$$371];
      }

    default:
      {
        const m$$357 = memb.fields[1];
        return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFieldValIllegalHere)(), m$$357));
      }
  }
}

function TcTyconMemberSpecs(cenv$$202, env$$266, containerInfo$$6, declKind$$26, tpenv$$372, augSpfn) {
  const patternInput$$503 = (0, _List.mapFold)(function (tpenv$$373, memb$$1) {
    return TcAndPublishMemberSpec(cenv$$202, env$$266, containerInfo$$6, declKind$$26, tpenv$$373, memb$$1);
  }, tpenv$$372, augSpfn);
  return [(0, _List.concat)(patternInput$$503[0]), patternInput$$503[1]];
}

function TcModuleOrNamespaceLidAndPermitAutoResolve(tcSink$$16, env$$267, amap$$15, longId$$13) {
  const ad$$35 = env$$267.eAccessRights;

  if (longId$$13.tail != null) {
    const rest$$11 = longId$$13.tail;
    const id$$100 = longId$$13.head;
    const m$$360 = (0, _List.reduce)(_range.unionRanges, (0, _List.map)(function mapping$$133(id$$101) {
      return (0, _ast.Ident$$get_idRange)(id$$101);
    }, longId$$13));
    const matchValue$$212 = (0, _NameResolution.ResolveLongIndentAsModuleOrNamespace)(tcSink$$16, new _NameResolution.ResultCollectionSettings(0, "AllResults"), amap$$15, m$$360, true, new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$267.eNameResEnv, ad$$35, id$$100, rest$$11, true);

    if (matchValue$$212.tag === 1) {
      const err$$2 = matchValue$$212.fields[0];
      return (0, _illib.ResultOrExceptionModule$$$raze)(err$$2);
    } else {
      const res$$34 = matchValue$$212.fields[0];
      return new _illib.ResultOrException$00601(0, "Result", res$$34);
    }
  } else {
    return new _illib.ResultOrException$00601(0, "Result", (0, _Types.L)());
  }
}

function TcOpenDecl(tcSink$$17, g$$45, amap$$16, m$$361, scopem$$16, env$$268, longId$$14) {
  const modrefs$$6 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)(TcModuleOrNamespaceLidAndPermitAutoResolve(tcSink$$17, env$$268, amap$$16, longId$$14));
  (0, _Seq.iterate)(function (id$$102) {
    if ((0, _ast.Ident$$get_idText)(id$$102) !== "`global`") {
      CheckNamespaceModuleOrTypeName(g$$45, id$$102);
    }
  }, longId$$14);

  const IsPartiallyQualifiedNamespace = function IsPartiallyQualifiedNamespace(modref$$1) {
    const p$$30 = (0, _tast.EntityRef$$get_CompilationPath)(modref$$1).fields[1];
    let p$$31;

    if (p$$30.tail != null) {
      const t$$2 = p$$30.tail;
      const h$$1 = p$$30.head[0];
      p$$31 = (0, _String.startsWith)(h$$1, _ast.FsiDynamicModulePrefix, 4) ? t$$2 : p$$30;
    } else {
      p$$31 = (0, _Types.L)();
    }

    let isFSharpCoreSpecialCase;
    const matchValue$$213 = (0, _tast.ccuOfTyconRef)(modref$$1);

    if (matchValue$$213 != null) {
      const ccu$$5 = matchValue$$213;
      isFSharpCoreSpecialCase = ((0, _tast.ccuEq)(ccu$$5, (0, _TcGlobals.TcGlobals$$get_fslibCcu)(g$$45)) ? (0, _List.length)(p$$31) + 1 - 1 === (0, _List.length)(longId$$14) : false) ? (0, _List.item)(0, p$$31)[0] === "Microsoft" : false;
    } else {
      isFSharpCoreSpecialCase = false;
    }

    if ((0, _tast.EntityRef$$get_IsNamespace)(modref$$1) ? (0, _List.length)(p$$31) >= (0, _List.length)(longId$$14) : false) {
      return !isFSharpCoreSpecialCase;
    } else {
      return false;
    }
  };

  (0, _List.iterate)(function action$$39(tupledArg$$93) {
    if ((0, _tast.EntityRef$$get_IsModule)(tupledArg$$93[1]) ? (0, _TastOps.HasFSharpAttribute)(g$$45, (0, _TcGlobals.TcGlobals$$get_attrib_RequireQualifiedAccessAttribute)(g$$45), (0, _tast.EntityRef$$get_Attribs)(tupledArg$$93[1])) : false) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcModuleRequiresQualifiedAccess$$Z721C83C5)((0, _TastOps.fullDisplayTextOfModRef)(tupledArg$$93[1])), m$$361));
    }
  }, modrefs$$6);

  if (!(0, _List.exists)(function predicate$$56(tupledArg$$94) {
    if ((0, _tast.EntityRef$$get_IsModule)(tupledArg$$94[1])) {
      return !(0, _TastOps.HasFSharpAttribute)(g$$45, (0, _TcGlobals.TcGlobals$$get_attrib_RequireQualifiedAccessAttribute)(g$$45), (0, _tast.EntityRef$$get_Attribs)(tupledArg$$94[1]));
    } else {
      return false;
    }
  }, modrefs$$6)) {
    (0, _List.iterate)(function action$$40(tupledArg$$95) {
      if (IsPartiallyQualifiedNamespace(tupledArg$$95[1])) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOpenUsedWithPartiallyQualifiedPath$$Z721C83C5)((0, _TastOps.fullDisplayTextOfModRef)(tupledArg$$95[1])), m$$361));
      }
    }, modrefs$$6);
  }

  const modrefs$$7 = (0, _List.map)(function (tupledArg$$96) {
    return (0, _lib.p23)(tupledArg$$96[0], tupledArg$$96[1], tupledArg$$96[2]);
  }, modrefs$$6);
  (0, _List.iterate)(function action$$41(modref$$5) {
    (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckEntityAttributes)(g$$45, modref$$5, m$$361));
  }, modrefs$$7);
  const openDecl$$1 = (0, _NameResolution.OpenDeclaration$$$Create$$722A02CA)(longId$$14, modrefs$$7, scopem$$16, false);
  const env$$269 = OpenModulesOrNamespaces(tcSink$$17, g$$45, amap$$16, scopem$$16, false, env$$268, modrefs$$7, openDecl$$1);
  return env$$269;
}

const ParameterlessStructCtor = (0, _Types.declare)(function ParameterlessStructCtor(arg1) {
  this.Data0 = arg1;
}, _Types.FSharpException);
exports.ParameterlessStructCtor = ParameterlessStructCtor;
const IncrClassChecking$002EIncrClassBindingGroup = (0, _Types.declare)(function IncrClassChecking$002EIncrClassBindingGroup(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.IncrClassChecking$002EIncrClassBindingGroup = IncrClassChecking$002EIncrClassBindingGroup;
const IncrClassChecking$002EIncrClassCtorLhs = (0, _Types.declare)(function IncrClassChecking$002EIncrClassCtorLhs(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11) {
  this.TyconRef = arg1;
  this.InstanceCtorDeclaredTypars = arg2;
  this.StaticCtorValInfo = arg3;
  this.InstanceCtorVal = arg4;
  this.InstanceCtorValScheme = arg5;
  this.InstanceCtorArgs = arg6;
  this.InstanceCtorSafeThisValOpt = arg7;
  this.InstanceCtorSafeInitInfo = arg8;
  this.InstanceCtorBaseValOpt = arg9;
  this.InstanceCtorThisVal = arg10;
  this.NameGenerator = arg11;
}, _Types.Record);
exports.IncrClassChecking$002EIncrClassCtorLhs = IncrClassChecking$002EIncrClassCtorLhs;

function IncrClassChecking$002EIncrClassCtorLhs$$GetNormalizedInstanceCtorDeclaredTypars(ctorInfo$$7, cenv$$203, denv$$34, m$$362) {
  const ctorDeclaredTypars = ctorInfo$$7.InstanceCtorDeclaredTypars;
  const ctorDeclaredTypars$$1 = ChooseCanonicalDeclaredTyparsAfterInference(cenv$$203.g, denv$$34, ctorDeclaredTypars, m$$362);
  return ctorDeclaredTypars$$1;
}

function IncrClassChecking$$$TcImplictCtorLhs_Phase2A(cenv$$204, env$$270, tpenv$$375, tcref$$44, vis$$41, attrs$$19, spats$$7, thisIdOpt$$7, baseValOpt$$10, safeInitInfo$$10, m$$363, copyOfTyconTypars, objTy$$12, thisTy$$13) {
  var v$$66;
  let baseValOpt$$11;
  const matchValue$$214 = (0, _infos.GetSuperTypeOfType)(cenv$$204.g, cenv$$204.amap, m$$363, objTy$$12);

  if (matchValue$$214 == null) {
    baseValOpt$$11 = null;
  } else {
    const superTy$$4 = matchValue$$214;
    baseValOpt$$11 = MakeAndPublishBaseVal(cenv$$204, env$$270, baseValOpt$$10 != null ? (v$$66 = baseValOpt$$10, (0, _tast.Val$$get_Id)(v$$66)) : null, superTy$$4);
  }

  const env$$271 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), copyOfTyconTypars, env$$270);
  const patternInput$$505 = TcSimplePatsOfUnknownType(cenv$$204, true, new CheckConstraints(0, "CheckCxs"), env$$271, tpenv$$375, new _ast.SynSimplePats(0, "SimplePats", spats$$7, m$$363));
  const names$$20 = patternInput$$505[1][1];
  const patternInput$$506 = MakeSimpleVals(cenv$$204, env$$271, names$$20);

  if ((0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref$$44) ? spats$$7.tail == null : false) {
    (0, _ErrorLogger.errorR)(new ParameterlessStructCtor((0, _tast.EntityRef$$get_Range)(tcref$$44)));
  }

  const ctorArgs$$1 = (0, _List.map)(function (v$$67) {
    return (0, _illib.NameMapModule$$$find)(v$$67, patternInput$$506[1]);
  }, patternInput$$505[0]);
  const safeThisValOpt$$9 = MakeAndPublishSafeThisVal(cenv$$204, env$$271, thisIdOpt$$7, thisTy$$13);
  let patternInput$$507;
  const argty$$9 = (0, _TastOps.mkRefTupledTy)(cenv$$204.g, (0, _tast.typesOfVals)(ctorArgs$$1));
  const ctorTy = (0, _TastOps.mkFunTy)(argty$$9, objTy$$12);
  const attribs$$5 = TcAttributes(cenv$$204, env$$271, 32 | 64, attrs$$19);
  const memberFlags$$35 = _ast.CtorMemberFlags;
  const synArgInfos = (0, _List.map)(function (p$$32) {
    return (0, _ast.SynInfo$$$InferSynArgInfoFromSimplePat)((0, _Types.L)(), p$$32);
  }, spats$$7);
  const valSynData$$23 = new _ast.SynValInfo(0, "SynValInfo", (0, _Types.L)(synArgInfos, (0, _Types.L)()), _ast.SynInfo$$$unnamedRetVal);
  const id$$103 = (0, _ast.ident)("new", m$$363);
  CheckForNonAbstractInterface(new DeclKind(0, "ModuleOrMemberBinding"), tcref$$44, memberFlags$$35, (0, _ast.Ident$$get_idRange)(id$$103));
  const memberInfo$$10 = MakeMemberDataAndMangledNameForMemberVal(cenv$$204.g, tcref$$44, false, attribs$$5, (0, _Types.L)(), memberFlags$$35, valSynData$$23, id$$103, false);
  const partialValReprInfo$$11 = TranslateTopValSynInfo(m$$363, function (attrTgt$$16, synAttribs$$10) {
    return TcAttributes(cenv$$204, env$$271, attrTgt$$16, synAttribs$$10);
  }, valSynData$$23);
  const prelimTyschemeG = new _TastOps.TypeScheme(0, "TypeScheme", copyOfTyconTypars, ctorTy);
  const isComplete$$5 = ComputeIsComplete(copyOfTyconTypars, (0, _Types.L)(), ctorTy);
  const topValInfo$$13 = InferGenericArityFromTyScheme(prelimTyschemeG, partialValReprInfo$$11);
  const ctorValScheme = new ValScheme(0, "ValScheme", id$$103, prelimTyschemeG, topValInfo$$13, memberInfo$$10, false, new _tast.ValInline(3, "Never"), new _tast.ValBaseOrThisInfo(2, "NormalVal"), vis$$41, false, true, false, false);
  const ctorVal = MakeAndPublishVal(cenv$$204, env$$271, new _tast.ParentRef(0, "Parent", tcref$$44), false, new DeclKind(0, "ModuleOrMemberBinding"), new _tast.ValRecursiveScopeInfo(0, "ValInRecScope", isComplete$$5), ctorValScheme, attribs$$5, (0, _ast.XmlDoc$$$get_Empty)(), null, false);
  patternInput$$507 = [ctorValScheme, ctorVal];
  const cctorValInfo = new _Util.Lazy(function () {
    const cctorArgs = (0, _Types.L)((0, _TastOps.mkCompGenLocal)(m$$363, "unitVar", (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$204.g))[0], (0, _Types.L)());
    const cctorTy = (0, _TastOps.mkFunTy)((0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$204.g), (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$204.g));
    const valSynData$$24 = new _ast.SynValInfo(0, "SynValInfo", (0, _Types.L)((0, _Types.L)(), (0, _Types.L)()), _ast.SynInfo$$$unnamedRetVal);
    const id$$104 = (0, _ast.ident)("cctor", m$$363);
    CheckForNonAbstractInterface(new DeclKind(0, "ModuleOrMemberBinding"), tcref$$44, _ast.ClassCtorMemberFlags, (0, _ast.Ident$$get_idRange)(id$$104));
    const memberInfo$$11 = MakeMemberDataAndMangledNameForMemberVal(cenv$$204.g, tcref$$44, false, (0, _Types.L)(), (0, _Types.L)(), _ast.ClassCtorMemberFlags, valSynData$$24, id$$104, false);
    const partialValReprInfo$$12 = TranslateTopValSynInfo(m$$363, function (attrTgt$$17, synAttribs$$11) {
      return TcAttributes(cenv$$204, env$$271, attrTgt$$17, synAttribs$$11);
    }, valSynData$$24);
    const prelimTyschemeG$$1 = new _TastOps.TypeScheme(0, "TypeScheme", copyOfTyconTypars, cctorTy);
    const topValInfo$$14 = InferGenericArityFromTyScheme(prelimTyschemeG$$1, partialValReprInfo$$12);
    const cctorValScheme = new ValScheme(0, "ValScheme", id$$104, prelimTyschemeG$$1, topValInfo$$14, memberInfo$$11, false, new _tast.ValInline(3, "Never"), new _tast.ValBaseOrThisInfo(2, "NormalVal"), new _ast.SynAccess(2, "Private"), false, true, false, false);
    const cctorVal = MakeAndPublishVal(cenv$$204, env$$271, new _tast.ParentRef(0, "Parent", tcref$$44), false, new DeclKind(0, "ModuleOrMemberBinding"), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), cctorValScheme, (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), null, false);
    return [cctorArgs, cctorVal, cctorValScheme];
  });
  let thisVal$$3;
  const thisId$$8 = (0, _ast.ident)("this", m$$363);
  const thisValScheme = new ValScheme(0, "ValScheme", thisId$$8, NonGenericTypeScheme(thisTy$$13), null, null, false, new _tast.ValInline(3, "Never"), new _tast.ValBaseOrThisInfo(0, "CtorThisVal"), null, true, false, false, false);
  const thisVal$$2 = MakeAndPublishVal(cenv$$204, env$$271, new _tast.ParentRef(1, "ParentNone"), false, new DeclKind(3, "ClassLetBinding", false), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), thisValScheme, (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), null, false);
  thisVal$$3 = thisVal$$2;
  return new IncrClassChecking$002EIncrClassCtorLhs(tcref$$44, copyOfTyconTypars, cctorValInfo, patternInput$$507[1], patternInput$$507[0], ctorArgs$$1, safeThisValOpt$$9, safeInitInfo$$10, baseValOpt$$11, thisVal$$3, (0, _ast.NiceNameGenerator$$$$002Ector)());
}

function IncrClassChecking$$$MakeIncrClassField(g$$46, cpath$$8, formalTyparInst, v$$68, isStatic$$5, rfref$$7) {
  const name$$6 = (0, _tast.RecdFieldRef$$get_FieldName)(rfref$$7);
  const id$$105 = (0, _ast.ident)(name$$6, (0, _tast.Val$$get_Range)(v$$68));
  const ty$$132 = (0, _TastOps.instType)(formalTyparInst, (0, _tast.Val$$get_Type)(v$$68));
  const taccess$$1 = new _tast.Accessibility(0, "TAccess", (0, _Types.L)(cpath$$8, (0, _Types.L)()));
  const isVolatile$$2 = (0, _TastOps.HasFSharpAttribute)(g$$46, (0, _TcGlobals.TcGlobals$$get_attrib_VolatileFieldAttribute)(g$$46), (0, _tast.Val$$get_Attribs)(v$$68));
  return (0, _tast.NewRecdField)(isStatic$$5, null, id$$105, false, ty$$132, (0, _tast.Val$$get_IsMutable)(v$$68), isVolatile$$2, (0, _Types.L)(), (0, _tast.Val$$get_Attribs)(v$$68), (0, _tast.Val$$get_XmlDoc)(v$$68), taccess$$1, true);
}

const IncrClassChecking$002EIncrClassValRepr = (0, _Types.declare)(function IncrClassChecking$002EIncrClassValRepr(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.IncrClassChecking$002EIncrClassValRepr = IncrClassChecking$002EIncrClassValRepr;
const IncrClassChecking$002EIncrClassReprInfo = (0, _Types.declare)(function IncrClassChecking$002EIncrClassReprInfo(arg1, arg2, arg3, arg4) {
  this.TakenFieldNames = arg1;
  this.RepInfoTcGlobals = arg2;
  this.ValReprs = arg3;
  this.ValsWithRepresentation = arg4;
}, _Types.Record);
exports.IncrClassChecking$002EIncrClassReprInfo = IncrClassChecking$002EIncrClassReprInfo;

function IncrClassChecking$002EIncrClassReprInfo$$$Empty$$Z64CD1A83(g$$47, names$$21) {
  return new IncrClassChecking$002EIncrClassReprInfo((0, _Set.ofList)(names$$21, {
    Compare: _Util.comparePrimitives
  }), g$$47, (0, _zmap.ZmapModule$$$empty)(_TastOps.valOrder), (0, _zset.ZsetModule$$$empty)(_TastOps.valOrder));
}

function IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(localRep, v$$69) {
  const matchValue$$215 = (0, _zmap.ZmapModule$$$tryFind)(v$$69, localRep.ValReprs);

  if (matchValue$$215 != null) {
    const res$$36 = matchValue$$215;
    return res$$36;
  } else {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("LookupRepr: failed to find representation for value", (0, _tast.Val$$get_Range)(v$$69)));
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$$IsMethodRepr(cenv$$205, bind$$16) {
  const v$$70 = (0, _tast.Binding$$get_Var)(bind$$16);

  if ((0, _TastOps.isUnitTy)(cenv$$205.g, (0, _tast.Val$$get_Type)(v$$70))) {
    return false;
  } else {
    const arity$$2 = (0, _TastOps.InferArityOfExprBinding)(cenv$$205.g, new _TastOps.AllowTypeDirectedDetupling(0, "Yes"), v$$70, (0, _tast.Binding$$get_Expr)(bind$$16));

    if (!(0, _tast.ValReprInfo$$get_HasNoArgs)(arity$$2)) {
      return !(0, _tast.Val$$get_IsMutable)(v$$70);
    } else {
      return false;
    }
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$ChooseRepresentation$$Z160A65F6(localRep$$1, cenv$$206, env$$272, isStatic$$6, isCtorArg, ctorInfo$$8, staticForcedFieldVars, instanceForcedFieldVars, takenFieldNames, bind$$17) {
  var arity$$3;
  const g$$48 = cenv$$206.g;
  const v$$71 = (0, _tast.Binding$$get_Var)(bind$$17);
  const relevantForcedFieldVars = isStatic$$6 ? staticForcedFieldVars : instanceForcedFieldVars;
  const tcref$$45 = ctorInfo$$8.TyconRef;
  let patternInput$$508;
  const isNameTaken = (0, _Set.FSharpSet$$Contains$$2B595)(takenFieldNames, (0, _tast.Val$$get_LogicalName)(v$$71)) ? true : (0, _tast.EntityRef$$GetFieldByName$$Z721C83C5)(tcref$$45, (0, _tast.Val$$get_LogicalName)(v$$71)) != null ? isStatic$$6 ? true : !(0, _tast.EntityRef$$get_IsFSharpStructOrEnumTycon)(tcref$$45) : false;
  const nm$$67 = isNameTaken ? (0, _ast.NiceNameGenerator$$FreshCompilerGeneratedName$$7EA1AB7)(ctorInfo$$8.NameGenerator, (0, _tast.Val$$get_LogicalName)(v$$71), (0, _tast.Val$$get_Range)(v$$71)) : (0, _tast.Val$$get_LogicalName)(v$$71);
  patternInput$$508 = [nm$$67, (0, _Set.FSharpSet$$Add$$2B595)(takenFieldNames, nm$$67)];

  const reportIfUnused = function reportIfUnused() {
    if (((!(0, _tast.Val$$get_HasBeenReferenced)(v$$71) ? !(0, _tast.Val$$get_IsCompiledAsTopLevel)(v$$71) : false) ? !(0, _String.startsWith)((0, _tast.Val$$get_DisplayName)(v$$71), "_", 4) : false) ? !(0, _tast.Val$$get_IsCompilerGenerated)(v$$71) : false) {
      (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$chkUnusedValue$$Z721C83C5)((0, _tast.Val$$get_DisplayName)(v$$71)), (0, _tast.Val$$get_Range)(v$$71)));
    }
  };

  let repr;
  const matchValue$$216 = (0, _TastOps.InferArityOfExprBinding)(g$$48, new _TastOps.AllowTypeDirectedDetupling(0, "Yes"), v$$71, (0, _tast.Binding$$get_Expr)(bind$$17));

  if (arity$$3 = matchValue$$216, (0, _tast.ValReprInfo$$get_HasNoArgs)(arity$$3) ? true : (0, _tast.Val$$get_IsMutable)(v$$71)) {
    const arity$$4 = matchValue$$216;

    if (((0, _tast.Val$$get_IsMutable)(v$$71) ? true : (0, _TaggedCollections.Set$00602$$Contains$$2B595)(relevantForcedFieldVars, v$$71)) ? true : (0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref$$45)) {
      const rfref$$8 = new _tast.RecdFieldRef(0, "RFRef", tcref$$45, patternInput$$508[0]);
      reportIfUnused();
      repr = new IncrClassChecking$002EIncrClassValRepr(1, "InField", isStatic$$6, (0, _TaggedCollections.Map$00603$$get_Count)(localRep$$1.ValReprs), rfref$$8);
    } else {
      repr = new IncrClassChecking$002EIncrClassValRepr(0, "InVar", isCtorArg);
    }
  } else {
    const topValInfo$$15 = matchValue$$216;
    const patternInput$$509 = (0, _TastOps.GetTopValTypeInCompiledForm)(g$$48, topValInfo$$15, (0, _tast.Val$$get_Type)(v$$71), (0, _tast.Val$$get_Range)(v$$71));
    const valSynInfo$$17 = new _ast.SynValInfo(0, "SynValInfo", (0, _illib.List$$$mapSquared)(function f$$57(tupledArg$$97) {
      return new _ast.SynArgInfo(0, "SynArgInfo", (0, _Types.L)(), false, tupledArg$$97[1].Name);
    }, patternInput$$509[1]), _ast.SynInfo$$$unnamedRetVal);
    const memberFlags$$36 = (isStatic$$6 ? _ast.StaticMemberFlags : _ast.NonVirtualMemberFlags)(new _ast.MemberKind(2, "Member"));
    const id$$106 = (0, _ast.mkSynId)((0, _tast.Val$$get_Range)(v$$71), patternInput$$508[0]);
    const memberInfo$$12 = MakeMemberDataAndMangledNameForMemberVal(g$$48, tcref$$45, false, (0, _Types.L)(), (0, _Types.L)(), memberFlags$$36, valSynInfo$$17, (0, _ast.mkSynId)((0, _tast.Val$$get_Range)(v$$71), patternInput$$508[0]), true);
    const copyOfTyconTypars$$1 = IncrClassChecking$002EIncrClassCtorLhs$$GetNormalizedInstanceCtorDeclaredTypars(ctorInfo$$8, cenv$$206, TcEnv$$get_DisplayEnv(env$$272), (0, _tast.EntityRef$$get_Range)(ctorInfo$$8.TyconRef));
    let patternInput$$510;
    const tauTy$$4 = (0, _tast.Val$$get_TauType)(v$$71);

    if (isStatic$$6) {
      patternInput$$510 = [tauTy$$4, topValInfo$$15];
    } else {
      const tauTy$$5 = (0, _TastOps.op_MinusMinusGreater)((0, _tast.Val$$get_Type)(ctorInfo$$8.InstanceCtorThisVal), (0, _tast.Val$$get_TauType)(v$$71));
      const tpNames = topValInfo$$15.fields[0];
      const ret = topValInfo$$15.fields[2];
      const args$$89 = topValInfo$$15.fields[1];
      const topValInfo$$16 = new _tast.ValReprInfo(0, "ValReprInfo", tpNames, (0, _Types.L)(_tast.ValReprInfoModule$$$selfMetadata, args$$89), ret);
      patternInput$$510 = [tauTy$$5, topValInfo$$16];
    }

    let topValInfo$$18;
    const tpNames$$1 = patternInput$$510[1].fields[0];
    const ret$$1 = patternInput$$510[1].fields[2];
    const args$$90 = patternInput$$510[1].fields[1];
    topValInfo$$18 = new _tast.ValReprInfo(0, "ValReprInfo", (0, _List.append)(tpNames$$1, (0, _tast.ValReprInfoModule$$$InferTyparInfo)(copyOfTyconTypars$$1)), args$$90, ret$$1);
    const prelimTyschemeG$$2 = new _TastOps.TypeScheme(0, "TypeScheme", (0, _List.append)(copyOfTyconTypars$$1, patternInput$$509[0]), patternInput$$510[0]);
    const memberValScheme = new ValScheme(0, "ValScheme", id$$106, prelimTyschemeG$$2, topValInfo$$18, memberInfo$$12, false, new _tast.ValInline(3, "Never"), new _tast.ValBaseOrThisInfo(2, "NormalVal"), null, true, true, false, false);
    const methodVal = MakeAndPublishVal(cenv$$206, env$$272, new _tast.ParentRef(0, "Parent", tcref$$45), false, new DeclKind(0, "ModuleOrMemberBinding"), new _tast.ValRecursiveScopeInfo(1, "ValNotInRecScope"), memberValScheme, (0, _tast.Val$$get_Attribs)(v$$71), (0, _ast.XmlDoc$$$get_Empty)(), null, false);
    reportIfUnused();
    repr = new IncrClassChecking$002EIncrClassValRepr(2, "InMethod", isStatic$$6, methodVal, topValInfo$$18);
  }

  return [repr, patternInput$$508[1]];
}

function IncrClassChecking$002EIncrClassReprInfo$$ChooseAndAddRepresentation$$Z34856005(localRep$$2, cenv$$207, env$$273, isStatic$$7, isCtorArg$$1, ctorInfo$$9, staticForcedFieldVars$$1, instanceForcedFieldVars$$1, bind$$18) {
  const v$$72 = (0, _tast.Binding$$get_Var)(bind$$18);
  const patternInput$$511 = IncrClassChecking$002EIncrClassReprInfo$$ChooseRepresentation$$Z160A65F6(localRep$$2, cenv$$207, env$$273, isStatic$$7, isCtorArg$$1, ctorInfo$$9, staticForcedFieldVars$$1, instanceForcedFieldVars$$1, localRep$$2.TakenFieldNames, bind$$18);
  return new IncrClassChecking$002EIncrClassReprInfo(patternInput$$511[1], localRep$$2.RepInfoTcGlobals, (0, _zmap.ZmapModule$$$add)(v$$72, patternInput$$511[0], localRep$$2.ValReprs), localRep$$2.ValsWithRepresentation);
}

function IncrClassChecking$002EIncrClassReprInfo$$ValNowWithRepresentation$$7D0CFEA5(localRep$$3, v$$73) {
  return new IncrClassChecking$002EIncrClassReprInfo(localRep$$3.TakenFieldNames, localRep$$3.RepInfoTcGlobals, localRep$$3.ValReprs, (0, _zset.ZsetModule$$$add)(v$$73, localRep$$3.ValsWithRepresentation));
}

function IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5(localRep$$4, v$$74) {
  return (0, _TaggedCollections.Set$00602$$Contains$$2B595)(localRep$$4.ValsWithRepresentation, v$$74);
}

function IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsLocalVar$$7D0CFEA5(localRep$$5, v$$75) {
  const matchValue$$217 = IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(localRep$$5, v$$75);
  var $target$$534;

  if (matchValue$$217.tag === 0) {
    if (matchValue$$217.fields[0]) {
      $target$$534 = 1;
    } else {
      $target$$534 = 0;
    }
  } else {
    $target$$534 = 1;
  }

  switch ($target$$534) {
    case 0:
      {
        return true;
      }

    case 1:
      {
        return false;
      }
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsMethod$$7D0CFEA5(localRep$$6, v$$76) {
  if (IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5(localRep$$6, v$$76)) {
    if (IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(localRep$$6, v$$76).tag === 2) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$MakeValueLookup(localRep$$7, thisValOpt$$1, tinst$$24, safeStaticInitInfo, v$$77, tyargs$$22, m$$364) {
  const g$$49 = localRep$$7.RepInfoTcGlobals;
  const matchValue$$219 = [IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(localRep$$7, v$$77), thisValOpt$$1];

  if (matchValue$$219[0].tag === 1) {
    if (matchValue$$219[0].fields[0]) {
      const expr$$124 = (0, _TastOps.mkStaticRecdFieldGet)(matchValue$$219[0].fields[2], tinst$$24, m$$364);
      return MakeCheckSafeInit(g$$49, tinst$$24, safeStaticInitInfo, (0, _TastOps.mkInt)(g$$49, m$$364, matchValue$$219[0].fields[1]), expr$$124);
    } else if (matchValue$$219[1] == null) {
      return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected missing 'this' variable in MakeValueLookup", m$$364));
    } else {
      const thisVal$$4 = matchValue$$219[1];
      const thise = (0, _TastOps.exprForVal)(m$$364, thisVal$$4);
      return (0, _TastOps.mkRecdFieldGetViaExprAddr)(thise, matchValue$$219[0].fields[2], tinst$$24, m$$364);
    }
  } else if (matchValue$$219[0].tag === 2) {
    const patternInput$$512 = (0, _TastOps.AdjustValForExpectedArity)(g$$49, m$$364, (0, _tast.mkLocalValRef)(matchValue$$219[0].fields[1]), new _tast.ValUseFlag(1, "NormalValUse"), matchValue$$219[0].fields[2]);
    const tyargs$$23 = (0, _List.append)(tinst$$24, tyargs$$22);
    const thisArgs = matchValue$$219[0].fields[0] ? (0, _Types.L)() : (0, _List.ofArray)((0, _Option.defaultArg)((0, _Option.defaultArg)(thisValOpt$$1, null, function (arg10$0040$$38) {
      return (0, _TastOps.exprForVal)(m$$364, arg10$0040$$38);
    }), [], function ($x$$95) {
      return [$x$$95];
    }));
    return (0, _TastOps.MakeApplicationAndBetaReduce)(g$$49, patternInput$$512[0], patternInput$$512[1], (0, _Types.L)(tyargs$$23, (0, _Types.L)()), thisArgs, m$$364);
  } else {
    return (0, _TastOps.exprForVal)(m$$364, v$$77);
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$MakeValueAssign(localRep$$8, thisValOpt$$2, tinst$$25, safeStaticInitInfo$$1, v$$78, expr$$126, m$$365) {
  const g$$50 = localRep$$8.RepInfoTcGlobals;
  const matchValue$$220 = [IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(localRep$$8, v$$78), thisValOpt$$2];

  if (matchValue$$220[0].tag === 0) {
    return (0, _TastOps.mkValSet)(m$$365, (0, _tast.mkLocalValRef)(v$$78), expr$$126);
  } else if (matchValue$$220[0].tag === 2) {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Local was given method storage, yet later it's been assigned to", m$$365));
  } else if (matchValue$$220[0].fields[0]) {
    const expr$$127 = (0, _TastOps.mkStaticRecdFieldSet)(matchValue$$220[0].fields[2], tinst$$25, expr$$126, m$$365);
    return MakeCheckSafeInit(g$$50, tinst$$25, safeStaticInitInfo$$1, (0, _TastOps.mkInt)(g$$50, m$$365, matchValue$$220[0].fields[1]), expr$$127);
  } else if (matchValue$$220[1] == null) {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected missing 'this' variable in MakeValueAssign", m$$365));
  } else {
    const thisVal$$5 = matchValue$$220[1];
    const thise$$1 = (0, _TastOps.exprForVal)(m$$365, thisVal$$5);
    return (0, _TastOps.mkRecdFieldSetViaExprAddr)(thise$$1, matchValue$$220[0].fields[2], tinst$$25, expr$$126, m$$365);
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$MakeValueGetAddress(localRep$$9, readonly$$1, thisValOpt$$3, tinst$$26, safeStaticInitInfo$$2, v$$79, m$$366) {
  const g$$51 = localRep$$9.RepInfoTcGlobals;
  const matchValue$$221 = [IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(localRep$$9, v$$79), thisValOpt$$3];

  if (matchValue$$221[0].tag === 0) {
    return (0, _TastOps.mkValAddr)(m$$366, readonly$$1, (0, _tast.mkLocalValRef)(v$$79));
  } else if (matchValue$$221[0].tag === 2) {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Local was given method storage, yet later it's address was required", m$$366));
  } else if (matchValue$$221[0].fields[0]) {
    const expr$$128 = (0, _TastOps.mkStaticRecdFieldGetAddr)(readonly$$1, matchValue$$221[0].fields[2], tinst$$26, m$$366);
    return MakeCheckSafeInit(g$$51, tinst$$26, safeStaticInitInfo$$2, (0, _TastOps.mkInt)(g$$51, m$$366, matchValue$$221[0].fields[1]), expr$$128);
  } else if (matchValue$$221[1] == null) {
    return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected missing 'this' variable in MakeValueGetAddress", m$$366));
  } else {
    const thisVal$$6 = matchValue$$221[1];
    const thise$$2 = (0, _TastOps.exprForVal)(m$$366, thisVal$$6);
    return (0, _TastOps.mkRecdFieldGetAddrViaExprAddr)(readonly$$1, thise$$2, matchValue$$221[0].fields[2], tinst$$26, m$$366);
  }
}

function IncrClassChecking$002EIncrClassReprInfo$$PublishIncrClassFields$$Z7ABB5DE6(localRep$$10, cenv$$208, denv$$35, cpath$$9, ctorInfo$$10, safeStaticInitInfo$$3) {
  var inputRecord$$1;
  const tcref$$46 = ctorInfo$$10.TyconRef;
  const rfspecs = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.collect)(function (matchValue$$222) {
      const activePatternResult48882 = matchValue$$222;

      if (activePatternResult48882[1].tag === 1) {
        const rfref$$15 = activePatternResult48882[1].fields[2];
        const isStatic$$9 = activePatternResult48882[1].fields[0];

        if (isStatic$$9 ? true : !(0, _tast.EntityRef$$get_IsFSharpStructOrEnumTycon)(tcref$$46)) {
          const ctorDeclaredTypars$$2 = IncrClassChecking$002EIncrClassCtorLhs$$GetNormalizedInstanceCtorDeclaredTypars(ctorInfo$$10, cenv$$208, denv$$35, (0, _tast.EntityRef$$get_Range)(ctorInfo$$10.TyconRef));
          const revTypeInst = (0, _List.zip)(ctorDeclaredTypars$$2, (0, _List.map)(_tast.mkTyparTy, (0, _tast.EntityRef$$get_TyparsNoRange)(tcref$$46)));
          return (0, _Seq.singleton)(IncrClassChecking$$$MakeIncrClassField(localRep$$10.RepInfoTcGlobals, cpath$$9, revTypeInst, activePatternResult48882[0], isStatic$$9, rfref$$15));
        } else {
          return (0, _Seq.empty)();
        }
      } else {
        return (0, _Seq.empty)();
      }
    }, localRep$$10.ValReprs), (0, _Seq.delay)(function () {
      if (safeStaticInitInfo$$3.tag === 1) {
        return (0, _Seq.empty)();
      } else {
        const fld$$3 = safeStaticInitInfo$$3.fields[1];
        return (0, _Seq.singleton)(fld$$3);
      }
    }));
  }));
  const recdFields = (0, _tast.MakeRecdFieldsTable)((0, _List.append)(rfspecs, (0, _tast.EntityRef$$get_AllFieldsAsList)(tcref$$46)));
  (0, _tast.EntityRef$$get_Deref)(tcref$$46).entity_tycon_repr = new _tast.TyconRepresentation(0, "TFSharpObjectRepr", (inputRecord$$1 = (0, _tast.EntityRef$$get_FSharpObjectModelTypeInfo)(tcref$$46), new _tast.TyconObjModelData(inputRecord$$1.fsobjmodel_kind, inputRecord$$1.fsobjmodel_vslots, recdFields)));
}

function IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(localRep$$11, cenv$$209, thisValOpt$$4, safeStaticInitInfo$$4, thisTyInst$$1, expr$$129) {
  const FixupExprNode = function FixupExprNode(rw, e$$106) {
    var v$$89, readonly$$2, m$$375, v$$87, m$$373, arg$$44, v$$85, m$$371, v$$81, tyargs$$24, m$$367, args$$91, v$$82, tyargs$$25, m$$368, args$$92, v$$83, tyargs$$26, m$$369, args$$93;
    const g$$52 = localRep$$11.RepInfoTcGlobals;
    const e$$107 = (0, _TastOps.NormalizeAndAdjustPossibleSubsumptionExprs)(g$$52, e$$106);
    var $target$$537, args$$94, m$$370, tyargs$$27, v$$84;

    if (e$$107.tag === 5) {
      if (e$$107.fields[0].tag === 1) {
        const activePatternResult48921 = (0, _tast.$007CValDeref$007C)(e$$107.fields[0].fields[0]);

        if (v$$81 = activePatternResult48921, (tyargs$$24 = e$$107.fields[2], (m$$367 = e$$107.fields[4], (args$$91 = e$$107.fields[3], IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsMethod$$7D0CFEA5(localRep$$11, v$$81) ? !(0, _TastOps.ValMultiMap$00601$$ContainsKey$$7D0CFEA5)(cenv$$209.recUses, v$$81) : false)))) {
          $target$$537 = 0;
          args$$94 = e$$107.fields[3];
          m$$370 = e$$107.fields[4];
          tyargs$$27 = e$$107.fields[2];
          v$$84 = activePatternResult48921;
        } else {
          $target$$537 = 1;
        }
      } else if (e$$107.fields[0].tag === 14) {
        if (e$$107.fields[0].fields[0].contents.tag === 1) {
          const activePatternResult48922 = (0, _tast.$007CValDeref$007C)(e$$107.fields[0].fields[0].contents.fields[0]);

          if (v$$82 = activePatternResult48922, (tyargs$$25 = e$$107.fields[2], (m$$368 = e$$107.fields[4], (args$$92 = e$$107.fields[3], IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsMethod$$7D0CFEA5(localRep$$11, v$$82) ? !(0, _TastOps.ValMultiMap$00601$$ContainsKey$$7D0CFEA5)(cenv$$209.recUses, v$$82) : false)))) {
            $target$$537 = 0;
            args$$94 = e$$107.fields[3];
            m$$370 = e$$107.fields[4];
            tyargs$$27 = e$$107.fields[2];
            v$$84 = activePatternResult48922;
          } else {
            $target$$537 = 1;
          }
        } else if (e$$107.fields[0].fields[0].contents.tag === 5) {
          if (e$$107.fields[0].fields[0].contents.fields[0].tag === 1) {
            const activePatternResult48923 = (0, _tast.$007CValDeref$007C)(e$$107.fields[0].fields[0].contents.fields[0].fields[0]);

            if (e$$107.fields[0].fields[0].contents.fields[3].tail == null) {
              if (e$$107.fields[2].tail == null) {
                if (v$$83 = activePatternResult48923, (tyargs$$26 = e$$107.fields[0].fields[0].contents.fields[2], (m$$369 = e$$107.fields[4], (args$$93 = e$$107.fields[3], IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsMethod$$7D0CFEA5(localRep$$11, v$$83) ? !(0, _TastOps.ValMultiMap$00601$$ContainsKey$$7D0CFEA5)(cenv$$209.recUses, v$$83) : false)))) {
                  $target$$537 = 0;
                  args$$94 = e$$107.fields[3];
                  m$$370 = e$$107.fields[4];
                  tyargs$$27 = e$$107.fields[0].fields[0].contents.fields[2];
                  v$$84 = activePatternResult48923;
                } else {
                  $target$$537 = 1;
                }
              } else {
                $target$$537 = 1;
              }
            } else {
              $target$$537 = 1;
            }
          } else {
            $target$$537 = 1;
          }
        } else {
          $target$$537 = 1;
        }
      } else {
        $target$$537 = 1;
      }
    } else {
      $target$$537 = 1;
    }

    switch ($target$$537) {
      case 0:
        {
          const expr$$130 = IncrClassChecking$002EIncrClassReprInfo$$MakeValueLookup(localRep$$11, thisValOpt$$4, thisTyInst$$1, safeStaticInitInfo$$4, v$$84, tyargs$$27, m$$370);
          const args$$95 = (0, _List.map)(rw, args$$94);
          return (0, _TastOps.MakeApplicationAndBetaReduce)(g$$52, expr$$130, (0, _TastOps.tyOfExpr)(g$$52, expr$$130), (0, _Types.L)(), args$$95, m$$370);
        }

      case 1:
        {
          var $target$$538, m$$372, v$$86;

          if (e$$107.tag === 1) {
            const activePatternResult48920 = (0, _tast.$007CValDeref$007C)(e$$107.fields[0]);

            if (v$$85 = activePatternResult48920, (m$$371 = e$$107.fields[2], IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5(localRep$$11, v$$85))) {
              $target$$538 = 0;
              m$$372 = e$$107.fields[2];
              v$$86 = activePatternResult48920;
            } else {
              $target$$538 = 1;
            }
          } else {
            $target$$538 = 1;
          }

          switch ($target$$538) {
            case 0:
              {
                return IncrClassChecking$002EIncrClassReprInfo$$MakeValueLookup(localRep$$11, thisValOpt$$4, thisTyInst$$1, safeStaticInitInfo$$4, v$$86, (0, _Types.L)(), m$$372);
              }

            case 1:
              {
                var $target$$539, arg$$45, m$$374, v$$88;

                if (e$$107.tag === 11) {
                  if (e$$107.fields[0].tag === 30) {
                    if (e$$107.fields[0].fields[0].tag === 2) {
                      const activePatternResult48919 = (0, _tast.$007CValDeref$007C)(e$$107.fields[0].fields[1]);

                      if (e$$107.fields[1].tail == null) {
                        if (e$$107.fields[2].tail != null) {
                          if (e$$107.fields[2].tail.tail == null) {
                            if (v$$87 = activePatternResult48919, (m$$373 = e$$107.fields[3], (arg$$44 = e$$107.fields[2].head, IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5(localRep$$11, v$$87)))) {
                              $target$$539 = 0;
                              arg$$45 = e$$107.fields[2].head;
                              m$$374 = e$$107.fields[3];
                              v$$88 = activePatternResult48919;
                            } else {
                              $target$$539 = 1;
                            }
                          } else {
                            $target$$539 = 1;
                          }
                        } else {
                          $target$$539 = 1;
                        }
                      } else {
                        $target$$539 = 1;
                      }
                    } else {
                      $target$$539 = 1;
                    }
                  } else {
                    $target$$539 = 1;
                  }
                } else {
                  $target$$539 = 1;
                }

                switch ($target$$539) {
                  case 0:
                    {
                      const arg$$46 = rw(arg$$45);
                      return IncrClassChecking$002EIncrClassReprInfo$$MakeValueAssign(localRep$$11, thisValOpt$$4, thisTyInst$$1, safeStaticInitInfo$$4, v$$88, arg$$46, m$$374);
                    }

                  case 1:
                    {
                      var $target$$540, m$$376, readonly$$3, v$$90;

                      if (e$$107.tag === 11) {
                        if (e$$107.fields[0].tag === 30) {
                          if (e$$107.fields[0].fields[0].tag === 0) {
                            const activePatternResult48918 = (0, _tast.$007CValDeref$007C)(e$$107.fields[0].fields[1]);

                            if (e$$107.fields[1].tail == null) {
                              if (e$$107.fields[2].tail == null) {
                                if (v$$89 = activePatternResult48918, (readonly$$2 = e$$107.fields[0].fields[0].fields[0], (m$$375 = e$$107.fields[3], IncrClassChecking$002EIncrClassReprInfo$$IsValWithRepresentation$$7D0CFEA5(localRep$$11, v$$89)))) {
                                  $target$$540 = 0;
                                  m$$376 = e$$107.fields[3];
                                  readonly$$3 = e$$107.fields[0].fields[0].fields[0];
                                  v$$90 = activePatternResult48918;
                                } else {
                                  $target$$540 = 1;
                                }
                              } else {
                                $target$$540 = 1;
                              }
                            } else {
                              $target$$540 = 1;
                            }
                          } else {
                            $target$$540 = 1;
                          }
                        } else {
                          $target$$540 = 1;
                        }
                      } else {
                        $target$$540 = 1;
                      }

                      switch ($target$$540) {
                        case 0:
                          {
                            return IncrClassChecking$002EIncrClassReprInfo$$MakeValueGetAddress(localRep$$11, readonly$$3, thisValOpt$$4, thisTyInst$$1, safeStaticInitInfo$$4, v$$90, m$$376);
                          }

                        case 1:
                          {
                            return null;
                          }
                      }
                    }
                }
              }
          }
        }
    }
  };

  return (0, _TastOps.RewriteExpr)(new _TastOps.ExprRewritingEnv(FixupExprNode, function (_arg2$$12) {
    return null;
  }, (0, _Util.uncurry)(2, null), true), expr$$129);
}

const IncrClassChecking$002EIncrClassConstructionBindingsPhase2C = (0, _Types.declare)(function IncrClassChecking$002EIncrClassConstructionBindingsPhase2C(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.IncrClassChecking$002EIncrClassConstructionBindingsPhase2C = IncrClassChecking$002EIncrClassConstructionBindingsPhase2C;

function IncrClassChecking$$$MakeCtorForIncrClassConstructionPhase2C(cenv$$210, env$$274, ctorInfo$$11, inheritsExpr, inheritsIsVisible, decs, memberBinds, generalizedTyparsForRecursiveBlock$$2, safeStaticInitInfo$$5) {
  var v$$94;
  const denv$$36 = TcEnv$$get_DisplayEnv(env$$274);
  const thisVal$$7 = ctorInfo$$11.InstanceCtorThisVal;
  const m$$377 = (0, _tast.Val$$get_Range)(thisVal$$7);
  const ctorDeclaredTypars$$3 = IncrClassChecking$002EIncrClassCtorLhs$$GetNormalizedInstanceCtorDeclaredTypars(ctorInfo$$11, cenv$$210, denv$$36, m$$377);
  (0, _List.iterate)(function action$$42(tp$$52) {
    SetTyparRigid(cenv$$210.g, TcEnv$$get_DisplayEnv(env$$274), m$$377, tp$$52);
  }, ctorDeclaredTypars$$3);
  (0, _tast.Val$$SetType$$ZB53B58E)(ctorInfo$$11.InstanceCtorVal, (0, _TastOps.mkForallTyIfNeeded)(ctorDeclaredTypars$$3, (0, _tast.Val$$get_TauType)(ctorInfo$$11.InstanceCtorVal)));
  const freeChoiceTypars = (0, _lib.ListSet$$$subtract)(_tast.typarEq, generalizedTyparsForRecursiveBlock$$2, ctorDeclaredTypars$$3);
  const thisTyInst$$2 = (0, _List.map)(_tast.mkTyparTy, ctorDeclaredTypars$$3);

  const accFreeInExpr = function accFreeInExpr(acc$$21, expr$$131) {
    return (0, _TastOps.unionFreeVars)(acc$$21, (0, _TastOps.freeInExpr)(_TastOps.CollectLocalsNoCaching, expr$$131));
  };

  const accFreeInBinding = function accFreeInBinding(acc$$22, bind$$19) {
    return accFreeInExpr(acc$$22, (0, _tast.Binding$$get_Expr)(bind$$19));
  };

  const accFreeInBindings = function accFreeInBindings(acc$$23, binds$$22) {
    return (0, _List.fold)(accFreeInBinding, acc$$23, binds$$22);
  };

  let patternInput$$514;
  const patternInput$$513 = (0, _List.fold)(function folder$$16(tupledArg$$98, dec) {
    var $target$$541;

    switch (dec.tag) {
      case 1:
        $target$$541 = 0;
        break;

      case 0:
        $target$$541 = 1;
        break;

      default:
        $target$$541 = 0;
    }

    switch ($target$$541) {
      case 0:
        {
          return [tupledArg$$98[0], tupledArg$$98[1]];
        }

      case 1:
        {
          const decs$$1 = dec.fields[0];
          return (0, _List.fold)(function folder$$15(tupledArg$$99, dec$$1) {
            if (dec$$1.tag === 1) {
              const isStatic$$11 = dec$$1.fields[1];
              const e$$108 = dec$$1.fields[0];
              const staticForcedFieldVars$$5 = isStatic$$11 ? tupledArg$$99[0] : (0, _TastOps.unionFreeVars)(tupledArg$$99[0], (0, _TastOps.freeInExpr)(_TastOps.CollectLocalsNoCaching, e$$108));
              return [staticForcedFieldVars$$5, tupledArg$$99[1]];
            } else {
              const isStatic$$10 = dec$$1.fields[1];
              const binds$$23 = dec$$1.fields[0];
              const methodBinds = (0, _List.filter)(function (arg10$$19) {
                return IncrClassChecking$002EIncrClassReprInfo$$$IsMethodRepr(cenv$$210, arg10$$19);
              }, binds$$23);
              const staticForcedFieldVars$$4 = isStatic$$10 ? accFreeInBindings(tupledArg$$99[0], methodBinds) : accFreeInBindings(tupledArg$$99[0], binds$$23);
              const instanceForcedFieldVars$$4 = accFreeInBindings(tupledArg$$99[1], methodBinds);
              return [staticForcedFieldVars$$4, instanceForcedFieldVars$$4];
            }
          }, [tupledArg$$98[0], tupledArg$$98[1]], decs$$1);
        }
    }
  }, [_TastOps.emptyFreeVars, _TastOps.emptyFreeVars], decs);
  const staticForcedFieldVars$$7 = accFreeInBindings(patternInput$$513[0], memberBinds);
  const instanceForcedFieldVars$$6 = accFreeInBindings(patternInput$$513[1], memberBinds);
  const staticForcedFieldVars$$8 = accFreeInExpr(staticForcedFieldVars$$7, inheritsExpr);
  patternInput$$514 = [staticForcedFieldVars$$8.FreeLocals, instanceForcedFieldVars$$6.FreeLocals];

  const TransBind = function TransBind(reps, _arg1$$50) {
    const v$$91 = _arg1$$50.fields[0];
    const spBind$$19 = _arg1$$50.fields[2];
    const rhsExpr$$31 = _arg1$$50.fields[1];

    if ((0, _tast.Val$$get_MustInline)(v$$91)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLocalClassBindingsCannotBeInline)(), (0, _tast.Val$$get_Range)(v$$91)));
    }

    const rhsExpr$$32 = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(reps, cenv$$210, thisVal$$7, safeStaticInitInfo$$5, thisTyInst$$2, rhsExpr$$31);
    let isPriorToSuperInit;

    if (ctorInfo$$11.InstanceCtorSafeThisValOpt != null) {
      const v2$$2 = ctorInfo$$11.InstanceCtorSafeThisValOpt;
      isPriorToSuperInit = (0, _tast.valEq)(v$$91, v2$$2);
    } else {
      isPriorToSuperInit = false;
    }

    const matchValue$$224 = IncrClassChecking$002EIncrClassReprInfo$$LookupRepr$$7D0CFEA5(reps, v$$91);

    switch (matchValue$$224.tag) {
      case 0:
        {
          const isArg$$3 = matchValue$$224.fields[0];
          return [[isPriorToSuperInit, function (e$$112) {
            return isArg$$3 ? e$$112 : (0, _TastOps.mkLetBind)(m$$377, new _tast.Binding(0, "TBind", v$$91, rhsExpr$$32, spBind$$19), e$$112);
          }], (0, _Types.L)()];
        }

      case 1:
        {
          const isStatic$$13 = matchValue$$224.fields[0];
          const idx$$7 = matchValue$$224.fields[1] | 0;
          let m$$382;
          const matchValue$$225 = [spBind$$19, rhsExpr$$32];
          var $target$$542;

          if (matchValue$$225[1].tag === 3) {
            $target$$542 = 0;
          } else if (matchValue$$225[1].tag === 4) {
            $target$$542 = 0;
          } else if (matchValue$$225[0].tag === 0) {
            $target$$542 = 1;
          } else {
            $target$$542 = 2;
          }

          switch ($target$$542) {
            case 0:
              {
                m$$382 = (0, _tast.Val$$get_Range)(v$$91);
                break;
              }

            case 1:
              {
                const m$$381 = matchValue$$225[0].fields[0];
                m$$382 = m$$381;
                break;
              }

            case 2:
              {
                m$$382 = (0, _tast.Val$$get_Range)(v$$91);
                break;
              }
          }

          const assignExpr = IncrClassChecking$002EIncrClassReprInfo$$MakeValueAssign(reps, thisVal$$7, thisTyInst$$2, new SafeInitData(1, "NoSafeInitInfo"), v$$91, rhsExpr$$32, m$$382);
          let adjustSafeInitFieldExprOpt;

          if (isStatic$$13) {
            if (safeStaticInitInfo$$5.tag === 1) {
              adjustSafeInitFieldExprOpt = null;
            } else {
              const rfref$$16 = safeStaticInitInfo$$5.fields[0];
              const setExpr$$2 = (0, _TastOps.mkStaticRecdFieldSet)(rfref$$16, thisTyInst$$2, (0, _TastOps.mkInt)(cenv$$210.g, m$$382, idx$$7), m$$382);
              const setExpr$$3 = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(reps, cenv$$210, thisVal$$7, new SafeInitData(1, "NoSafeInitInfo"), thisTyInst$$2, setExpr$$2);
              adjustSafeInitFieldExprOpt = setExpr$$3;
            }
          } else {
            adjustSafeInitFieldExprOpt = null;
          }

          return [[isPriorToSuperInit, function (e$$113) {
            let e$$114;

            if (adjustSafeInitFieldExprOpt != null) {
              const ae = adjustSafeInitFieldExprOpt;
              e$$114 = (0, _TastOps.mkCompGenSequential)(m$$382, ae, e$$113);
            } else {
              e$$114 = e$$113;
            }

            return (0, _TastOps.mkSequential)(new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq"), m$$382, assignExpr, e$$114);
          }], (0, _Types.L)()];
        }

      default:
        {
          const methodVal$$2 = matchValue$$224.fields[1];
          const isStatic$$12 = matchValue$$224.fields[0];
          const patternInput$$515 = rhsExpr$$32.tag === 13 ? [(0, _Types.L)(), rhsExpr$$32.fields[0], rhsExpr$$32.fields[1], (0, _TastOps.tyOfExpr)(cenv$$210.g, rhsExpr$$32.fields[1]), m$$377] : rhsExpr$$32.tag === 4 ? rhsExpr$$32.fields[2].tag === 13 ? [rhsExpr$$32.fields[1], rhsExpr$$32.fields[2].fields[0], rhsExpr$$32.fields[2].fields[1], rhsExpr$$32.fields[4], rhsExpr$$32.fields[3]] : [rhsExpr$$32.fields[1], (0, _Types.L)(), rhsExpr$$32.fields[2], rhsExpr$$32.fields[4], rhsExpr$$32.fields[3]] : [(0, _Types.L)(), (0, _Types.L)(), rhsExpr$$32, (0, _TastOps.tyOfExpr)(cenv$$210.g, rhsExpr$$32), (0, _TastOps.Expr$002Eget_Range)(rhsExpr$$32)];
          const chooseTps$$3 = (0, _List.append)(patternInput$$515[1], (0, _lib.ListSet$$$subtract)(_tast.typarEq, freeChoiceTypars, (0, _tast.Val$$get_Typars)(methodVal$$2)));
          let patternInput$$516;

          if (isStatic$$12) {
            patternInput$$516 = [patternInput$$515[2], patternInput$$515[3]];
          } else {
            const e$$110 = (0, _TastOps.mkLambda)(patternInput$$515[4], thisVal$$7, patternInput$$515[2], patternInput$$515[3]);
            patternInput$$516 = [e$$110, (0, _TastOps.tyOfExpr)(cenv$$210.g, e$$110)];
          }

          const rhsExpr$$33 = (0, _TastOps.mkTypeLambda)(patternInput$$515[4], (0, _tast.Val$$get_Typars)(methodVal$$2), (0, _TastOps.mkTypeChoose)(patternInput$$515[4], chooseTps$$3, patternInput$$516[0]), patternInput$$516[1]);
          return [[isPriorToSuperInit, function (e$$111) {
            return e$$111;
          }], (0, _Types.L)(new _tast.Binding(0, "TBind", methodVal$$2, rhsExpr$$33, spBind$$19), (0, _Types.L)())];
        }
    }
  };

  const TransTrueDec = function TransTrueDec(isCtorArg$$2, reps$$1, dec$$2) {
    if (dec$$2.tag === 1) {
      const isStatic$$15 = dec$$2.fields[1];
      const doExpr = dec$$2.fields[0];
      const doExpr$$1 = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(reps$$1, cenv$$210, thisVal$$7, safeStaticInitInfo$$5, thisTyInst$$2, doExpr);

      const binder = function binder(e$$115) {
        return (0, _TastOps.mkSequential)(new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq"), (0, _TastOps.Expr$002Eget_Range)(doExpr$$1), doExpr$$1, e$$115);
      };

      const isPriorToSuperInit$$1 = false;

      if (isStatic$$15) {
        return [[(0, _Types.L)([isPriorToSuperInit$$1, binder], (0, _Types.L)()), (0, _Types.L)(), (0, _Types.L)()], reps$$1];
      } else {
        return [[(0, _Types.L)(), (0, _Types.L)([isPriorToSuperInit$$1, binder], (0, _Types.L)()), (0, _Types.L)()], reps$$1];
      }
    } else {
      const isStatic$$14 = dec$$2.fields[1];
      const isRec$$3 = dec$$2.fields[2];
      const binds$$24 = dec$$2.fields[0];
      let patternInput$$519;
      const reps$$2 = (0, _List.fold)(function folder$$17(rep, bind$$20) {
        return IncrClassChecking$002EIncrClassReprInfo$$ChooseAndAddRepresentation$$Z34856005(rep, cenv$$210, env$$274, isStatic$$14, isCtorArg$$2, ctorInfo$$11, patternInput$$514[0], patternInput$$514[1], bind$$20);
      }, reps$$1, binds$$24);

      if (isRec$$3) {
        const reps$$3 = (0, _List.fold)(function folder$$18(rep$$1, bind$$21) {
          return IncrClassChecking$002EIncrClassReprInfo$$ValNowWithRepresentation$$7D0CFEA5(rep$$1, (0, _tast.Binding$$get_Var)(bind$$21));
        }, reps$$2, binds$$24);
        const patternInput$$517 = (0, _List.unzip)((0, _List.map)((0, _Util.partialApply)(1, TransBind, [reps$$3]), binds$$24));
        patternInput$$519 = [patternInput$$517[0], reps$$3, patternInput$$517[1]];
      } else {
        const patternInput$$518 = (0, _List.unzip)((0, _List.map)((0, _Util.partialApply)(1, TransBind, [reps$$2]), binds$$24));
        const reps$$4 = (0, _List.fold)(function folder$$19(rep$$2, bind$$22) {
          return IncrClassChecking$002EIncrClassReprInfo$$ValNowWithRepresentation$$7D0CFEA5(rep$$2, (0, _tast.Binding$$get_Var)(bind$$22));
        }, reps$$2, binds$$24);
        patternInput$$519 = [patternInput$$518[0], reps$$4, patternInput$$518[1]];
      }

      const methodBinds$$4 = (0, _List.concat)(patternInput$$519[2]);

      if (isStatic$$14) {
        return [[patternInput$$519[0], (0, _Types.L)(), methodBinds$$4], patternInput$$519[1]];
      } else {
        return [[(0, _Types.L)(), patternInput$$519[0], methodBinds$$4], patternInput$$519[1]];
      }
    }
  };

  const TransDec = function TransDec(reps$$6, dec$$3) {
    switch (dec$$3.tag) {
      case 2:
        {
          const binders$$1 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
            if (ctorInfo$$11.InstanceCtorSafeInitInfo.tag === 1) {
              return (0, _Seq.empty)();
            } else {
              const rfref$$17 = ctorInfo$$11.InstanceCtorSafeInitInfo.fields[0];
              const setExpr$$6 = (0, _TastOps.mkRecdFieldSetViaExprAddr)((0, _TastOps.exprForVal)(m$$377, thisVal$$7), rfref$$17, thisTyInst$$2, (0, _TastOps.mkOne)(cenv$$210.g, m$$377), m$$377);
              const setExpr$$7 = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(reps$$6, cenv$$210, thisVal$$7, safeStaticInitInfo$$5, thisTyInst$$2, setExpr$$6);

              const binder$$2 = function binder$$2(e$$117) {
                return (0, _TastOps.mkSequential)(new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq"), (0, _TastOps.Expr$002Eget_Range)(setExpr$$7), setExpr$$7, e$$117);
              };

              const isPriorToSuperInit$$3 = false;
              return (0, _Seq.singleton)([isPriorToSuperInit$$3, binder$$2]);
            }
          }));
          return [[(0, _Types.L)(), binders$$1, (0, _Types.L)()], reps$$6];
        }

      case 0:
        {
          const decs$$2 = dec$$3.fields[0];
          const patternInput$$520 = (0, _List.mapFold)((0, _Util.uncurry)(2, (0, _Util.partialApply)(2, TransTrueDec, [false])), reps$$6, decs$$2);
          const patternInput$$521 = (0, _List.unzip3)(patternInput$$520[0]);
          return [[(0, _List.concat)(patternInput$$521[0]), (0, _List.concat)(patternInput$$521[1]), (0, _List.concat)(patternInput$$521[2])], patternInput$$520[1]];
        }

      default:
        {
          const binders = (0, _List.ofSeq)((0, _Seq.delay)(function () {
            if (ctorInfo$$11.InstanceCtorSafeThisValOpt != null) {
              const v$$92 = ctorInfo$$11.InstanceCtorSafeThisValOpt;
              const setExpr$$4 = (0, _TastOps.mkRefCellSet)(cenv$$210.g, m$$377, (0, _tast.Val$$get_Type)(ctorInfo$$11.InstanceCtorThisVal), (0, _TastOps.exprForVal)(m$$377, v$$92), (0, _TastOps.exprForVal)(m$$377, ctorInfo$$11.InstanceCtorThisVal));
              const setExpr$$5 = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(reps$$6, cenv$$210, thisVal$$7, safeStaticInitInfo$$5, thisTyInst$$2, setExpr$$4);

              const binder$$1 = function binder$$1(e$$116) {
                return (0, _TastOps.mkSequential)(new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq"), (0, _TastOps.Expr$002Eget_Range)(setExpr$$5), setExpr$$5, e$$116);
              };

              const isPriorToSuperInit$$2 = false;
              return (0, _Seq.singleton)([isPriorToSuperInit$$2, binder$$1]);
            } else {
              return (0, _Seq.empty)();
            }
          }));
          return [[(0, _Types.L)(), binders, (0, _Types.L)()], reps$$6];
        }
    }
  };

  const takenFieldNames$$3 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (b$$61) {
      return (0, _Seq.append)((0, _Seq.singleton)((0, _tast.Val$$get_CompiledName)((0, _tast.Binding$$get_Var)(b$$61))), (0, _Seq.delay)(function () {
        return (0, _Seq.append)((0, _Seq.singleton)((0, _tast.Val$$get_DisplayName)((0, _tast.Binding$$get_Var)(b$$61))), (0, _Seq.delay)(function () {
          return (0, _Seq.append)((0, _Seq.singleton)((0, _tast.Val$$get_CoreDisplayName)((0, _tast.Binding$$get_Var)(b$$61))), (0, _Seq.delay)(function () {
            return (0, _Seq.singleton)((0, _tast.Val$$get_LogicalName)((0, _tast.Binding$$get_Var)(b$$61)));
          }));
        }));
      }));
    }, memberBinds);
  }));
  const reps$$8 = IncrClassChecking$002EIncrClassReprInfo$$$Empty$$Z64CD1A83(cenv$$210.g, takenFieldNames$$3);
  let patternInput$$522;
  const binds$$25 = (0, _List.map)(function mapping$$136(v$$93) {
    return (0, _TastOps.mkInvisibleBind)(v$$93, (0, _TastOps.exprForVal)((0, _tast.Val$$get_Range)(v$$93), v$$93));
  }, ctorInfo$$11.InstanceCtorArgs);
  patternInput$$522 = TransTrueDec(true, reps$$8, new IncrClassChecking$002EIncrClassBindingGroup(0, "IncrClassBindingGroup", binds$$25, false, false));
  const methodBinds1 = patternInput$$522[0][2];
  const ctorInitActions1 = patternInput$$522[0][1];
  const cctorInitActions1 = patternInput$$522[0][0];
  const patternInput$$523 = (0, _List.mapFold)(TransDec, patternInput$$522[1], decs);
  const patternInput$$524 = (0, _List.unzip3)(patternInput$$523[0]);
  const cctorInitActions$$1 = (0, _List.append)(cctorInitActions1, (0, _List.concat)(patternInput$$524[0]));
  const ctorInitActions$$1 = (0, _List.append)(ctorInitActions1, (0, _List.concat)(patternInput$$524[1]));
  const methodBinds$$6 = (0, _List.append)(methodBinds1, (0, _List.concat)(patternInput$$524[2]));
  let ctorBody$$5;
  const patternInput$$525 = (0, _List.partition)(function predicate$$58(tupledArg$$100) {
    return tupledArg$$100[0];
  }, ctorInitActions$$1);
  const ctorBody = (0, _TastOps.mkUnit)(cenv$$210.g, m$$377);
  const ctorBody$$1 = (0, _List.foldBack)(function (tupledArg$$101, acc$$24) {
    return tupledArg$$101[1](acc$$24);
  }, patternInput$$525[1], ctorBody);
  let ctorBody$$2;
  let inheritsExpr$$1;
  var $target$$543, v$$95;

  if (ctorInfo$$11.InstanceCtorSafeThisValOpt != null) {
    if (v$$94 = ctorInfo$$11.InstanceCtorSafeThisValOpt, !IncrClassChecking$002EIncrClassReprInfo$$IsValRepresentedAsLocalVar$$7D0CFEA5(patternInput$$523[1], v$$94)) {
      $target$$543 = 0;
      v$$95 = ctorInfo$$11.InstanceCtorSafeThisValOpt;
    } else {
      $target$$543 = 1;
    }
  } else {
    $target$$543 = 1;
  }

  switch ($target$$543) {
    case 0:
      {
        const ldexpr = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(patternInput$$523[1], cenv$$210, thisVal$$7, safeStaticInitInfo$$5, thisTyInst$$2, (0, _TastOps.exprForVal)(m$$377, v$$95));
        inheritsExpr$$1 = (0, _TastOps.mkInvisibleLet)(m$$377, v$$95, ldexpr, inheritsExpr);
        break;
      }

    case 1:
      {
        inheritsExpr$$1 = inheritsExpr;
        break;
      }
  }

  const spAtSuperInit = inheritsIsVisible ? new _ast.SequencePointInfoForSeq(0, "SequencePointsAtSeq") : new _ast.SequencePointInfoForSeq(1, "SuppressSequencePointOnExprOfSequential");
  ctorBody$$2 = (0, _TastOps.mkSequential)(spAtSuperInit, m$$377, inheritsExpr$$1, ctorBody$$1);
  const ctorBody$$3 = (0, _List.foldBack)(function (tupledArg$$102, acc$$25) {
    return tupledArg$$102[1](acc$$25);
  }, patternInput$$525[0], ctorBody$$2);
  const ctorBody$$4 = (0, _TastOps.mkMemberLambdas)(m$$377, (0, _Types.L)(), thisVal$$7, ctorInfo$$11.InstanceCtorBaseValOpt, (0, _Types.L)(ctorInfo$$11.InstanceCtorArgs, (0, _Types.L)()), ctorBody$$3, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$210.g));
  ctorBody$$5 = ctorBody$$4;
  let cctorBodyOpt;

  if (cctorInitActions$$1.tail == null) {
    cctorBodyOpt = null;
  } else {
    const cctorInitAction = (0, _List.foldBack)(function (tupledArg$$103, acc$$26) {
      return tupledArg$$103[1](acc$$26);
    }, cctorInitActions$$1, (0, _TastOps.mkUnit)(cenv$$210.g, m$$377));
    const m$$383 = (0, _tast.Val$$get_Range)(thisVal$$7);
    const patternInput$$526 = ctorInfo$$11.StaticCtorValInfo.Value;
    (0, _tast.Val$$SetType$$ZB53B58E)(patternInput$$526[1], (0, _TastOps.mkForallTyIfNeeded)(ctorDeclaredTypars$$3, (0, _tast.Val$$get_TauType)(patternInput$$526[1])));
    const cctorBody = (0, _TastOps.mkMemberLambdas)(m$$383, (0, _Types.L)(), null, null, (0, _Types.L)(patternInput$$526[0], (0, _Types.L)()), cctorInitAction, (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$210.g));
    cctorBodyOpt = cctorBody;
  }

  return [ctorBody$$5, cctorBodyOpt, methodBinds$$6, patternInput$$523[1]];
}

const MutRecBindingChecking$002ETyconBindingPhase2A = (0, _Types.declare)(function MutRecBindingChecking$002ETyconBindingPhase2A(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecBindingChecking$002ETyconBindingPhase2A = MutRecBindingChecking$002ETyconBindingPhase2A;
const MutRecBindingChecking$002ETyconBindingsPhase2A = (0, _Types.declare)(function MutRecBindingChecking$002ETyconBindingsPhase2A(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecBindingChecking$002ETyconBindingsPhase2A = MutRecBindingChecking$002ETyconBindingsPhase2A;
const MutRecBindingChecking$002ETyconBindingPhase2B = (0, _Types.declare)(function MutRecBindingChecking$002ETyconBindingPhase2B(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecBindingChecking$002ETyconBindingPhase2B = MutRecBindingChecking$002ETyconBindingPhase2B;
const MutRecBindingChecking$002ETyconBindingsPhase2B = (0, _Types.declare)(function MutRecBindingChecking$002ETyconBindingsPhase2B(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecBindingChecking$002ETyconBindingsPhase2B = MutRecBindingChecking$002ETyconBindingsPhase2B;
const MutRecBindingChecking$002ETyconBindingPhase2C = (0, _Types.declare)(function MutRecBindingChecking$002ETyconBindingPhase2C(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecBindingChecking$002ETyconBindingPhase2C = MutRecBindingChecking$002ETyconBindingPhase2C;
const MutRecBindingChecking$002ETyconBindingsPhase2C = (0, _Types.declare)(function MutRecBindingChecking$002ETyconBindingsPhase2C(tag, name, ...fields) {
  _Types.Union.call(this, tag, name, ...fields);
}, _Types.Union);
exports.MutRecBindingChecking$002ETyconBindingsPhase2C = MutRecBindingChecking$002ETyconBindingsPhase2C;

function MutRecBindingChecking$$$TcMutRecBindings_Phase2A_CreateRecursiveValuesAndCheckArgumentPatterns(cenv$$211, tpenv$$376, envMutRec, mutRecDefns) {
  let patternInput$$531;
  const initialOuterState = [tpenv$$376, 0, (0, _Types.L)()];
  patternInput$$531 = MutRecShapes$$$mapFoldWithEnv(function f1$$21(outerState, envForDecls, defn) {
    const uncheckedBindsRev = outerState[2];
    const tpenv$$377 = outerState[0];
    const recBindIdx$$7 = outerState[1] | 0;

    switch (defn.tag) {
      case 4:
        {
          const x$$129 = defn.fields[0];
          return [new MutRecShape$00605(4, "Open", x$$129), outerState];
        }

      case 3:
        {
          const x$$130 = defn.fields[0];
          return [new MutRecShape$00605(3, "ModuleAbbrev", x$$130), outerState];
        }

      case 1:
        {
          const recBinds = defn.fields[0];
          const normRecDefns = (0, _List.ofSeq)((0, _Seq.delay)(function () {
            return (0, _Seq.collect)(function (matchValue$$229) {
              const c$$36 = matchValue$$229.fields[2];
              const bind$$23 = matchValue$$229.fields[3];
              const b$$62 = matchValue$$229.fields[1];
              const a$$56 = matchValue$$229.fields[0];
              return (0, _Seq.singleton)(new NormalizedRecBindingDefn(0, "NormalizedRecBindingDefn", a$$56, b$$62, c$$36, BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(1, "ValOrMemberBinding"), cenv$$211, envForDecls, bind$$23)));
            }, recBinds);
          }));
          const patternInput$$527 = (0, _List.mapFold)(function mapping$$137(tupledArg$$104, arg50$0040$$7) {
            return AnalyzeAndMakeAndPublishRecursiveValue(new OverridesOK(2, "ErrorOnOverrides"), false, cenv$$211, envForDecls, tupledArg$$104[0], tupledArg$$104[1], arg50$0040$$7);
          }, [tpenv$$377, recBindIdx$$7], normRecDefns);
          const tpenv$$379 = patternInput$$527[1][0];
          const recBindIdx$$9 = patternInput$$527[1][1] | 0;
          const binds$$26 = (0, _List.collect)(function mapping$$138(tuple$$33) {
            return tuple$$33[0];
          }, patternInput$$527[0]);
          const defnAs = new MutRecShape$00605(1, "Lets", binds$$26);
          return [defnAs, [tpenv$$379, recBindIdx$$9, (0, _List.append)((0, _List.reverse)(binds$$26), uncheckedBindsRev)]];
        }

      case 0:
        {
          const tyconOpt = defn.fields[0].fields[0];
          const tcref$$47 = defn.fields[0].fields[1];
          const declaredTyconTypars$$6 = defn.fields[0].fields[2];
          const declKind$$27 = defn.fields[0].fields[3];
          const binds$$27 = defn.fields[0].fields[4];
          const isExtrinsic$$8 = (0, _Util.equals)(declKind$$27, new DeclKind(2, "ExtrinsicExtensionBinding"));
          const initalEnvForTycon = MakeInnerEnvForTyconRef(envForDecls, tcref$$47, isExtrinsic$$8);
          const envForTycon = isExtrinsic$$8 ? initalEnvForTycon : AddLocalTyconRefs(true, cenv$$211.g, cenv$$211.amap, (0, _tast.EntityRef$$get_Range)(tcref$$47), (0, _Types.L)(tcref$$47, (0, _Types.L)()), initalEnvForTycon);
          const patternInput$$528 = FreshenObjectArgType(cenv$$211, (0, _tast.EntityRef$$get_Range)(tcref$$47), new _tast.TyparRigidity(1, "WillBeRigid"), tcref$$47, isExtrinsic$$8, declaredTyconTypars$$6);
          const initialInnerState = [null, envForTycon, tpenv$$377, recBindIdx$$7, uncheckedBindsRev];
          const patternInput$$530 = (0, _illib.List$$$collectFold)(function f$$58(innerState, defn$$1) {
            const newslotsOK$$5 = defn$$1.fields[1];
            const m$$384 = defn$$1.fields[4];
            const declKind$$28 = defn$$1.fields[2];
            const containerInfo$$7 = defn$$1.fields[0];
            const classMemberDef = defn$$1.fields[3];
            const uncheckedBindsRev$$1 = innerState[4];
            const tpenv$$380 = innerState[2];
            const recBindIdx$$10 = innerState[3] | 0;
            const incrClassCtorLhsOpt = innerState[0];
            const envForTycon$$1 = innerState[1];

            if ((0, _tast.EntityRef$$get_IsTypeAbbrev)(tcref$$47)) {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeAbbreviationsMayNotHaveMembers)(), (0, _range.trimRangeToLine)(m$$384)));
            }

            if ((0, _tast.EntityRef$$get_IsEnumTycon)(tcref$$47) ? !(0, _Util.equals)(declKind$$28, new DeclKind(2, "ExtrinsicExtensionBinding")) : false) {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcEnumerationsMayNotHaveMembers)(), (0, _range.trimRangeToLine)(m$$384)));
            }

            const matchValue$$230 = [classMemberDef, containerInfo$$7];

            var $target$$544, attrs$$20, baseValOpt$$12, m$$385, safeInitInfo$$11, spats$$8, tcref$$48, thisIdOpt$$8, vis$$42, _baseIdOpt, arg$$47, m$$386, ty$$133, isRec$$4, isStatic$$16, letBinds, m$$387, bind$$24, m$$388, definition;

            if (matchValue$$230[0].tag === 2) {
              if (matchValue$$230[1].fields[1] != null) {
                $target$$544 = 0;
                attrs$$20 = matchValue$$230[0].fields[1];
                baseValOpt$$12 = matchValue$$230[1].fields[1].fields[2];
                m$$385 = matchValue$$230[0].fields[4];
                safeInitInfo$$11 = matchValue$$230[1].fields[1].fields[3];
                spats$$8 = matchValue$$230[0].fields[2];
                tcref$$48 = matchValue$$230[1].fields[1].fields[0];
                thisIdOpt$$8 = matchValue$$230[0].fields[3];
                vis$$42 = matchValue$$230[0].fields[0];
              } else {
                $target$$544 = 4;
                definition = matchValue$$230;
              }
            } else if (matchValue$$230[0].tag === 3) {
              $target$$544 = 1;
              _baseIdOpt = matchValue$$230[0].fields[2];
              arg$$47 = matchValue$$230[0].fields[1];
              m$$386 = matchValue$$230[0].fields[3];
              ty$$133 = matchValue$$230[0].fields[0];
            } else if (matchValue$$230[0].tag === 4) {
              $target$$544 = 2;
              isRec$$4 = matchValue$$230[0].fields[2];
              isStatic$$16 = matchValue$$230[0].fields[1];
              letBinds = matchValue$$230[0].fields[0];
              m$$387 = matchValue$$230[0].fields[3];
            } else if (matchValue$$230[0].tag === 1) {
              $target$$544 = 3;
              bind$$24 = matchValue$$230[0].fields[0];
              m$$388 = matchValue$$230[0].fields[1];
            } else {
              $target$$544 = 4;
              definition = matchValue$$230;
            }

            switch ($target$$544) {
              case 0:
                {
                  if ((0, _Util.equals)((0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$48), new _tast.TyparKind(1, "Measure"))) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMeasureDeclarationsRequireStaticMembers)(), m$$385));
                  }

                  const incrClassCtorLhs = IncrClassChecking$$$TcImplictCtorLhs_Phase2A(cenv$$211, envForTycon$$1, tpenv$$380, tcref$$48, vis$$42, attrs$$20, spats$$8, thisIdOpt$$8, baseValOpt$$12, safeInitInfo$$11, m$$385, patternInput$$528[1], patternInput$$528[3], patternInput$$528[4]);
                  const envForTycon$$2 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), incrClassCtorLhs.InstanceCtorDeclaredTypars, envForTycon$$1);
                  const innerState$$1 = [incrClassCtorLhs, envForTycon$$2, tpenv$$380, recBindIdx$$10, uncheckedBindsRev$$1];
                  return [(0, _Types.L)(new MutRecBindingChecking$002ETyconBindingPhase2A(0, "Phase2AIncrClassCtor", incrClassCtorLhs), (0, _Types.L)()), innerState$$1];
                }

              case 1:
                {
                  if ((0, _Util.equals)((0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$47), new _tast.TyparKind(1, "Measure"))) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMeasureDeclarationsRequireStaticMembers)(), m$$386));
                  }

                  const baseValOpt$$13 = (0, _Option.defaultArg)(incrClassCtorLhsOpt, null, function binder$$6(x$$131) {
                    return x$$131.InstanceCtorBaseValOpt;
                  });
                  const innerState$$2 = [incrClassCtorLhsOpt, envForTycon$$1, tpenv$$380, recBindIdx$$10, uncheckedBindsRev$$1];
                  return [(0, _Types.L)(new MutRecBindingChecking$002ETyconBindingPhase2A(1, "Phase2AInherit", ty$$133, arg$$47, baseValOpt$$13, m$$386), (0, _Types.L)(new MutRecBindingChecking$002ETyconBindingPhase2A(4, "Phase2AIncrClassCtorJustAfterSuperInit"), (0, _Types.L)())), innerState$$2];
                }

              case 2:
                {
                  const matchValue$$231 = [(0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$47), isStatic$$16];
                  var $target$$545;

                  if (matchValue$$231[0].tag === 1) {
                    if (matchValue$$231[1]) {
                      $target$$545 = 1;
                    } else {
                      $target$$545 = 0;
                    }
                  } else {
                    $target$$545 = 1;
                  }

                  switch ($target$$545) {
                    case 0:
                      {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMeasureDeclarationsRequireStaticMembers)(), m$$387));
                        break;
                      }
                  }

                  if (!isStatic$$16 ? (0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref$$47) : false) {
                    const allDo = (0, _List.forAll)(function predicate$$59(_arg1$$51) {
                      if (_arg1$$51.fields[1].tag === 2) {
                        return true;
                      } else {
                        return false;
                      }
                    }, letBinds);

                    if (allDo) {
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcStructsMayNotContainDoBindings)(), (0, _range.trimRangeToLine)(m$$387)));
                    } else {
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructsMayNotContainLetBindings)(), (0, _range.trimRangeToLine)(m$$387)));
                    }
                  }

                  if (isStatic$$16 ? incrClassCtorLhsOpt == null : false) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStaticLetBindingsRequireClassesWithImplicitConstructors)(), m$$387));
                  }

                  const innerState$$3 = [incrClassCtorLhsOpt, envForTycon$$1, tpenv$$380, recBindIdx$$10, uncheckedBindsRev$$1];
                  return [(0, _Types.L)(new MutRecBindingChecking$002ETyconBindingPhase2A(2, "Phase2AIncrClassBindings", tcref$$47, letBinds, isStatic$$16, isRec$$4, m$$387), (0, _Types.L)()), innerState$$3];
                }

              case 3:
                {
                  const bind$$25 = BindingNormalization$$$NormalizeBinding(new IsObjExprBinding(1, "ValOrMemberBinding"), cenv$$211, envForTycon$$1, bind$$24);
                  const valSynData$$25 = bind$$25.fields[7];
                  const memberFlagsOpt$$15 = valSynData$$25.fields[0];

                  if ((0, _tast.EntityRef$$get_TypeOrMeasureKind)(tcref$$47).tag === 1) {
                    if (memberFlagsOpt$$15 != null) {
                      const memberFlags$$37 = memberFlagsOpt$$15;

                      if (memberFlags$$37.IsInstance) {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMeasureDeclarationsRequireStaticMembers)(), m$$388));
                      }

                      if (memberFlags$$37.MemberKind.tag === 1) {
                        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMeasureDeclarationsRequireStaticMembersNotConstructors)(), m$$388));
                      }
                    }
                  }

                  const rbind$$4 = new NormalizedRecBindingDefn(0, "NormalizedRecBindingDefn", containerInfo$$7, newslotsOK$$5, declKind$$28, bind$$25);
                  const overridesOK$$8 = DeclKind$$$CanOverrideOrImplement$$Z6CE1C8BD(declKind$$28);
                  const patternInput$$529 = AnalyzeAndMakeAndPublishRecursiveValue(overridesOK$$8, false, cenv$$211, envForTycon$$1, tpenv$$380, recBindIdx$$10, rbind$$4);
                  const tpenv$$381 = patternInput$$529[1][0];
                  const recBindIdx$$11 = patternInput$$529[1][1] | 0;
                  const binds$$28 = patternInput$$529[0][0];
                  const _values = patternInput$$529[0][1];
                  const cbinds = (0, _List.ofSeq)((0, _Seq.delay)(function () {
                    return (0, _Seq.map)(function (rbind$$5) {
                      return new MutRecBindingChecking$002ETyconBindingPhase2A(3, "Phase2AMember", rbind$$5);
                    }, binds$$28);
                  }));
                  const innerState$$4 = [incrClassCtorLhsOpt, envForTycon$$1, tpenv$$381, recBindIdx$$11, (0, _List.append)((0, _List.reverse)(binds$$28), uncheckedBindsRev$$1)];
                  return [cbinds, innerState$$4];
                }

              case 4:
                {
                  return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError((0, _String.toText)((0, _String.printf)("Unexpected definition %A"))([definition[0], definition[1]]), m$$384));
                }
            }
          }, initialInnerState, binds$$27);
          const uncheckedBindsRev$$2 = patternInput$$530[1][4];
          const tpenv$$382 = patternInput$$530[1][2];
          const recBindIdx$$12 = patternInput$$530[1][3] | 0;
          const _envForTycon = patternInput$$530[1][1];
          let defnAs$$2;
          var $target$$546, b1, rest$$12, rest$$15;

          if (patternInput$$530[0].tail != null) {
            if (patternInput$$530[0].head.tag === 0) {
              $target$$546 = 0;
              b1 = patternInput$$530[0].head;
              rest$$12 = patternInput$$530[0].tail;
            } else {
              $target$$546 = 1;
              rest$$15 = patternInput$$530[0];
            }
          } else {
            $target$$546 = 1;
            rest$$15 = patternInput$$530[0];
          }

          switch ($target$$546) {
            case 0:
              {
                const rest$$13 = (0, _List.exists)(function predicate$$60(_arg2$$13) {
                  if (_arg2$$13.tag === 4) {
                    return true;
                  } else {
                    return false;
                  }
                }, rest$$12) ? rest$$12 : (0, _Types.L)(new MutRecBindingChecking$002ETyconBindingPhase2A(4, "Phase2AIncrClassCtorJustAfterSuperInit"), rest$$12);
                let rest$$14;

                const isAfter = function isAfter(b$$63) {
                  var $target$$547;

                  switch (b$$63.tag) {
                    case 1:
                    case 4:
                      $target$$547 = 0;
                      break;

                    case 2:
                      $target$$547 = 1;
                      break;

                    case 5:
                    case 3:
                      $target$$547 = 2;
                      break;

                    default:
                      $target$$547 = 0;
                  }

                  switch ($target$$547) {
                    case 0:
                      {
                        return false;
                      }

                    case 1:
                      {
                        const binds$$29 = b$$63.fields[1];
                        return (0, _List.exists)(function predicate$$61(_arg3$$10) {
                          if (_arg3$$10.fields[1].tag === 2) {
                            return true;
                          } else {
                            return false;
                          }
                        }, binds$$29);
                      }

                    case 2:
                      {
                        return true;
                      }
                  }
                };

                const restRev = (0, _List.reverse)(rest$$13);
                const afterRev = (0, _List.takeWhile)(isAfter, restRev);
                const beforeRev = (0, _List.skipWhile)(isAfter, restRev);
                rest$$14 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
                  return (0, _Seq.append)((0, _List.reverse)(beforeRev), (0, _Seq.delay)(function () {
                    return (0, _Seq.append)((0, _Seq.singleton)(new MutRecBindingChecking$002ETyconBindingPhase2A(5, "Phase2AIncrClassCtorJustAfterLastLet")), (0, _Seq.delay)(function () {
                      return (0, _List.reverse)(afterRev);
                    }));
                  }));
                }));
                defnAs$$2 = (0, _Types.L)(b1, rest$$14);
                break;
              }

            case 1:
              {
                defnAs$$2 = rest$$15;
                break;
              }
          }

          const prelimRecValues$$2 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
            return (0, _Seq.collect)(function (x$$132) {
              if (x$$132.tag === 3) {
                const bind$$26 = x$$132.fields[0];
                return (0, _Seq.singleton)(RecursiveBindingInfo$$get_Val(bind$$26.RecBindingInfo));
              } else {
                return (0, _Seq.empty)();
              }
            }, defnAs$$2);
          }));
          const defnAs$$3 = new MutRecShape$00605(0, "Tycon", new MutRecBindingChecking$002ETyconBindingsPhase2A(0, "TyconBindingsPhase2A", tyconOpt, declKind$$27, prelimRecValues$$2, tcref$$47, patternInput$$528[1], patternInput$$528[4], defnAs$$2));
          return [defnAs$$3, [tpenv$$382, recBindIdx$$12, uncheckedBindsRev$$2]];
        }

      default:
        {
          throw new Error("unreachable");
        }
    }
  }, initialOuterState, envMutRec, mutRecDefns);
  const uncheckedBindsRev$$3 = patternInput$$531[1][2];
  const tpenv$$383 = patternInput$$531[1][0];
  const uncheckedRecBinds$$1 = (0, _List.reverse)(uncheckedBindsRev$$3);
  return [patternInput$$531[0], uncheckedRecBinds$$1, tpenv$$383];
}

function MutRecBindingChecking$$$TcMutRecBindings_Phase2B_TypeCheckAndIncrementalGeneralization(cenv$$212, tpenv$$384, envInitial, envMutRec$$1, defnsAs$$1, uncheckedRecBinds$$2, scopem$$17) {
  let patternInput$$542;
  const uncheckedRecBindsTable$$5 = (0, _Map.ofList)((0, _List.map)(function mapping$$139(rbind$$6) {
    return [(0, _tast.Val$$get_Stamp)(RecursiveBindingInfo$$get_Val(rbind$$6.RecBindingInfo)), rbind$$6];
  }, uncheckedRecBinds$$2), {
    Compare: _Long.compare
  });
  const initialOuterState$$1 = [tpenv$$384, (0, _Types.L)(), (0, _Types.L)(), uncheckedRecBindsTable$$5, envInitial];
  patternInput$$542 = MutRecShapes$$$mapFoldWithEnv(function f1$$22(outerState$$1, envForDecls$$1, defnsA) {
    const uncheckedRecBindsTable$$6 = outerState$$1[3];
    const tpenv$$385 = outerState$$1[0];
    const preGeneralizationRecBinds$$9 = outerState$$1[2];
    const generalizedRecBinds$$6 = outerState$$1[1];
    const envNonRec$$4 = outerState$$1[4];

    switch (defnsA.tag) {
      case 4:
        {
          const x$$133 = defnsA.fields[0];
          return [new MutRecShape$00605(4, "Open", x$$133), outerState$$1];
        }

      case 3:
        {
          const x$$134 = defnsA.fields[0];
          return [new MutRecShape$00605(3, "ModuleAbbrev", x$$134), outerState$$1];
        }

      case 1:
        {
          const binds$$30 = defnsA.fields[0];
          let patternInput$$533;
          const initialInnerState$$1 = [tpenv$$385, envForDecls$$1, envNonRec$$4, generalizedRecBinds$$6, preGeneralizationRecBinds$$9, uncheckedRecBindsTable$$6];
          patternInput$$533 = (0, _List.mapFold)(function mapping$$140(innerState$$5, rbind$$7) {
            const uncheckedRecBindsTable$$7 = innerState$$5[5];
            const tpenv$$386 = innerState$$5[0];
            const preGeneralizationRecBinds$$10 = innerState$$5[4];
            const generalizedRecBinds$$7 = innerState$$5[3];
            const envStatic = innerState$$5[1];
            const envNonRec$$5 = innerState$$5[2];
            const patternInput$$532 = TcLetrecBinding(cenv$$212, envStatic, scopem$$17, (0, _Types.L)(), null, envNonRec$$5, generalizedRecBinds$$7, preGeneralizationRecBinds$$10, tpenv$$386, uncheckedRecBindsTable$$7, rbind$$7);
            const innerState$$6 = [tpenv$$386, envStatic, patternInput$$532[0], patternInput$$532[1], patternInput$$532[2], patternInput$$532[4]];
            return [RecursiveBindingInfo$$get_Index(rbind$$7.RecBindingInfo), innerState$$6];
          }, initialInnerState$$1, binds$$30);
          const uncheckedRecBindsTable$$9 = patternInput$$533[1][5];
          const tpenv$$387 = patternInput$$533[1][0];
          const preGeneralizationRecBinds$$12 = patternInput$$533[1][4];
          const generalizedRecBinds$$9 = patternInput$$533[1][3];
          const envNonRec$$7 = patternInput$$533[1][2];
          const outerState$$2 = [tpenv$$387, generalizedRecBinds$$9, preGeneralizationRecBinds$$12, uncheckedRecBindsTable$$9, envNonRec$$7];
          return [new MutRecShape$00605(1, "Lets", patternInput$$533[0]), outerState$$2];
        }

      case 0:
        {
          const tyconOpt$$1 = defnsA.fields[0].fields[0];
          const thisTy$$15 = defnsA.fields[0].fields[5];
          const tcref$$49 = defnsA.fields[0].fields[3];
          const defnAs$$4 = defnsA.fields[0].fields[6];
          const declKind$$29 = defnsA.fields[0].fields[1];
          const copyOfTyconTypars$$3 = defnsA.fields[0].fields[4];
          const isExtrinsic$$9 = (0, _Util.equals)(declKind$$29, new DeclKind(2, "ExtrinsicExtensionBinding"));
          const envForTycon$$3 = MakeInnerEnvForTyconRef(envForDecls$$1, tcref$$49, isExtrinsic$$9);
          const envForTycon$$4 = isExtrinsic$$9 ? envForTycon$$3 : AddLocalTyconRefs(true, cenv$$212.g, cenv$$212.amap, (0, _tast.EntityRef$$get_Range)(tcref$$49), (0, _Types.L)(tcref$$49, (0, _Types.L)()), envForTycon$$3);
          const envForTycon$$5 = new TcEnv(envForTycon$$4.eNameResEnv, envForTycon$$4.eUngeneralizableItems, envForTycon$$4.ePath, envForTycon$$4.eCompPath, envForTycon$$4.eAccessPath, envForTycon$$4.eAccessRights, envForTycon$$4.eInternalsVisibleCompPaths, envForTycon$$4.eModuleOrNamespaceTypeAccumulator, envForTycon$$4.eContextInfo, envForTycon$$4.eFamilyType, InitialImplicitCtorInfo(), envForTycon$$4.eCallerMemberName);
          const reqdThisValTyOpt$$2 = thisTy$$15;
          let patternInput$$541;
          const initialInnerState$$2 = [tpenv$$385, envForTycon$$5, envForTycon$$5, envNonRec$$4, generalizedRecBinds$$6, preGeneralizationRecBinds$$9, uncheckedRecBindsTable$$6];
          patternInput$$541 = (0, _List.mapFold)(function mapping$$143(innerState$$7, defnA) {
            const uncheckedRecBindsTable$$10 = innerState$$7[6];
            const tpenv$$388 = innerState$$7[0];
            const preGeneralizationRecBinds$$13 = innerState$$7[5];
            const generalizedRecBinds$$10 = innerState$$7[4];
            const envStatic$$1 = innerState$$7[2];
            const envNonRec$$8 = innerState$$7[3];
            const envInstance = innerState$$7[1];

            switch (defnA.tag) {
              case 1:
                {
                  const synBaseTy = defnA.fields[0];
                  const m$$389 = defnA.fields[3];
                  const baseValOpt$$14 = defnA.fields[2];
                  const arg$$48 = defnA.fields[1];
                  const patternInput$$534 = TcType(cenv$$212, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(1, "Use"), envInstance, tpenv$$388, synBaseTy);
                  const baseTy$$1 = (0, _TastOps.convertToTypeWithMetadataIfPossible)(cenv$$212.g, patternInput$$534[0]);
                  const patternInput$$535 = TcNewExpr(cenv$$212, envInstance, patternInput$$534[1], baseTy$$1, (0, _ast.SynType$$get_Range)(synBaseTy), true, arg$$48, m$$389);
                  let envInstance$$4;

                  if (baseValOpt$$14 == null) {
                    envInstance$$4 = envInstance;
                  } else {
                    const baseVal = baseValOpt$$14;
                    envInstance$$4 = AddLocalVal(cenv$$212.tcSink, scopem$$17, baseVal, envInstance);
                  }

                  let envNonRec$$11;

                  if (baseValOpt$$14 == null) {
                    envNonRec$$11 = envNonRec$$8;
                  } else {
                    const baseVal$$1 = baseValOpt$$14;
                    envNonRec$$11 = AddLocalVal(cenv$$212.tcSink, scopem$$17, baseVal$$1, envNonRec$$8);
                  }

                  const innerState$$9 = [patternInput$$535[1], envInstance$$4, envStatic$$1, envNonRec$$11, generalizedRecBinds$$10, preGeneralizationRecBinds$$13, uncheckedRecBindsTable$$10];
                  return [new MutRecBindingChecking$002ETyconBindingPhase2B(1, "Phase2BInherit", patternInput$$535[0], baseValOpt$$14), innerState$$9];
                }

              case 2:
                {
                  const tcref$$50 = defnA.fields[0];
                  const isStatic$$17 = defnA.fields[2];
                  const isRec$$5 = defnA.fields[3];
                  const bindsm$$4 = defnA.fields[4];
                  const binds$$31 = defnA.fields[1];
                  const envForBinding = isStatic$$17 ? envStatic$$1 : envInstance;
                  let patternInput$$539;

                  if (isRec$$5) {
                    const binds$$32 = (0, _List.map)(function mapping$$141(bind$$27) {
                      return new RecDefnBindingInfo(0, "RecDefnBindingInfo", ExprContainerInfo, new NewSlotsOK(1, "NoNewSlots"), new DeclKind(3, "ClassLetBinding", isStatic$$17), bind$$27);
                    }, binds$$31);
                    const patternInput$$536 = TcLetrec(new OverridesOK(2, "ErrorOnOverrides"), cenv$$212, envForBinding, tpenv$$388, binds$$32, scopem$$17, scopem$$17);
                    const bindRs = (0, _Types.L)(new IncrClassChecking$002EIncrClassBindingGroup(0, "IncrClassBindingGroup", patternInput$$536[0], isStatic$$17, true), (0, _Types.L)());
                    patternInput$$539 = [patternInput$$536[0], bindRs, patternInput$$536[1], patternInput$$536[2]];
                  } else {
                    const patternInput$$537 = TcLetBindings(cenv$$212, envForBinding, ExprContainerInfo, new DeclKind(3, "ClassLetBinding", isStatic$$17), tpenv$$388, binds$$31, bindsm$$4, scopem$$17);
                    const patternInput$$538 = (0, _List.unzip)((0, _List.map)(function mapping$$142(_arg1$$52) {
                      switch (_arg1$$52.tag) {
                        case 2:
                          {
                            const bind$$28 = _arg1$$52.fields[0];
                            return [(0, _Types.L)(bind$$28, (0, _Types.L)()), new IncrClassChecking$002EIncrClassBindingGroup(0, "IncrClassBindingGroup", (0, _Types.L)(bind$$28, (0, _Types.L)()), isStatic$$17, false)];
                          }

                        case 3:
                          {
                            const e$$118 = _arg1$$52.fields[0];
                            return [(0, _Types.L)(), new IncrClassChecking$002EIncrClassBindingGroup(1, "IncrClassDo", e$$118, isStatic$$17)];
                          }

                        default:
                          {
                            return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("unexpected definition kind", (0, _tast.EntityRef$$get_Range)(tcref$$50)));
                          }
                      }
                    }, patternInput$$537[0]));
                    patternInput$$539 = [(0, _List.concat)(patternInput$$538[0]), patternInput$$538[1], patternInput$$537[1], patternInput$$537[2]];
                  }

                  const envNonRec$$12 = (0, _List.fold)(function folder$$20(acc$$27, bind$$29) {
                    return AddLocalValPrimitive((0, _tast.Binding$$get_Var)(bind$$29), acc$$27);
                  }, envNonRec$$8, patternInput$$539[0]);
                  (0, _Seq.iterate)(function (bind$$30) {
                    if (!isStatic$$17 ? (0, _TastOps.HasFSharpAttributeOpt)(cenv$$212.g, (0, _TcGlobals.TcGlobals$$get_attrib_DllImportAttribute)(cenv$$212.g), (0, _tast.Val$$get_Attribs)((0, _tast.Binding$$get_Var)(bind$$30))) : false) {
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDllImportNotAllowed)(), (0, _tast.Val$$get_Range)((0, _tast.Binding$$get_Var)(bind$$30))));
                    }

                    const nm$$68 = (0, _tast.Val$$get_DisplayName)((0, _tast.Binding$$get_Var)(bind$$30));
                    const ty$$134 = (0, _TastOps.generalizedTyconRef)(tcref$$50);
                    const ad$$36 = envNonRec$$12.eAccessRights;
                    const matchValue$$236 = [(0, _InfoReader.TryFindIntrinsicMethInfo)(cenv$$212.infoReader, (0, _tast.Val$$get_Range)((0, _tast.Binding$$get_Var)(bind$$30)), ad$$36, nm$$68, ty$$134), (0, _InfoReader.TryFindPropInfo)(cenv$$212.infoReader, (0, _tast.Val$$get_Range)((0, _tast.Binding$$get_Var)(bind$$30)), ad$$36, nm$$68, ty$$134)];
                    var $target$$548;

                    if (matchValue$$236[0].tail == null) {
                      if (matchValue$$236[1].tail == null) {
                        $target$$548 = 0;
                      } else {
                        $target$$548 = 1;
                      }
                    } else {
                      $target$$548 = 1;
                    }

                    switch ($target$$548) {
                      case 1:
                        {
                          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMemberAndLocalClassBindingHaveSameName$$Z721C83C5)(nm$$68), (0, _tast.Val$$get_Range)((0, _tast.Binding$$get_Var)(bind$$30))));
                          break;
                        }
                    }
                  }, patternInput$$539[0]);
                  const envInstance$$5 = isStatic$$17 ? (0, _List.foldBack)(function folder$$21(b$$64, e$$119) {
                    return AddLocalVal(cenv$$212.tcSink, scopem$$17, (0, _tast.Binding$$get_Var)(b$$64), e$$119);
                  }, patternInput$$539[0], envInstance) : patternInput$$539[2];
                  const envStatic$$3 = isStatic$$17 ? patternInput$$539[2] : envStatic$$1;
                  const innerState$$10 = [patternInput$$539[3], envInstance$$5, envStatic$$3, envNonRec$$12, generalizedRecBinds$$10, preGeneralizationRecBinds$$13, uncheckedRecBindsTable$$10];
                  return [new MutRecBindingChecking$002ETyconBindingPhase2B(2, "Phase2BIncrClassBindings", patternInput$$539[1]), innerState$$10];
                }

              case 4:
                {
                  const innerState$$11 = [tpenv$$388, envInstance, envStatic$$1, envNonRec$$8, generalizedRecBinds$$10, preGeneralizationRecBinds$$13, uncheckedRecBindsTable$$10];
                  return [new MutRecBindingChecking$002ETyconBindingPhase2B(4, "Phase2BIncrClassCtorJustAfterSuperInit"), innerState$$11];
                }

              case 5:
                {
                  const innerState$$12 = [tpenv$$388, envInstance, envStatic$$1, envNonRec$$8, generalizedRecBinds$$10, preGeneralizationRecBinds$$13, uncheckedRecBindsTable$$10];
                  return [new MutRecBindingChecking$002ETyconBindingPhase2B(5, "Phase2BIncrClassCtorJustAfterLastLet"), innerState$$12];
                }

              case 3:
                {
                  const rbind$$8 = defnA.fields[0];
                  const v$$100 = RecursiveBindingInfo$$get_Val(rbind$$8.RecBindingInfo);
                  const envForBinding$$1 = (0, _tast.Val$$get_IsInstanceMember)(v$$100) ? envInstance : envStatic$$1;
                  const extraGeneralizableTypars$$2 = copyOfTyconTypars$$3;
                  const patternInput$$540 = TcLetrecBinding(cenv$$212, envForBinding$$1, scopem$$17, extraGeneralizableTypars$$2, reqdThisValTyOpt$$2, envNonRec$$8, generalizedRecBinds$$10, preGeneralizationRecBinds$$13, tpenv$$388, uncheckedRecBindsTable$$10, rbind$$8);
                  const innerState$$13 = [tpenv$$388, envInstance, envStatic$$1, patternInput$$540[0], patternInput$$540[1], patternInput$$540[2], patternInput$$540[4]];
                  return [new MutRecBindingChecking$002ETyconBindingPhase2B(3, "Phase2BMember", RecursiveBindingInfo$$get_Index(rbind$$8.RecBindingInfo)), innerState$$13];
                }

              default:
                {
                  const incrClassCtorLhs$$1 = defnA.fields[0];
                  const envInstance$$1 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), incrClassCtorLhs$$1.InstanceCtorDeclaredTypars, envInstance);
                  const envStatic$$2 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), incrClassCtorLhs$$1.InstanceCtorDeclaredTypars, envStatic$$1);
                  let envInstance$$2;

                  if (incrClassCtorLhs$$1.InstanceCtorSafeThisValOpt == null) {
                    envInstance$$2 = envInstance$$1;
                  } else {
                    const v$$96 = incrClassCtorLhs$$1.InstanceCtorSafeThisValOpt;
                    envInstance$$2 = AddLocalVal(cenv$$212.tcSink, scopem$$17, v$$96, envInstance$$1);
                  }

                  const envInstance$$3 = (0, _List.foldBack)(AddLocalValPrimitive, incrClassCtorLhs$$1.InstanceCtorArgs, envInstance$$2);
                  let envNonRec$$9;

                  if (incrClassCtorLhs$$1.InstanceCtorSafeThisValOpt == null) {
                    envNonRec$$9 = envNonRec$$8;
                  } else {
                    const v$$98 = incrClassCtorLhs$$1.InstanceCtorSafeThisValOpt;
                    envNonRec$$9 = AddLocalVal(cenv$$212.tcSink, scopem$$17, v$$98, envNonRec$$8);
                  }

                  const envNonRec$$10 = (0, _List.foldBack)(AddLocalValPrimitive, incrClassCtorLhs$$1.InstanceCtorArgs, envNonRec$$9);
                  const safeThisValBindOpt = TcLetrecComputeCtorSafeThisValBind(cenv$$212, incrClassCtorLhs$$1.InstanceCtorSafeThisValOpt);
                  const innerState$$8 = [tpenv$$388, envInstance$$3, envStatic$$2, envNonRec$$10, generalizedRecBinds$$10, preGeneralizationRecBinds$$13, uncheckedRecBindsTable$$10];
                  return [new MutRecBindingChecking$002ETyconBindingPhase2B(0, "Phase2BIncrClassCtor", incrClassCtorLhs$$1, safeThisValBindOpt), innerState$$8];
                }
            }
          }, initialInnerState$$2, defnAs$$4);
          const uncheckedRecBindsTable$$12 = patternInput$$541[1][6];
          const tpenv$$394 = patternInput$$541[1][0];
          const preGeneralizationRecBinds$$15 = patternInput$$541[1][5];
          const generalizedRecBinds$$12 = patternInput$$541[1][4];
          const envNonRec$$14 = patternInput$$541[1][3];
          const defnBs$$2 = new MutRecShape$00605(0, "Tycon", new MutRecBindingChecking$002ETyconBindingsPhase2B(0, "TyconBindingsPhase2B", tyconOpt$$1, tcref$$49, patternInput$$541[0]));
          const outerState$$3 = [tpenv$$394, generalizedRecBinds$$12, preGeneralizationRecBinds$$15, uncheckedRecBindsTable$$12, envNonRec$$14];
          return [defnBs$$2, outerState$$3];
        }

      default:
        {
          throw new Error("unreachable");
        }
    }
  }, initialOuterState$$1, envMutRec$$1, defnsAs$$1);
  const tpenv$$395 = patternInput$$542[1][0];
  const preGeneralizationRecBinds$$16 = patternInput$$542[1][2];
  const generalizedRecBinds$$13 = patternInput$$542[1][1];
  return [patternInput$$542[0], generalizedRecBinds$$13, tpenv$$395];
}

function MutRecBindingChecking$$$TcMutRecBindings_Phase2C_FixupRecursiveReferences(cenv$$213, denv$$38, defnsBs$$1, generalizedTyparsForRecursiveBlock$$3, generalizedRecBinds$$14, scopem$$18) {
  const generalizedBindingsMap = (0, _Map.ofList)((0, _List.map)(function mapping$$144(pgrbind$$18) {
    return [RecursiveBindingInfo$$get_Index(pgrbind$$18.RecBindingInfo), pgrbind$$18];
  }, generalizedRecBinds$$14), {
    Compare: _Util.comparePrimitives
  });
  return MutRecShapes$$$mapTyconsAndLets(function f1$$23(_arg1$$53) {
    const tyconOpt$$2 = _arg1$$53.fields[0];
    const tcref$$51 = _arg1$$53.fields[1];
    const defnBs$$3 = _arg1$$53.fields[2];
    const defnCs = (0, _List.map)(function mapping$$145(defnB) {
      switch (defnB.tag) {
        case 1:
          {
            const inheritsExpr$$3 = defnB.fields[0];
            const basevOpt = defnB.fields[1];
            return new MutRecBindingChecking$002ETyconBindingPhase2C(1, "Phase2CInherit", inheritsExpr$$3, basevOpt);
          }

        case 2:
          {
            const bindRs$$3 = defnB.fields[0];
            return new MutRecBindingChecking$002ETyconBindingPhase2C(2, "Phase2CIncrClassBindings", bindRs$$3);
          }

        case 4:
          {
            return new MutRecBindingChecking$002ETyconBindingPhase2C(4, "Phase2CIncrClassCtorJustAfterSuperInit");
          }

        case 5:
          {
            return new MutRecBindingChecking$002ETyconBindingPhase2C(5, "Phase2CIncrClassCtorJustAfterLastLet");
          }

        case 3:
          {
            const idx$$8 = defnB.fields[0] | 0;
            const generalizedBinding = (0, _Map.FSharpMap$$get_Item$$2B595)(generalizedBindingsMap, idx$$8);
            const vxbind = TcLetrecAdjustMemberForSpecialVals(cenv$$213, generalizedBinding);
            const pgbrind = FixupLetrecBind(cenv$$213, denv$$38, generalizedTyparsForRecursiveBlock$$3, vxbind);
            return new MutRecBindingChecking$002ETyconBindingPhase2C(3, "Phase2CMember", pgbrind);
          }

        default:
          {
            const safeThisValBindOpt$$1 = defnB.fields[1];
            const incrClassCtorLhs$$2 = defnB.fields[0];
            const valscheme$$6 = incrClassCtorLhs$$2.InstanceCtorValScheme;
            const valscheme$$7 = ChooseCanonicalValSchemeAfterInference(cenv$$213.g, denv$$38, valscheme$$6, scopem$$18);
            AdjustRecType(cenv$$213, incrClassCtorLhs$$2.InstanceCtorVal, valscheme$$7);
            return new MutRecBindingChecking$002ETyconBindingPhase2C(0, "Phase2CIncrClassCtor", incrClassCtorLhs$$2, safeThisValBindOpt$$1);
          }
      }
    }, defnBs$$3);
    return new MutRecBindingChecking$002ETyconBindingsPhase2C(0, "TyconBindingsPhase2C", tyconOpt$$2, tcref$$51, defnCs);
  }, function f2$$12(bindIdxs) {
    return (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (idx$$9) {
        const generalizedBinding$$1 = (0, _Map.FSharpMap$$get_Item$$2B595)(generalizedBindingsMap, idx$$9);
        const vxbind$$1 = TcLetrecAdjustMemberForSpecialVals(cenv$$213, generalizedBinding$$1);
        return (0, _Seq.singleton)(FixupLetrecBind(cenv$$213, denv$$38, generalizedTyparsForRecursiveBlock$$3, vxbind$$1));
      }, bindIdxs);
    }));
  }, defnsBs$$1);
}

function MutRecBindingChecking$$$TcMutRecBindings_Phase2D_ExtractImplicitFieldAndMethodBindings(cenv$$214, envMutRec$$2, tpenv$$396, denv$$39, generalizedTyparsForRecursiveBlock$$4, defnsCs) {
  return MutRecShapes$$$mapTyconsWithEnv(function f1$$24(envForDecls$$2, _arg1$$54) {
    var ctorValueExprBinding, rbind$$9, cctorBodyLambdaExpr, patternInput$$546, cctorValueExprBinding, rbind$$10;
    const tyconOpt$$3 = _arg1$$54.fields[0];
    const tcref$$52 = _arg1$$54.fields[1];
    const defnCs$$1 = _arg1$$54.fields[2];
    var $target$$549, defnCs$$2, incrClassCtorLhs$$3, safeThisValBindOpt$$2, defnCs$$5;

    if (defnCs$$1.tail != null) {
      if (defnCs$$1.head.tag === 0) {
        $target$$549 = 0;
        defnCs$$2 = defnCs$$1.tail;
        incrClassCtorLhs$$3 = defnCs$$1.head.fields[0];
        safeThisValBindOpt$$2 = defnCs$$1.head.fields[1];
      } else {
        $target$$549 = 1;
        defnCs$$5 = defnCs$$1;
      }
    } else {
      $target$$549 = 1;
      defnCs$$5 = defnCs$$1;
    }

    switch ($target$$549) {
      case 0:
        {
          let safeStaticInitInfo$$6;
          const needsSafeStaticInit = !(0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$214.g);
          const hasStaticBindings = (0, _List.exists)(function predicate$$64(_arg1$$55) {
            if (_arg1$$55.tag === 2) {
              const groups = _arg1$$55.fields[0];
              return (0, _List.exists)(function predicate$$63(_arg2$$14) {
                if (_arg2$$14.tag === 0) {
                  const isStatic$$18 = _arg2$$14.fields[1];
                  const binds$$37 = _arg2$$14.fields[0];

                  if (isStatic$$18) {
                    return (0, _List.exists)(function predicate$$62($arg$$100) {
                      return !IncrClassChecking$002EIncrClassReprInfo$$$IsMethodRepr(cenv$$214, $arg$$100);
                    }, binds$$37);
                  } else {
                    return false;
                  }
                } else {
                  return false;
                }
              }, groups);
            } else {
              return false;
            }
          }, defnCs$$2);

          if (needsSafeStaticInit ? hasStaticBindings : false) {
            const rfield$$1 = MakeSafeInitField(cenv$$214.g, envForDecls$$2, (0, _tast.EntityRef$$get_Range)(tcref$$52), true);
            safeStaticInitInfo$$6 = new SafeInitData(0, "SafeInitField", (0, _tast.mkRecdFieldRef)(tcref$$52, (0, _tast.RecdField$$get_Name)(rfield$$1)), rfield$$1);
          } else {
            safeStaticInitInfo$$6 = new SafeInitData(1, "NoSafeInitInfo");
          }

          const tcref$$53 = incrClassCtorLhs$$3.TyconRef;
          let patternInput$$544;
          const matchValue$$237 = (0, _List.partition)(function predicate$$65(_arg3$$11) {
            if (_arg3$$11.tag === 1) {
              return true;
            } else {
              return false;
            }
          }, defnCs$$2);
          var $target$$550, baseValOpt$$15, defnCs$$3, inheritsExpr$$4;

          if (matchValue$$237[0].tail != null) {
            if (matchValue$$237[0].head.tag === 1) {
              if (matchValue$$237[0].tail.tail == null) {
                $target$$550 = 0;
                baseValOpt$$15 = matchValue$$237[0].head.fields[1];
                defnCs$$3 = matchValue$$237[1];
                inheritsExpr$$4 = matchValue$$237[0].head.fields[0];
              } else {
                $target$$550 = 1;
              }
            } else {
              $target$$550 = 1;
            }
          } else {
            $target$$550 = 1;
          }

          switch ($target$$550) {
            case 0:
              {
                patternInput$$544 = [inheritsExpr$$4, true, baseValOpt$$15, defnCs$$3];
                break;
              }

            case 1:
              {
                if ((0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref$$53)) {
                  patternInput$$544 = [(0, _TastOps.mkUnit)(cenv$$214.g, (0, _tast.EntityRef$$get_Range)(tcref$$53)), false, null, defnCs$$2];
                } else {
                  const patternInput$$543 = TcNewExpr(cenv$$214, envForDecls$$2, tpenv$$396, (0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$214.g), null, true, new _ast.SynExpr(2, "Const", new _ast.SynConst(0, "Unit"), (0, _tast.EntityRef$$get_Range)(tcref$$53)), (0, _tast.EntityRef$$get_Range)(tcref$$53));
                  patternInput$$544 = [patternInput$$543[0], false, null, defnCs$$2];
                }

                break;
              }
          }

          const envForTycon$$6 = MakeInnerEnvForTyconRef(envForDecls$$2, tcref$$53, false);
          const cpath$$10 = envForTycon$$6.eAccessPath;
          const localDecs = (0, _List.filter)(function predicate$$66(_arg4$$9) {
            var $target$$551;

            switch (_arg4$$9.tag) {
              case 2:
              case 4:
              case 5:
                $target$$551 = 0;
                break;

              default:
                $target$$551 = 1;
            }

            switch ($target$$551) {
              case 0:
                {
                  return true;
                }

              case 1:
                {
                  return false;
                }
            }
          }, patternInput$$544[3]);
          const memberBindsWithFixups = (0, _List.choose)(function chooser$$8(_arg5$$9) {
            if (_arg5$$9.tag === 3) {
              const pgrbind$$19 = _arg5$$9.fields[0];
              return pgrbind$$19;
            } else {
              return null;
            }
          }, patternInput$$544[3]);
          let localDecs$$1;

          if (safeThisValBindOpt$$2 != null) {
            const bind$$31 = safeThisValBindOpt$$2;
            localDecs$$1 = (0, _Types.L)(new MutRecBindingChecking$002ETyconBindingPhase2C(2, "Phase2CIncrClassBindings", (0, _Types.L)(new IncrClassChecking$002EIncrClassBindingGroup(0, "IncrClassBindingGroup", (0, _Types.L)(bind$$31, (0, _Types.L)()), false, false), (0, _Types.L)())), localDecs);
          } else {
            localDecs$$1 = localDecs;
          }

          let patternInput$$545;
          const localDecs$$2 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
            return (0, _Seq.collect)(function (localDec) {
              switch (localDec.tag) {
                case 2:
                  {
                    const binds$$38 = localDec.fields[0];
                    return (0, _Seq.singleton)(new IncrClassChecking$002EIncrClassConstructionBindingsPhase2C(0, "Phase2CBindings", binds$$38));
                  }

                case 4:
                  {
                    return (0, _Seq.singleton)(new IncrClassChecking$002EIncrClassConstructionBindingsPhase2C(1, "Phase2CCtorJustAfterSuperInit"));
                  }

                case 5:
                  {
                    return (0, _Seq.singleton)(new IncrClassChecking$002EIncrClassConstructionBindingsPhase2C(2, "Phase2CCtorJustAfterLastLet"));
                  }

                default:
                  {
                    return (0, _Seq.empty)();
                  }
              }
            }, localDecs$$1);
          }));
          const memberBinds$$1 = (0, _List.map)(function mapping$$146(x$$135) {
            return x$$135.Binding;
          }, memberBindsWithFixups);
          patternInput$$545 = IncrClassChecking$$$MakeCtorForIncrClassConstructionPhase2C(cenv$$214, envForTycon$$6, incrClassCtorLhs$$3, patternInput$$544[0], patternInput$$544[1], localDecs$$2, memberBinds$$1, generalizedTyparsForRecursiveBlock$$4, safeStaticInitInfo$$6);
          const ctorValueExprBindings = (0, _List.append)((0, _Types.L)((ctorValueExprBinding = new _tast.Binding(0, "TBind", incrClassCtorLhs$$3.InstanceCtorVal, patternInput$$545[0], new _ast.SequencePointInfoForBinding(3, "NoSequencePointAtStickyBinding")), (rbind$$9 = new PostBindCtorThisVarRefCellRecursiveBinding(incrClassCtorLhs$$3.InstanceCtorValScheme, ctorValueExprBinding), FixupLetrecBind(cenv$$214, TcEnv$$get_DisplayEnv(envForDecls$$2), generalizedTyparsForRecursiveBlock$$4, rbind$$9))), (0, _Types.L)()), patternInput$$545[1] != null ? (cctorBodyLambdaExpr = patternInput$$545[1], (0, _Types.L)((patternInput$$546 = incrClassCtorLhs$$3.StaticCtorValInfo.Value, (cctorValueExprBinding = new _tast.Binding(0, "TBind", patternInput$$546[1], cctorBodyLambdaExpr, new _ast.SequencePointInfoForBinding(3, "NoSequencePointAtStickyBinding")), (rbind$$10 = new PostBindCtorThisVarRefCellRecursiveBinding(patternInput$$546[2], cctorValueExprBinding), FixupLetrecBind(cenv$$214, TcEnv$$get_DisplayEnv(envForDecls$$2), generalizedTyparsForRecursiveBlock$$4, rbind$$10)))), (0, _Types.L)())) : (0, _Types.L)());
          IncrClassChecking$002EIncrClassReprInfo$$PublishIncrClassFields$$Z7ABB5DE6(patternInput$$545[3], cenv$$214, denv$$39, cpath$$10, incrClassCtorLhs$$3, safeStaticInitInfo$$6);
          const memberBindsWithFixups$$1 = (0, _List.map)(function mapping$$147(pgrbind$$20) {
            const x$$136 = pgrbind$$20.Binding.fields[1];
            const v$$101 = pgrbind$$20.Binding.fields[0];
            const spBind$$20 = pgrbind$$20.Binding.fields[2];
            const thisValOpt$$5 = GetInstanceMemberThisVariable(v$$101, x$$136);
            const thisTyInst$$3 = (0, _List.map)(_tast.mkTyparTy, (0, _List.truncate)((0, _List.length)((0, _tast.EntityRef$$Typars$$4DB9192C)(tcref$$53, (0, _tast.Val$$get_Range)(v$$101))), (0, _tast.Val$$get_Typars)(v$$101)));
            const x$$137 = IncrClassChecking$002EIncrClassReprInfo$$FixupIncrClassExprPhase2C(patternInput$$545[3], cenv$$214, thisValOpt$$5, safeStaticInitInfo$$6, thisTyInst$$3, x$$136);
            return new PreInitializationGraphEliminationBinding(pgrbind$$20.FixupPoints, new _tast.Binding(0, "TBind", v$$101, x$$137, spBind$$20));
          }, memberBindsWithFixups);
          return [tyconOpt$$3, (0, _List.append)(ctorValueExprBindings, memberBindsWithFixups$$1), patternInput$$545[2]];
        }

      case 1:
        {
          const memberBindsWithFixups$$2 = (0, _List.choose)(function chooser$$9(_arg6$$9) {
            if (_arg6$$9.tag === 3) {
              const pgrbind$$21 = _arg6$$9.fields[0];
              return pgrbind$$21;
            } else {
              return null;
            }
          }, defnCs$$5);
          return [tyconOpt$$3, memberBindsWithFixups$$2, (0, _Types.L)()];
        }
    }
  }, envMutRec$$2, defnsCs);
}

function MutRecBindingChecking$$$TcModuleAbbrevDecl(cenv$$215, scopem$$19, env$$283, id$$107, p$$33, m$$390) {
  const ad$$37 = env$$283.eAccessRights;
  let resolved;

  if (p$$33.tail != null) {
    const rest$$16 = p$$33.tail;
    const id$$108 = p$$33.head;
    resolved = (0, _NameResolution.ResolveLongIndentAsModuleOrNamespace)(cenv$$215.tcSink, new _NameResolution.ResultCollectionSettings(0, "AllResults"), cenv$$215.amap, m$$390, true, new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$283.eNameResEnv, ad$$37, id$$108, rest$$16, false);
  } else {
    resolved = new _illib.ResultOrException$00601(0, "Result", (0, _Types.L)());
  }

  const mvvs$$1 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)(resolved);

  if (mvvs$$1.tail == null) {
    return env$$283;
  } else {
    const modrefs$$8 = (0, _List.map)(function mapping$$148(tupledArg$$106) {
      return (0, _lib.p23)(tupledArg$$106[0], tupledArg$$106[1], tupledArg$$106[2]);
    }, mvvs$$1);

    if (!(modrefs$$8.tail == null) ? (0, _List.forAll)(function predicate$$67(modref$$6) {
      return (0, _tast.EntityRef$$get_IsNamespace)(modref$$6);
    }, modrefs$$8) : false) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcModuleAbbreviationForNamespace$$Z721C83C5)((0, _TastOps.fullDisplayTextOfModRef)((0, _List.head)(modrefs$$8))), m$$390));
    }

    const modrefs$$9 = (0, _List.filter)(function predicate$$68(mvv) {
      return !(0, _tast.EntityRef$$get_IsNamespace)(mvv);
    }, modrefs$$8);

    if (modrefs$$9.tail == null) {
      return env$$283;
    } else {
      (0, _List.iterate)(function action$$43(modref$$7) {
        (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckEntityAttributes)(cenv$$215.g, modref$$7, m$$390));
      }, modrefs$$9);
      const env$$284 = AddModuleAbbreviationAndReport(cenv$$215.tcSink, scopem$$19, id$$107, modrefs$$9, env$$283);
      return env$$284;
    }
  }
}

function MutRecBindingChecking$$$TcMutRecDefns_UpdateNSContents(mutRecNSInfo) {
  var $target$$552, mspecNS, mtypeAcc$$3;

  if (mutRecNSInfo != null) {
    if (mutRecNSInfo[0] != null) {
      $target$$552 = 0;
      mspecNS = mutRecNSInfo[0];
      mtypeAcc$$3 = mutRecNSInfo[1];
    } else {
      $target$$552 = 1;
    }
  } else {
    $target$$552 = 1;
  }

  switch ($target$$552) {
    case 0:
      {
        mspecNS.entity_modul_contents = new _tast.MaybeLazy$00601(0, "Strict", mtypeAcc$$3.contents);
        break;
      }
  }
}

function MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents(mutRecNSInfo$$1, defns) {
  MutRecShapes$$$iterModules(function f1$$25(tupledArg$$107) {
    const mtypeAcc$$4 = tupledArg$$107[0].fields[0];
    const mspec$$1 = tupledArg$$107[0].fields[1];
    mspec$$1.entity_modul_contents = new _tast.MaybeLazy$00601(0, "Strict", mtypeAcc$$4.contents);
  }, defns);
  MutRecBindingChecking$$$TcMutRecDefns_UpdateNSContents(mutRecNSInfo$$1);
}

function MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs(getTyconOpt, getVals, cenv$$216, report, scopem$$20, m$$391, envInitial$$1, mutRecShape) {
  return MutRecShapes$$$computeEnvs(function f1$$26(envAbove, _arg1$$57) {
    const mtypeAcc$$5 = _arg1$$57.fields[0];
    const mspec$$2 = _arg1$$57.fields[1];
    return MakeInnerEnvWithAcc(envAbove, (0, _tast.Entity$$get_Id)(mspec$$2), mtypeAcc$$5, (0, _tast.ModuleOrNamespaceType$$get_ModuleOrNamespaceKind)((0, _tast.Entity$$get_ModuleOrNamespaceType)(mspec$$2)));
  }, function f2$$13(envAbove$$1, decls) {
    const tycons$$2 = (0, _List.choose)(function chooser$$10(_arg1$$58) {
      if (_arg1$$58.tag === 0) {
        const d$$17 = _arg1$$58.fields[0];
        return getTyconOpt(d$$17);
      } else {
        return null;
      }
    }, decls);
    const mspecs$$2 = (0, _List.choose)(function chooser$$11(_arg2$$16) {
      if (_arg2$$16.tag === 2) {
        const mspec$$3 = _arg2$$16.fields[0].fields[1];
        return mspec$$3;
      } else {
        return null;
      }
    }, decls);
    const moduleAbbrevs = (0, _List.choose)(function chooser$$12(_arg3$$12) {
      if (_arg3$$12.tag === 3) {
        const mp = _arg3$$12.fields[0].fields[1];
        const m$$392 = _arg3$$12.fields[0].fields[2];
        const id$$109 = _arg3$$12.fields[0].fields[0];
        return [id$$109, mp, m$$392];
      } else {
        return null;
      }
    }, decls);
    const opens = (0, _List.choose)(function chooser$$13(_arg4$$10) {
      if (_arg4$$10.tag === 4) {
        const mp$$1 = _arg4$$10.fields[0].fields[0];
        const m$$393 = _arg4$$10.fields[0].fields[1];
        return [mp$$1, m$$393];
      } else {
        return null;
      }
    }, decls);
    const lets = (0, _List.collect)(function mapping$$149(_arg5$$10) {
      if (_arg5$$10.tag === 1) {
        const binds$$39 = _arg5$$10.fields[0];
        return getVals(binds$$39);
      } else {
        return (0, _Types.L)();
      }
    }, decls);
    const exns = (0, _List.filter)(function predicate$$69(tycon$$4) {
      return (0, _tast.Entity$$get_IsExceptionDecl)(tycon$$4);
    }, tycons$$2);
    const envForDecls$$3 = envAbove$$1;
    const envForDecls$$4 = (0, _List.fold)((0, _Util.uncurry)(2, (report ? function (g$$53) {
      return function (amap$$17) {
        return function (m$$394) {
          return function (env$$285) {
            return function (modul$$3) {
              return AddLocalSubModuleAndReport(cenv$$216.tcSink, scopem$$20, g$$53, amap$$17, m$$394, env$$285, modul$$3);
            };
          };
        };
      };
    } : function (g$$54) {
      return function (amap$$18) {
        return function (m$$395) {
          return function (env$$286) {
            return function (modul$$4) {
              return AddLocalSubModule(g$$54, amap$$18, m$$395, env$$286, modul$$4);
            };
          };
        };
      };
    })(cenv$$216.g)(cenv$$216.amap)(m$$391)), envForDecls$$3, mspecs$$2);
    const envForDecls$$5 = (0, _List.fold)(function folder$$23(env$$287, tupledArg$$108) {
      return TcOpenDecl(cenv$$216.tcSink, cenv$$216.g, cenv$$216.amap, tupledArg$$108[1], scopem$$20, env$$287, tupledArg$$108[0]);
    }, envForDecls$$4, opens);
    const envForDecls$$6 = (report ? function (g$$55) {
      return function (amap$$19) {
        return function (m$$397) {
          return function (tycons$$3) {
            return function (env$$288) {
              return AddLocalTyconsAndReport(cenv$$216.tcSink, scopem$$20, g$$55, amap$$19, m$$397, tycons$$3, env$$288);
            };
          };
        };
      };
    } : function (g$$56) {
      return function (amap$$20) {
        return function (m$$398) {
          return function (tycons$$4) {
            return function (env$$289) {
              return AddLocalTycons(g$$56, amap$$20, m$$398, tycons$$4, env$$289);
            };
          };
        };
      };
    })(cenv$$216.g)(cenv$$216.amap)(m$$391)(tycons$$2)(envForDecls$$5);
    const envForDecls$$7 = (0, _List.fold)(function folder$$24(env$$290, exnc$$1) {
      return AddLocalExnDefnAndReport(cenv$$216.tcSink, scopem$$20, env$$290, exnc$$1);
    }, envForDecls$$6, exns);
    const envForDecls$$8 = (0, _List.fold)(function folder$$25(env$$291, modul$$5) {
      return AddLocalSubModule(cenv$$216.g, cenv$$216.amap, m$$391, env$$291, modul$$5);
    }, envForDecls$$7, mspecs$$2);
    const envForDecls$$9 = (0, _List.fold)(function folder$$26(env$$292, tupledArg$$109) {
      return MutRecBindingChecking$$$TcModuleAbbrevDecl(cenv$$216, scopem$$20, env$$292, tupledArg$$109[0], tupledArg$$109[1], tupledArg$$109[2]);
    }, envForDecls$$8, moduleAbbrevs);
    const envForDecls$$10 = AddLocalVals(cenv$$216.tcSink, scopem$$20, lets, envForDecls$$9);
    return envForDecls$$10;
  }, envInitial$$1, mutRecShape);
}

function MutRecBindingChecking$$$TcMutRecDefns_Phase2_Bindings(cenv$$217, envInitial$$2, tpenv$$397, bindsm$$5, scopem$$21, mutRecNSInfo$$2, envMutRecPrelimWithReprs, mutRecDefns$$1) {
  const g$$58 = cenv$$217.g;
  const denv$$40 = TcEnv$$get_DisplayEnv(envMutRecPrelimWithReprs);
  const patternInput$$548 = MutRecBindingChecking$$$TcMutRecBindings_Phase2A_CreateRecursiveValuesAndCheckArgumentPatterns(cenv$$217, tpenv$$397, envMutRecPrelimWithReprs, mutRecDefns$$1);
  MutRecShapes$$$iterTycons(function f1$$27(_arg1$$59) {
    const fixupFinalAttrs = _arg1$$59.fields[5];
    fixupFinalAttrs();
  }, mutRecDefns$$1);
  MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents(mutRecNSInfo$$2, patternInput$$548[0]);
  let patternInput$$549;
  const tupledArg$$110 = MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs(function getTyconOpt$$1(_arg2$$17) {
    const tyconOpt$$4 = _arg2$$17.fields[0];
    return tyconOpt$$4;
  }, function getVals$$1(binds$$40) {
    return (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.map)(function (bind$$32) {
        return RecursiveBindingInfo$$get_Val(bind$$32.RecBindingInfo);
      }, binds$$40);
    }));
  }, cenv$$217, false, scopem$$21, scopem$$21, envInitial$$2, MutRecShapes$$$dropEnvs(patternInput$$548[0]));

  patternInput$$549 = function func$$2(env$$296, xs$$20) {
    return MutRecShapes$$$extendEnvs(function f1$$28(envForDecls$$11, decls$$1) {
      const prelimRecValues$$4 = (0, _List.collect)(function mapping$$150(_arg1$$60) {
        switch (_arg1$$60.tag) {
          case 0:
            {
              const prelimRecValues$$3 = _arg1$$60.fields[0].fields[2];
              return prelimRecValues$$3;
            }

          case 1:
            {
              const binds$$41 = _arg1$$60.fields[0];
              return (0, _List.ofSeq)((0, _Seq.delay)(function () {
                return (0, _Seq.map)(function (bind$$33) {
                  return RecursiveBindingInfo$$get_Val(bind$$33.RecBindingInfo);
                }, binds$$41);
              }));
            }

          default:
            {
              return (0, _Types.L)();
            }
        }
      }, decls$$1);
      const ctorVals = (0, _List.collect)(function mapping$$151(_arg3$$13) {
        const defnAs$$5 = _arg3$$13.fields[6];
        return (0, _List.ofSeq)((0, _Seq.delay)(function () {
          return (0, _Seq.collect)(function (defnB$$1) {
            if (defnB$$1.tag === 0) {
              const incrClassCtorLhs$$4 = defnB$$1.fields[0];
              return (0, _Seq.singleton)(incrClassCtorLhs$$4.InstanceCtorVal);
            } else {
              return (0, _Seq.empty)();
            }
          }, defnAs$$5);
        }));
      }, MutRecShapes$$$topTycons(decls$$1));
      const envForDeclsUpdated = AddLocalVals(cenv$$217.tcSink, scopem$$21, ctorVals, AddLocalVals(cenv$$217.tcSink, scopem$$21, prelimRecValues$$4, envForDecls$$11));
      return envForDeclsUpdated;
    }, env$$296, xs$$20);
  }(tupledArg$$110[0], tupledArg$$110[1]);

  const patternInput$$550 = MutRecBindingChecking$$$TcMutRecBindings_Phase2B_TypeCheckAndIncrementalGeneralization(cenv$$217, patternInput$$548[2], envInitial$$2, patternInput$$549[0], patternInput$$549[1], patternInput$$548[1], scopem$$21);
  const generalizedTyparsForRecursiveBlock$$5 = unionGeneralizedTypars((0, _List.map)(function mapping$$152(pgrbind$$22) {
    return PostGeneralizationRecursiveBinding$$get_GeneralizedTypars(pgrbind$$22);
  }, patternInput$$550[1]));
  const allExtraGeneralizableTypars = (0, _List.collect)(function mapping$$153(_arg4$$11) {
    const defnAs$$6 = _arg4$$11.fields[6];
    const copyOfTyconTypars$$4 = _arg4$$11.fields[4];
    return (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.append)(copyOfTyconTypars$$4, (0, _Seq.delay)(function () {
        return (0, _Seq.collect)(function (defnA$$1) {
          if (defnA$$1.tag === 3) {
            const rbind$$11 = defnA$$1.fields[0];
            return RecursiveBindingInfo$$get_EnclosingDeclaredTypars(rbind$$11.RecBindingInfo);
          } else {
            return (0, _Seq.empty)();
          }
        }, defnAs$$6);
      }));
    }));
  }, MutRecShapes$$$collectTycons(patternInput$$549[1]));

  if (!(allExtraGeneralizableTypars.tail == null)) {
    const freeInInitialEnv = GeneralizationHelpers$$$ComputeUngeneralizableTypars(envInitial$$2);
    (0, _Seq.iterate)(function (extraTypar) {
      if ((0, _zset.ZsetModule$$$memberOf)(freeInInitialEnv, extraTypar)) {
        const ty$$135 = (0, _tast.mkTyparTy)(extraTypar);
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNotSufficientlyGenericBecauseOfScope$$Z721C83C5)((0, _NicePrint.prettyStringOfTy)(denv$$40, ty$$135)), (0, _tast.Typar$$get_Range)(extraTypar)));
      }
    }, allExtraGeneralizableTypars);
  }

  let unsolvedTyparsForRecursiveBlockInvolvingGeneralizedVariables;
  const genSet = (0, _TastOps.freeInTypes)(_TastOps.CollectAllNoCaching, (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.map)(_tast.mkTyparTy, generalizedTyparsForRecursiveBlock$$5);
  }))).FreeTypars;
  const allTypes = (0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.append)((0, _Seq.map)(function (pgrbind$$23) {
      return (0, _tast.Val$$get_Type)(RecursiveBindingInfo$$get_Val(pgrbind$$23.RecBindingInfo));
    }, patternInput$$550[1]), (0, _Seq.delay)(function () {
      return (0, _Seq.collect)(function (matchValue$$238) {
        const defnBs$$4 = matchValue$$238.fields[2];
        const _tyconOpt = matchValue$$238.fields[0];
        const _tcref = matchValue$$238.fields[1];
        return (0, _Seq.collect)(function (defnB$$2) {
          if (defnB$$2.tag === 0) {
            const incrClassCtorLhs$$5 = defnB$$2.fields[0];
            return (0, _Seq.singleton)((0, _tast.Val$$get_Type)(incrClassCtorLhs$$5.InstanceCtorVal));
          } else {
            return (0, _Seq.empty)();
          }
        }, defnBs$$4);
      }, MutRecShapes$$$collectTycons(patternInput$$550[0]));
    }));
  }));
  const unsolvedTypars = (0, _TastOps.freeInTypesLeftToRight)(g$$58, true, allTypes);
  const unsolvedTyparsInvolvingGeneralizedVariables = (0, _List.filter)(function predicate$$70(tp$$56) {
    const freeInTypar = (0, _TastOps.freeInType)(_TastOps.CollectAllNoCaching, (0, _tast.mkTyparTy)(tp$$56)).FreeTypars;

    if (!(0, _TaggedCollections.Set$00602$$Contains$$2B595)(genSet, tp$$56)) {
      return (0, _TaggedCollections.Set$00602$$Exists$$Z1D55A0D7)(freeInTypar, function (otherTypar) {
        return (0, _TaggedCollections.Set$00602$$Contains$$2B595)(genSet, otherTypar);
      });
    } else {
      return false;
    }
  }, unsolvedTypars);
  unsolvedTyparsForRecursiveBlockInvolvingGeneralizedVariables = unsolvedTyparsInvolvingGeneralizedVariables;
  (0, _Seq.iterate)(function (tp$$57) {
    if (!(0, _Util.equals)((0, _tast.Typar$$get_Rigidity)(tp$$57), new _tast.TyparRigidity(0, "Rigid")) ? !(0, _tast.Typar$$get_IsSolved)(tp$$57) : false) {
      (0, _ConstraintSolver.ChooseTyparSolutionAndSolve)(cenv$$217.css, denv$$40, tp$$57);
    }
  }, unsolvedTyparsForRecursiveBlockInvolvingGeneralizedVariables);
  const defnsCs$$1 = MutRecBindingChecking$$$TcMutRecBindings_Phase2C_FixupRecursiveReferences(cenv$$217, denv$$40, patternInput$$550[0], generalizedTyparsForRecursiveBlock$$5, patternInput$$550[1], scopem$$21);
  const defnsDs = MutRecBindingChecking$$$TcMutRecBindings_Phase2D_ExtractImplicitFieldAndMethodBindings(cenv$$217, patternInput$$549[0], patternInput$$550[2], denv$$40, generalizedTyparsForRecursiveBlock$$5, defnsCs$$1);
  const defnsEs = EliminateInitializationGraphs(function (tupledArg$$111) {
    return (0, _lib.p23)(tupledArg$$111[0], tupledArg$$111[1], tupledArg$$111[2]);
  }, function (morpher$$1, tupledArg$$112) {
    return [tupledArg$$112[0], (0, _List.append)(morpher$$1(tupledArg$$112[1]), tupledArg$$112[2])];
  }, function (x$$142) {
    return x$$142;
  }, function (morpher$$2, oldBinds$$1) {
    return morpher$$2(oldBinds$$1);
  }, g$$58, true, denv$$40, defnsDs, bindsm$$5);
  return [defnsEs, patternInput$$549[0]];
}

function TcMutRecDefns_Phase2(cenv$$218, envInitial$$4, bindsm$$6, scopem$$22, mutRecNSInfo$$3, envMutRec$$4, mutRecDefns$$2) {
  const interfacesFromTypeDefn = function interfacesFromTypeDefn(envForTycon$$7, tyconMembersData) {
    const tcref$$54 = tyconMembersData.fields[3];
    const members$$2 = tyconMembersData.fields[7];
    const declaredTyconTypars$$7 = tyconMembersData.fields[6];
    const declKind$$30 = tyconMembersData.fields[2];
    const overridesOK$$9 = DeclKind$$$CanOverrideOrImplement$$Z6CE1C8BD(declKind$$30);
    return (0, _List.collect)(function mapping$$154(_arg1$$61) {
      if (_arg1$$61.tag === 6) {
        const ity$$1 = _arg1$$61.fields[0];
        const defnOpt = _arg1$$61.fields[1];
        const patternInput$$551 = (0, _tast.Entity$$get_IsExceptionDecl)((0, _tast.EntityRef$$get_Deref)(tcref$$54)) ? [(0, _Types.L)(), (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$218.g)] : (0, _TastOps.generalizeTyconRef)(tcref$$54);
        const m$$400 = (0, _ast.SynType$$get_Range)(ity$$1);

        if ((0, _tast.EntityRef$$get_IsTypeAbbrev)(tcref$$54)) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeAbbreviationsCannotHaveInterfaceDeclaration)(), m$$400));
        }

        if ((0, _tast.EntityRef$$get_IsEnumTycon)(tcref$$54)) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcEnumerationsCannotHaveInterfaceDeclaration)(), m$$400));
        }

        let ity$0027;
        const envinner$$37 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), declaredTyconTypars$$7, envForTycon$$7);
        ity$0027 = TcTypeAndRecover(cenv$$218, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$37, emptyUnscopedTyparEnv, ity$$1)[0];

        if (!(0, _TastOps.isInterfaceTy)(cenv$$218.g, ity$0027)) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeIsNotInterfaceType0)(), (0, _ast.SynType$$get_Range)(ity$$1)));
        }

        if (!(0, _TastOps.EntityRef$002EHasInterface)(tcref$$54, cenv$$218.g, ity$0027)) {
          (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAllImplementedInterfacesShouldBeDeclared)(), (0, _ast.SynType$$get_Range)(ity$$1)));
        }

        if ((((((0, _TastOps.typeEquiv)(cenv$$218.g, ity$0027, (0, _TcGlobals.TcGlobals$$get_mk_IComparable_ty)(cenv$$218.g)) ? (0, _tast.EntityRef$$get_GeneratedCompareToValues)(tcref$$54) != null : false) ? true : (0, _TastOps.typeEquiv)(cenv$$218.g, ity$0027, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralComparable_ty)(cenv$$218.g)) ? (0, _tast.EntityRef$$get_GeneratedCompareToWithComparerValues)(tcref$$54) != null : false) ? true : (0, _TastOps.typeEquiv)(cenv$$218.g, ity$0027, (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_system_GenericIComparable_tcref)(cenv$$218.g), (0, _Types.L)(patternInput$$551[1], (0, _Types.L)()))) ? (0, _tast.EntityRef$$get_GeneratedCompareToValues)(tcref$$54) != null : false) ? true : (0, _TastOps.typeEquiv)(cenv$$218.g, ity$0027, (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_system_GenericIEquatable_tcref)(cenv$$218.g), (0, _Types.L)(patternInput$$551[1], (0, _Types.L)()))) ? (0, _tast.EntityRef$$get_GeneratedHashAndEqualsWithComparerValues)(tcref$$54) != null : false) ? true : (0, _TastOps.typeEquiv)(cenv$$218.g, ity$0027, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralEquatable_ty)(cenv$$218.g)) ? (0, _tast.EntityRef$$get_GeneratedHashAndEqualsWithComparerValues)(tcref$$54) != null : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDefaultImplementationForInterfaceHasAlreadyBeenAdded)(), (0, _ast.SynType$$get_Range)(ity$$1)));
        }

        if ((0, _Util.equals)(overridesOK$$9, new OverridesOK(1, "WarnOnOverrides"))) {
          (0, _ErrorLogger.warning)(new IntfImplInIntrinsicAugmentation((0, _ast.SynType$$get_Range)(ity$$1)));
        }

        if ((0, _Util.equals)(overridesOK$$9, new OverridesOK(2, "ErrorOnOverrides"))) {
          (0, _ErrorLogger.errorR)(new IntfImplInExtrinsicAugmentation((0, _ast.SynType$$get_Range)(ity$$1)));
        }

        if (defnOpt != null) {
          const defn$$2 = defnOpt;
          return (0, _Types.L)([ity$0027, defn$$2, m$$400], (0, _Types.L)());
        } else {
          return (0, _Types.L)();
        }
      } else {
        return (0, _Types.L)();
      }
    }, members$$2);
  };

  const interfaceMembersFromTypeDefn = function interfaceMembersFromTypeDefn(tyconMembersData$$1, tupledArg$$113, implTySet$$1) {
    const tcref$$55 = tyconMembersData$$1.fields[3];
    const safeInitInfo$$12 = tyconMembersData$$1.fields[5];
    const parent$$12 = tyconMembersData$$1.fields[1];
    const newslotsOK$$6 = tyconMembersData$$1.fields[9];
    const declaredTyconTypars$$8 = tyconMembersData$$1.fields[6];
    const declKind$$31 = tyconMembersData$$1.fields[2];
    const baseValOpt$$16 = tyconMembersData$$1.fields[4];
    const containerInfo$$8 = new ContainerInfo(0, "ContainerInfo", parent$$12, new MemberOrValContainerInfo(0, "MemberOrValContainerInfo", tcref$$55, [tupledArg$$113[0], implTySet$$1], baseValOpt$$16, safeInitInfo$$12, declaredTyconTypars$$8));
    return (0, _List.choose)(function chooser$$14(mem) {
      switch (mem.tag) {
        case 1:
          {
            const m$$401 = mem.fields[1];
            return new TyconBindingDefn(0, "TyconBindingDefn", containerInfo$$8, newslotsOK$$6, declKind$$31, mem, m$$401);
          }

        case 10:
          {
            const m$$402 = mem.fields[10];
            return new TyconBindingDefn(0, "TyconBindingDefn", containerInfo$$8, newslotsOK$$6, declKind$$31, mem, m$$402);
          }

        default:
          {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMemberNotPermittedInInterfaceImplementation)(), (0, _ast.SynMemberDefn$$get_Range)(mem)));
            return null;
          }
      }
    }, tupledArg$$113[1]);
  };

  const tyconBindingsOfTypeDefn = function tyconBindingsOfTypeDefn(_arg3$$14) {
    const tcref$$56 = _arg3$$14.fields[3];
    const safeInitInfo$$13 = _arg3$$14.fields[5];
    const parent$$13 = _arg3$$14.fields[1];
    const newslotsOK$$7 = _arg3$$14.fields[9];
    const members$$3 = _arg3$$14.fields[7];
    const declaredTyconTypars$$9 = _arg3$$14.fields[6];
    const declKind$$32 = _arg3$$14.fields[2];
    const baseValOpt$$17 = _arg3$$14.fields[4];
    const containerInfo$$9 = new ContainerInfo(0, "ContainerInfo", parent$$13, new MemberOrValContainerInfo(0, "MemberOrValContainerInfo", tcref$$56, null, baseValOpt$$17, safeInitInfo$$13, declaredTyconTypars$$9));
    return (0, _List.choose)(function chooser$$15(memb$$2) {
      var $target$$561;

      switch (memb$$2.tag) {
        case 3:
        case 4:
        case 10:
        case 1:
        case 0:
          $target$$561 = 0;
          break;

        case 6:
          $target$$561 = 1;
          break;

        case 5:
        case 8:
        case 7:
          $target$$561 = 2;
          break;

        case 9:
          $target$$561 = 3;
          break;

        default:
          $target$$561 = 0;
      }

      switch ($target$$561) {
        case 0:
          {
            return new TyconBindingDefn(0, "TyconBindingDefn", containerInfo$$9, newslotsOK$$7, declKind$$32, memb$$2, (0, _ast.SynMemberDefn$$get_Range)(memb$$2));
          }

        case 1:
          {
            return null;
          }

        case 2:
          {
            return (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Unexpected declaration element", (0, _ast.SynMemberDefn$$get_Range)(memb$$2)));
          }

        case 3:
          {
            return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypesCannotContainNestedTypes)(), (0, _ast.SynMemberDefn$$get_Range)(memb$$2)));
          }
      }
    }, members$$3);
  };

  const tpenv$$400 = emptyUnscopedTyparEnv;

  try {
    MutRecShapes$$$iterTycons(function f1$$29(tyconData) {
      const tcref$$57 = tyconData.fields[3];
      const newslotsOK$$8 = tyconData.fields[9];
      const members$$4 = tyconData.fields[7];
      const m$$403 = tyconData.fields[8];
      const declKind$$33 = tyconData.fields[2];
      const tcaug$$2 = (0, _tast.EntityRef$$get_TypeContents)(tcref$$57);

      if (tcaug$$2.tcaug_closed ? !(0, _Util.equals)(declKind$$33, new DeclKind(2, "ExtrinsicExtensionBinding")) : false) {
        (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("Intrinsic augmentations of types are only permitted in the same file as the definition of the type", m$$403));
      }

      (0, _List.iterate)(function action$$44(mem$$1) {
        var $target$$562;

        if (mem$$1.tag === 1) {
          $target$$562 = 0;
        } else if (mem$$1.tag === 6) {
          $target$$562 = 1;
        } else if (mem$$1.tag === 0) {
          if ((0, _Util.equals)(newslotsOK$$8, new NewSlotsOK(0, "NewSlotsOK"))) {
            $target$$562 = 2;
          } else {
            $target$$562 = 3;
          }
        } else if (mem$$1.tag === 10) {
          if ((0, _Util.equals)(newslotsOK$$8, new NewSlotsOK(0, "NewSlotsOK"))) {
            $target$$562 = 2;
          } else {
            $target$$562 = 3;
          }
        } else if (mem$$1.tag === 4) {
          if ((0, _Util.equals)(newslotsOK$$8, new NewSlotsOK(0, "NewSlotsOK"))) {
            $target$$562 = 2;
          } else {
            $target$$562 = 3;
          }
        } else if (mem$$1.tag === 2) {
          if ((0, _Util.equals)(newslotsOK$$8, new NewSlotsOK(0, "NewSlotsOK"))) {
            $target$$562 = 2;
          } else {
            $target$$562 = 3;
          }
        } else if (mem$$1.tag === 3) {
          if ((0, _Util.equals)(newslotsOK$$8, new NewSlotsOK(0, "NewSlotsOK"))) {
            $target$$562 = 2;
          } else {
            $target$$562 = 3;
          }
        } else {
          $target$$562 = 3;
        }

        switch ($target$$562) {
          case 3:
            {
              (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDeclarationElementNotPermittedInAugmentation)(), (0, _ast.SynMemberDefn$$get_Range)(mem$$1)));
              break;
            }
        }
      }, members$$4);
    }, mutRecDefns$$2);
    const binds$$42 = MutRecShapes$$$mapTyconsWithEnv(function f1$$30(envForDecls$$12, tyconData$$1) {
      const tyconOpt$$6 = tyconData$$1.fields[0];
      const tcref$$58 = tyconData$$1.fields[3];
      const fixupFinalAttrs$$1 = tyconData$$1.fields[10];
      const declaredTyconTypars$$10 = tyconData$$1.fields[6];
      const declKind$$34 = tyconData$$1.fields[2];
      const obinds = tyconBindingsOfTypeDefn(tyconData$$1);
      let ibinds;
      const intfTypes = interfacesFromTypeDefn(envForDecls$$12, tyconData$$1);
      const slotImplSets$$1 = (0, _MethodOverrides.DispatchSlotChecking$$$GetSlotImplSets)(cenv$$218.infoReader, TcEnv$$get_DisplayEnv(envForDecls$$12), false, (0, _List.map)(function (tupledArg$$114) {
        return [tupledArg$$114[0], tupledArg$$114[2]];
      }, intfTypes));
      ibinds = (0, _List.concat)((0, _List.map2)((0, _Util.uncurry)(2, (0, _Util.partialApply)(2, interfaceMembersFromTypeDefn, [tyconData$$1])), intfTypes, slotImplSets$$1));
      return new MutRecDefnsPhase2InfoForTycon(0, "MutRecDefnsPhase2InfoForTycon", tyconOpt$$6, tcref$$58, declaredTyconTypars$$10, declKind$$34, (0, _List.append)(obinds, ibinds), fixupFinalAttrs$$1);
    }, envMutRec$$4, mutRecDefns$$2);
    return MutRecBindingChecking$$$TcMutRecDefns_Phase2_Bindings(cenv$$218, envInitial$$4, tpenv$$400, bindsm$$6, scopem$$22, mutRecNSInfo$$3, envMutRec$$4, binds$$42);
  } catch (e$$120) {
    (0, _ErrorLogger.errorRecovery)(e$$120, scopem$$22);
    return [(0, _Types.L)(), envMutRec$$4];
  }
}

function AddAugmentationDeclarations$$$tcaugHasNominalInterface(g$$59, tcaug$$3, tcref$$59) {
  return (0, _List.exists)(function predicate$$71(tupledArg$$115) {
    var tcref2;
    const matchValue$$239 = (0, _TastOps.tryDestAppTy)(g$$59, tupledArg$$115[0]);
    var $target$$563, tcref2$$1;

    if (matchValue$$239 != null) {
      if (tcref2 = matchValue$$239, (0, _TastOps.tyconRefEq)(g$$59, tcref2, tcref$$59)) {
        $target$$563 = 0;
        tcref2$$1 = matchValue$$239;
      } else {
        $target$$563 = 1;
      }
    } else {
      $target$$563 = 1;
    }

    switch ($target$$563) {
      case 0:
        {
          return true;
        }

      case 1:
        {
          return false;
        }
    }
  }, tcaug$$3.tcaug_interfaces);
}

function AddAugmentationDeclarations$$$AddGenericCompareDeclarations(cenv$$219, env$$298, scSet, tycon$$5) {
  if ((0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithCompare)(cenv$$219.g, tycon$$5) ? (0, _Set.FSharpSet$$Contains$$2B595)(scSet, (0, _tast.Entity$$get_Stamp)(tycon$$5)) : false) {
    const tcref$$60 = (0, _tast.mkLocalTyconRef)(tycon$$5);
    const tcaug$$4 = (0, _tast.Entity$$get_TypeContents)(tycon$$5);
    const patternInput$$552 = (0, _tast.Entity$$get_IsExceptionDecl)((0, _tast.EntityRef$$get_Deref)(tcref$$60)) ? [(0, _Types.L)(), (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$219.g)] : (0, _TastOps.generalizeTyconRef)(tcref$$60);
    const m$$405 = (0, _tast.Entity$$get_Range)(tycon$$5);
    const genericIComparableTy = (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_system_GenericIComparable_tcref)(cenv$$219.g), (0, _Types.L)(patternInput$$552[1], (0, _Types.L)()));
    const hasExplicitIComparable = (0, _TastOps.Entity$002EHasInterface)(tycon$$5, cenv$$219.g, (0, _TcGlobals.TcGlobals$$get_mk_IComparable_ty)(cenv$$219.g));
    const hasExplicitGenericIComparable = AddAugmentationDeclarations$$$tcaugHasNominalInterface(cenv$$219.g, tcaug$$4, (0, _TcGlobals.TcGlobals$$get_system_GenericIComparable_tcref)(cenv$$219.g));
    const hasExplicitIStructuralComparable = (0, _TastOps.Entity$002EHasInterface)(tycon$$5, cenv$$219.g, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralComparable_ty)(cenv$$219.g));

    if (hasExplicitIComparable) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcImplementsIComparableExplicitly$$Z721C83C5)((0, _tast.Entity$$get_DisplayName)(tycon$$5)), m$$405));
    } else if (hasExplicitGenericIComparable) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcImplementsGenericIComparableExplicitly$$Z721C83C5)((0, _tast.Entity$$get_DisplayName)(tycon$$5)), m$$405));
    } else if (hasExplicitIStructuralComparable) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcImplementsIStructuralComparableExplicitly$$Z721C83C5)((0, _tast.Entity$$get_DisplayName)(tycon$$5)), m$$405));
    } else {
      const hasExplicitGenericIComparable$$1 = (0, _TastOps.Entity$002EHasInterface)(tycon$$5, cenv$$219.g, genericIComparableTy);
      const patternInput$$553 = (0, _AugmentWithHashCompare.MakeValsForCompareAugmentation)(cenv$$219.g, tcref$$60);
      const cvspec3 = (0, _AugmentWithHashCompare.MakeValsForCompareWithComparerAugmentation)(cenv$$219.g, tcref$$60);
      PublishInterface(cenv$$219, TcEnv$$get_DisplayEnv(env$$298), tcref$$60, m$$405, true, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralComparable_ty)(cenv$$219.g));
      PublishInterface(cenv$$219, TcEnv$$get_DisplayEnv(env$$298), tcref$$60, m$$405, true, (0, _TcGlobals.TcGlobals$$get_mk_IComparable_ty)(cenv$$219.g));

      if (!(0, _tast.Entity$$get_IsExceptionDecl)(tycon$$5) ? !hasExplicitGenericIComparable$$1 : false) {
        PublishInterface(cenv$$219, TcEnv$$get_DisplayEnv(env$$298), tcref$$60, m$$405, true, genericIComparableTy);
      }

      (0, _tast.TyconAugmentation$$SetCompare$$2880AC4F)(tcaug$$4, [(0, _tast.mkLocalValRef)(patternInput$$553[0]), (0, _tast.mkLocalValRef)(patternInput$$553[1])]);
      (0, _tast.TyconAugmentation$$SetCompareWith$$7D2DE7B4)(tcaug$$4, (0, _tast.mkLocalValRef)(cvspec3));
      PublishValueDefn(cenv$$219, env$$298, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$553[0]);
      PublishValueDefn(cenv$$219, env$$298, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$553[1]);
      PublishValueDefn(cenv$$219, env$$298, new DeclKind(0, "ModuleOrMemberBinding"), cvspec3);
    }
  }
}

function AddAugmentationDeclarations$$$AddGenericEqualityWithComparerDeclarations(cenv$$220, env$$299, seSet, tycon$$6) {
  if ((0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$220.g, tycon$$6) ? (0, _Set.FSharpSet$$Contains$$2B595)(seSet, (0, _tast.Entity$$get_Stamp)(tycon$$6)) : false) {
    const tcref$$61 = (0, _tast.mkLocalTyconRef)(tycon$$6);
    const tcaug$$5 = (0, _tast.Entity$$get_TypeContents)(tycon$$6);
    const m$$406 = (0, _tast.Entity$$get_Range)(tycon$$6);
    const hasExplicitIStructuralEquatable = (0, _TastOps.Entity$002EHasInterface)(tycon$$6, cenv$$220.g, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralEquatable_ty)(cenv$$220.g));

    if (hasExplicitIStructuralEquatable) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcImplementsIStructuralEquatableExplicitly$$Z721C83C5)((0, _tast.Entity$$get_DisplayName)(tycon$$6)), m$$406));
    } else {
      const patternInput$$554 = (0, _AugmentWithHashCompare.MakeValsForEqualityWithComparerAugmentation)(cenv$$220.g, tcref$$61);
      PublishInterface(cenv$$220, TcEnv$$get_DisplayEnv(env$$299), tcref$$61, m$$406, true, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralEquatable_ty)(cenv$$220.g));
      (0, _tast.TyconAugmentation$$SetHashAndEqualsWith$$329E5074)(tcaug$$5, [(0, _tast.mkLocalValRef)(patternInput$$554[0]), (0, _tast.mkLocalValRef)(patternInput$$554[1]), (0, _tast.mkLocalValRef)(patternInput$$554[2])]);
      PublishValueDefn(cenv$$220, env$$299, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$554[0]);
      PublishValueDefn(cenv$$220, env$$299, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$554[1]);
      PublishValueDefn(cenv$$220, env$$299, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$554[2]);
    }
  }
}

function AddAugmentationDeclarations$$$AddGenericCompareBindings(cenv$$221, tycon$$7) {
  if ((0, _tast.Entity$$get_GeneratedCompareToValues)(tycon$$7) != null) {
    return (0, _AugmentWithHashCompare.MakeBindingsForCompareAugmentation)(cenv$$221.g, tycon$$7);
  } else {
    return (0, _Types.L)();
  }
}

function AddAugmentationDeclarations$$$AddGenericCompareWithComparerBindings(cenv$$222, tycon$$8) {
  if ((0, _tast.Entity$$get_GeneratedCompareToWithComparerValues)(tycon$$8) != null) {
    return (0, _AugmentWithHashCompare.MakeBindingsForCompareWithComparerAugmentation)(cenv$$222.g, tycon$$8);
  } else {
    return (0, _Types.L)();
  }
}

function AddAugmentationDeclarations$$$AddGenericEqualityWithComparerBindings(cenv$$223, tycon$$9) {
  if ((0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$223.g, tycon$$9) ? (0, _tast.Entity$$get_GeneratedHashAndEqualsWithComparerValues)(tycon$$9) != null : false) {
    return (0, _AugmentWithHashCompare.MakeBindingsForEqualityWithComparerAugmentation)(cenv$$223.g, tycon$$9);
  } else {
    return (0, _Types.L)();
  }
}

function AddAugmentationDeclarations$$$AddGenericHashAndComparisonDeclarations(cenv$$224, env$$300, scSet$$1, seSet$$1, tycon$$10) {
  AddAugmentationDeclarations$$$AddGenericCompareDeclarations(cenv$$224, env$$300, scSet$$1, tycon$$10);
  AddAugmentationDeclarations$$$AddGenericEqualityWithComparerDeclarations(cenv$$224, env$$300, seSet$$1, tycon$$10);
}

function AddAugmentationDeclarations$$$AddGenericHashAndComparisonBindings(cenv$$225, tycon$$11) {
  return (0, _List.append)(AddAugmentationDeclarations$$$AddGenericCompareBindings(cenv$$225, tycon$$11), (0, _List.append)(AddAugmentationDeclarations$$$AddGenericCompareWithComparerBindings(cenv$$225, tycon$$11), AddAugmentationDeclarations$$$AddGenericEqualityWithComparerBindings(cenv$$225, tycon$$11)));
}

function AddAugmentationDeclarations$$$AddGenericEqualityBindings(cenv$$226, env$$301, tycon$$12) {
  if ((0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$226.g, tycon$$12)) {
    const tcref$$62 = (0, _tast.mkLocalTyconRef)(tycon$$12);
    const tcaug$$6 = (0, _tast.Entity$$get_TypeContents)(tycon$$12);
    const patternInput$$555 = (0, _tast.Entity$$get_IsExceptionDecl)((0, _tast.EntityRef$$get_Deref)(tcref$$62)) ? [(0, _Types.L)(), (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$226.g)] : (0, _TastOps.generalizeTyconRef)(tcref$$62);
    const m$$407 = (0, _tast.Entity$$get_Range)(tycon$$12);
    const hasExplicitObjectEqualsOverride = (0, _TastOps.Entity$002EHasOverride)(tycon$$12, cenv$$226.g, "Equals", (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$226.g), (0, _Types.L)()));
    const hasExplicitGenericIEquatable = AddAugmentationDeclarations$$$tcaugHasNominalInterface(cenv$$226.g, tcaug$$6, (0, _TcGlobals.TcGlobals$$get_system_GenericIEquatable_tcref)(cenv$$226.g));

    if (hasExplicitGenericIEquatable) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcImplementsIEquatableExplicitly$$Z721C83C5)((0, _tast.Entity$$get_DisplayName)(tycon$$12)), m$$407));
    }

    if (!hasExplicitObjectEqualsOverride ? (0, _tast.Entity$$get_GeneratedHashAndEqualsWithComparerValues)(tycon$$12) != null : false) {
      const patternInput$$556 = (0, _AugmentWithHashCompare.MakeValsForEqualsAugmentation)(cenv$$226.g, tcref$$62);
      (0, _tast.TyconAugmentation$$SetEquals$$2880AC4F)(tcaug$$6, [(0, _tast.mkLocalValRef)(patternInput$$556[0]), (0, _tast.mkLocalValRef)(patternInput$$556[1])]);

      if (!(0, _tast.Entity$$get_IsExceptionDecl)(tycon$$12)) {
        PublishInterface(cenv$$226, TcEnv$$get_DisplayEnv(env$$301), tcref$$62, m$$407, true, (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_system_GenericIEquatable_tcref)(cenv$$226.g), (0, _Types.L)(patternInput$$555[1], (0, _Types.L)())));
      }

      PublishValueDefn(cenv$$226, env$$301, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$556[0]);
      PublishValueDefn(cenv$$226, env$$301, new DeclKind(0, "ModuleOrMemberBinding"), patternInput$$556[1]);
      return (0, _AugmentWithHashCompare.MakeBindingsForEqualsAugmentation)(cenv$$226.g, tycon$$12);
    } else {
      return (0, _Types.L)();
    }
  } else {
    return (0, _Types.L)();
  }
}

function TyconConstraintInference$$$InferSetOfTyconsSupportingComparable(cenv$$227, denv$$41, tyconsWithStructuralTypes) {
  const g$$60 = cenv$$227.g;
  const tab$$3 = (0, _Map.ofList)((0, _List.map)(function mapping$$156(tupledArg$$116) {
    return [(0, _tast.Entity$$get_Stamp)(tupledArg$$116[0]), [tupledArg$$116[0], tupledArg$$116[1]]];
  }, tyconsWithStructuralTypes), {
    Compare: _Long.compare
  });
  const initialAssumedTycons = (0, _Set.ofSeq)((0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$240) {
      return (0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithCompare)(cenv$$227.g, matchValue$$240[0]) ? (0, _Seq.singleton)((0, _tast.Entity$$get_Stamp)(matchValue$$240[0])) : (0, _Seq.empty)();
    }, tyconsWithStructuralTypes);
  })), {
    Compare: _Long.compare
  });
  const initialAsssumedTypars = (0, _Set.empty)({
    Compare: _Util.compare
  });

  const loop$$3 = function loop$$3(assumedTycons, assumedTypars) {
    loop$$3: while (true) {
      const assumedTyparsAcc = new _Types.FSharpRef(assumedTypars);

      const checkIfFieldTypeSupportsComparison = function checkIfFieldTypeSupportsComparison(tycon$$15, ty$$139) {
        const matchValue$$241 = (0, _TastOps.tryDestTyparTy)(cenv$$227.g, ty$$139);

        if (matchValue$$241 == null) {
          const activePatternResult49265 = (0, _TastOps.$007CSpecialComparableHeadType$007C_$007C)(g$$60, ty$$139);

          if (activePatternResult49265 != null) {
            const tinst$$27 = activePatternResult49265;
            return (0, _List.forAll)((0, _Util.partialApply)(1, checkIfFieldTypeSupportsComparison, [tycon$$15]), tinst$$27);
          } else {
            const activePatternResult49263 = (0, _TastOps.$007CAppTy$007C_$007C)(g$$60, ty$$139);

            if (activePatternResult49263 != null) {
              if (((0, _Set.FSharpSet$$Contains$$2B595)(initialAssumedTycons, (0, _tast.EntityRef$$get_Stamp)(activePatternResult49263[0])) ? (0, _Set.FSharpSet$$Contains$$2B595)(assumedTycons, (0, _tast.EntityRef$$get_Stamp)(activePatternResult49263[0])) : (0, _infos.ExistsSameHeadTypeInHierarchy)(g$$60, cenv$$227.amap, _range.range0, ty$$139, (0, _TcGlobals.TcGlobals$$get_mk_IComparable_ty)(g$$60)) ? true : (0, _infos.ExistsSameHeadTypeInHierarchy)(g$$60, cenv$$227.amap, _range.range0, ty$$139, (0, _TcGlobals.TcGlobals$$get_mk_IStructuralComparable_ty)(g$$60))) ? !(0, _TastOps.HasFSharpAttribute)(g$$60, (0, _TcGlobals.TcGlobals$$get_attrib_NoComparisonAttribute)(g$$60), (0, _tast.EntityRef$$get_Attribs)(activePatternResult49263[0])) : false) {
                return (0, _illib.List$$$lengthsEqAndForall2)(function p$$35(ty$$140, tp$$59) {
                  if ((0, _tast.Typar$$get_ComparisonConditionalOn)(tp$$59) ? true : (0, _Set.FSharpSet$$Contains$$2B595)(assumedTypars, (0, _tast.Typar$$get_Stamp)(tp$$59))) {
                    return checkIfFieldTypeSupportsComparison(tycon$$15, ty$$140);
                  } else {
                    return true;
                  }
                }, activePatternResult49263[1], (0, _tast.EntityRef$$get_TyparsNoRange)(activePatternResult49263[0]));
              } else {
                return false;
              }
            } else {
              return false;
            }
          }
        } else {
          const tp$$58 = matchValue$$241;

          if ((0, _List.exists)(function predicate$$72(_arg1$$64) {
            if (_arg1$$64.tag === 9) {
              return true;
            } else {
              return false;
            }
          }, (0, _tast.Typar$$get_Constraints)(tp$$58))) {
            return true;
          } else if ((0, _List.exists)(function predicate$$73(tp2$$1) {
            return (0, _tast.typarRefEq)(tp$$58, tp2$$1);
          }, (0, _tast.Entity$$get_TyparsNoRange)(tycon$$15))) {
            assumedTyparsAcc.contents = (0, _Set.FSharpSet$$Add$$2B595)(assumedTyparsAcc.contents, (0, _tast.Typar$$get_Stamp)(tp$$58));
            return true;
          } else {
            return false;
          }
        }
      };

      const newSet = (0, _Set.filter)(function predicate$$78(tyconStamp) {
        const patternInput$$557 = (0, _Map.FSharpMap$$get_Item$$2B595)(tab$$3, tyconStamp);

        if ((((0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$227.g) ? (0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithCompare)(cenv$$227.g, patternInput$$557[0]) : false) ? !(0, _TastOps.HasFSharpAttribute)(g$$60, (0, _TcGlobals.TcGlobals$$get_attrib_StructuralComparisonAttribute)(g$$60), (0, _tast.Entity$$get_Attribs)(patternInput$$557[0])) : false) ? !(0, _TastOps.HasFSharpAttribute)(g$$60, (0, _TcGlobals.TcGlobals$$get_attrib_NoComparisonAttribute)(g$$60), (0, _tast.Entity$$get_Attribs)(patternInput$$557[0])) : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFSharpCoreRequiresExplicit)(), (0, _tast.Entity$$get_Range)(patternInput$$557[0])));
        }

        const res$$38 = (0, _List.forAll)(function predicate$$75($arg$$107) {
          return checkIfFieldTypeSupportsComparison(patternInput$$557[0], $arg$$107[0]);
        }, patternInput$$557[1]);

        if (!res$$38) {
          const matchValue$$242 = (0, _TastOps.TryFindFSharpBoolAttribute)(g$$60, (0, _TcGlobals.TcGlobals$$get_attrib_StructuralComparisonAttribute)(g$$60), (0, _tast.Entity$$get_Attribs)(patternInput$$557[0]));

          if (matchValue$$242 == null) {
            const matchValue$$244 = (0, _List.tryFind)(function predicate$$77($arg$$111) {
              return !checkIfFieldTypeSupportsComparison(patternInput$$557[0], $arg$$111[0]);
            }, patternInput$$557[1]);

            if (matchValue$$244 != null) {
              const ty$$142 = matchValue$$244[0];

              if ((0, _TastOps.isTyparTy)(g$$60, ty$$142)) {
                (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoComparisonNeeded1$$30230F9B)((0, _tast.Entity$$get_DisplayName)(patternInput$$557[0]), (0, _NicePrint.prettyStringOfTy)(denv$$41, ty$$142), (0, _tast.Entity$$get_DisplayName)(patternInput$$557[0])), (0, _tast.Entity$$get_Range)(patternInput$$557[0])));
              } else {
                (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoComparisonNeeded2$$30230F9B)((0, _tast.Entity$$get_DisplayName)(patternInput$$557[0]), (0, _NicePrint.prettyStringOfTy)(denv$$41, ty$$142), (0, _tast.Entity$$get_DisplayName)(patternInput$$557[0])), (0, _tast.Entity$$get_Range)(patternInput$$557[0])));
              }
            } else {
              throw new Error("unreachable");
            }
          } else if (matchValue$$242) {
            const matchValue$$243 = (0, _List.tryFind)(function predicate$$76($arg$$109) {
              return !checkIfFieldTypeSupportsComparison(patternInput$$557[0], $arg$$109[0]);
            }, patternInput$$557[1]);

            if (matchValue$$243 != null) {
              const ty$$141 = matchValue$$243[0];

              if ((0, _TastOps.isTyparTy)(g$$60, ty$$141)) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructuralComparisonNotSatisfied1$$Z384F8060)((0, _tast.Entity$$get_DisplayName)(patternInput$$557[0]), (0, _NicePrint.prettyStringOfTy)(denv$$41, ty$$141)), (0, _tast.Entity$$get_Range)(patternInput$$557[0])));
              } else {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructuralComparisonNotSatisfied2$$Z384F8060)((0, _tast.Entity$$get_DisplayName)(patternInput$$557[0]), (0, _NicePrint.prettyStringOfTy)(denv$$41, ty$$141)), (0, _tast.Entity$$get_Range)(patternInput$$557[0])));
              }
            } else {
              throw new Error("unreachable");
            }
          }
        }

        return res$$38;
      }, assumedTycons);

      if (newSet.Equals(assumedTycons) ? assumedTypars.Equals(assumedTyparsAcc.contents) : false) {
        return [newSet, assumedTyparsAcc.contents];
      } else {
        assumedTycons = newSet;
        assumedTypars = assumedTyparsAcc.contents;
        continue loop$$3;
      }
    }
  };

  const patternInput$$558 = loop$$3(initialAssumedTycons, initialAsssumedTypars);
  (0, _Seq.iterate)(function (tyconStamp$$1) {
    const patternInput$$559 = (0, _Map.FSharpMap$$get_Item$$2B595)(tab$$3, tyconStamp$$1);
    (0, _Seq.iterate)(function (tp$$60) {
      if ((0, _Set.FSharpSet$$Contains$$2B595)(patternInput$$558[1], (0, _tast.Typar$$get_Stamp)(tp$$60))) {
        (0, _tast.Typar$$SetComparisonDependsOn$$Z1FBCCD16)(tp$$60, true);
      }
    }, (0, _tast.Entity$$Typars$$4DB9192C)(patternInput$$559[0], (0, _tast.Entity$$get_Range)(patternInput$$559[0])));
  }, patternInput$$558[0]);
  return patternInput$$558[0];
}

function TyconConstraintInference$$$InferSetOfTyconsSupportingEquatable(cenv$$228, denv$$42, tyconsWithStructuralTypes$$1) {
  const g$$61 = cenv$$228.g;
  const tab$$4 = (0, _Map.ofList)((0, _List.map)(function mapping$$157(tupledArg$$117) {
    return [(0, _tast.Entity$$get_Stamp)(tupledArg$$117[0]), [tupledArg$$117[0], tupledArg$$117[1]]];
  }, tyconsWithStructuralTypes$$1), {
    Compare: _Long.compare
  });
  const initialAssumedTycons$$1 = (0, _Set.ofSeq)((0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (matchValue$$245) {
      return (0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$228.g, matchValue$$245[0]) ? (0, _Seq.singleton)((0, _tast.Entity$$get_Stamp)(matchValue$$245[0])) : (0, _Seq.empty)();
    }, tyconsWithStructuralTypes$$1);
  })), {
    Compare: _Long.compare
  });
  const initialAssumedTypars = (0, _Set.empty)({
    Compare: _Util.compare
  });

  const loop$$4 = function loop$$4(assumedTycons$$1, assumedTypars$$1) {
    loop$$4: while (true) {
      const assumedTyparsAcc$$1 = new _Types.FSharpRef(assumedTypars$$1);

      const checkIfFieldTypeSupportsEquality = function checkIfFieldTypeSupportsEquality(tycon$$20, ty$$143) {
        const matchValue$$246 = (0, _TastOps.tryDestTyparTy)(cenv$$228.g, ty$$143);

        if (matchValue$$246 == null) {
          const activePatternResult49296 = (0, _TastOps.$007CSpecialEquatableHeadType$007C_$007C)(g$$61, ty$$143);

          if (activePatternResult49296 != null) {
            const tinst$$29 = activePatternResult49296;
            return (0, _List.forAll)((0, _Util.partialApply)(1, checkIfFieldTypeSupportsEquality, [tycon$$20]), tinst$$29);
          } else {
            if ((0, _TastOps.$007CSpecialNotEquatableHeadType$007C_$007C)(g$$61, ty$$143) != null) {
              return false;
            } else {
              const activePatternResult49292 = (0, _TastOps.$007CAppTy$007C_$007C)(g$$61, ty$$143);

              if (activePatternResult49292 != null) {
                if (((0, _Set.FSharpSet$$Contains$$2B595)(initialAssumedTycons$$1, (0, _tast.EntityRef$$get_Stamp)(activePatternResult49292[0])) ? (0, _Set.FSharpSet$$Contains$$2B595)(assumedTycons$$1, (0, _tast.EntityRef$$get_Stamp)(activePatternResult49292[0])) : (0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(g$$61, (0, _tast.EntityRef$$get_Deref)(activePatternResult49292[0])) ? (0, _tast.EntityRef$$get_GeneratedHashAndEqualsWithComparerValues)(activePatternResult49292[0]) != null : true) ? !(0, _TastOps.HasFSharpAttribute)(g$$61, (0, _TcGlobals.TcGlobals$$get_attrib_NoEqualityAttribute)(g$$61), (0, _tast.EntityRef$$get_Attribs)(activePatternResult49292[0])) : false) {
                  return (0, _illib.List$$$lengthsEqAndForall2)(function p$$36(ty$$144, tp$$62) {
                    if ((0, _tast.Typar$$get_EqualityConditionalOn)(tp$$62) ? true : (0, _Set.FSharpSet$$Contains$$2B595)(assumedTypars$$1, (0, _tast.Typar$$get_Stamp)(tp$$62))) {
                      return checkIfFieldTypeSupportsEquality(tycon$$20, ty$$144);
                    } else {
                      return true;
                    }
                  }, activePatternResult49292[1], (0, _tast.EntityRef$$get_TyparsNoRange)(activePatternResult49292[0]));
                } else {
                  return false;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          const tp$$61 = matchValue$$246;

          if ((0, _List.exists)(function predicate$$79(_arg1$$65) {
            if (_arg1$$65.tag === 10) {
              return true;
            } else {
              return false;
            }
          }, (0, _tast.Typar$$get_Constraints)(tp$$61))) {
            return true;
          } else if ((0, _List.exists)(function predicate$$80(tp2$$2) {
            return (0, _tast.typarRefEq)(tp$$61, tp2$$2);
          }, (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$20, (0, _tast.Entity$$get_Range)(tycon$$20)))) {
            assumedTyparsAcc$$1.contents = (0, _Set.FSharpSet$$Add$$2B595)(assumedTyparsAcc$$1.contents, (0, _tast.Typar$$get_Stamp)(tp$$61));
            return true;
          } else {
            return false;
          }
        }
      };

      const newSet$$1 = (0, _Set.filter)(function predicate$$85(tyconStamp$$2) {
        const patternInput$$560 = (0, _Map.FSharpMap$$get_Item$$2B595)(tab$$4, tyconStamp$$2);

        if ((((0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$228.g) ? (0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$228.g, patternInput$$560[0]) : false) ? !(0, _TastOps.HasFSharpAttribute)(g$$61, (0, _TcGlobals.TcGlobals$$get_attrib_StructuralEqualityAttribute)(g$$61), (0, _tast.Entity$$get_Attribs)(patternInput$$560[0])) : false) ? !(0, _TastOps.HasFSharpAttribute)(g$$61, (0, _TcGlobals.TcGlobals$$get_attrib_NoEqualityAttribute)(g$$61), (0, _tast.Entity$$get_Attribs)(patternInput$$560[0])) : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcFSharpCoreRequiresExplicit)(), (0, _tast.Entity$$get_Range)(patternInput$$560[0])));
        }

        const res$$39 = (0, _List.forAll)(function predicate$$82($arg$$118) {
          return checkIfFieldTypeSupportsEquality(patternInput$$560[0], $arg$$118[0]);
        }, patternInput$$560[1]);

        if (!res$$39) {
          const matchValue$$247 = (0, _TastOps.TryFindFSharpBoolAttribute)(g$$61, (0, _TcGlobals.TcGlobals$$get_attrib_StructuralEqualityAttribute)(g$$61), (0, _tast.Entity$$get_Attribs)(patternInput$$560[0]));

          if (matchValue$$247 == null) {
            if ((0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$228.g, patternInput$$560[0])) {
              const matchValue$$249 = (0, _List.tryFind)(function predicate$$84($arg$$122) {
                return !checkIfFieldTypeSupportsEquality(patternInput$$560[0], $arg$$122[0]);
              }, patternInput$$560[1]);

              if (matchValue$$249 != null) {
                const ty$$146 = matchValue$$249[0];

                if ((0, _TastOps.isTyparTy)(g$$61, ty$$146)) {
                  (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoEqualityNeeded1$$30230F9B)((0, _tast.Entity$$get_DisplayName)(patternInput$$560[0]), (0, _NicePrint.prettyStringOfTy)(denv$$42, ty$$146), (0, _tast.Entity$$get_DisplayName)(patternInput$$560[0])), (0, _tast.Entity$$get_Range)(patternInput$$560[0])));
                } else {
                  (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNoEqualityNeeded2$$30230F9B)((0, _tast.Entity$$get_DisplayName)(patternInput$$560[0]), (0, _NicePrint.prettyStringOfTy)(denv$$42, ty$$146), (0, _tast.Entity$$get_DisplayName)(patternInput$$560[0])), (0, _tast.Entity$$get_Range)(patternInput$$560[0])));
                }
              } else {
                throw new Error("unreachable");
              }
            }
          } else if (matchValue$$247) {
            if ((0, _AugmentWithHashCompare.TyconIsCandidateForAugmentationWithEquals)(cenv$$228.g, patternInput$$560[0])) {
              const matchValue$$248 = (0, _List.tryFind)(function predicate$$83($arg$$120) {
                return !checkIfFieldTypeSupportsEquality(patternInput$$560[0], $arg$$120[0]);
              }, patternInput$$560[1]);

              if (matchValue$$248 != null) {
                const ty$$145 = matchValue$$248[0];

                if ((0, _TastOps.isTyparTy)(g$$61, ty$$145)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructuralEqualityNotSatisfied1$$Z384F8060)((0, _tast.Entity$$get_DisplayName)(patternInput$$560[0]), (0, _NicePrint.prettyStringOfTy)(denv$$42, ty$$145)), (0, _tast.Entity$$get_Range)(patternInput$$560[0])));
                } else {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructuralEqualityNotSatisfied2$$Z384F8060)((0, _tast.Entity$$get_DisplayName)(patternInput$$560[0]), (0, _NicePrint.prettyStringOfTy)(denv$$42, ty$$145)), (0, _tast.Entity$$get_Range)(patternInput$$560[0])));
                }
              } else {
                throw new Error("unreachable");
              }
            }
          }
        }

        return res$$39;
      }, assumedTycons$$1);

      if (newSet$$1.Equals(assumedTycons$$1) ? assumedTypars$$1.Equals(assumedTyparsAcc$$1.contents) : false) {
        return [newSet$$1, assumedTyparsAcc$$1.contents];
      } else {
        assumedTycons$$1 = newSet$$1;
        assumedTypars$$1 = assumedTyparsAcc$$1.contents;
        continue loop$$4;
      }
    }
  };

  const patternInput$$561 = loop$$4(initialAssumedTycons$$1, initialAssumedTypars);
  (0, _Seq.iterate)(function (tyconStamp$$3) {
    const patternInput$$562 = (0, _Map.FSharpMap$$get_Item$$2B595)(tab$$4, tyconStamp$$3);
    (0, _Seq.iterate)(function (tp$$63) {
      if ((0, _Set.FSharpSet$$Contains$$2B595)(patternInput$$561[1], (0, _tast.Typar$$get_Stamp)(tp$$63))) {
        (0, _tast.Typar$$SetEqualityDependsOn$$Z1FBCCD16)(tp$$63, true);
      }
    }, (0, _tast.Entity$$Typars$$4DB9192C)(patternInput$$562[0], (0, _tast.Entity$$get_Range)(patternInput$$562[0])));
  }, patternInput$$561[0]);
  return patternInput$$561[0];
}

function ComputeModuleName(longPath) {
  var copyOfStruct$$5;

  if ((0, _List.length)(longPath) !== 1) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidModuleName)(), (copyOfStruct$$5 = (0, _List.head)(longPath), (0, _ast.Ident$$get_idRange)(copyOfStruct$$5))));
  }

  return (0, _List.head)(longPath);
}

function CheckForDuplicateConcreteType(env$$302, nm$$69, m$$408) {
  const curr = GetCurrAccumulatedModuleOrNamespaceType(env$$302);

  if ((0, _Map.containsKey)(nm$$69, (0, _tast.ModuleOrNamespaceType$$get_AllEntitiesByCompiledAndLogicalMangledNames)(curr))) {
    (0, _ErrorLogger.error)(new _tast.Duplicate((0, _FSComp.SR$$$tcTypeExceptionOrModule)(), nm$$69, m$$408));
  }
}

function CheckForDuplicateModule(env$$303, nm$$70, m$$409) {
  const curr$$1 = GetCurrAccumulatedModuleOrNamespaceType(env$$303);

  if ((0, _Map.FSharpMap$$ContainsKey$$2B595)((0, _tast.ModuleOrNamespaceType$$get_ModulesAndNamespacesByDemangledName)(curr$$1), nm$$70)) {
    (0, _ErrorLogger.errorR)(new _tast.Duplicate((0, _FSComp.SR$$$tcTypeOrModule)(), nm$$70, m$$409));
  }
}

function TcExceptionDeclarations$$$TcExnDefnCore_Phase1A(cenv$$229, env$$304, parent$$14, _arg1$$66) {
  const vis$$43 = _arg1$$66.fields[4];
  const synAttrs$$5 = _arg1$$66.fields[0];
  const m$$410 = _arg1$$66.fields[5];
  const id$$111 = _arg1$$66.fields[1].fields[1];
  const doc$$7 = _arg1$$66.fields[3];
  const attrs$$21 = TcAttributes(cenv$$229, env$$304, AttributeTargets$$$ExnDecl, synAttrs$$5);

  if (!(0, _illib.String$$$isUpper)((0, _ast.Ident$$get_idText)(id$$111))) {
    (0, _ErrorLogger.errorR)(new NotUpperCaseConstructor(m$$410));
  }

  const patternInput$$563 = ComputeAccessAndCompPath(env$$304, null, m$$410, vis$$43, null, parent$$14);
  const vis$$45 = TcRecdUnionAndEnumDeclarations$$$CombineReprAccess(parent$$14, patternInput$$563[0]);
  CheckForDuplicateConcreteType(env$$304, (0, _ast.Ident$$get_idText)(id$$111) + "Exception", (0, _ast.Ident$$get_idRange)(id$$111));
  CheckForDuplicateConcreteType(env$$304, (0, _ast.Ident$$get_idText)(id$$111), (0, _ast.Ident$$get_idRange)(id$$111));
  return (0, _tast.NewExn)(patternInput$$563[1], id$$111, vis$$45, new _tast.ExceptionInfo(2, "TExnFresh", (0, _tast.MakeRecdFieldsTable)((0, _Types.L)())), attrs$$21, (0, _ast.PreXmlDoc$$ToXmlDoc)(doc$$7));
}

function TcExceptionDeclarations$$$TcExnDefnCore_Phase1G_EstablishRepresentation(cenv$$230, env$$305, parent$$15, exnc$$2, _arg1$$67) {
  var tcref$$65, ety$$3;
  const reprIdOpt = _arg1$$67.fields[2];
  const m$$411 = _arg1$$67.fields[5];
  const args$$96 = _arg1$$67.fields[1].fields[2];
  let args$$98;

  if (args$$96.tag === 0) {
    const args$$97 = args$$96.fields[0];
    args$$98 = args$$97;
  } else {
    args$$98 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExplicitTypeSpecificationCannotBeUsedForExceptionConstructors)(), m$$411));
  }

  const ad$$38 = env$$305.eAccessRights;
  const id$$112 = (0, _tast.Entity$$get_Id)(exnc$$2);
  const args$0027$$13 = (0, _List.mapIndexed)(function (i$$33, fdef) {
    return TcRecdUnionAndEnumDeclarations$$$TcAnonFieldDecl(cenv$$230, env$$305, parent$$15, emptyUnscopedTyparEnv, "Data" + (0, _Util.int32ToString)(i$$33), fdef);
  }, args$$98);
  TcRecdUnionAndEnumDeclarations$$$ValidateFieldNames(args$$98, args$0027$$13);
  let repr$$3;

  if (reprIdOpt == null) {
    repr$$3 = new _tast.ExceptionInfo(2, "TExnFresh", (0, _tast.MakeRecdFieldsTable)(args$0027$$13));
  } else {
    const longId$$15 = reprIdOpt;
    const matchValue$$250 = (0, _NameResolution.ResolveExprLongIdent)(cenv$$230.tcSink, cenv$$230.nameResolver, m$$411, ad$$38, env$$305.eNameResEnv, (0, _NameResolution.TypeNameResolutionInfo$$$get_Default)(), longId$$15);
    var $target$$564, exnc$$3, meths$$16;

    if (matchValue$$250[0].tag === 4) {
      if (matchValue$$250[1].tail == null) {
        $target$$564 = 0;
        exnc$$3 = matchValue$$250[0].fields[0];
      } else {
        $target$$564 = 2;
      }
    } else if (matchValue$$250[0].tag === 11) {
      if (matchValue$$250[1].tail == null) {
        $target$$564 = 1;
        meths$$16 = matchValue$$250[0].fields[1];
      } else {
        $target$$564 = 2;
      }
    } else {
      $target$$564 = 2;
    }

    switch ($target$$564) {
      case 0:
        {
          (0, _AccessibilityLogic.CheckTyconAccessible)(cenv$$230.amap, m$$411, env$$305.eAccessRights, exnc$$3);

          if (!(args$0027$$13.tail == null)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExceptionAbbreviationsShouldNotHaveArgumentList)(), m$$411));
          }

          repr$$3 = new _tast.ExceptionInfo(0, "TExnAbbrevRepr", exnc$$3);
          break;
        }

      case 1:
        {
          if (args$0027$$13.tail == null) {} else {
            (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAbbreviationsFordotNetExceptionsCannotTakeArguments)(), m$$411));
          }

          const candidates$$1 = (0, _List.filter)(function predicate$$86(minfo$$23) {
            if ((0, _Util.equals)((0, _infos.MethInfo$$get_NumArgs)(minfo$$23), (0, _Types.L)((0, _List.length)(args$0027$$13), (0, _Types.L)()))) {
              return (0, _infos.MethInfo$$get_GenericArity)(minfo$$23) === 0;
            } else {
              return false;
            }
          }, meths$$16);
          var $target$$565, minfo$$24;

          if (candidates$$1.tail != null) {
            if (candidates$$1.tail.tail == null) {
              $target$$565 = 0;
              minfo$$24 = candidates$$1.head;
            } else {
              $target$$565 = 1;
            }
          } else {
            $target$$565 = 1;
          }

          switch ($target$$565) {
            case 0:
              {
                const matchValue$$251 = (0, _infos.MethInfo$$get_ApparentEnclosingType)(minfo$$24);
                var $target$$566, ety$$4, tcref$$66;
                const activePatternResult49329 = (0, _TastOps.$007CAppTy$007C_$007C)(cenv$$230.g, matchValue$$251);

                if (activePatternResult49329 != null) {
                  if (tcref$$65 = activePatternResult49329[0], (ety$$3 = matchValue$$251, (0, _TypeRelations.TypeDefinitelySubsumesTypeNoCoercion)(0, cenv$$230.g, cenv$$230.amap, m$$411, (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$230.g), ety$$3))) {
                    $target$$566 = 0;
                    ety$$4 = matchValue$$251;
                    tcref$$66 = activePatternResult49329[0];
                  } else {
                    $target$$566 = 1;
                  }
                } else {
                  $target$$566 = 1;
                }

                switch ($target$$566) {
                  case 0:
                    {
                      const tref$$5 = (0, _tast.EntityRef$$get_CompiledRepresentationForNamedType)(tcref$$66);
                      repr$$3 = new _tast.ExceptionInfo(1, "TExnAsmRepr", tref$$5);
                      break;
                    }

                  case 1:
                    {
                      repr$$3 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcExceptionAbbreviationsMustReferToValidExceptions)(), m$$411));
                      break;
                    }
                }

                break;
              }

            case 1:
              {
                repr$$3 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAbbreviationsFordotNetExceptionsMustHaveMatchingObjectConstructor)(), m$$411));
                break;
              }
          }

          break;
        }

      case 2:
        {
          repr$$3 = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcNotAnException)(), m$$411));
          break;
        }
    }
  }

  (0, _tast.Entity$$SetExceptionInfo$$762AAD87)(exnc$$2, repr$$3);
  const item$$53 = new _NameResolution.Item(4, "ExnCase", (0, _tast.mkLocalTyconRef)(exnc$$2));
  (0, _NameResolution.CallNameResolutionSink)(cenv$$230.tcSink, (0, _ast.Ident$$get_idRange)(id$$112), TcEnv$$get_NameEnv(env$$305), item$$53, item$$53, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$305), env$$305.eAccessRights);
  return args$0027$$13;
}

function TcExceptionDeclarations$$$TcExnDefnCore(cenv$$231, env$$306, parent$$16, synExnDefnRepr) {
  const exnc$$4 = TcExceptionDeclarations$$$TcExnDefnCore_Phase1A(cenv$$231, env$$306, parent$$16, synExnDefnRepr);
  const args$0027$$14 = TcExceptionDeclarations$$$TcExnDefnCore_Phase1G_EstablishRepresentation(cenv$$231, env$$306, parent$$16, exnc$$4, synExnDefnRepr);
  (0, _tast.Entity$$get_TypeContents)(exnc$$4).tcaug_super = (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$231.g);
  PublishTypeDefn(cenv$$231, env$$306, exnc$$4);
  const structuralTypes$$3 = (0, _List.map)(function mapping$$158(rf) {
    return [(0, _tast.RecdField$$get_FormalType)(rf), (0, _tast.RecdField$$get_Range)(rf)];
  }, args$0027$$14);
  const scSet$$2 = TyconConstraintInference$$$InferSetOfTyconsSupportingComparable(cenv$$231, TcEnv$$get_DisplayEnv(env$$306), (0, _Types.L)([exnc$$4, structuralTypes$$3], (0, _Types.L)()));
  const seSet$$2 = TyconConstraintInference$$$InferSetOfTyconsSupportingEquatable(cenv$$231, TcEnv$$get_DisplayEnv(env$$306), (0, _Types.L)([exnc$$4, structuralTypes$$3], (0, _Types.L)()));
  let binds$$43;
  const matchValue$$252 = (0, _tast.Entity$$get_ExceptionInfo)(exnc$$4);
  var $target$$567;

  switch (matchValue$$252.tag) {
    case 3:
    case 1:
      $target$$567 = 0;
      break;

    case 2:
      $target$$567 = 1;
      break;

    default:
      $target$$567 = 0;
  }

  switch ($target$$567) {
    case 0:
      {
        binds$$43 = (0, _Types.L)();
        break;
      }

    case 1:
      {
        AddAugmentationDeclarations$$$AddGenericHashAndComparisonDeclarations(cenv$$231, env$$306, scSet$$2, seSet$$2, exnc$$4);
        binds$$43 = AddAugmentationDeclarations$$$AddGenericHashAndComparisonBindings(cenv$$231, exnc$$4);
        break;
      }
  }

  return [binds$$43, exnc$$4];
}

function TcExceptionDeclarations$$$TcExnDefn(cenv$$232, envInitial$$5, parent$$17, _arg1$$68, scopem$$23) {
  const m$$412 = _arg1$$68.fields[2];
  const core$$2 = _arg1$$68.fields[0];
  const aug = _arg1$$68.fields[1];
  const patternInput$$564 = TcExceptionDeclarations$$$TcExnDefnCore(cenv$$232, envInitial$$5, parent$$17, core$$2);
  const envMutRec$$5 = AddLocalExnDefnAndReport(cenv$$232.tcSink, scopem$$23, AddLocalTycons(cenv$$232.g, cenv$$232.amap, scopem$$23, (0, _Types.L)(patternInput$$564[1], (0, _Types.L)()), envInitial$$5), patternInput$$564[1]);
  const defns$$1 = (0, _Types.L)(new MutRecShape$00605(0, "Tycon", new MutRecDefnsPhase2DataForTycon(0, "MutRecDefnsPhase2DataForTycon", patternInput$$564[1], parent$$17, new DeclKind(0, "ModuleOrMemberBinding"), (0, _tast.mkLocalEntityRef)(patternInput$$564[1]), null, new SafeInitData(1, "NoSafeInitInfo"), (0, _Types.L)(), aug, m$$412, new NewSlotsOK(1, "NoNewSlots"), function () {})), (0, _Types.L)());
  const patternInput$$565 = TcMutRecDefns_Phase2(cenv$$232, envInitial$$5, m$$412, scopem$$23, null, envMutRec$$5, defns$$1);
  const binds2flat = (0, _List.collect)(function mapping$$159(tuple$$41) {
    return tuple$$41[1];
  }, MutRecShapes$$$collectTycons(patternInput$$565[0]));
  const binds3 = AddAugmentationDeclarations$$$AddGenericEqualityBindings(cenv$$232, patternInput$$565[1], patternInput$$564[1]);
  return [(0, _List.append)(patternInput$$564[0], (0, _List.append)(binds2flat, binds3)), patternInput$$564[1], patternInput$$565[1]];
}

function TcExceptionDeclarations$$$TcExnSignature(cenv$$233, envInitial$$6, parent$$18, tpenv$$401, _arg1$$69, scopem$$24) {
  const core$$3 = _arg1$$69.fields[0];
  const aug$$1 = _arg1$$69.fields[1];
  const patternInput$$566 = TcExceptionDeclarations$$$TcExnDefnCore(cenv$$233, envInitial$$6, parent$$18, core$$3);
  const envMutRec$$6 = AddLocalExnDefnAndReport(cenv$$233.tcSink, scopem$$24, AddLocalTycons(cenv$$233.g, cenv$$233.amap, scopem$$24, (0, _Types.L)(patternInput$$566[1], (0, _Types.L)()), envInitial$$6), patternInput$$566[1]);
  const ecref$$1 = (0, _tast.mkLocalEntityRef)(patternInput$$566[1]);
  const patternInput$$567 = TcTyconMemberSpecs(cenv$$233, envMutRec$$6, new ContainerInfo(0, "ContainerInfo", parent$$18, new MemberOrValContainerInfo(0, "MemberOrValContainerInfo", ecref$$1, null, null, new SafeInitData(1, "NoSafeInitInfo"), (0, _Types.L)())), new DeclKind(0, "ModuleOrMemberBinding"), tpenv$$401, aug$$1);
  return [patternInput$$566[0], patternInput$$567[0], ecref$$1, envMutRec$$6];
}

function EstablishTypeDefinitionCores$$$ComputeTyconName(longPath$$1, doErase, typars$$10) {
  var copyOfStruct$$6;

  if ((0, _List.length)(longPath$$1) !== 1) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidTypeExtension)(), (copyOfStruct$$6 = (0, _List.head)(longPath$$1), (0, _ast.Ident$$get_idRange)(copyOfStruct$$6))));
  }

  const id$$113 = (0, _List.head)(longPath$$1);
  const erasedArity = (doErase ? (0, _Seq.sumBy)(function projection$$5(tp$$64) {
    if ((0, _tast.Typar$$get_IsErased)(tp$$64)) {
      return 0;
    } else {
      return 1;
    }
  }, typars$$10, {
    GetZero() {
      return 0;
    },

    Add($x$$123, $y$$124) {
      return $x$$123 + $y$$124;
    }

  }) : (0, _List.length)(typars$$10)) | 0;
  return (0, _ast.mkSynId)((0, _ast.Ident$$get_idRange)(id$$113), erasedArity === 0 ? (0, _ast.Ident$$get_idText)(id$$113) : (0, _ast.Ident$$get_idText)(id$$113) + "`" + (0, _Util.int32ToString)(erasedArity));
}

function EstablishTypeDefinitionCores$$$GetTyconAttribs(g$$62, attrs$$22) {
  const hasClassAttr = (0, _TastOps.HasFSharpAttribute)(g$$62, (0, _TcGlobals.TcGlobals$$get_attrib_ClassAttribute)(g$$62), attrs$$22);
  const hasAbstractClassAttr = (0, _TastOps.HasFSharpAttribute)(g$$62, (0, _TcGlobals.TcGlobals$$get_attrib_AbstractClassAttribute)(g$$62), attrs$$22);
  const hasInterfaceAttr = (0, _TastOps.HasFSharpAttribute)(g$$62, (0, _TcGlobals.TcGlobals$$get_attrib_InterfaceAttribute)(g$$62), attrs$$22);
  const hasStructAttr = (0, _TastOps.HasFSharpAttribute)(g$$62, (0, _TcGlobals.TcGlobals$$get_attrib_StructAttribute)(g$$62), attrs$$22);
  const hasMeasureAttr$$1 = (0, _TastOps.HasFSharpAttribute)(g$$62, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureAttribute)(g$$62), attrs$$22);
  return [hasClassAttr, hasAbstractClassAttr, hasInterfaceAttr, hasStructAttr, hasMeasureAttr$$1];
}

function EstablishTypeDefinitionCores$$$InferTyconKind(g$$63, kind$$3, attrs$$23, slotsigs, fields$$3, inSig$$2, isConcrete, m$$413) {
  const patternInput$$568 = EstablishTypeDefinitionCores$$$GetTyconAttribs(g$$63, attrs$$23);

  const bi = function bi(b$$65) {
    if (b$$65) {
      return 1;
    } else {
      return 0;
    }
  };

  if (bi(patternInput$$568[0]) + bi(patternInput$$568[2]) + bi(patternInput$$568[3]) + bi(patternInput$$568[4]) > 1 ? true : bi(patternInput$$568[1]) + bi(patternInput$$568[2]) + bi(patternInput$$568[3]) + bi(patternInput$$568[4]) > 1) {
    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributesOfTypeSpecifyMultipleKindsForType)(), m$$413));
  }

  if (kind$$3.tag === 0) {
    if ((patternInput$$568[0] ? true : patternInput$$568[1]) ? true : patternInput$$568[4]) {
      return new _ast.SynTypeDefnKind(1, "TyconClass");
    } else if (patternInput$$568[2]) {
      return new _ast.SynTypeDefnKind(2, "TyconInterface");
    } else if (patternInput$$568[3]) {
      return new _ast.SynTypeDefnKind(3, "TyconStruct");
    } else if (isConcrete ? true : !(fields$$3.tail == null)) {
      return new _ast.SynTypeDefnKind(1, "TyconClass");
    } else if (slotsigs.tail == null ? inSig$$2 : false) {
      return new _ast.SynTypeDefnKind(7, "TyconHiddenRepr");
    } else {
      return new _ast.SynTypeDefnKind(2, "TyconInterface");
    }
  } else {
    const k$$8 = kind$$3;

    if ((((patternInput$$568[0] ? !(k$$8.tag === 1 ? true : false) : false) ? true : patternInput$$568[4] ? !(k$$8.tag === 1 ? true : k$$8.tag === 6 ? true : k$$8.tag === 7 ? true : false) : false) ? true : patternInput$$568[2] ? !(k$$8.tag === 2 ? true : false) : false) ? true : patternInput$$568[3] ? !(k$$8.tag === 3 ? true : k$$8.tag === 4 ? true : k$$8.tag === 5 ? true : false) : false) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcKindOfTypeSpecifiedDoesNotMatchDefinition)(), m$$413));
    }

    return k$$8;
  }
}

function EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$3, envinner$$38, id$$114, synTyconRepr) {
  var unionCaseName, m$$414;
  var $target$$568, m$$415, unionCaseName$$1;

  if (synTyconRepr.tag === 5) {
    if (synTyconRepr.fields[1].tag === 0) {
      if (synTyconRepr.fields[1].fields[0].fields[0].tail != null) {
        if (synTyconRepr.fields[1].fields[0].fields[0].tail.tail == null) {
          if (unionCaseName = synTyconRepr.fields[1].fields[0].fields[0].head, (m$$414 = synTyconRepr.fields[2], !hasMeasureAttr$$3 ? (0, _NameResolution.LookupTypeNameInEnvNoArity)(new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), (0, _ast.Ident$$get_idText)(unionCaseName), envinner$$38.eNameResEnv).tail == null ? true : (0, _ast.Ident$$get_idText)(id$$114) === (0, _ast.Ident$$get_idText)(unionCaseName) : false)) {
            $target$$568 = 0;
            m$$415 = synTyconRepr.fields[2];
            unionCaseName$$1 = synTyconRepr.fields[1].fields[0].fields[0].head;
          } else {
            $target$$568 = 1;
          }
        } else {
          $target$$568 = 1;
        }
      } else {
        $target$$568 = 1;
      }
    } else {
      $target$$568 = 1;
    }
  } else {
    $target$$568 = 1;
  }

  switch ($target$$568) {
    case 0:
      {
        return [unionCaseName$$1, m$$415];
      }

    case 1:
      {
        return null;
      }
  }
}

function EstablishTypeDefinitionCores$$$GetStructuralElementsOfTyconDefn(cenv$$234, env$$307, tpenv$$402, _arg1$$70, tycon$$23) {
  const synTyconRepr$$1 = _arg1$$70.fields[1];
  const thisTyconRef = (0, _tast.mkLocalTyconRef)(tycon$$23);
  const m$$416 = (0, _tast.Entity$$get_Range)(tycon$$23);
  const env$$308 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$23, m$$416), env$$307);
  const env$$309 = MakeInnerEnvForTyconRef(env$$308, thisTyconRef, false);
  return (0, _List.ofSeq)((0, _Seq.delay)(function () {
    var implicitCtorSynPats, fields$$4;
    var $target$$569, unionCases$$1, fields$$5, implicitCtorSynPats$$1;

    if (synTyconRepr$$1.tag === 6) {
      $target$$569 = 0;
    } else if (synTyconRepr$$1.tag === 0) {
      $target$$569 = 1;
      unionCases$$1 = synTyconRepr$$1.fields[1];
    } else if (synTyconRepr$$1.tag === 3) {
      if (implicitCtorSynPats = synTyconRepr$$1.fields[6], (fields$$4 = synTyconRepr$$1.fields[3], (0, _tast.Entity$$get_IsFSharpStructOrEnumTycon)(tycon$$23))) {
        $target$$569 = 2;
        fields$$5 = synTyconRepr$$1.fields[3];
        implicitCtorSynPats$$1 = synTyconRepr$$1.fields[6];
      } else {
        $target$$569 = 3;
      }
    } else {
      $target$$569 = 3;
    }

    switch ($target$$569) {
      case 0:
        {
          return (0, _Seq.empty)();
        }

      case 1:
        {
          return (0, _Seq.collect)(function (matchValue$$253) {
            const m$$417 = matchValue$$253.fields[5];
            const args$$99 = matchValue$$253.fields[2];

            if (args$$99.tag === 1) {
              const ty$$148 = args$$99.fields[0][0];
              const arity$$5 = args$$99.fields[0][1];
              const patternInput$$570 = TcTypeAndRecover(cenv$$234, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(1, "NoCheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$309, tpenv$$402, ty$$148);
              const patternInput$$571 = (0, _TastOps.GetTopTauTypeInFSharpForm)(cenv$$234.g, (0, _tast.ValReprInfo$$get_ArgInfos)(TranslatePartialArity((0, _Types.L)(), TranslateTopValSynInfo(m$$417, function tcAttributes$$5(attrTgt$$18, synAttribs$$12) {
                return TcAttributes(cenv$$234, env$$309, attrTgt$$18, synAttribs$$12);
              }, arity$$5))), patternInput$$570[0], m$$417);
              return (0, _Seq.append)((0, _List.length)(patternInput$$571[0]) > 1 ? ((0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcIllegalFormForExplicitTypeDeclaration)(), m$$417)), (0, _Seq.empty)()) : (0, _Seq.empty)(), (0, _Seq.delay)(function () {
                return (0, _Seq.collect)(function (argtys$$20) {
                  return (0, _Seq.collect)(function (matchValue$$255) {
                    return (0, _Seq.singleton)([matchValue$$255[0], m$$417]);
                  }, argtys$$20);
                }, patternInput$$571[0]);
              }));
            } else {
              const flds$$7 = args$$99.fields[0];
              return (0, _Seq.collect)(function (matchValue$$254) {
                const ty$$147 = matchValue$$254.fields[3];
                const m$$418 = matchValue$$254.fields[7];
                const patternInput$$569 = TcTypeAndRecover(cenv$$234, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(1, "NoCheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$309, tpenv$$402, ty$$147);
                return (0, _Seq.singleton)([patternInput$$569[0], m$$418]);
              }, flds$$7);
            }
          }, unionCases$$1);
        }

      case 2:
        {
          return (0, _Seq.append)((0, _Seq.collect)(function (matchValue$$256) {
            const ty$$149 = matchValue$$256.fields[3];
            const m$$419 = matchValue$$256.fields[7];
            const isStatic$$19 = matchValue$$256.fields[1];

            if (!isStatic$$19) {
              const patternInput$$572 = TcTypeAndRecover(cenv$$234, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(1, "NoCheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$309, tpenv$$402, ty$$149);
              return (0, _Seq.singleton)([patternInput$$572[0], m$$419]);
            } else {
              return (0, _Seq.empty)();
            }
          }, fields$$5), (0, _Seq.delay)(function () {
            if (implicitCtorSynPats$$1 != null) {
              const spats$$9 = implicitCtorSynPats$$1;
              const patternInput$$573 = TcSimplePatsOfUnknownType(cenv$$234, true, new CheckConstraints(1, "NoCheckCxs"), env$$309, tpenv$$402, new _ast.SynSimplePats(0, "SimplePats", spats$$9, m$$416));
              const names$$22 = patternInput$$573[1][1];
              return (0, _Seq.collect)(function (arg$$49) {
                const ty$$150 = PrelimValScheme1$$get_Type((0, _Map.FSharpMap$$get_Item$$2B595)(names$$22, arg$$49));
                let m$$420;
                let copyOfStruct$$7 = PrelimValScheme1$$get_Ident((0, _Map.FSharpMap$$get_Item$$2B595)(names$$22, arg$$49));
                m$$420 = (0, _ast.Ident$$get_idRange)(copyOfStruct$$7);
                return (0, _Seq.append)(!((0, _lib.ListSet$$$subtract)(_tast.typarEq, (0, _TastOps.freeInTypeLeftToRight)(cenv$$234.g, false, ty$$150), (0, _tast.Entity$$get_TyparsNoRange)(tycon$$23)).tail == null) ? ((0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructsMustDeclareTypesOfImplicitCtorArgsExplicitly)(), m$$420)), (0, _Seq.empty)()) : (0, _Seq.empty)(), (0, _Seq.delay)(function () {
                  return (0, _Seq.singleton)([ty$$150, m$$420]);
                }));
              }, patternInput$$573[0]);
            } else {
              return (0, _Seq.empty)();
            }
          }));
        }

      case 3:
        {
          if (synTyconRepr$$1.tag === 2) {
            const fields$$6 = synTyconRepr$$1.fields[1];
            return (0, _Seq.collect)(function (matchValue$$257) {
              const ty$$151 = matchValue$$257.fields[3];
              const m$$421 = matchValue$$257.fields[7];
              const patternInput$$574 = TcTypeAndRecover(cenv$$234, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(1, "NoCheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), env$$309, tpenv$$402, ty$$151);
              return (0, _Seq.singleton)([patternInput$$574[0], m$$421]);
            }, fields$$6);
          } else {
            return (0, _Seq.empty)();
          }
        }
    }
  }));
}

function EstablishTypeDefinitionCores$$$ComputeModuleOrNamespaceKind(g$$64, isModule, typeNames, attribs$$7, nm$$71) {
  if (!isModule) {
    return new _tast.ModuleOrNamespaceKind(2, "Namespace");
  } else if ((0, _TastOps.ModuleNameIsMangled)(g$$64, attribs$$7) ? true : (0, _Set.contains)(nm$$71, typeNames)) {
    return new _tast.ModuleOrNamespaceKind(0, "FSharpModuleWithSuffix");
  } else {
    return new _tast.ModuleOrNamespaceKind(1, "ModuleOrType");
  }
}

function EstablishTypeDefinitionCores$$$AdjustModuleName(modKind$$2, nm$$72) {
  if (modKind$$2.tag === 0) {
    return nm$$72 + "Module";
  } else {
    return nm$$72;
  }
}

function EstablishTypeDefinitionCores$$$TypeNamesInMutRecDecls(compDecls) {
  return (0, _Set.ofSeq)((0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (d$$18) {
      var copyOfStruct$$8;

      if (d$$18.tag === 0) {
        const isAtOriginalTyconDefn = d$$18.fields[0][0].fields[5];
        const ids = d$$18.fields[0][0].fields[0].fields[3];
        return isAtOriginalTyconDefn ? (0, _Seq.singleton)((copyOfStruct$$8 = (0, _List.last)(ids), (0, _ast.Ident$$get_idText)(copyOfStruct$$8))) : (0, _Seq.empty)();
      } else {
        return (0, _Seq.empty)();
      }
    }, compDecls);
  })), {
    Compare: _Util.comparePrimitives
  });
}

function EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecDecls(defs) {
  return (0, _Set.ofSeq)((0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (def) {
      if (def.tag === 4) {
        const typeSpecs = def.fields[0];
        return (0, _Seq.collect)(function (matchValue$$258) {
          var copyOfStruct$$9;
          const typars$$11 = matchValue$$258.fields[0].fields[1];
          const trepr = matchValue$$258.fields[1];
          const ids$$1 = matchValue$$258.fields[0].fields[3];

          if (typars$$11.tail == null) {
            var $target$$570;

            if (trepr.tag === 0) {
              if (trepr.fields[0].tag === 8) {
                $target$$570 = 0;
              } else {
                $target$$570 = 1;
              }
            } else {
              $target$$570 = 1;
            }

            switch ($target$$570) {
              case 0:
                {
                  return (0, _Seq.empty)();
                }

              case 1:
                {
                  return (0, _Seq.singleton)((copyOfStruct$$9 = (0, _List.last)(ids$$1), (0, _ast.Ident$$get_idText)(copyOfStruct$$9)));
                }
            }
          } else {
            return (0, _Seq.empty)();
          }
        }, typeSpecs);
      } else {
        return (0, _Seq.empty)();
      }
    }, defs);
  })), {
    Compare: _Util.comparePrimitives
  });
}

function EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecSigDecls(defs$$1) {
  return (0, _Set.ofSeq)((0, _List.ofSeq)((0, _Seq.delay)(function () {
    return (0, _Seq.collect)(function (def$$1) {
      if (def$$1.tag === 3) {
        const typeSpecs$$1 = def$$1.fields[0];
        return (0, _Seq.collect)(function (matchValue$$259) {
          var copyOfStruct$$10;
          const typars$$12 = matchValue$$259.fields[0].fields[1];
          const trepr$$1 = matchValue$$259.fields[1];
          const ids$$2 = matchValue$$259.fields[0].fields[3];
          const extraMembers = matchValue$$259.fields[2];

          if (typars$$12.tail == null) {
            var $target$$571;

            if (trepr$$1.tag === 1) {
              if (trepr$$1.fields[0].tag === 6) {
                if (!(extraMembers.tail == null)) {
                  $target$$571 = 0;
                } else {
                  $target$$571 = 1;
                }
              } else {
                $target$$571 = 1;
              }
            } else {
              $target$$571 = 1;
            }

            switch ($target$$571) {
              case 0:
                {
                  return (0, _Seq.empty)();
                }

              case 1:
                {
                  return (0, _Seq.singleton)((copyOfStruct$$10 = (0, _List.last)(ids$$2), (0, _ast.Ident$$get_idText)(copyOfStruct$$10)));
                }
            }
          } else {
            return (0, _Seq.empty)();
          }
        }, typeSpecs$$1);
      } else {
        return (0, _Seq.empty)();
      }
    }, defs$$1);
  })), {
    Compare: _Util.comparePrimitives
  });
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1A_BuildInitialModule(cenv$$235, envInitial$$7, parent$$19, typeNames$$1, compInfo, decls$$2) {
  const xml = compInfo.fields[4];
  const vis$$46 = compInfo.fields[6];
  const longPath$$2 = compInfo.fields[3];
  const im = compInfo.fields[7];
  const attribs$$8 = compInfo.fields[0];
  const _parms = compInfo.fields[1];
  const _constraints = compInfo.fields[2];
  const id$$115 = ComputeModuleName(longPath$$2);
  const modAttrs = TcAttributes(cenv$$235, envInitial$$7, AttributeTargets$$$ModuleDecl, attribs$$8);
  const modKind$$3 = EstablishTypeDefinitionCores$$$ComputeModuleOrNamespaceKind(cenv$$235.g, true, typeNames$$1, modAttrs, (0, _ast.Ident$$get_idText)(id$$115));
  const modName$$1 = EstablishTypeDefinitionCores$$$AdjustModuleName(modKind$$3, (0, _ast.Ident$$get_idText)(id$$115));
  const patternInput$$575 = ComputeAccessAndCompPath(envInitial$$7, null, (0, _ast.Ident$$get_idRange)(id$$115), vis$$46, null, parent$$19);
  CheckForDuplicateModule(envInitial$$7, (0, _ast.Ident$$get_idText)(id$$115), (0, _ast.Ident$$get_idRange)(id$$115));
  const id$$116 = (0, _ast.ident)(modName$$1, (0, _ast.Ident$$get_idRange)(id$$115));
  CheckForDuplicateConcreteType(envInitial$$7, (0, _ast.Ident$$get_idText)(id$$116), im);
  CheckNamespaceModuleOrTypeName(cenv$$235.g, id$$116);
  const patternInput$$576 = MakeInnerEnv(envInitial$$7, id$$116, modKind$$3);
  const mspec$$4 = (0, _tast.NewModuleOrNamespace)(envInitial$$7.eCompPath, patternInput$$575[0], id$$116, (0, _ast.PreXmlDoc$$ToXmlDoc)(xml), modAttrs, new _tast.MaybeLazy$00601(0, "Strict", (0, _tast.NewEmptyModuleOrNamespaceType)(modKind$$3)));
  const innerParent = new _tast.ParentRef(0, "Parent", (0, _tast.mkLocalModRef)(mspec$$4));
  const innerTypeNames = EstablishTypeDefinitionCores$$$TypeNamesInMutRecDecls(decls$$2);
  return [new MutRecDefnsPhase2DataForModule(0, "MutRecDefnsPhase2DataForModule", patternInput$$576[1], mspec$$4), [innerParent, innerTypeNames, patternInput$$576[0]]];
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1A_BuildInitialTycon(cenv$$236, env$$310, parent$$20, _arg1$$71) {
  const synTyconRepr$$2 = _arg1$$71.fields[1];
  const synTyconInfo = _arg1$$71.fields[0];
  const preEstablishedHasDefaultCtor = _arg1$$71.fields[3];
  const hasSelfReferentialCtor = _arg1$$71.fields[4];
  const synVis = synTyconInfo.fields[6];
  const synTypars$$5 = synTyconInfo.fields[1];
  const preferPostfix = synTyconInfo.fields[5];
  const id$$117 = synTyconInfo.fields[3];
  const doc$$8 = synTyconInfo.fields[4];
  const checkedTypars = TcTyparDecls(cenv$$236, env$$310, synTypars$$5);
  (0, _List.iterate)(function action$$45(id$$118) {
    CheckNamespaceModuleOrTypeName(cenv$$236.g, id$$118);
  }, id$$117);

  if (synTyconRepr$$2.tag === 7) {
    const synExnDefnRepr$$1 = synTyconRepr$$2.fields[0];
    return TcExceptionDeclarations$$$TcExnDefnCore_Phase1A(cenv$$236, env$$310, parent$$20, synExnDefnRepr$$1);
  } else {
    const id$$119 = EstablishTypeDefinitionCores$$$ComputeTyconName(id$$117, synTyconRepr$$2.tag === 5 ? false : true, checkedTypars);
    CheckForDuplicateConcreteType(env$$310, (0, _ast.Ident$$get_idText)(id$$119), (0, _ast.Ident$$get_idRange)(id$$119));
    const patternInput$$577 = ComputeAccessAndCompPath(env$$310, null, (0, _ast.Ident$$get_idRange)(id$$119), synVis, null, parent$$20);
    let synVisOfRepr;

    switch (synTyconRepr$$2.tag) {
      case 5:
        {
          synVisOfRepr = null;
          break;
        }

      case 0:
        {
          const vis$$49 = synTyconRepr$$2.fields[0];
          synVisOfRepr = vis$$49;
          break;
        }

      case 4:
        {
          synVisOfRepr = null;
          break;
        }

      case 2:
        {
          const vis$$50 = synTyconRepr$$2.fields[0];
          synVisOfRepr = vis$$50;
          break;
        }

      case 3:
        {
          synVisOfRepr = null;
          break;
        }

      case 1:
        {
          synVisOfRepr = null;
          break;
        }

      case 7:
        {
          synVisOfRepr = null;
          break;
        }

      default:
        {
          synVisOfRepr = null;
        }
    }

    const patternInput$$578 = ComputeAccessAndCompPath(env$$310, null, (0, _ast.Ident$$get_idRange)(id$$119), synVisOfRepr, null, parent$$20);
    const visOfRepr$$1 = (0, _tast.combineAccess)(patternInput$$577[0], patternInput$$578[0]);
    const lmtyp = new _tast.MaybeLazy$00601(0, "Strict", (0, _tast.NewEmptyModuleOrNamespaceType)(new _tast.ModuleOrNamespaceKind(1, "ModuleOrType")));
    return (0, _tast.NewTycon)(patternInput$$577[1], (0, _ast.Ident$$get_idText)(id$$119), (0, _ast.Ident$$get_idRange)(id$$119), patternInput$$577[0], visOfRepr$$1, new _tast.TyparKind(0, "Type"), (0, _illib.LazyWithContext$00602$$$NotLazy$$2B595)(checkedTypars), (0, _ast.PreXmlDoc$$ToXmlDoc)(doc$$8), preferPostfix, preEstablishedHasDefaultCtor, hasSelfReferentialCtor, lmtyp);
  }
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1B_EstablishBasicKind(cenv$$237, inSig$$3, envinner$$39, _arg1$$72, tycon$$24) {
  const synTyconRepr$$3 = _arg1$$72.fields[1];
  const synTyconInfo$$1 = _arg1$$72.fields[0];
  const typars$$13 = synTyconInfo$$1.fields[1];
  const synAttrs$$6 = synTyconInfo$$1.fields[0];
  const m$$422 = (0, _tast.Entity$$get_Range)(tycon$$24);
  const id$$120 = (0, _tast.Entity$$get_Id)(tycon$$24);
  const patternInput$$579 = TcAttributesCanFail(cenv$$237, envinner$$39, AttributeTargets$$$TyconDecl, synAttrs$$6);
  const hasMeasureAttr$$4 = (0, _TastOps.HasFSharpAttribute)(cenv$$237.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureAttribute)(cenv$$237.g), patternInput$$579[0]);
  const isStructRecordOrUnionType = synTyconRepr$$3.tag === 2 ? (0, _TastOps.HasFSharpAttribute)(cenv$$237.g, (0, _TcGlobals.TcGlobals$$get_attrib_StructAttribute)(cenv$$237.g), patternInput$$579[0]) : synTyconRepr$$3.tag === 0 ? EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$4, envinner$$39, id$$120, synTyconRepr$$3) != null ? (0, _TastOps.HasFSharpAttribute)(cenv$$237.g, (0, _TcGlobals.TcGlobals$$get_attrib_StructAttribute)(cenv$$237.g), patternInput$$579[0]) : (0, _TastOps.HasFSharpAttribute)(cenv$$237.g, (0, _TcGlobals.TcGlobals$$get_attrib_StructAttribute)(cenv$$237.g), patternInput$$579[0]) : EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$4, envinner$$39, id$$120, synTyconRepr$$3) != null ? (0, _TastOps.HasFSharpAttribute)(cenv$$237.g, (0, _TcGlobals.TcGlobals$$get_attrib_StructAttribute)(cenv$$237.g), patternInput$$579[0]) : false;
  (0, _tast.Entity$$SetIsStructRecordOrUnion$$Z1FBCCD16)(tycon$$24, isStructRecordOrUnionType);
  (0, _tast.Entity$$SetCompiledName$$2297AD2E)(tycon$$24, (0, _TastOps.TryFindFSharpStringAttribute)(cenv$$237.g, (0, _TcGlobals.TcGlobals$$get_attrib_CompiledNameAttribute)(cenv$$237.g), patternInput$$579[0]));

  if (hasMeasureAttr$$4) {
    (0, _tast.Entity$$SetTypeOrMeasureKind$$Z53708FA8)(tycon$$24, new _tast.TyparKind(1, "Measure"));

    if (!(typars$$13.tail == null)) {
      (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMeasureDefinitionsCannotHaveTypeParameters)(), m$$422));
    }
  }

  let repr$$6;
  var $target$$572, m$$423, m$$424;

  if (synTyconRepr$$3.tag === 7) {
    $target$$572 = 0;
  } else if (synTyconRepr$$3.tag === 6) {
    $target$$572 = 1;
    m$$423 = synTyconRepr$$3.fields[0];
  } else if (synTyconRepr$$3.tag === 0) {
    const activePatternResult49411 = EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$4, envinner$$39, id$$120, synTyconRepr$$3);

    if (activePatternResult49411 != null) {
      $target$$572 = 2;
      m$$424 = activePatternResult49411[1];
    } else {
      $target$$572 = 2;
      m$$424 = synTyconRepr$$3.fields[2];
    }
  } else {
    const activePatternResult49412 = EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$4, envinner$$39, id$$120, synTyconRepr$$3);

    if (activePatternResult49412 != null) {
      $target$$572 = 2;
      m$$424 = activePatternResult49412[1];
    } else {
      $target$$572 = 3;
    }
  }

  switch ($target$$572) {
    case 0:
      {
        repr$$6 = new _tast.TyconRepresentation(6, "TNoRepr");
        break;
      }

    case 1:
      {
        EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$237.g, new _ast.SynTypeDefnKind(7, "TyconHiddenRepr"), patternInput$$579[0], (0, _Types.L)(), (0, _Types.L)(), inSig$$3, true, m$$423);

        if (!inSig$$3 ? !hasMeasureAttr$$4 : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeRequiresDefinition)(), m$$423));
        }

        repr$$6 = hasMeasureAttr$$4 ? new _tast.TyconRepresentation(0, "TFSharpObjectRepr", new _tast.TyconObjModelData(new _tast.TyconObjModelKind(0, "TTyconClass"), (0, _Types.L)(), (0, _tast.MakeRecdFieldsTable)((0, _Types.L)()))) : new _tast.TyconRepresentation(6, "TNoRepr");
        break;
      }

    case 2:
      {
        EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$237.g, new _ast.SynTypeDefnKind(5, "TyconUnion"), patternInput$$579[0], (0, _Types.L)(), (0, _Types.L)(), inSig$$3, true, m$$424);
        repr$$6 = (0, _tast.MakeUnionRepr)((0, _Types.L)());
        break;
      }

    case 3:
      {
        switch (synTyconRepr$$3.tag) {
          case 5:
            {
              EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$237.g, new _ast.SynTypeDefnKind(6, "TyconAbbrev"), patternInput$$579[0], (0, _Types.L)(), (0, _Types.L)(), inSig$$3, true, m$$422);
              repr$$6 = new _tast.TyconRepresentation(6, "TNoRepr");
              break;
            }

          case 4:
            {
              const s$$16 = synTyconRepr$$3.fields[0];
              const m$$425 = synTyconRepr$$3.fields[1];
              EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$237.g, new _ast.SynTypeDefnKind(9, "TyconILAssemblyCode"), patternInput$$579[0], (0, _Types.L)(), (0, _Types.L)(), inSig$$3, true, m$$425);
              repr$$6 = new _tast.TyconRepresentation(4, "TAsmRepr", s$$16);
              break;
            }

          case 2:
            {
              const m$$426 = synTyconRepr$$3.fields[2];
              EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$237.g, new _ast.SynTypeDefnKind(4, "TyconRecord"), patternInput$$579[0], (0, _Types.L)(), (0, _Types.L)(), inSig$$3, true, m$$426);
              repr$$6 = new _tast.TyconRepresentation(1, "TRecdRepr", (0, _tast.MakeRecdFieldsTable)((0, _Types.L)()));
              break;
            }

          case 3:
            {
              const slotsigs$$1 = synTyconRepr$$3.fields[2];
              const kind$$4 = synTyconRepr$$3.fields[0];
              const isConcrete$$1 = synTyconRepr$$3.fields[4];
              const fields$$7 = synTyconRepr$$3.fields[3];
              const kind$$5 = EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$237.g, kind$$4, patternInput$$579[0], slotsigs$$1, fields$$7, inSig$$3, isConcrete$$1, m$$422);

              if (kind$$5.tag === 7) {
                repr$$6 = new _tast.TyconRepresentation(6, "TNoRepr");
              } else {
                const kind$$6 = kind$$5.tag === 1 ? new _tast.TyconObjModelKind(0, "TTyconClass") : kind$$5.tag === 2 ? new _tast.TyconObjModelKind(1, "TTyconInterface") : kind$$5.tag === 10 ? new _tast.TyconObjModelKind(3, "TTyconDelegate", (0, _infos.MakeSlotSig)("Invoke", (0, _TcGlobals.TcGlobals$$get_unit_ty)(cenv$$237.g), (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(), null)) : kind$$5.tag === 3 ? new _tast.TyconObjModelKind(2, "TTyconStruct") : (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("should have inferred tycon kind", m$$422));
                const repr$$4 = new _tast.TyconObjModelData(kind$$6, (0, _Types.L)(), (0, _tast.MakeRecdFieldsTable)((0, _Types.L)()));
                repr$$6 = new _tast.TyconRepresentation(0, "TFSharpObjectRepr", repr$$4);
              }

              break;
            }

          case 1:
            {
              const kind$$7 = new _tast.TyconObjModelKind(4, "TTyconEnum");
              const repr$$5 = new _tast.TyconObjModelData(kind$$7, (0, _Types.L)(), (0, _tast.MakeRecdFieldsTable)((0, _Types.L)()));
              repr$$6 = new _tast.TyconRepresentation(0, "TFSharpObjectRepr", repr$$5);
              break;
            }

          default:
            {
              throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 14819, 18);
            }
        }

        break;
      }
  }

  tycon$$24.entity_tycon_repr = repr$$6;
  return [patternInput$$579[0], patternInput$$579[1]];
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1C_Phase1E_EstablishAbbreviations(cenv$$238, envinner$$40, inSig$$4, tpenv$$403, pass, _arg1$$73, tycon$$25, attrs$$25) {
  const synTyconRepr$$4 = _arg1$$73.fields[1];
  const m$$427 = (0, _tast.Entity$$get_Range)(tycon$$25);
  const checkCxs$$18 = (0, _Util.equals)(pass, new TypeRealizationPass(1, "SecondPass")) ? new CheckConstraints(0, "CheckCxs") : new CheckConstraints(1, "NoCheckCxs");
  const firstPass = (0, _Util.equals)(pass, new TypeRealizationPass(0, "FirstPass"));

  try {
    const id$$121 = (0, _tast.Entity$$get_Id)(tycon$$25);
    const thisTyconRef$$1 = (0, _tast.mkLocalTyconRef)(tycon$$25);
    const hasMeasureAttr$$5 = (0, _TastOps.HasFSharpAttribute)(cenv$$238.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureAttribute)(cenv$$238.g), attrs$$25);
    const hasMeasureableAttr = (0, _TastOps.HasFSharpAttribute)(cenv$$238.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureableAttribute)(cenv$$238.g), attrs$$25);
    const envinner$$41 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$25, m$$427), envinner$$40);
    const envinner$$42 = MakeInnerEnvForTyconRef(envinner$$41, thisTyconRef$$1, false);

    if (EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$5, envinner$$42, id$$121, synTyconRepr$$4) != null) {} else {
      var $target$$573, m$$428, rhsType;

      if (synTyconRepr$$4.tag === 5) {
        if (synTyconRepr$$4.fields[0].tag === 0) {
          $target$$573 = 0;
          m$$428 = synTyconRepr$$4.fields[2];
          rhsType = synTyconRepr$$4.fields[1];
        } else {
          $target$$573 = 1;
        }
      } else {
        $target$$573 = 1;
      }

      switch ($target$$573) {
        case 0:
          {
            inSig$$4;

            if (!hasMeasureableAttr) {
              const kind$$8 = hasMeasureAttr$$5 ? new _tast.TyparKind(1, "Measure") : new _tast.TyparKind(0, "Type");
              const patternInput$$580 = TcTypeOrMeasureAndRecover(kind$$8, cenv$$238, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), checkCxs$$18, new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$42, tpenv$$403, rhsType);

              if (!firstPass) {
                const ftyvs$$2 = (0, _TastOps.freeInTypeLeftToRight)(cenv$$238.g, false, patternInput$$580[0]);
                const typars$$14 = (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$25, m$$428);

                if ((0, _List.length)(ftyvs$$2) !== (0, _List.length)(typars$$14)) {
                  (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcTypeAbbreviationHasTypeParametersMissingOnType)(), (0, _tast.Entity$$get_Range)(tycon$$25)));
                }
              }

              if (firstPass) {
                (0, _tast.Entity$$SetTypeAbbrev$$5268D4C7)(tycon$$25, patternInput$$580[0]);
              }
            }

            break;
          }
      }
    }
  } catch (e$$121) {
    (0, _ErrorLogger.errorRecovery)(e$$121, m$$427);
  }
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1D_Phase1F_EstablishSuperTypesAndInterfaceTypes(cenv$$239, tpenv$$404, inSig$$5, pass$$1, envMutRec$$7, mutRecDefns$$3) {
  const checkCxs$$19 = (0, _Util.equals)(pass$$1, new TypeRealizationPass(1, "SecondPass")) ? new CheckConstraints(0, "CheckCxs") : new CheckConstraints(1, "NoCheckCxs");
  const firstPass$$1 = (0, _Util.equals)(pass$$1, new TypeRealizationPass(0, "FirstPass"));
  const tyconWithImplementsL = MutRecShapes$$$mapTyconsWithEnv(function f1$$31(envinner$$43, tupledArg$$118) {
    const matchValue$$260 = [tupledArg$$118[0], tupledArg$$118[1]];

    if (matchValue$$260[1] != null) {
      const typeDefCore = matchValue$$260[0][0];
      const tycon$$26 = matchValue$$260[1][0];
      const attrs$$26 = matchValue$$260[1][1][0];
      const synTyconRepr$$5 = typeDefCore.fields[1];
      const explicitImplements = typeDefCore.fields[2];
      const m$$429 = (0, _tast.Entity$$get_Range)(tycon$$26);
      const tcref$$67 = (0, _tast.mkLocalTyconRef)(tycon$$26);
      const envinner$$44 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$26, m$$429), envinner$$43);
      const envinner$$45 = MakeInnerEnvForTyconRef(envinner$$44, tcref$$67, false);
      const patternInput$$581 = (0, _List.mapFold)(function (s$$17, tupledArg$$119) {
        return (0, _lib.mapFoldFst)(function f$$59(tpenv$$405, ty$$153) {
          return TcTypeAndRecover(cenv$$239, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), checkCxs$$19, new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$45, tpenv$$405, ty$$153);
        }, s$$17, tupledArg$$119[0], tupledArg$$119[1]);
      }, tpenv$$404, explicitImplements);

      if (firstPass$$1) {
        tycon$$26.entity_attribs = attrs$$26;
      }

      let patternInput$$583;
      var $target$$574;

      switch (synTyconRepr$$5.tag) {
        case 3:
          $target$$574 = 1;
          break;

        case 1:
        case 6:
        case 5:
        case 0:
        case 4:
        case 2:
          $target$$574 = 2;
          break;

        default:
          $target$$574 = 0;
      }

      switch ($target$$574) {
        case 0:
          {
            patternInput$$583 = [(0, _Types.L)(), (0, _Types.L)()];
            break;
          }

        case 1:
          {
            const slotsigs$$2 = synTyconRepr$$5.fields[2];
            const m$$430 = synTyconRepr$$5.fields[7];
            const kind$$9 = synTyconRepr$$5.fields[0];
            const isConcrete$$2 = synTyconRepr$$5.fields[4];
            const inherits$$2 = synTyconRepr$$5.fields[1];
            const fields$$8 = synTyconRepr$$5.fields[3];
            const kind$$10 = EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$239.g, kind$$9, attrs$$26, slotsigs$$2, fields$$8, inSig$$5, isConcrete$$2, m$$430);
            const inherits$$3 = (0, _List.map)(function mapping$$160(tupledArg$$120) {
              return [tupledArg$$120[0], tupledArg$$120[1]];
            }, inherits$$2);
            const inheritedTys = (0, _List.mapFold)(function (s$$18, tupledArg$$121) {
              return (0, _lib.mapFoldFst)(function f$$60(tpenv$$406, ty$$155) {
                return TcTypeAndRecover(cenv$$239, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), checkCxs$$19, new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$45, tpenv$$406, ty$$155);
              }, s$$18, tupledArg$$121[0], tupledArg$$121[1]);
            }, tpenv$$404, inherits$$3)[0];
            let patternInput$$582;

            if (kind$$10.tag === 2) {
              (0, _List.iterate)(function action$$46(tupledArg$$122) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInterfacesShouldUseInheritNotInterface)(), tupledArg$$122[1]));
              }, explicitImplements);
              patternInput$$582 = [(0, _List.append)(patternInput$$581[0], inheritedTys), (0, _Types.L)()];
            } else {
              patternInput$$582 = [patternInput$$581[0], inheritedTys];
            }

            patternInput$$583 = [patternInput$$582[0], patternInput$$582[1]];
            break;
          }

        case 2:
          {
            patternInput$$583 = [patternInput$$581[0], (0, _Types.L)()];
            break;
          }
      }

      (0, _Seq.iterate)(function (forLoopVar$$6) {
        if (firstPass$$1 ? (0, _TastOps.isErasedType)(cenv$$239.g, forLoopVar$$6[0]) : false) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromErasedType)(), forLoopVar$$6[1]));
        }
      }, patternInput$$583[0]);

      if (firstPass$$1) {
        (0, _List.iterate)(function action$$47(tupledArg$$123) {
          PublishInterface(cenv$$239, TcEnv$$get_DisplayEnv(envinner$$45), tcref$$67, tupledArg$$123[1], false, tupledArg$$123[0]);
        }, patternInput$$583[0]);
      }

      return [attrs$$26, patternInput$$583[1], synTyconRepr$$5, tycon$$26];
    } else {
      return null;
    }
  }, envMutRec$$7, mutRecDefns$$3);
  MutRecShapes$$$iterTycons(function f1$$32(option$$14) {
    (0, _Seq.iterate)(function action$$48(tupledArg$$124) {
      const m$$435 = (0, _tast.Entity$$get_Range)(tupledArg$$124[3]);

      try {
        let super$;
        var $target$$575;

        if (tupledArg$$124[2].tag === 6) {
          $target$$575 = 1;
        } else if (tupledArg$$124[2].tag === 5) {
          $target$$575 = 2;
        } else if (tupledArg$$124[2].tag === 4) {
          $target$$575 = 3;
        } else if (tupledArg$$124[2].tag === 0) {
          $target$$575 = 4;
        } else if (tupledArg$$124[2].tag === 2) {
          $target$$575 = 4;
        } else if (tupledArg$$124[2].tag === 3) {
          $target$$575 = 5;
        } else if (tupledArg$$124[2].tag === 1) {
          $target$$575 = 6;
        } else {
          $target$$575 = 0;
        }

        switch ($target$$575) {
          case 0:
            {
              super$ = (0, _TcGlobals.TcGlobals$$get_exn_ty)(cenv$$239.g);
              break;
            }

          case 1:
            {
              super$ = null;
              break;
            }

          case 2:
            {
              super$ = null;
              break;
            }

          case 3:
            {
              super$ = null;
              break;
            }

          case 4:
            {
              super$ = (0, _tast.Entity$$get_IsStructRecordOrUnionTycon)(tupledArg$$124[3]) ? (0, _TcGlobals.TcGlobals$$get_system_Value_ty)(cenv$$239.g) : null;
              break;
            }

          case 5:
            {
              const slotsigs$$3 = tupledArg$$124[2].fields[2];
              const kind$$11 = tupledArg$$124[2].fields[0];
              const isConcrete$$3 = tupledArg$$124[2].fields[4];
              const fields$$9 = tupledArg$$124[2].fields[3];
              const kind$$12 = EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$239.g, kind$$11, tupledArg$$124[0], slotsigs$$3, fields$$9, inSig$$5, isConcrete$$3, m$$435);

              if (tupledArg$$124[1].tail != null) {
                if (tupledArg$$124[1].tail.tail == null) {
                  if (!firstPass$$1 ? !(kind$$12.tag === 1 ? true : false) : false) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructsInterfacesEnumsDelegatesMayNotInheritFromOtherTypes)(), tupledArg$$124[1].head[1]));
                  }

                  CheckSuperType(cenv$$239, tupledArg$$124[1].head[0], tupledArg$$124[1].head[1]);

                  if ((0, _TastOps.isTyparTy)(cenv$$239.g, tupledArg$$124[1].head[0])) {
                    if (firstPass$$1) {
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromVariableType)(), tupledArg$$124[1].head[1]));
                    }

                    super$ = (0, _TcGlobals.TcGlobals$$get_obj_ty)(cenv$$239.g);
                  } else {
                    super$ = tupledArg$$124[1].head[0];
                  }
                } else {
                  super$ = (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypesCannotInheritFromMultipleConcreteTypes)(), m$$435));
                }
              } else {
                var $target$$576;

                switch (kind$$12.tag) {
                  case 3:
                    $target$$576 = 0;
                    break;

                  case 10:
                    $target$$576 = 1;
                    break;

                  case 7:
                  case 1:
                  case 2:
                    $target$$576 = 2;
                    break;

                  default:
                    $target$$576 = 3;
                }

                switch ($target$$576) {
                  case 0:
                    {
                      super$ = (0, _TcGlobals.TcGlobals$$get_system_Value_ty)(cenv$$239.g);
                      break;
                    }

                  case 1:
                    {
                      super$ = (0, _TcGlobals.TcGlobals$$get_system_MulticastDelegate_ty)(cenv$$239.g);
                      break;
                    }

                  case 2:
                    {
                      super$ = null;
                      break;
                    }

                  case 3:
                    {
                      super$ = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("should have inferred tycon kind", m$$435));
                      break;
                    }
                }
              }

              break;
            }

          case 6:
            {
              super$ = (0, _TcGlobals.TcGlobals$$get_system_Enum_ty)(cenv$$239.g);
              break;
            }
        }

        const super$$$1 = (0, _Option.defaultArg)(super$, null, function mapping$$161(ty$$158) {
          if ((0, _TastOps.isFunTy)(cenv$$239.g, ty$$158)) {
            const patternInput$$584 = (0, _TastOps.destFunTy)(cenv$$239.g, ty$$158);
            return (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_fastFunc_tcr)(cenv$$239.g), (0, _Types.L)(patternInput$$584[0], (0, _Types.L)(patternInput$$584[1], (0, _Types.L)())));
          } else {
            return ty$$158;
          }
        });
        (0, _tast.Entity$$get_TypeContents)(tupledArg$$124[3]).tcaug_super = super$$$1;
      } catch (e$$122) {
        (0, _ErrorLogger.errorRecovery)(e$$122, m$$435);
      }
    }, (0, _Option.defaultArg)(option$$14, [], function ($x$$131) {
      return [$x$$131];
    }));
  }, tyconWithImplementsL);
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1G_EstablishRepresentation(cenv$$240, envinner$$46, tpenv$$407, inSig$$6, _arg1$$75, tycon$$28, attrs$$28) {
  const synTyconRepr$$7 = _arg1$$75.fields[1];
  const m$$437 = (0, _tast.Entity$$get_Range)(tycon$$28);

  try {
    const id$$122 = (0, _tast.Entity$$get_Id)(tycon$$28);
    const thisTyconRef$$2 = (0, _tast.mkLocalTyconRef)(tycon$$28);
    const innerParent$$1 = new _tast.ParentRef(0, "Parent", thisTyconRef$$2);
    const patternInput$$585 = (0, _TastOps.generalizeTyconRef)(thisTyconRef$$2);
    const hasAbstractAttr = (0, _TastOps.HasFSharpAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_AbstractClassAttribute)(cenv$$240.g), attrs$$28);
    const hasSealedAttr = ((0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$240.g) ? (0, _ast.Ident$$get_idText)(id$$122) === "Unit" : false) ? true : (0, _TastOps.TryFindFSharpBoolAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_SealedAttribute)(cenv$$240.g), attrs$$28);
    const hasMeasureAttr$$6 = (0, _TastOps.HasFSharpAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureAttribute)(cenv$$240.g), attrs$$28);
    const hasMeasureableAttr$$1 = (0, _TastOps.HasFSharpAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_MeasureableAttribute)(cenv$$240.g), attrs$$28);
    const hasCLIMutable = (0, _TastOps.HasFSharpAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_CLIMutableAttribute)(cenv$$240.g), attrs$$28);
    const structLayoutAttr = (0, _TastOps.TryFindFSharpInt32Attribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_StructLayoutAttribute)(cenv$$240.g), attrs$$28);
    const hasAllowNullLiteralAttr = (0, _Util.equals)((0, _TastOps.TryFindFSharpBoolAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_AllowNullLiteralAttribute)(cenv$$240.g), attrs$$28), true);

    if (hasAbstractAttr) {
      (0, _tast.Entity$$get_TypeContents)(tycon$$28).tcaug_abstract = true;
    }

    tycon$$28.entity_attribs = attrs$$28;

    const noAbstractClassAttributeCheck = function noAbstractClassAttributeCheck() {
      if (hasAbstractAttr) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlyClassesCanHaveAbstract)(), m$$437));
      }
    };

    const noAllowNullLiteralAttributeCheck = function noAllowNullLiteralAttributeCheck() {
      if (hasAllowNullLiteralAttr) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRecordsUnionsAbbreviationsStructsMayNotHaveAllowNullLiteralAttribute)(), m$$437));
      }
    };

    const allowNullLiteralAttributeCheck = function allowNullLiteralAttributeCheck() {
      if (hasAllowNullLiteralAttr) {
        (0, _Seq.iterate)(function action$$49(ty$$159) {
          if (!(0, _TastOps.TypeNullIsExtraValue)(cenv$$240.g, m$$437, ty$$159)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAllowNullTypesMayOnlyInheritFromAllowNullTypes)(), m$$437));
          }
        }, (0, _Option.defaultArg)((0, _tast.Entity$$get_TypeContents)(tycon$$28).tcaug_super, [], function ($x$$132) {
          return [$x$$132];
        }));
        (0, _List.iterate)(function action$$50(ty$$160) {
          if (!(0, _TastOps.TypeNullIsExtraValue)(cenv$$240.g, m$$437, ty$$160)) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAllowNullTypesMayOnlyInheritFromAllowNullTypes)(), m$$437));
          }
        }, (0, _tast.Entity$$get_ImmediateInterfaceTypesOfFSharpTycon)(tycon$$28));
      }
    };

    const structLayoutAttributeCheck = function structLayoutAttributeCheck(allowed) {
      const explicitKind = 2;

      if (structLayoutAttr == null) {} else {
        const kind$$13 = structLayoutAttr | 0;

        if (allowed) {
          if (kind$$13 === explicitKind) {
            (0, _ErrorLogger.warning)(new _ErrorLogger.PossibleUnverifiableCode(m$$437));
          }
        } else if ((0, _tast.EntityRef$$Typars$$4DB9192C)(thisTyconRef$$2, m$$437).tail == null) {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlyStructsCanHaveStructLayout)(), m$$437));
        } else {
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcGenericTypesCannotHaveStructLayout)(), m$$437));
        }
      }
    };

    const hiddenReprChecks = function hiddenReprChecks(hasRepr) {
      structLayoutAttributeCheck(false);

      if ((0, _Util.equals)(hasSealedAttr, false) ? true : (hasRepr ? !(0, _Util.equals)(hasSealedAttr, true) : false) ? !((0, _ast.Ident$$get_idText)(id$$122) === "Unit" ? (0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$240.g) : false) : false) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRepresentationOfTypeHiddenBySignature)(), m$$437));
      }

      if (hasAbstractAttr) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlyClassesCanHaveAbstract)(), m$$437));
      }
    };

    const noMeasureAttributeCheck = function noMeasureAttributeCheck() {
      if (hasMeasureAttr$$6) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOnlyTypesRepresentingUnitsOfMeasureCanHaveMeasure)(), m$$437));
      }
    };

    const noCLIMutableAttributeCheck = function noCLIMutableAttributeCheck() {
      if (hasCLIMutable) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcThisTypeMayNotHaveACLIMutableAttribute)(), m$$437));
      }
    };

    const noSealedAttributeCheck = function noSealedAttributeCheck(k$$9) {
      if ((0, _Util.equals)(hasSealedAttr, true)) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$(k$$9(), m$$437));
      }
    };

    const noFieldsCheck = function noFieldsCheck(fields$0027) {
      if (fields$0027.tail != null) {
        const rf$$1 = fields$0027.head;
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInterfaceTypesAndDelegatesCannotContainFields)(), (0, _tast.RecdField$$get_Range)(rf$$1)));
      }
    };

    const envinner$$47 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$28, m$$437), envinner$$46);
    const envinner$$48 = MakeInnerEnvForTyconRef(envinner$$47, thisTyconRef$$2, false);
    const ad$$39 = envinner$$48.eAccessRights;

    const writeFakeRecordFieldsToSink = function writeFakeRecordFieldsToSink(fields$$10) {
      const nenv$$8 = TcEnv$$get_NameEnv(envinner$$48);
      (0, _Seq.iterate)(function (fspec$$8) {
        if (!(0, _tast.RecdField$$get_IsCompilerGenerated)(fspec$$8)) {
          const info$$4 = new _infos.RecdFieldInfo(0, "RecdFieldInfo", patternInput$$585[0], (0, _tast.EntityRef$$MakeNestedRecdFieldRef$$Z3DF09F14)(thisTyconRef$$2, fspec$$8));
          const nenv$0027 = (0, _NameResolution.AddFakeNameToNameEnv)((0, _tast.RecdField$$get_Name)(fspec$$8), nenv$$8, new _NameResolution.Item(5, "RecdField", info$$4));
          const item$$54 = (0, _NameResolution.FreshenRecdFieldRef)(cenv$$240.nameResolver, m$$437, (0, _tast.EntityRef$$MakeNestedRecdFieldRef$$Z3DF09F14)(thisTyconRef$$2, fspec$$8));
          (0, _NameResolution.CallNameResolutionSink)(cenv$$240.tcSink, (0, _tast.RecdField$$get_Range)(fspec$$8), nenv$$8, item$$54, item$$54, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(envinner$$48), ad$$39);
          (0, _NameResolution.CallEnvSink)(cenv$$240.tcSink, (0, _tast.RecdField$$get_Range)(fspec$$8), nenv$0027, ad$$39);
        }
      }, fields$$10);
    };

    const writeFakeUnionCtorsToSink = function writeFakeUnionCtorsToSink(unionCases$$2) {
      const nenv$$9 = TcEnv$$get_NameEnv(envinner$$48);
      (0, _Seq.iterate)(function (unionCase) {
        const info$$5 = new _infos.UnionCaseInfo(0, "UnionCaseInfo", patternInput$$585[0], (0, _tast.mkUnionCaseRef)(thisTyconRef$$2, (0, _ast.Ident$$get_idText)(unionCase.Id)));
        const nenv$0027$$1 = (0, _NameResolution.AddFakeNameToNameEnv)((0, _ast.Ident$$get_idText)(unionCase.Id), nenv$$9, new _NameResolution.Item(1, "UnionCase", info$$5, false));
        const item$$55 = new _NameResolution.Item(1, "UnionCase", info$$5, false);
        (0, _NameResolution.CallNameResolutionSink)(cenv$$240.tcSink, (0, _tast.UnionCase$$get_Range)(unionCase), nenv$$9, item$$55, item$$55, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(envinner$$48), ad$$39);
        (0, _NameResolution.CallEnvSink)(cenv$$240.tcSink, (0, _ast.Ident$$get_idRange)(unionCase.Id), nenv$0027$$1, ad$$39);
      }, unionCases$$2);
    };

    let patternInput$$591;

    if (synTyconRepr$$7.tag === 7) {
      const parent$$21 = new _tast.ParentRef(0, "Parent", (0, _tast.mkLocalTyconRef)(tycon$$28));
      TcExceptionDeclarations$$$TcExnDefnCore_Phase1G_EstablishRepresentation(cenv$$240, envinner$$48, parent$$21, tycon$$28, synTyconRepr$$7.fields[0]);
      patternInput$$591 = [new _tast.TyconRepresentation(6, "TNoRepr"), null, new SafeInitData(1, "NoSafeInitInfo")];
    } else if (synTyconRepr$$7.tag === 6) {
      hiddenReprChecks(false);
      noAllowNullLiteralAttributeCheck();

      if (hasMeasureAttr$$6) {
        const repr$$7 = new _tast.TyconRepresentation(0, "TFSharpObjectRepr", new _tast.TyconObjModelData(new _tast.TyconObjModelKind(0, "TTyconClass"), (0, _Types.L)(), (0, _tast.MakeRecdFieldsTable)((0, _Types.L)())));
        patternInput$$591 = [repr$$7, null, new SafeInitData(1, "NoSafeInitInfo")];
      } else {
        patternInput$$591 = [new _tast.TyconRepresentation(6, "TNoRepr"), null, new SafeInitData(1, "NoSafeInitInfo")];
      }
    } else {
      const activePatternResult49491 = EstablishTypeDefinitionCores$$$$007CTyconCoreAbbrevThatIsReallyAUnion$007C_$007C(hasMeasureAttr$$6, envinner$$48, id$$122, synTyconRepr$$7);

      if (activePatternResult49491 != null) {
        structLayoutAttributeCheck(false);
        noAllowNullLiteralAttributeCheck();
        TcRecdUnionAndEnumDeclarations$$$CheckUnionCaseName(cenv$$240, (0, _ast.Ident$$get_idText)(activePatternResult49491[0]), (0, _ast.Ident$$get_idRange)(activePatternResult49491[0]));
        const unionCase$$1 = (0, _tast.NewUnionCase)(activePatternResult49491[0], (0, _ast.Ident$$get_idText)(activePatternResult49491[0]), (0, _Types.L)(), patternInput$$585[1], (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), (0, _tast.Entity$$get_Accessibility)(tycon$$28));
        writeFakeUnionCtorsToSink((0, _Types.L)(unionCase$$1, (0, _Types.L)()));
        patternInput$$591 = [(0, _tast.MakeUnionRepr)((0, _Types.L)(unionCase$$1, (0, _Types.L)())), null, new SafeInitData(1, "NoSafeInitInfo")];
      } else {
        if (synTyconRepr$$7.tag === 5) {
          if (synTyconRepr$$7.fields[0].tag === 0) {
            if ((0, _Util.equals)(hasSealedAttr, true)) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAbbreviatedTypesCannotBeSealed)(), m$$437));
            }

            noAbstractClassAttributeCheck();
            noAllowNullLiteralAttributeCheck();

            if (hasMeasureableAttr$$1) {
              const kind$$14 = hasMeasureAttr$$6 ? new _tast.TyparKind(1, "Measure") : new _tast.TyparKind(0, "Type");
              const patternInput$$586 = TcTypeOrMeasureAndRecover(kind$$14, cenv$$240, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$48, tpenv$$407, synTyconRepr$$7.fields[1]);
              patternInput$$591 = [new _tast.TyconRepresentation(5, "TMeasureableRepr", patternInput$$586[0]), null, new SafeInitData(1, "NoSafeInitInfo")];
            } else if ((0, _tast.Entity$$get_TypeReprInfo)(tycon$$28).tag === 6 ? false : true) {
              patternInput$$591 = [(0, _tast.Entity$$get_TypeReprInfo)(tycon$$28), null, new SafeInitData(1, "NoSafeInitInfo")];
            } else {
              patternInput$$591 = [new _tast.TyconRepresentation(6, "TNoRepr"), null, new SafeInitData(1, "NoSafeInitInfo")];
            }
          } else {
            patternInput$$591 = [new _tast.TyconRepresentation(6, "TNoRepr"), null, new SafeInitData(1, "NoSafeInitInfo")];
          }
        } else if (synTyconRepr$$7.tag === 0) {
          noCLIMutableAttributeCheck();
          noMeasureAttributeCheck();
          noSealedAttributeCheck(function () {
            return (0, _FSComp.SR$$$tcTypesAreAlwaysSealedDU)();
          });
          noAbstractClassAttributeCheck();
          noAllowNullLiteralAttributeCheck();
          structLayoutAttributeCheck(false);
          const unionCases$$4 = TcRecdUnionAndEnumDeclarations$$$TcUnionCaseDecls(cenv$$240, envinner$$48, innerParent$$1, patternInput$$585[1], tpenv$$407, synTyconRepr$$7.fields[1]);

          if ((0, _tast.Entity$$get_IsStructRecordOrUnionTycon)(tycon$$28) ? (0, _List.length)(unionCases$$4) > 1 : false) {
            const fieldNames = (0, _List.ofSeq)((0, _Seq.delay)(function () {
              return (0, _Seq.collect)(function (uc$$2) {
                return (0, _Seq.map)(function (ft) {
                  return (0, _tast.RecdField$$get_Name)(ft);
                }, (0, _tast.TyconRecdFields$$get_TrueInstanceFieldsAsList)(uc$$2.FieldTable));
              }, unionCases$$4);
            }));

            if ((0, _List.length)((0, _List.distinct)(fieldNames, {
              Equals($x$$133, $y$$134) {
                return $x$$133 === $y$$134;
              },

              GetHashCode: _Util.structuralHash
            })) !== (0, _List.length)(fieldNames)) {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructUnionMultiCaseDistinctFields)(), m$$437));
            }
          }

          writeFakeUnionCtorsToSink(unionCases$$4);
          patternInput$$591 = [(0, _tast.MakeUnionRepr)(unionCases$$4), null, new SafeInitData(1, "NoSafeInitInfo")];
        } else if (synTyconRepr$$7.tag === 2) {
          noMeasureAttributeCheck();
          noSealedAttributeCheck(function () {
            return (0, _FSComp.SR$$$tcTypesAreAlwaysSealedRecord)();
          });
          noAbstractClassAttributeCheck();
          noAllowNullLiteralAttributeCheck();
          structLayoutAttributeCheck(true);
          const recdFields$$1 = TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecls(cenv$$240, envinner$$48, innerParent$$1, false, tpenv$$407, synTyconRepr$$7.fields[1]);
          CheckDuplicates(function idf$$3(f$$61) {
            return (0, _tast.RecdField$$get_Id)(f$$61);
          }, "field", recdFields$$1);
          writeFakeRecordFieldsToSink(recdFields$$1);
          patternInput$$591 = [new _tast.TyconRepresentation(1, "TRecdRepr", (0, _tast.MakeRecdFieldsTable)(recdFields$$1)), null, new SafeInitData(1, "NoSafeInitInfo")];
        } else if (synTyconRepr$$7.tag === 4) {
          noCLIMutableAttributeCheck();
          noMeasureAttributeCheck();
          noSealedAttributeCheck(function () {
            return (0, _FSComp.SR$$$tcTypesAreAlwaysSealedAssemblyCode)();
          });
          noAllowNullLiteralAttributeCheck();
          structLayoutAttributeCheck(false);
          noAbstractClassAttributeCheck();
          patternInput$$591 = [new _tast.TyconRepresentation(4, "TAsmRepr", synTyconRepr$$7.fields[0]), null, new SafeInitData(1, "NoSafeInitInfo")];
        } else if (synTyconRepr$$7.tag === 3) {
          const userFields = TcRecdUnionAndEnumDeclarations$$$TcNamedFieldDecls(cenv$$240, envinner$$48, innerParent$$1, synTyconRepr$$7.fields[5], tpenv$$407, synTyconRepr$$7.fields[3]);
          const implicitStructFields = (0, _List.ofSeq)((0, _Seq.delay)(function () {
            if (synTyconRepr$$7.fields[6] != null) {
              const spats$$10 = synTyconRepr$$7.fields[6];

              if ((0, _tast.Entity$$get_IsFSharpStructOrEnumTycon)(tycon$$28)) {
                const patternInput$$587 = TcSimplePatsOfUnknownType(cenv$$240, true, new CheckConstraints(0, "CheckCxs"), envinner$$48, tpenv$$407, new _ast.SynSimplePats(0, "SimplePats", spats$$10, m$$437));
                const names$$23 = patternInput$$587[1][1];
                return (0, _Seq.collect)(function (arg$$50) {
                  const ty$$161 = PrelimValScheme1$$get_Type((0, _Map.FSharpMap$$get_Item$$2B595)(names$$23, arg$$50));
                  const id$$123 = PrelimValScheme1$$get_Ident((0, _Map.FSharpMap$$get_Item$$2B595)(names$$23, arg$$50));
                  const taccess$$2 = new _tast.Accessibility(0, "TAccess", (0, _Types.L)(envinner$$48.eAccessPath, (0, _Types.L)()));
                  return (0, _Seq.singleton)((0, _tast.NewRecdField)(false, null, id$$123, false, ty$$161, false, false, (0, _Types.L)(), (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), taccess$$2, true));
                }, patternInput$$587[0]);
              } else {
                return (0, _Seq.empty)();
              }
            } else {
              return (0, _Seq.empty)();
            }
          }));
          CheckDuplicates(function idf$$4(f$$62) {
            return (0, _tast.RecdField$$get_Id)(f$$62);
          }, "field", (0, _List.append)(userFields, implicitStructFields));
          writeFakeRecordFieldsToSink(userFields);
          const superTy$$5 = (0, _tast.Entity$$get_TypeContents)(tycon$$28).tcaug_super;
          const containerInfo$$10 = TyconContainerInfo(innerParent$$1, thisTyconRef$$2, (0, _tast.EntityRef$$Typars$$4DB9192C)(thisTyconRef$$2, m$$437), new SafeInitData(1, "NoSafeInitInfo"));
          const kind$$16 = EstablishTypeDefinitionCores$$$InferTyconKind(cenv$$240.g, synTyconRepr$$7.fields[0], attrs$$28, synTyconRepr$$7.fields[2], synTyconRepr$$7.fields[3], inSig$$6, synTyconRepr$$7.fields[4], m$$437);

          if (kind$$16.tag === 7) {
            hiddenReprChecks(true);
            noAllowNullLiteralAttributeCheck();
            patternInput$$591 = [new _tast.TyconRepresentation(6, "TNoRepr"), null, new SafeInitData(1, "NoSafeInitInfo")];
          } else {
            (0, _Seq.iterate)(function action$$51(ty$$162) {
              let m$$439;

              if (synTyconRepr$$7.fields[1].tail != null) {
                const m$$438 = synTyconRepr$$7.fields[1].head[1];
                m$$439 = m$$438;
              } else {
                m$$439 = m$$437;
              }

              if ((0, _TastOps.isSealedTy)(cenv$$240.g, ty$$162)) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromSealedType)(), m$$439));
              } else if (!(0, _TastOps.isClassTy)(cenv$$240.g, ty$$162)) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcCannotInheritFromInterfaceType)(), m$$439));
              }
            }, (0, _Option.defaultArg)(superTy$$5, [], function ($x$$135) {
              return [$x$$135];
            }));
            let kind$$17;

            switch (kind$$16.tag) {
              case 3:
                {
                  noCLIMutableAttributeCheck();
                  noSealedAttributeCheck(function () {
                    return (0, _FSComp.SR$$$tcTypesAreAlwaysSealedStruct)();
                  });
                  noAbstractClassAttributeCheck();
                  noAllowNullLiteralAttributeCheck();

                  if (!(synTyconRepr$$7.fields[2].tail == null)) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcStructTypesCannotContainAbstractMembers)(), m$$437));
                  }

                  structLayoutAttributeCheck(true);
                  kind$$17 = new _tast.TyconObjModelKind(2, "TTyconStruct");
                  break;
                }

              case 2:
                {
                  if ((0, _Util.equals)(hasSealedAttr, true)) {
                    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInterfaceTypesCannotBeSealed)(), m$$437));
                  }

                  noCLIMutableAttributeCheck();
                  structLayoutAttributeCheck(false);
                  noAbstractClassAttributeCheck();
                  allowNullLiteralAttributeCheck();
                  noFieldsCheck(userFields);
                  kind$$17 = new _tast.TyconObjModelKind(1, "TTyconInterface");
                  break;
                }

              case 1:
                {
                  noCLIMutableAttributeCheck();
                  structLayoutAttributeCheck(!synTyconRepr$$7.fields[5]);
                  allowNullLiteralAttributeCheck();
                  kind$$17 = new _tast.TyconObjModelKind(0, "TTyconClass");
                  break;
                }

              case 10:
                {
                  const ty$$163 = kind$$16.fields[0];
                  const arity$$6 = kind$$16.fields[1];
                  noCLIMutableAttributeCheck();
                  noSealedAttributeCheck(function () {
                    return (0, _FSComp.SR$$$tcTypesAreAlwaysSealedDelegate)();
                  });
                  structLayoutAttributeCheck(false);
                  noAllowNullLiteralAttributeCheck();
                  noAbstractClassAttributeCheck();
                  noFieldsCheck(userFields);
                  const patternInput$$588 = TcTypeAndRecover(cenv$$240, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), envinner$$48, tpenv$$407, ty$$163);
                  const patternInput$$589 = (0, _TastOps.GetTopValTypeInCompiledForm)(cenv$$240.g, TranslatePartialArity((0, _Types.L)(), TranslateTopValSynInfo(m$$437, function tcAttributes$$6(attrTgt$$19, synAttribs$$13) {
                    return TcAttributes(cenv$$240, envinner$$48, attrTgt$$19, synAttribs$$13);
                  }, arity$$6)), patternInput$$588[0], m$$437);

                  if ((0, _List.length)(patternInput$$589[1]) < 1) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidDelegateSpecification)(), m$$437));
                  }

                  if ((0, _List.length)(patternInput$$589[1]) > 1) {
                    (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDelegatesCannotBeCurried)(), m$$437));
                  }

                  const ttps$$1 = (0, _tast.EntityRef$$Typars$$4DB9192C)(thisTyconRef$$2, m$$437);
                  const fparams = (0, _List.map)(function (tupledArg$$125) {
                    return (0, _infos.MakeSlotParam)(tupledArg$$125[0], tupledArg$$125[1]);
                  }, (0, _List.head)(patternInput$$589[1]));
                  kind$$17 = new _tast.TyconObjModelKind(3, "TTyconDelegate", (0, _infos.MakeSlotSig)("Invoke", patternInput$$585[1], ttps$$1, (0, _Types.L)(), (0, _Types.L)(fparams, (0, _Types.L)()), patternInput$$589[2]));
                  break;
                }

              default:
                {
                  kind$$17 = (0, _ErrorLogger.error)(new _ErrorLogger.InternalError("should have inferred tycon kind", m$$437));
                }
            }

            let baseIdOpt$$5;

            switch (synTyconRepr$$7.tag) {
              case 7:
                {
                  baseIdOpt$$5 = null;
                  break;
                }

              case 5:
                {
                  baseIdOpt$$5 = null;
                  break;
                }

              case 0:
                {
                  baseIdOpt$$5 = null;
                  break;
                }

              case 4:
                {
                  baseIdOpt$$5 = null;
                  break;
                }

              case 2:
                {
                  baseIdOpt$$5 = null;
                  break;
                }

              case 1:
                {
                  baseIdOpt$$5 = null;
                  break;
                }

              case 3:
                {
                  const inherits$$5 = synTyconRepr$$7.fields[1];

                  if (inherits$$5.tail != null) {
                    const m$$440 = inherits$$5.head[1];
                    const baseIdOpt$$4 = inherits$$5.head[2];

                    if (baseIdOpt$$4 != null) {
                      const id$$124 = baseIdOpt$$4;
                      baseIdOpt$$5 = id$$124;
                    } else {
                      baseIdOpt$$5 = (0, _ast.ident)("base", m$$440);
                    }
                  } else {
                    baseIdOpt$$5 = null;
                  }

                  break;
                }

              default:
                {
                  baseIdOpt$$5 = null;
                }
            }

            const abstractSlots$$1 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
              return (0, _Seq.collect)(function (matchValue$$262) {
                const m$$441 = matchValue$$262[0].fields[10];
                const _valSynData = matchValue$$262[0].fields[4];
                CheckMemberFlags(null, new NewSlotsOK(0, "NewSlotsOK"), new OverridesOK(0, "OverridesOK"), matchValue$$262[1], m$$441);
                const slots$$1 = TcAndPublishValSpec(cenv$$240, envinner$$48, containerInfo$$10, new DeclKind(0, "ModuleOrMemberBinding"), matchValue$$262[1], tpenv$$407, matchValue$$262[0])[0];
                return (0, _Seq.map)(_tast.mkLocalValRef, slots$$1);
              }, synTyconRepr$$7.fields[2]);
            }));
            const baseValOpt$$18 = MakeAndPublishBaseVal(cenv$$240, envinner$$48, baseIdOpt$$5, (0, _TastOps.superOfTycon)(cenv$$240.g, tycon$$28));
            const safeInitInfo$$14 = ComputeInstanceSafeInitInfo(cenv$$240, envinner$$48, (0, _tast.EntityRef$$get_Range)(thisTyconRef$$2), patternInput$$585[1]);
            let safeInitFields;

            if (safeInitInfo$$14.tag === 1) {
              safeInitFields = (0, _Types.L)();
            } else {
              const fld$$4 = safeInitInfo$$14.fields[1];
              safeInitFields = (0, _Types.L)(fld$$4, (0, _Types.L)());
            }

            const repr$$8 = new _tast.TyconRepresentation(0, "TFSharpObjectRepr", new _tast.TyconObjModelData(kind$$17, abstractSlots$$1, (0, _tast.MakeRecdFieldsTable)((0, _List.append)(userFields, (0, _List.append)(implicitStructFields, safeInitFields)))));
            patternInput$$591 = [repr$$8, baseValOpt$$18, safeInitInfo$$14];
          }
        } else if (synTyconRepr$$7.tag === 1) {
          const patternInput$$590 = TcRecdUnionAndEnumDeclarations$$$TcEnumDecls(cenv$$240, envinner$$48, innerParent$$1, patternInput$$585[1], synTyconRepr$$7.fields[0]);
          const kind$$18 = new _tast.TyconObjModelKind(4, "TTyconEnum");
          structLayoutAttributeCheck(false);
          noCLIMutableAttributeCheck();
          noSealedAttributeCheck(function () {
            return (0, _FSComp.SR$$$tcTypesAreAlwaysSealedEnum)();
          });
          noAllowNullLiteralAttributeCheck();
          const vfld = (0, _tast.NewRecdField)(false, null, (0, _ast.ident)("value__", synTyconRepr$$7.fields[1]), false, patternInput$$590[0], false, false, (0, _Types.L)(), (0, _Types.L)(), (0, _ast.XmlDoc$$$get_Empty)(), _tast.taccessPublic, true);

          if (!(0, _List.exists)(function f$$63(arg10$0040$$48) {
            return function (arg20$0040$$14) {
              return (0, _TastOps.typeEquiv)(cenv$$240.g, arg10$0040$$48, arg20$0040$$14);
            };
          }(patternInput$$590[0]), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_int32_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_int16_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_sbyte_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_int64_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_char_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_bool_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_uint32_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_uint16_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_byte_ty)(cenv$$240.g), (0, _Types.L)((0, _TcGlobals.TcGlobals$$get_uint64_ty)(cenv$$240.g), (0, _Types.L)())))))))))))) {
            (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidTypeForLiteralEnumeration)(), synTyconRepr$$7.fields[1]));
          }

          writeFakeRecordFieldsToSink(patternInput$$590[1]);
          const repr$$9 = new _tast.TyconRepresentation(0, "TFSharpObjectRepr", new _tast.TyconObjModelData(kind$$18, (0, _Types.L)(), (0, _tast.MakeRecdFieldsTable)((0, _Types.L)(vfld, patternInput$$590[1]))));
          patternInput$$591 = [repr$$9, null, new SafeInitData(1, "NoSafeInitInfo")];
        } else {
          throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 15364, 22);
        }
      }
    }

    tycon$$28.entity_tycon_repr = patternInput$$591[0];

    if ((0, _TastOps.TyconHasUseNullAsTrueValueAttribute)(cenv$$240.g, tycon$$28) ? !(0, _TastOps.CanHaveUseNullAsTrueValueAttribute)(cenv$$240.g, tycon$$28) : false) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInvalidUseNullAsTrueValue)(), m$$437));
    }

    if ((0, _List.tryFind)(function predicate$$87(arg20$0040$$15) {
      return (0, _TastOps.IsMatchingFSharpAttribute)(cenv$$240.g, (0, _TcGlobals.TcGlobals$$get_attrib_ConditionalAttribute)(cenv$$240.g), arg20$0040$$15);
    }, attrs$$28) != null) {
      if (!(0, _infos.ExistsInEntireHierarchyOfType)(function (t$$3) {
        return (0, _TastOps.typeEquiv)(cenv$$240.g, t$$3, (0, _TastOps.mkAppTy)((0, _TcGlobals.TcGlobals$$get_tcref_System_Attribute)(cenv$$240.g), (0, _Types.L)()));
      }, cenv$$240.g, cenv$$240.amap, m$$437, new _infos.AllowMultiIntfInstantiations(0, "Yes"), patternInput$$585[1])) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcConditionalAttributeUsage)(), m$$437));
      }
    }

    return [patternInput$$591[1], patternInput$$591[2]];
  } catch (e$$123) {
    (0, _ErrorLogger.errorRecovery)(e$$123, m$$437);
    return [null, new SafeInitData(1, "NoSafeInitInfo")];
  }
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicAbbreviations(tycons$$5) {
  const edgesFrom = function edgesFrom(tycon$$29) {
    const accInAbbrevType = function accInAbbrevType(ty$$165) {
      return function (acc$$28) {
        const matchValue$$264 = (0, _tast.stripTyparEqns)(ty$$165);
        var $target$$578, tc$$5, tinst$$31;

        switch (matchValue$$264.tag) {
          case 4:
            $target$$578 = 1;
            tc$$5 = matchValue$$264.fields[0].fields[0];
            tinst$$31 = matchValue$$264.fields[1];
            break;

          case 1:
            $target$$578 = 1;
            tc$$5 = matchValue$$264.fields[0];
            tinst$$31 = matchValue$$264.fields[1];
            break;

          case 3:
            $target$$578 = 2;
            break;

          case 5:
            $target$$578 = 3;
            break;

          case 0:
            $target$$578 = 4;
            break;

          case 6:
            $target$$578 = 5;
            break;

          default:
            $target$$578 = 0;
        }

        switch ($target$$578) {
          case 0:
            {
              const l$$124 = matchValue$$264.fields[1];
              return accInAbbrevTypes(l$$124)(acc$$28);
            }

          case 1:
            {
              const tycon2 = (0, _tast.EntityRef$$get_Deref)(tc$$5);
              const acc$$29 = accInAbbrevTypes(tinst$$31)(acc$$28);
              return (0, _List.exists)(function f$$64(x$$150) {
                return function (y$$11) {
                  return x$$150 === y$$11;
                };
              }(tycon2), tycons$$5) ? (0, _Types.L)([tycon$$29, tycon2], acc$$29) : (0, _tast.EntityRef$$get_IsTypeAbbrev)(tc$$5) ? accInAbbrevType((0, _TastOps.reduceTyconRefAbbrev)(tc$$5, tinst$$31))(acc$$29) : acc$$29;
            }

          case 2:
            {
              const r$$8 = matchValue$$264.fields[1];
              const d$$19 = matchValue$$264.fields[0];
              return accInAbbrevType(d$$19)(accInAbbrevType(r$$8)(acc$$28));
            }

          case 3:
            {
              return acc$$28;
            }

          case 4:
            {
              const r$$9 = matchValue$$264.fields[1];
              return accInAbbrevType(r$$9)(acc$$28);
            }

          case 5:
            {
              const ms$$7 = matchValue$$264.fields[0];
              return accInMeasure(ms$$7)(acc$$28);
            }
        }
      };
    };

    const accInMeasure = function accInMeasure(ms$$8) {
      return function (acc$$30) {
        var tc$$8, tc$$6;
        const matchValue$$265 = (0, _tast.stripUnitEqns)(ms$$8);
        var $target$$579, tc$$7;

        if (matchValue$$265.tag === 1) {
          if (tc$$6 = matchValue$$265.fields[0], (0, _List.exists)(function f$$65(x$$153) {
            return function (y$$13) {
              return x$$153 === y$$13;
            };
          }((0, _tast.EntityRef$$get_Deref)(tc$$6)), tycons$$5)) {
            $target$$579 = 0;
            tc$$7 = matchValue$$265.fields[0];
          } else {
            $target$$579 = 1;
          }
        } else {
          $target$$579 = 1;
        }

        switch ($target$$579) {
          case 0:
            {
              return (0, _Types.L)([tycon$$29, (0, _tast.EntityRef$$get_Deref)(tc$$7)], acc$$30);
            }

          case 1:
            {
              var $target$$580, tc$$9;

              if (matchValue$$265.tag === 1) {
                if (tc$$8 = matchValue$$265.fields[0], (0, _tast.EntityRef$$get_IsTypeAbbrev)(tc$$8)) {
                  $target$$580 = 0;
                  tc$$9 = matchValue$$265.fields[0];
                } else {
                  $target$$580 = 1;
                }
              } else {
                $target$$580 = 1;
              }

              switch ($target$$580) {
                case 0:
                  {
                    return accInMeasure((0, _TastOps.reduceTyconRefAbbrevMeasureable)(tc$$9))(acc$$30);
                  }

                case 1:
                  {
                    switch (matchValue$$265.tag) {
                      case 2:
                        {
                          const ms2$$5 = matchValue$$265.fields[1];
                          const ms1$$6 = matchValue$$265.fields[0];
                          return accInMeasure(ms1$$6)(accInMeasure(ms2$$5)(acc$$30));
                        }

                      case 3:
                        {
                          const ms$$9 = matchValue$$265.fields[0];
                          return accInMeasure(ms$$9)(acc$$30);
                        }

                      default:
                        {
                          return acc$$30;
                        }
                    }
                  }
              }
            }
        }
      };
    };

    const accInAbbrevTypes = function accInAbbrevTypes(tys$$4) {
      return function (acc$$31) {
        return (0, _List.foldBack)((0, _Util.uncurry)(2, accInAbbrevType), tys$$4, acc$$31);
      };
    };

    const matchValue$$266 = (0, _tast.Entity$$get_TypeAbbrev)(tycon$$29);

    if (matchValue$$266 != null) {
      const ty$$166 = matchValue$$266;
      return accInAbbrevType(ty$$166)((0, _Types.L)());
    } else {
      return (0, _Types.L)();
    }
  };

  const edges = (0, _List.collect)(edgesFrom, tycons$$5);
  const graph = (0, _lib.Graph$00602$$$$002Ector$$10CBBCD)(function (tc$$10) {
    return (0, _tast.Entity$$get_Stamp)(tc$$10);
  }, tycons$$5, edges);
  (0, _lib.Graph$00602$$IterateCycles$$Z6F3E1F4B)(graph, function (path$$3) {
    const tycon$$30 = (0, _List.head)(path$$3);
    (0, _tast.Entity$$SetTypeAbbrev$$5268D4C7)(tycon$$30, null);
    tycon$$30.entity_tycon_repr = new _tast.TyconRepresentation(6, "TNoRepr");
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeDefinitionIsCyclic)(), (0, _tast.Entity$$get_Range)(tycon$$30)));
  });
}

function EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicStructsAndInheritance(cenv$$241, tycons$$6) {
  const edgesFrom$$1 = function edgesFrom$$1(tycon$$31) {
    const insertEdgeToTycon = function insertEdgeToTycon(tycon2$$1, acc$$32) {
      if ((0, _List.exists)(function f$$66(x$$156) {
        return function (y$$15) {
          return x$$156 === y$$15;
        };
      }(tycon2$$1), tycons$$6) ? !(0, _List.exists)(function (tupledArg$$126) {
        return tupledArg$$126[0] === tycon$$31 ? tupledArg$$126[1] === tycon2$$1 : false;
      }, acc$$32) : false) {
        return (0, _Types.L)([tycon$$31, tycon2$$1], acc$$32);
      } else {
        return acc$$32;
      }
    };

    const insertEdgeToType = function insertEdgeToType(ty$$167, acc$$33) {
      const matchValue$$267 = (0, _TastOps.tryDestAppTy)(cenv$$241.g, ty$$167);

      if (matchValue$$267 == null) {
        return acc$$33;
      } else {
        const tcref$$68 = matchValue$$267;
        return insertEdgeToTycon((0, _tast.EntityRef$$get_Deref)(tcref$$68), acc$$33);
      }
    };

    const accStructField = function accStructField(structTycon) {
      return function (structTyInst) {
        return function (fspec$$9) {
          return function (tupledArg$$127) {
            const fieldTy$$6 = (0, _TastOps.actualTyOfRecdFieldForTycon)(structTycon, structTyInst, fspec$$9);
            return accStructFieldType(structTycon)(structTyInst)(fspec$$9)(fieldTy$$6)([tupledArg$$127[0], tupledArg$$127[1]]);
          };
        };
      };
    };

    const accStructFieldType = function accStructFieldType(structTycon$$1) {
      return function (structTyInst$$1) {
        return function (fspec$$10) {
          return function (fieldTy$$7) {
            return function (tupledArg$$128) {
              var tinst2$$2, tcref2$$4, tinst2, tcref2$$2;
              const fieldTy$$8 = (0, _tast.stripTyparEqns)(fieldTy$$7);
              var $target$$581, tcref2$$3, tinst2$$1;

              if (fieldTy$$8.tag === 1) {
                if (tinst2 = fieldTy$$8.fields[1], (tcref2$$2 = fieldTy$$8.fields[0], (0, _tast.EntityRef$$get_IsStructOrEnumTycon)(tcref2$$2))) {
                  $target$$581 = 0;
                  tcref2$$3 = fieldTy$$8.fields[0];
                  tinst2$$1 = fieldTy$$8.fields[1];
                } else {
                  $target$$581 = 1;
                }
              } else {
                $target$$581 = 1;
              }

              switch ($target$$581) {
                case 0:
                  {
                    const tycon2$$2 = (0, _tast.EntityRef$$get_Deref)(tcref2$$3);
                    const specialCaseStaticField = ((0, _tast.RecdField$$get_IsStatic)(fspec$$10) ? structTycon$$1 === tycon2$$2 : false) ? (0, _illib.List$$$lengthsEqAndForall2)(function p$$37(ty1$$4, ty2$$5) {
                      const matchValue$$268 = (0, _TastOps.tryDestTyparTy)(cenv$$241.g, ty1$$4);

                      if (matchValue$$268 != null) {
                        const destTypar1 = matchValue$$268;
                        const matchValue$$269 = (0, _TastOps.tryDestTyparTy)(cenv$$241.g, ty2$$5);

                        if (matchValue$$269 != null) {
                          const destTypar2 = matchValue$$269;
                          return (0, _tast.typarEq)(destTypar1, destTypar2);
                        } else {
                          return false;
                        }
                      } else {
                        return false;
                      }
                    }, structTyInst$$1, tinst2$$1) : false;

                    if (specialCaseStaticField) {
                      return [tupledArg$$128[0], tupledArg$$128[1]];
                    } else {
                      const acc$$36 = insertEdgeToTycon(tycon2$$2, tupledArg$$128[1]);
                      return accStructInstanceFields(fieldTy$$8)(tycon2$$2)(tinst2$$1)([tupledArg$$128[0], acc$$36]);
                    }
                  }

                case 1:
                  {
                    var $target$$582, tcref2$$5, tinst2$$3;

                    if (fieldTy$$8.tag === 1) {
                      if (tinst2$$2 = fieldTy$$8.fields[1], (tcref2$$4 = fieldTy$$8.fields[0], (0, _tast.EntityRef$$get_IsTypeAbbrev)(tcref2$$4))) {
                        $target$$582 = 0;
                        tcref2$$5 = fieldTy$$8.fields[0];
                        tinst2$$3 = fieldTy$$8.fields[1];
                      } else {
                        $target$$582 = 1;
                      }
                    } else {
                      $target$$582 = 1;
                    }

                    switch ($target$$582) {
                      case 0:
                        {
                          return accStructFieldType(structTycon$$1)(structTyInst$$1)(fspec$$10)((0, _TastOps.reduceTyconRefAbbrev)(tcref2$$5, tinst2$$3))([tupledArg$$128[0], tupledArg$$128[1]]);
                        }

                      case 1:
                        {
                          return [tupledArg$$128[0], tupledArg$$128[1]];
                        }
                    }
                  }
              }
            };
          };
        };
      };
    };

    const accStructFields = function accStructFields(includeStaticFields) {
      return function (ty$$168) {
        return function (structTycon$$2) {
          return function (tinst$$32) {
            return function (tupledArg$$129) {
              if ((0, _List.exists)(function (arg20$0040$$16) {
                return (0, _TastOps.typeEquiv)(cenv$$241.g, ty$$168, arg20$0040$$16);
              }, tupledArg$$129[0])) {
                return [tupledArg$$129[0], tupledArg$$129[1]];
              } else {
                const doneTypes$$3 = (0, _Types.L)(ty$$168, tupledArg$$129[0]);
                const fspecs$$2 = (0, _tast.Entity$$get_IsUnionTycon)(structTycon$$2) ? (0, _List.ofSeq)((0, _Seq.delay)(function () {
                  return (0, _Seq.collect)(function (uc$$3) {
                    return (0, _Seq.map)(function (c$$38) {
                      return c$$38;
                    }, (0, _tast.TyconRecdFields$$get_AllFieldsAsList)(uc$$3.FieldTable));
                  }, (0, _tast.Entity$$get_UnionCasesArray)(structTycon$$2));
                })) : (0, _tast.Entity$$get_AllFieldsAsList)(structTycon$$2);
                const fspecs$$3 = (0, _List.filter)(function predicate$$88(fspec$$11) {
                  if (includeStaticFields) {
                    return true;
                  } else {
                    return !(0, _tast.RecdField$$get_IsStatic)(fspec$$11);
                  }
                }, fspecs$$2);
                const patternInput$$592 = (0, _List.foldBack)((0, _Util.uncurry)(2, accStructField(structTycon$$2)(tinst$$32)), fspecs$$3, [doneTypes$$3, tupledArg$$129[1]]);
                return [patternInput$$592[0], patternInput$$592[1]];
              }
            };
          };
        };
      };
    };

    const accStructInstanceFields = function accStructInstanceFields(ty$$169) {
      return function (structTycon$$3) {
        return function (tinst$$33) {
          return function (tupledArg$$130) {
            return accStructFields(false)(ty$$169)(structTycon$$3)(tinst$$33)([tupledArg$$130[0], tupledArg$$130[1]]);
          };
        };
      };
    };

    const accStructAllFields = function accStructAllFields(ty$$170) {
      return function (structTycon$$4) {
        return function (tinst$$34) {
          return function (tupledArg$$131) {
            return accStructFields(true)(ty$$170)(structTycon$$4)(tinst$$34)([tupledArg$$131[0], tupledArg$$131[1]]);
          };
        };
      };
    };

    const acc$$41 = (0, _Types.L)();
    let acc$$43;

    if ((0, _tast.Entity$$get_IsStructOrEnumTycon)(tycon$$31)) {
      const patternInput$$593 = (0, _TastOps.generalizeTyconRef)((0, _tast.mkLocalTyconRef)(tycon$$31));
      const patternInput$$594 = accStructAllFields(patternInput$$593[1])(tycon$$31)(patternInput$$593[0])([(0, _Types.L)(), acc$$41]);
      acc$$43 = patternInput$$594[1];
    } else {
      acc$$43 = acc$$41;
    }

    let acc$$44;
    const super$$$2 = (0, _TastOps.superOfTycon)(cenv$$241.g, tycon$$31);
    acc$$44 = insertEdgeToType(super$$$2, acc$$43);
    const acc$$45 = (0, _List.foldBack)(insertEdgeToType, (0, _tast.Entity$$get_ImmediateInterfaceTypesOfFSharpTycon)(tycon$$31), acc$$44);
    return acc$$45;
  };

  const edges$$1 = (0, _List.collect)(edgesFrom$$1, tycons$$6);
  const graph$$1 = (0, _lib.Graph$00602$$$$002Ector$$10CBBCD)(function (tc$$12) {
    return (0, _tast.Entity$$get_Stamp)(tc$$12);
  }, tycons$$6, edges$$1);
  (0, _lib.Graph$00602$$IterateCycles$$Z6F3E1F4B)(graph$$1, function (path$$4) {
    const tycon$$32 = (0, _List.head)(path$$4);
    (0, _tast.Entity$$SetTypeAbbrev$$5268D4C7)(tycon$$32, null);
    tycon$$32.entity_tycon_repr = new _tast.TyconRepresentation(6, "TNoRepr");
    (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeDefinitionIsCyclicThroughInheritance)(), (0, _tast.Entity$$get_Range)(tycon$$32)));
  });
}

function EstablishTypeDefinitionCores$$$TcMutRecDefns_CheckExplicitConstraints(cenv$$242, tpenv$$408, m$$443, checkCxs$$20, envMutRecPrelim, withEnvs) {
  MutRecShapes$$$iterTyconsWithEnv(function f1$$33(envForDecls$$14, tupledArg$$132) {
    const matchValue$$270 = [tupledArg$$132[0], tupledArg$$132[1]];

    if (matchValue$$270[1] != null) {
      const typeDefCore$$1 = matchValue$$270[0][0];
      const tycon$$33 = matchValue$$270[1];
      const synTyconInfo$$2 = typeDefCore$$1.fields[0];
      const synTyconConstraints = synTyconInfo$$2.fields[2];
      const envForTycon$$8 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$33, m$$443), envForDecls$$14);
      const thisTyconRef$$3 = (0, _tast.mkLocalTyconRef)(tycon$$33);
      const envForTycon$$9 = MakeInnerEnvForTyconRef(envForTycon$$8, thisTyconRef$$3, false);

      try {
        TcTyparConstraints(cenv$$242, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), checkCxs$$20, new _NameResolution.ItemOccurence(2, "UseInType"), envForTycon$$9, tpenv$$408, synTyconConstraints);
      } catch (e$$124) {
        (0, _ErrorLogger.errorRecovery)(e$$124, m$$443);
      }
    }
  }, envMutRecPrelim, withEnvs);
}

function EstablishTypeDefinitionCores$$$TcMutRecDefns_Phase1(mkLetInfo, cenv$$243, envInitial$$8, parent$$22, typeNames$$2, inSig$$7, tpenv$$409, m$$444, scopem$$25, mutRecNSInfo$$4, mutRecDefns$$4) {
  var parent$$23;
  const withEntities = (parent$$23 = [parent$$22, typeNames$$2, envInitial$$8], function (xs$$24) {
    return MutRecShapes$$$mapWithParent(parent$$23, function f1$$34(tupledArg$$133, compInfo$$1, decls$$4) {
      return EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1A_BuildInitialModule(cenv$$243, tupledArg$$133[2], tupledArg$$133[0], tupledArg$$133[1], compInfo$$1, decls$$4);
    }, function f2$$14(tupledArg$$134, tupledArg$$135) {
      const isAtOriginalTyconDefn$$1 = tupledArg$$135[0].fields[5];
      const tyconOpt$$8 = isAtOriginalTyconDefn$$1 ? EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1A_BuildInitialTycon(cenv$$243, tupledArg$$134[2], tupledArg$$134[0], tupledArg$$135[0]) : null;
      return [[tupledArg$$135[0], tupledArg$$135[1], tupledArg$$134[0]], tyconOpt$$8];
    }, function f3$$6(tupledArg$$136, synBinds) {
      var p$$38;
      const containerInfo$$11 = ModuleOrNamespaceContainerInfo(tupledArg$$136[0].tag === 0 ? (p$$38 = tupledArg$$136[0].fields[0], p$$38) : (() => {
        throw new Error("unreachable");
      })());
      return mkLetInfo(containerInfo$$11, synBinds);
    }, xs$$24);
  })(mutRecDefns$$4);
  const patternInput$$595 = MutRecShapes$$$computeEnvs(function f1$$35(envAbove$$2, _arg4$$12) {
    const mtypeAcc$$7 = _arg4$$12.fields[0];
    const mspec$$5 = _arg4$$12.fields[1];
    PublishModuleDefn(cenv$$243, envAbove$$2, mspec$$5);
    return MakeInnerEnvWithAcc(envAbove$$2, (0, _tast.Entity$$get_Id)(mspec$$5), mtypeAcc$$7, (0, _tast.ModuleOrNamespaceType$$get_ModuleOrNamespaceKind)((0, _tast.Entity$$get_ModuleOrNamespaceType)(mspec$$5)));
  }, function f2$$15(envAbove$$3, _arg5$$11) {
    return envAbove$$3;
  }, envInitial$$8, withEntities);
  MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents(mutRecNSInfo$$4, patternInput$$595[1]);
  MutRecShapes$$$iterTyconsWithEnv(function f1$$36(envAbove$$4, tupledArg$$137) {
    (0, _Seq.iterate)(function action$$52(tycon$$34) {
      CheckForDuplicateConcreteType(envAbove$$4, (0, _tast.Entity$$get_LogicalName)(tycon$$34), (0, _tast.Entity$$get_Range)(tycon$$34));
      PublishTypeDefn(cenv$$243, envAbove$$4, tycon$$34);
    }, (0, _Option.defaultArg)(tupledArg$$137[1], [], function ($x$$136) {
      return [$x$$136];
    }));
  }, patternInput$$595[0], patternInput$$595[1]);
  MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents(mutRecNSInfo$$4, patternInput$$595[1]);
  const patternInput$$596 = MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs(function getTyconOpt$$2(tuple$$42) {
    return tuple$$42[1];
  }, function getVals$$2(_arg7$$4) {
    return (0, _Types.L)();
  }, cenv$$243, false, scopem$$25, m$$444, envInitial$$8, withEntities);
  const withAttrs = MutRecShapes$$$mapTyconsWithEnv(function f1$$37(envForDecls$$17, tupledArg$$138) {
    let res$$40;
    const matchValue$$271 = [tupledArg$$138[0], tupledArg$$138[1]];

    if (matchValue$$271[1] != null) {
      const typeDefCore$$3 = matchValue$$271[0][0];
      const tycon$$35 = matchValue$$271[1];
      res$$40 = [tycon$$35, EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1B_EstablishBasicKind(cenv$$243, inSig$$7, envForDecls$$17, typeDefCore$$3, tycon$$35)];
    } else {
      res$$40 = null;
    }

    return [tupledArg$$138[0], res$$40];
  }, patternInput$$596[0], patternInput$$596[1]);
  MutRecShapes$$$iterTyconsWithEnv(function f1$$38(envForDecls$$18, tupledArg$$139) {
    const matchValue$$272 = [tupledArg$$139[0], tupledArg$$139[1]];

    if (matchValue$$272[1] != null) {
      const typeDefCore$$4 = matchValue$$272[0][0];
      const tycon$$36 = matchValue$$272[1][0];
      const attrs$$29 = matchValue$$272[1][1][0];
      EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1C_Phase1E_EstablishAbbreviations(cenv$$243, envForDecls$$18, inSig$$7, tpenv$$409, new TypeRealizationPass(0, "FirstPass"), typeDefCore$$4, tycon$$36, attrs$$29);
    }
  }, patternInput$$596[0], withAttrs);
  const tycons$$7 = (0, _List.choose)(function chooser$$16(tuple$$43) {
    return tuple$$43[1];
  }, MutRecShapes$$$collectTycons(withEntities));
  EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicAbbreviations(tycons$$7);
  EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1D_Phase1F_EstablishSuperTypesAndInterfaceTypes(cenv$$243, tpenv$$409, inSig$$7, new TypeRealizationPass(0, "FirstPass"), patternInput$$596[0], withAttrs);
  const tyconsWithStructuralTypes$$2 = (0, _List.choose)(function chooser$$17(x$$164) {
    return x$$164;
  }, MutRecShapes$$$collectTycons(MutRecShapes$$$mapTyconsWithEnv(function f1$$39(envForDecls$$19, tupledArg$$141) {
    const matchValue$$273 = [tupledArg$$141[0], tupledArg$$141[1]];

    if (matchValue$$273[1] != null) {
      const typeDefCore$$5 = matchValue$$273[0][0];
      const tycon$$37 = matchValue$$273[1];
      return [tycon$$37, EstablishTypeDefinitionCores$$$GetStructuralElementsOfTyconDefn(cenv$$243, envForDecls$$19, tpenv$$409, typeDefCore$$5, tycon$$37)];
    } else {
      return null;
    }
  }, patternInput$$596[0], patternInput$$596[1])));
  const scSet$$3 = TyconConstraintInference$$$InferSetOfTyconsSupportingComparable(cenv$$243, TcEnv$$get_DisplayEnv(patternInput$$596[0]), tyconsWithStructuralTypes$$2);
  const seSet$$3 = TyconConstraintInference$$$InferSetOfTyconsSupportingEquatable(cenv$$243, TcEnv$$get_DisplayEnv(patternInput$$596[0]), tyconsWithStructuralTypes$$2);
  MutRecShapes$$$iterTyconsWithEnv(function f1$$40(envForDecls$$20, tupledArg$$142) {
    (0, _Seq.iterate)(function action$$53(tycon$$38) {
      AddAugmentationDeclarations$$$AddGenericHashAndComparisonDeclarations(cenv$$243, envForDecls$$20, scSet$$3, seSet$$3, tycon$$38);
    }, (0, _Option.defaultArg)(tupledArg$$142[1], [], function ($x$$137) {
      return [$x$$137];
    }));
  }, patternInput$$596[0], patternInput$$596[1]);
  EstablishTypeDefinitionCores$$$TcMutRecDefns_CheckExplicitConstraints(cenv$$243, tpenv$$409, m$$444, new CheckConstraints(1, "NoCheckCxs"), patternInput$$596[0], patternInput$$596[1]);
  MutRecShapes$$$iterTyconsWithEnv(function f1$$41(envForDecls$$21, tupledArg$$143) {
    (0, _Seq.iterate)(function action$$55(tycon$$39) {
      (0, _List.iterate)(function action$$54(tp$$65) {
        SetTyparRigid(cenv$$243.g, TcEnv$$get_DisplayEnv(envForDecls$$21), m$$444, tp$$65);
      }, (0, _tast.Entity$$Typars$$4DB9192C)(tycon$$39, m$$444));
    }, (0, _Option.defaultArg)(tupledArg$$143[1], [], function ($x$$138) {
      return [$x$$138];
    }));
  }, patternInput$$596[0], patternInput$$596[1]);
  MutRecShapes$$$iterTyconsWithEnv(function f1$$42(envForDecls$$22, tupledArg$$144) {
    const matchValue$$274 = [tupledArg$$144[0], tupledArg$$144[1]];

    if (matchValue$$274[1] != null) {
      const typeDefCore$$6 = matchValue$$274[0][0];
      const tycon$$40 = matchValue$$274[1][0];
      const attrs$$30 = matchValue$$274[1][1][0];
      EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1C_Phase1E_EstablishAbbreviations(cenv$$243, envForDecls$$22, inSig$$7, tpenv$$409, new TypeRealizationPass(1, "SecondPass"), typeDefCore$$6, tycon$$40, attrs$$30);
    }
  }, patternInput$$596[0], withAttrs);
  EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1D_Phase1F_EstablishSuperTypesAndInterfaceTypes(cenv$$243, tpenv$$409, inSig$$7, new TypeRealizationPass(1, "SecondPass"), patternInput$$596[0], withAttrs);
  EstablishTypeDefinitionCores$$$TcMutRecDefns_CheckExplicitConstraints(cenv$$243, tpenv$$409, m$$444, new CheckConstraints(0, "CheckCxs"), patternInput$$596[0], patternInput$$596[1]);
  const patternInput$$597 = MutRecShapes$$$extendEnvs(function f1$$43(envForDecls$$23, decls$$5) {
    const tycons$$8 = (0, _List.choose)(function chooser$$18(_arg1$$77) {
      var $target$$594, tycon$$41;

      if (_arg1$$77.tag === 0) {
        if (_arg1$$77.fields[0][1] != null) {
          $target$$594 = 0;
          tycon$$41 = _arg1$$77.fields[0][1][0];
        } else {
          $target$$594 = 1;
        }
      } else {
        $target$$594 = 1;
      }

      switch ($target$$594) {
        case 0:
          {
            return tycon$$41;
          }

        case 1:
          {
            return null;
          }
      }
    }, decls$$5);
    const exns$$1 = (0, _List.filter)(function predicate$$89(tycon$$42) {
      return (0, _tast.Entity$$get_IsExceptionDecl)(tycon$$42);
    }, tycons$$8);
    const envForDecls$$24 = (0, _List.fold)(function folder$$27(env$$321, exnc$$7) {
      return AddLocalExnDefnAndReport(cenv$$243.tcSink, scopem$$25, env$$321, exnc$$7);
    }, envForDecls$$23, exns$$1);
    return envForDecls$$24;
  }, patternInput$$596[0], withAttrs);
  const withBaseValsAndSafeInitInfos = MutRecShapes$$$mapTyconsWithEnv(function f1$$44(envForDecls$$25, tupledArg$$146) {
    let info$$6;
    const matchValue$$275 = [tupledArg$$146[0], tupledArg$$146[1]];

    if (matchValue$$275[1] != null) {
      const typeDefCore$$7 = matchValue$$275[0][0];
      const tycon$$43 = matchValue$$275[1][0];
      const attrs$$31 = matchValue$$275[1][1][0];
      info$$6 = EstablishTypeDefinitionCores$$$TcTyconDefnCore_Phase1G_EstablishRepresentation(cenv$$243, envForDecls$$25, tpenv$$409, inSig$$7, typeDefCore$$7, tycon$$43, attrs$$31);
    } else {
      info$$6 = [null, new SafeInitData(1, "NoSafeInitInfo")];
    }

    let patternInput$$598;

    if (tupledArg$$146[1] != null) {
      const tycon$$44 = tupledArg$$146[1][0];
      const getFinalAttrs$$1 = tupledArg$$146[1][1][1];
      const _prelimAttrs = tupledArg$$146[1][1][0];
      patternInput$$598 = [tycon$$44, function () {
        tycon$$44.entity_attribs = getFinalAttrs$$1();
      }];
    } else {
      patternInput$$598 = [null, function () {}];
    }

    return [tupledArg$$146[0], patternInput$$598[0], patternInput$$598[1], info$$6];
  }, patternInput$$597[0], patternInput$$597[1]);
  EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicStructsAndInheritance(cenv$$243, tycons$$7);
  return [tycons$$7, patternInput$$597[0], withBaseValsAndSafeInitInfos];
}

function TcDeclarations$$$ComputeTyconDeclKind(tyconOpt$$15, isAtOriginalTyconDefn$$2, cenv$$244, envForDecls$$26, inSig$$8, m$$445, synTypars$$6, synTyparCxs, longPath$$3) {
  var res$$41, tycon$$45;
  const ad$$40 = envForDecls$$26.eAccessRights;
  let tcref$$69;
  var $target$$595, tycon$$46;

  if (tyconOpt$$15 != null) {
    if (tycon$$45 = tyconOpt$$15, isAtOriginalTyconDefn$$2) {
      $target$$595 = 0;
      tycon$$46 = tyconOpt$$15;
    } else {
      $target$$595 = 1;
    }
  } else {
    $target$$595 = 1;
  }

  switch ($target$$595) {
    case 0:
      {
        const resInfo = (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(synTypars$$6));
        (0, _NameResolution.ResolveTypeLongIdent)(cenv$$244.tcSink, cenv$$244.nameResolver, new _NameResolution.ItemOccurence(0, "Binding"), new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), envForDecls$$26.eNameResEnv, ad$$40, longPath$$3, resInfo, new _NameResolution.PermitDirectReferenceToGeneratedType(1, "No"));
        tcref$$69 = (0, _tast.mkLocalTyconRef)(tycon$$46);
        break;
      }

    case 1:
      {
        const resInfo$$1 = (0, _NameResolution.TypeNameResolutionStaticArgsInfo$$$FromTyArgs$$Z524259A4)((0, _List.length)(synTypars$$6));
        const matchValue$$276 = (0, _NameResolution.ResolveTypeLongIdent)(cenv$$244.tcSink, cenv$$244.nameResolver, new _NameResolution.ItemOccurence(0, "Binding"), new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), envForDecls$$26.eNameResEnv, ad$$40, longPath$$3, resInfo$$1, new _NameResolution.PermitDirectReferenceToGeneratedType(1, "No"));

        if (matchValue$$276.tag === 0) {
          const res$$42 = matchValue$$276.fields[0];
          tcref$$69 = res$$42;
        } else if (res$$41 = matchValue$$276, inSig$$8 ? (0, _List.length)(longPath$$3) === 1 : false) {
          const res$$43 = matchValue$$276;
          (0, _ErrorLogger.errorR)(new _ErrorLogger.Deprecated((0, _FSComp.SR$$$tcReservedSyntaxForAugmentation)(), m$$445));
          tcref$$69 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)(res$$43);
        } else {
          const res$$44 = matchValue$$276;
          tcref$$69 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)(res$$44);
        }

        break;
      }
  }

  const isInterfaceOrDelegateOrEnum = ((0, _tast.Entity$$get_IsFSharpInterfaceTycon)((0, _tast.EntityRef$$get_Deref)(tcref$$69)) ? true : (0, _tast.Entity$$get_IsFSharpDelegateTycon)((0, _tast.EntityRef$$get_Deref)(tcref$$69))) ? true : (0, _tast.Entity$$get_IsFSharpEnumTycon)((0, _tast.EntityRef$$get_Deref)(tcref$$69));
  const reqTypars = (0, _tast.EntityRef$$Typars$$4DB9192C)(tcref$$69, m$$445);
  let patternInput$$599;

  if (isAtOriginalTyconDefn$$2) {
    patternInput$$599 = [new DeclKind(0, "ModuleOrMemberBinding"), reqTypars];
  } else {
    let isInSameModuleOrNamespace;
    const matchValue$$277 = (0, _Map.FSharpMap$$TryFind$$2B595)((0, _tast.ModuleOrNamespaceType$$get_TypesByMangledName)(envForDecls$$26.eModuleOrNamespaceTypeAccumulator.contents), (0, _tast.EntityRef$$get_LogicalName)(tcref$$69));

    if (matchValue$$277 == null) {
      isInSameModuleOrNamespace = (0, _TcGlobals.TcGlobals$$get_compilingFslib)(cenv$$244.g) ? (0, _String.startsWith)((0, _tast.EntityRef$$get_LogicalName)(tcref$$69), "Tuple`", 4) : false;
    } else {
      const tycon$$47 = matchValue$$277;
      isInSameModuleOrNamespace = _TastOps.tyconOrder.Compare((0, _tast.EntityRef$$get_Deref)(tcref$$69), tycon$$47) === 0;
    }

    const nReqTypars = (0, _List.length)(reqTypars) | 0;
    const declaredTypars$$29 = TcTyparDecls(cenv$$244, envForDecls$$26, synTypars$$6);
    const envForTycon$$10 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), declaredTypars$$29, envForDecls$$26);

    const _tpenv = TcTyparConstraints(cenv$$244, new ImplictlyBoundTyparsAllowed(2, "NoNewTypars"), new CheckConstraints(0, "CheckCxs"), new _NameResolution.ItemOccurence(2, "UseInType"), envForTycon$$10, emptyUnscopedTyparEnv, synTyparCxs);

    (0, _List.iterate)(function action$$56(tp$$66) {
      SetTyparRigid(cenv$$244.g, TcEnv$$get_DisplayEnv(envForDecls$$26), m$$445, tp$$66);
    }, declaredTypars$$29);

    if (isInSameModuleOrNamespace ? !isInterfaceOrDelegateOrEnum : false) {
      if (nReqTypars !== (0, _List.length)(synTypars$$6)) {
        (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDeclaredTypeParametersForExtensionDoNotMatchOriginal$$Z721C83C5)((0, _tast.EntityRef$$get_DisplayNameWithStaticParametersAndUnderscoreTypars)(tcref$$69)), m$$445));
      }

      if (!(0, _TastOps.typarsAEquiv)(cenv$$244.g, (0, _TastOps.TypeEquivEnv$$$get_Empty)(), reqTypars, declaredTypars$$29)) {
        (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDeclaredTypeParametersForExtensionDoNotMatchOriginal$$Z721C83C5)((0, _tast.EntityRef$$get_DisplayNameWithStaticParametersAndUnderscoreTypars)(tcref$$69)), m$$445));
      }

      patternInput$$599 = [new DeclKind(1, "IntrinsicExtensionBinding"), reqTypars];
    } else {
      if (isInSameModuleOrNamespace ? isInterfaceOrDelegateOrEnum : false) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMembersThatExtendInterfaceMustBePlacedInSeparateModule)(), (0, _tast.EntityRef$$get_Range)(tcref$$69)));
      }

      if (nReqTypars !== (0, _List.length)(synTypars$$6)) {
        (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDeclaredTypeParametersForExtensionDoNotMatchOriginal$$Z721C83C5)((0, _tast.EntityRef$$get_DisplayNameWithStaticParametersAndUnderscoreTypars)(tcref$$69)), m$$445));
      }

      if (!(0, _TastOps.typarsAEquiv)(cenv$$244.g, (0, _TastOps.TypeEquivEnv$$$get_Empty)(), reqTypars, declaredTypars$$29)) {
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcDeclaredTypeParametersForExtensionDoNotMatchOriginal$$Z721C83C5)((0, _tast.EntityRef$$get_DisplayNameWithStaticParametersAndUnderscoreTypars)(tcref$$69)), m$$445));
      }

      patternInput$$599 = [new DeclKind(2, "ExtrinsicExtensionBinding"), declaredTypars$$29];
    }
  }

  return [patternInput$$599[0], tcref$$69, patternInput$$599[1]];
}

function TcDeclarations$$$isAugmentationTyconDefnRepr(_arg1$$78) {
  var $target$$596;

  if (_arg1$$78.tag === 3) {
    if (_arg1$$78.fields[0].tag === 8) {
      $target$$596 = 0;
    } else {
      $target$$596 = 1;
    }
  } else {
    $target$$596 = 1;
  }

  switch ($target$$596) {
    case 0:
      {
        return true;
      }

    case 1:
      {
        return false;
      }
  }
}

function TcDeclarations$$$isAutoProperty(_arg1$$79) {
  if (_arg1$$79.tag === 10) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isMember(_arg1$$80) {
  if (_arg1$$80.tag === 1) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isImplicitCtor(_arg1$$81) {
  if (_arg1$$81.tag === 2) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isImplicitInherit(_arg1$$82) {
  if (_arg1$$82.tag === 3) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isAbstractSlot(_arg1$$83) {
  if (_arg1$$83.tag === 5) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isInterface(_arg1$$84) {
  if (_arg1$$84.tag === 6) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isInherit(_arg1$$85) {
  if (_arg1$$85.tag === 7) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isField(_arg1$$86) {
  if (_arg1$$86.tag === 8) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$isTycon(_arg1$$87) {
  if (_arg1$$87.tag === 9) {
    return true;
  } else {
    return false;
  }
}

function TcDeclarations$$$allFalse(ps$$4, x$$166) {
  return (0, _List.forAll)(function (p$$39) {
    return !p$$39(x$$166);
  }, ps$$4);
}

function TcDeclarations$$$CheckMembersForm(ds$$3) {
  var ds$$6, d$$22, ds$$4, d$$20;
  var $target$$597, d$$21, ds$$5;

  if (ds$$3.tail != null) {
    if (ds$$4 = ds$$3.tail, (d$$20 = ds$$3.head, TcDeclarations$$$isImplicitCtor(d$$20))) {
      $target$$597 = 0;
      d$$21 = ds$$3.head;
      ds$$5 = ds$$3.tail;
    } else {
      $target$$597 = 1;
    }
  } else {
    $target$$597 = 1;
  }

  switch ($target$$597) {
    case 0:
      {
        const ds$$8 = ds$$5.tail != null ? (ds$$6 = ds$$5.tail, (d$$22 = ds$$5.head, TcDeclarations$$$isImplicitInherit(d$$22))) ? ds$$5.tail : ds$$5 : ds$$5;
        const patternInput$$600 = (0, _illib.List$$$takeUntil)(function p$$40(_arg1$$88) {
          if (_arg1$$88.tag === 4) {
            return false;
          } else {
            return true;
          }
        }, ds$$8);
        const patternInput$$601 = (0, _illib.List$$$takeUntil)(function p$$41(x$$167) {
          return TcDeclarations$$$allFalse((0, _Types.L)(TcDeclarations$$$isMember, (0, _Types.L)(TcDeclarations$$$isAbstractSlot, (0, _Types.L)(TcDeclarations$$$isInterface, (0, _Types.L)(TcDeclarations$$$isAutoProperty, (0, _Types.L)())))), x$$167);
        }, patternInput$$600[1]);
        var $target$$598, m$$446, m$$447, m$$448, m$$449, m$$450, m$$451, m$$452, m$$453, m$$454;

        if (patternInput$$601[1].tail != null) {
          if (patternInput$$601[1].head.tag === 1) {
            $target$$598 = 0;
            m$$446 = patternInput$$601[1].head.fields[1];
          } else if (patternInput$$601[1].head.tag === 5) {
            $target$$598 = 1;
            m$$447 = patternInput$$601[1].head.fields[2];
          } else if (patternInput$$601[1].head.tag === 6) {
            $target$$598 = 2;
            m$$448 = patternInput$$601[1].head.fields[2];
          } else if (patternInput$$601[1].head.tag === 2) {
            $target$$598 = 3;
            m$$449 = patternInput$$601[1].head.fields[4];
          } else if (patternInput$$601[1].head.tag === 10) {
            $target$$598 = 4;
            m$$450 = patternInput$$601[1].head.fields[10];
          } else if (patternInput$$601[1].head.tag === 3) {
            $target$$598 = 5;
            m$$451 = patternInput$$601[1].head.fields[3];
          } else if (patternInput$$601[1].head.tag === 4) {
            $target$$598 = 6;
            m$$452 = patternInput$$601[1].head.fields[3];
          } else if (patternInput$$601[1].head.tag === 7) {
            $target$$598 = 7;
            m$$453 = patternInput$$601[1].head.fields[2];
          } else if (patternInput$$601[1].head.tag === 9) {
            $target$$598 = 8;
            m$$454 = patternInput$$601[1].head.fields[2];
          } else {
            $target$$598 = 9;
          }
        } else {
          $target$$598 = 9;
        }

        switch ($target$$598) {
          case 0:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("List.takeUntil is wrong, have binding", m$$446));
              break;
            }

          case 1:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("List.takeUntil is wrong, have slotsig", m$$447));
              break;
            }

          case 2:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("List.takeUntil is wrong, have interface", m$$448));
              break;
            }

          case 3:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("implicit class construction with two implicit constructions", m$$449));
              break;
            }

          case 4:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("List.takeUntil is wrong, have auto property", m$$450));
              break;
            }

          case 5:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeDefinitionsWithImplicitConstructionMustHaveOneInherit)(), m$$451));
              break;
            }

          case 6:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeDefinitionsWithImplicitConstructionMustHaveLocalBindingsBeforeMembers)(), m$$452));
              break;
            }

          case 7:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInheritDeclarationMissingArguments)(), m$$453));
              break;
            }

          case 8:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypesCannotContainNestedTypes)(), m$$454));
              break;
            }
        }

        break;
      }

    case 1:
      {
        const ds$$11 = ds$$3;
        const patternInput$$602 = (0, _illib.List$$$takeUntil)(function (x$$168) {
          return TcDeclarations$$$allFalse((0, _Types.L)(TcDeclarations$$$isMember, (0, _Types.L)(TcDeclarations$$$isAbstractSlot, (0, _Types.L)(TcDeclarations$$$isInterface, (0, _Types.L)(TcDeclarations$$$isInherit, (0, _Types.L)(TcDeclarations$$$isField, (0, _Types.L)(TcDeclarations$$$isTycon, (0, _Types.L)())))))), x$$168);
        }, ds$$11);
        var $target$$599, m$$455, m$$456, m$$457, m$$458, m$$459, m$$460;

        if (patternInput$$602[1].tail != null) {
          if (patternInput$$602[1].head.tag === 1) {
            $target$$599 = 0;
            m$$455 = patternInput$$602[1].head.fields[1];
          } else if (patternInput$$602[1].head.tag === 2) {
            $target$$599 = 1;
            m$$456 = patternInput$$602[1].head.fields[4];
          } else if (patternInput$$602[1].head.tag === 3) {
            $target$$599 = 2;
            m$$457 = patternInput$$602[1].head.fields[3];
          } else if (patternInput$$602[1].head.tag === 10) {
            $target$$599 = 3;
            m$$458 = patternInput$$602[1].head.fields[10];
          } else if (patternInput$$602[1].head.tag === 4) {
            if (patternInput$$602[1].head.fields[1]) {
              $target$$599 = 6;
            } else {
              $target$$599 = 4;
              m$$459 = patternInput$$602[1].head.fields[3];
            }
          } else if (patternInput$$602[1].head.tag === 5) {
            $target$$599 = 5;
            m$$460 = patternInput$$602[1].head.fields[2];
          } else if (patternInput$$602[1].head.tag === 6) {
            $target$$599 = 5;
            m$$460 = patternInput$$602[1].head.fields[2];
          } else if (patternInput$$602[1].head.tag === 7) {
            $target$$599 = 5;
            m$$460 = patternInput$$602[1].head.fields[2];
          } else if (patternInput$$602[1].head.tag === 8) {
            $target$$599 = 5;
            m$$460 = patternInput$$602[1].head.fields[1];
          } else if (patternInput$$602[1].head.tag === 9) {
            $target$$599 = 5;
            m$$460 = patternInput$$602[1].head.fields[2];
          } else {
            $target$$599 = 6;
          }
        } else {
          $target$$599 = 6;
        }

        switch ($target$$599) {
          case 0:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("CheckMembersForm: List.takeUntil is wrong", m$$455));
              break;
            }

          case 1:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("CheckMembersForm: implicit ctor line should be first", m$$456));
              break;
            }

          case 2:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcInheritConstructionCallNotPartOfImplicitSequence)(), m$$457));
              break;
            }

          case 3:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAutoPropertyRequiresImplicitConstructionSequence)(), m$$458));
              break;
            }

          case 4:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcLetAndDoRequiresImplicitConstructionSequence)(), m$$459));
              break;
            }

          case 5:
            {
              (0, _ErrorLogger.errorR)(new _ErrorLogger.InternalError("CheckMembersForm: List.takeUntil is wrong", m$$460));
              break;
            }
        }

        break;
      }
  }
}

function TcDeclarations$$$SplitTyconDefn(_arg1$$99) {
  const trepr$$2 = _arg1$$99.fields[1];
  const synTyconInfo$$3 = _arg1$$99.fields[0];
  const extraMembers$$1 = _arg1$$99.fields[2];
  const implements1 = (0, _List.choose)(function (_arg2$$22) {
    if (_arg2$$22.tag === 6) {
      const ty$$172 = _arg2$$22.fields[0];
      return [ty$$172, (0, _ast.SynType$$get_Range)(ty$$172)];
    } else {
      return null;
    }
  }, extraMembers$$1);

  switch (trepr$$2.tag) {
    case 1:
      {
        const repr$$11 = trepr$$2.fields[0];
        const members$$6 = (0, _Types.L)();
        const isAtOriginalTyconDefn$$4 = true;
        const core$$5 = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$3, repr$$11, implements1, false, false, isAtOriginalTyconDefn$$4);
        return [core$$5, (0, _List.append)(members$$6, extraMembers$$1)];
      }

    case 2:
      {
        const r$$10 = trepr$$2.fields[0];
        const isAtOriginalTyconDefn$$5 = true;
        const core$$6 = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$3, new _ast.SynTypeDefnSimpleRepr(7, "Exception", r$$10), implements1, false, false, isAtOriginalTyconDefn$$5);
        return [core$$6, extraMembers$$1];
      }

    default:
      {
        const m$$461 = trepr$$2.fields[2];
        const kind$$19 = trepr$$2.fields[0];
        const cspec = trepr$$2.fields[1];
        TcDeclarations$$$CheckMembersForm(cspec);
        const fields$$13 = (0, _List.choose)(function chooser$$19(_arg3$$16) {
          if (_arg3$$16.tag === 8) {
            const f$$67 = _arg3$$16.fields[0];
            return f$$67;
          } else {
            return null;
          }
        }, cspec);
        const implements2 = (0, _List.choose)(function chooser$$20(_arg4$$13) {
          if (_arg4$$13.tag === 6) {
            const ty$$173 = _arg4$$13.fields[0];
            return [ty$$173, (0, _ast.SynType$$get_Range)(ty$$173)];
          } else {
            return null;
          }
        }, cspec);
        const inherits$$6 = (0, _List.choose)(function chooser$$21(_arg5$$12) {
          switch (_arg5$$12.tag) {
            case 7:
              {
                const ty$$174 = _arg5$$12.fields[0];
                const m$$462 = _arg5$$12.fields[2];
                const idOpt$$1 = _arg5$$12.fields[1];
                return [ty$$174, m$$462, idOpt$$1];
              }

            case 3:
              {
                const ty$$175 = _arg5$$12.fields[0];
                const m$$463 = _arg5$$12.fields[3];
                const idOpt$$2 = _arg5$$12.fields[2];
                return [ty$$175, m$$463, idOpt$$2];
              }

            default:
              {
                return null;
              }
          }
        }, cspec);
        const slotsigs$$5 = (0, _List.choose)(function chooser$$22(_arg6$$11) {
          if (_arg6$$11.tag === 5) {
            const y$$20 = _arg6$$11.fields[1];
            const x$$169 = _arg6$$11.fields[0];
            return [x$$169, y$$20];
          } else {
            return null;
          }
        }, cspec);
        let members$$5;
        const membersIncludingAutoProps = (0, _List.filter)(function predicate$$90(memb$$3) {
          var $target$$600;

          switch (memb$$3.tag) {
            case 1:
            case 4:
            case 2:
            case 10:
            case 0:
            case 3:
              $target$$600 = 0;
              break;

            case 9:
              $target$$600 = 1;
              break;

            case 8:
            case 7:
            case 5:
              $target$$600 = 2;
              break;

            default:
              $target$$600 = 0;
          }

          switch ($target$$600) {
            case 0:
              {
                return true;
              }

            case 1:
              {
                const m$$464 = memb$$3.fields[2];
                (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypesCannotContainNestedTypes)(), m$$464));
                return false;
              }

            case 2:
              {
                return false;
              }
          }
        }, cspec);

        const preAutoProps = function preAutoProps(memb$$4) {
          var $target$$601, _access, _mGetSet, attribs$$9, id$$125, isStatic$$20, mWholeAutoProp, propKind, synExpr$$6, tyOpt, xmlDoc, membs;

          if (memb$$4.tag === 10) {
            $target$$601 = 0;
            _access = memb$$4.fields[7];
            _mGetSet = memb$$4.fields[9];
            attribs$$9 = memb$$4.fields[0];
            id$$125 = memb$$4.fields[2];
            isStatic$$20 = memb$$4.fields[1];
            mWholeAutoProp = memb$$4.fields[10];
            propKind = memb$$4.fields[4];
            synExpr$$6 = memb$$4.fields[8];
            tyOpt = memb$$4.fields[3];
            xmlDoc = memb$$4.fields[6];
          } else if (memb$$4.tag === 6) {
            if (memb$$4.fields[1] != null) {
              $target$$601 = 1;
              membs = memb$$4.fields[1];
            } else {
              $target$$601 = 3;
            }
          } else if (memb$$4.tag === 4) {
            $target$$601 = 2;
          } else if (memb$$4.tag === 2) {
            $target$$601 = 2;
          } else if (memb$$4.tag === 0) {
            $target$$601 = 2;
          } else if (memb$$4.tag === 3) {
            $target$$601 = 2;
          } else {
            $target$$601 = 3;
          }

          switch ($target$$601) {
            case 0:
              {
                const attribs$$10 = (0, _List.filter)(function predicate$$91(a$$58) {
                  var t$$4;
                  var $target$$602, t$$5;

                  if (a$$58.Target != null) {
                    if (t$$4 = a$$58.Target, (0, _ast.Ident$$get_idText)(t$$4) === "field") {
                      $target$$602 = 0;
                      t$$5 = a$$58.Target;
                    } else {
                      $target$$602 = 1;
                    }
                  } else {
                    $target$$602 = 1;
                  }

                  switch ($target$$602) {
                    case 0:
                      {
                        return true;
                      }

                    case 1:
                      {
                        return false;
                      }
                  }
                }, attribs$$9);
                const mLetPortion = (0, _ast.SynExpr$$get_Range)(synExpr$$6);
                const fldId = (0, _ast.ident)((0, _PrettyNaming.CompilerGeneratedName)((0, _ast.Ident$$get_idText)(id$$125)), mLetPortion);
                const headPat = new _ast.SynPat(7, "LongIdent", new _ast.LongIdentWithDots(0, "LongIdentWithDots", (0, _Types.L)(fldId, (0, _Types.L)()), (0, _Types.L)()), null, _ast.noInferredTypars, new _ast.SynConstructorArgs(0, "Pats", (0, _Types.L)()), null, mLetPortion);
                let retInfo$$3;

                if (tyOpt != null) {
                  const ty$$176 = tyOpt;
                  retInfo$$3 = new _ast.SynReturnInfo(0, "SynReturnInfo", [ty$$176, _ast.SynInfo$$$unnamedRetVal], (0, _ast.SynType$$get_Range)(ty$$176));
                } else {
                  retInfo$$3 = null;
                }

                const isMutable$$20 = propKind.tag === 4 ? true : propKind.tag === 5 ? true : false;
                const binding$$3 = (0, _ast.mkSynBinding)(xmlDoc, headPat, null, false, isMutable$$20, mLetPortion, new _ast.SequencePointInfoForBinding(4, "NoSequencePointAtInvisibleBinding"), retInfo$$3, synExpr$$6, (0, _ast.SynExpr$$get_Range)(synExpr$$6), (0, _Types.L)(), attribs$$10, null);
                return (0, _Types.L)(new _ast.SynMemberDefn(4, "LetBindings", (0, _Types.L)(binding$$3, (0, _Types.L)()), isStatic$$20, false, mWholeAutoProp), (0, _Types.L)());
              }

            case 1:
              {
                return (0, _List.collect)(preAutoProps, membs);
              }

            case 2:
              {
                return (0, _Types.L)(memb$$4, (0, _Types.L)());
              }

            case 3:
              {
                return (0, _Types.L)();
              }
          }
        };

        const postAutoProps = function postAutoProps(memb$$5) {
          var $target$$603, _mWholeAutoProp, _synExpr, access, attribs$$11, id$$126, isStatic$$21, mGetSetOpt, memberFlags$$39, propKind$$1, tyOpt$$1, xmlDoc$$1, m$$466, membs$$1, ty$$178;

          if (memb$$5.tag === 10) {
            $target$$603 = 0;
            _mWholeAutoProp = memb$$5.fields[10];
            _synExpr = memb$$5.fields[8];
            access = memb$$5.fields[7];
            attribs$$11 = memb$$5.fields[0];
            id$$126 = memb$$5.fields[2];
            isStatic$$21 = memb$$5.fields[1];
            mGetSetOpt = memb$$5.fields[9];
            memberFlags$$39 = memb$$5.fields[5];
            propKind$$1 = memb$$5.fields[4];
            tyOpt$$1 = memb$$5.fields[3];
            xmlDoc$$1 = memb$$5.fields[6];
          } else if (memb$$5.tag === 6) {
            if (memb$$5.fields[1] != null) {
              $target$$603 = 1;
              m$$466 = memb$$5.fields[2];
              membs$$1 = memb$$5.fields[1];
              ty$$178 = memb$$5.fields[0];
            } else {
              $target$$603 = 3;
            }
          } else if (memb$$5.tag === 4) {
            $target$$603 = 2;
          } else if (memb$$5.tag === 2) {
            $target$$603 = 2;
          } else if (memb$$5.tag === 0) {
            $target$$603 = 2;
          } else if (memb$$5.tag === 3) {
            $target$$603 = 2;
          } else {
            $target$$603 = 3;
          }

          switch ($target$$603) {
            case 0:
              {
                const mMemberPortion = (0, _ast.Ident$$get_idRange)(id$$126);
                const attribs$$12 = (0, _List.filter)(function predicate$$92(a$$59) {
                  var t$$6;
                  var $target$$604, t$$7;

                  if (a$$59.Target != null) {
                    if (t$$6 = a$$59.Target, (0, _ast.Ident$$get_idText)(t$$6) === "field") {
                      $target$$604 = 0;
                      t$$7 = a$$59.Target;
                    } else {
                      $target$$604 = 1;
                    }
                  } else {
                    $target$$604 = 1;
                  }

                  switch ($target$$604) {
                    case 0:
                      {
                        return false;
                      }

                    case 1:
                      {
                        return true;
                      }
                  }
                }, attribs$$11);
                const fldId$$1 = (0, _ast.ident)((0, _PrettyNaming.CompilerGeneratedName)((0, _ast.Ident$$get_idText)(id$$126)), mMemberPortion);
                const headPatIds = isStatic$$21 ? (0, _Types.L)(id$$126, (0, _Types.L)()) : (0, _Types.L)((0, _ast.ident)("__", mMemberPortion), (0, _Types.L)(id$$126, (0, _Types.L)()));
                const headPat$$1 = new _ast.SynPat(7, "LongIdent", new _ast.LongIdentWithDots(0, "LongIdentWithDots", headPatIds, (0, _Types.L)()), null, _ast.noInferredTypars, new _ast.SynConstructorArgs(0, "Pats", (0, _Types.L)()), null, mMemberPortion);
                const matchValue$$280 = [propKind$$1, mGetSetOpt];
                var $target$$605;

                if (matchValue$$280[0].tag === 4) {
                  if (matchValue$$280[1] != null) {
                    $target$$605 = 0;
                  } else {
                    $target$$605 = 1;
                  }
                } else {
                  $target$$605 = 1;
                }

                switch ($target$$605) {
                  case 0:
                    {
                      const m$$465 = matchValue$$280[1];
                      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$parsMutableOnAutoPropertyShouldBeGetSetNotJustSet)(), m$$465));
                      break;
                    }
                }

                return (0, _List.ofSeq)((0, _Seq.delay)(function () {
                  var getter, rhsExpr$$34, retInfo$$4, ty$$177, binding$$4;
                  return (0, _Seq.append)(propKind$$1.tag === 2 ? (getter = (rhsExpr$$34 = new _ast.SynExpr(28, "Ident", fldId$$1), (retInfo$$4 = tyOpt$$1 != null ? (ty$$177 = tyOpt$$1, new _ast.SynReturnInfo(0, "SynReturnInfo", [ty$$177, _ast.SynInfo$$$unnamedRetVal], (0, _ast.SynType$$get_Range)(ty$$177))) : null, (binding$$4 = (0, _ast.mkSynBinding)(xmlDoc$$1, headPat$$1, access, false, false, mMemberPortion, new _ast.SequencePointInfoForBinding(4, "NoSequencePointAtInvisibleBinding"), retInfo$$4, rhsExpr$$34, (0, _ast.SynExpr$$get_Range)(rhsExpr$$34), (0, _Types.L)(), attribs$$12, memberFlags$$39(new _ast.MemberKind(2, "Member"))), new _ast.SynMemberDefn(1, "Member", binding$$4, mMemberPortion)))), (0, _Seq.singleton)(getter)) : propKind$$1.tag === 3 ? (getter = (rhsExpr$$34 = new _ast.SynExpr(28, "Ident", fldId$$1), (retInfo$$4 = tyOpt$$1 != null ? (ty$$177 = tyOpt$$1, new _ast.SynReturnInfo(0, "SynReturnInfo", [ty$$177, _ast.SynInfo$$$unnamedRetVal], (0, _ast.SynType$$get_Range)(ty$$177))) : null, (binding$$4 = (0, _ast.mkSynBinding)(xmlDoc$$1, headPat$$1, access, false, false, mMemberPortion, new _ast.SequencePointInfoForBinding(4, "NoSequencePointAtInvisibleBinding"), retInfo$$4, rhsExpr$$34, (0, _ast.SynExpr$$get_Range)(rhsExpr$$34), (0, _Types.L)(), attribs$$12, memberFlags$$39(new _ast.MemberKind(2, "Member"))), new _ast.SynMemberDefn(1, "Member", binding$$4, mMemberPortion)))), (0, _Seq.singleton)(getter)) : propKind$$1.tag === 5 ? (getter = (rhsExpr$$34 = new _ast.SynExpr(28, "Ident", fldId$$1), (retInfo$$4 = tyOpt$$1 != null ? (ty$$177 = tyOpt$$1, new _ast.SynReturnInfo(0, "SynReturnInfo", [ty$$177, _ast.SynInfo$$$unnamedRetVal], (0, _ast.SynType$$get_Range)(ty$$177))) : null, (binding$$4 = (0, _ast.mkSynBinding)(xmlDoc$$1, headPat$$1, access, false, false, mMemberPortion, new _ast.SequencePointInfoForBinding(4, "NoSequencePointAtInvisibleBinding"), retInfo$$4, rhsExpr$$34, (0, _ast.SynExpr$$get_Range)(rhsExpr$$34), (0, _Types.L)(), attribs$$12, memberFlags$$39(new _ast.MemberKind(2, "Member"))), new _ast.SynMemberDefn(1, "Member", binding$$4, mMemberPortion)))), (0, _Seq.singleton)(getter)) : (null, (0, _Seq.empty)()), (0, _Seq.delay)(function () {
                    var $target$$606;

                    switch (propKind$$1.tag) {
                      case 4:
                      case 5:
                        $target$$606 = 0;
                        break;

                      default:
                        $target$$606 = 1;
                    }

                    switch ($target$$606) {
                      case 0:
                        {
                          let setter$$1;
                          const vId = (0, _ast.ident)("v", mMemberPortion);
                          const headPat$$2 = new _ast.SynPat(7, "LongIdent", new _ast.LongIdentWithDots(0, "LongIdentWithDots", headPatIds, (0, _Types.L)()), null, _ast.noInferredTypars, new _ast.SynConstructorArgs(0, "Pats", (0, _Types.L)((0, _ast.mkSynPatVar)(null, vId), (0, _Types.L)())), null, mMemberPortion);
                          const rhsExpr$$35 = (0, _ast.mkSynAssign)(new _ast.SynExpr(28, "Ident", fldId$$1), new _ast.SynExpr(28, "Ident", vId));
                          const binding$$5 = (0, _ast.mkSynBinding)(xmlDoc$$1, headPat$$2, access, false, false, mMemberPortion, new _ast.SequencePointInfoForBinding(4, "NoSequencePointAtInvisibleBinding"), null, rhsExpr$$35, (0, _ast.SynExpr$$get_Range)(rhsExpr$$35), (0, _Types.L)(), (0, _Types.L)(), memberFlags$$39(new _ast.MemberKind(4, "PropertySet")));
                          setter$$1 = new _ast.SynMemberDefn(1, "Member", binding$$5, mMemberPortion);
                          return (0, _Seq.singleton)(setter$$1);
                        }

                      case 1:
                        {
                          return (0, _Seq.empty)();
                        }
                    }
                  }));
                }));
              }

            case 1:
              {
                const membs$0027 = (0, _List.collect)(postAutoProps, membs$$1);
                return (0, _Types.L)(new _ast.SynMemberDefn(6, "Interface", ty$$178, membs$0027, m$$466), (0, _Types.L)());
              }

            case 2:
              {
                return (0, _Types.L)();
              }

            case 3:
              {
                return (0, _Types.L)(memb$$5, (0, _Types.L)());
              }
          }
        };

        const preMembers = (0, _List.collect)(preAutoProps, membersIncludingAutoProps);
        const postMembers = (0, _List.collect)(postAutoProps, membersIncludingAutoProps);
        members$$5 = (0, _List.append)(preMembers, postMembers);
        const isConcrete$$5 = (0, _List.exists)(function predicate$$93(_arg7$$5) {
          var $target$$607, memberFlags$$40, defOpt;

          if (_arg7$$5.tag === 1) {
            if (_arg7$$5.fields[0].fields[6].fields[0] != null) {
              $target$$607 = 0;
              memberFlags$$40 = _arg7$$5.fields[0].fields[6].fields[0];
            } else {
              $target$$607 = 5;
            }
          } else if (_arg7$$5.tag === 6) {
            $target$$607 = 1;
            defOpt = _arg7$$5.fields[1];
          } else if (_arg7$$5.tag === 4) {
            $target$$607 = 2;
          } else if (_arg7$$5.tag === 2) {
            $target$$607 = 3;
          } else if (_arg7$$5.tag === 3) {
            $target$$607 = 4;
          } else {
            $target$$607 = 5;
          }

          switch ($target$$607) {
            case 0:
              {
                return !memberFlags$$40.IsDispatchSlot;
              }

            case 1:
              {
                return defOpt != null;
              }

            case 2:
              {
                return true;
              }

            case 3:
              {
                return true;
              }

            case 4:
              {
                return true;
              }

            case 5:
              {
                return false;
              }
          }
        }, members$$5);
        const isIncrClass$$6 = (0, _List.exists)(function predicate$$94(_arg8$$5) {
          if (_arg8$$5.tag === 2) {
            return true;
          } else {
            return false;
          }
        }, members$$5);
        const hasSelfReferentialCtor$$1 = (0, _List.exists)(function predicate$$95(_arg9$$4) {
          var $target$$608, thisIdOpt$$9;

          switch (_arg9$$4.tag) {
            case 2:
              $target$$608 = 0;
              thisIdOpt$$9 = _arg9$$4.fields[3];
              break;

            case 1:
              $target$$608 = 0;
              thisIdOpt$$9 = _arg9$$4.fields[0].fields[6].fields[2];
              break;

            default:
              $target$$608 = 1;
          }

          switch ($target$$608) {
            case 0:
              {
                return thisIdOpt$$9 != null;
              }

            case 1:
              {
                return false;
              }
          }
        }, members$$5);
        const implicitCtorSynPats$$3 = (0, _List.tryPick)(function chooser$$23(_arg10$$3) {
          if (_arg10$$3.tag === 2) {
            const spats$$11 = _arg10$$3.fields[2];
            return spats$$11;
          } else {
            return null;
          }
        }, members$$5);
        const preEstablishedHasDefaultCtor$$1 = (0, _List.exists)(function predicate$$96(_arg11$$3) {
          var $target$$609, memberFlags$$41;

          if (_arg11$$3.tag === 1) {
            if (_arg11$$3.fields[0].fields[6].fields[0] != null) {
              const activePatternResult49653 = (0, _ast.$007CSynPatForConstructorDecl$007C_$007C)(_arg11$$3.fields[0].fields[7]);

              if (activePatternResult49653 != null) {
                if ((0, _ast.$007CSynPatForNullaryArgs$007C_$007C)(activePatternResult49653) != null) {
                  $target$$609 = 0;
                  memberFlags$$41 = _arg11$$3.fields[0].fields[6].fields[0];
                } else {
                  $target$$609 = 1;
                }
              } else {
                $target$$609 = 1;
              }
            } else {
              $target$$609 = 1;
            }
          } else {
            $target$$609 = 1;
          }

          switch ($target$$609) {
            case 0:
              {
                return (0, _Util.equals)(memberFlags$$41.MemberKind, new _ast.MemberKind(1, "Constructor"));
              }

            case 1:
              {
                if (_arg11$$3.tag === 2) {
                  const spats$$12 = _arg11$$3.fields[2];
                  return spats$$12.tail == null;
                } else {
                  return false;
                }
              }
          }
        }, members$$5);
        const repr$$10 = new _ast.SynTypeDefnSimpleRepr(3, "General", kind$$19, inherits$$6, slotsigs$$5, fields$$13, isConcrete$$5, isIncrClass$$6, implicitCtorSynPats$$3, m$$461);
        const isAtOriginalTyconDefn$$3 = !TcDeclarations$$$isAugmentationTyconDefnRepr(repr$$10);
        const core$$4 = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$3, repr$$10, (0, _List.append)(implements2, implements1), preEstablishedHasDefaultCtor$$1, hasSelfReferentialCtor$$1, isAtOriginalTyconDefn$$3);
        return [core$$4, (0, _List.append)(members$$5, extraMembers$$1)];
      }
  }
}

function TcDeclarations$$$TcMutRecDefinitions(cenv$$245, envInitial$$10, parent$$24, typeNames$$4, tpenv$$410, m$$467, scopem$$26, mutRecNSInfo$$5, mutRecDefns$$7) {
  const mutRecDefnsAfterSplit = MutRecShapes$$$mapTycons(TcDeclarations$$$SplitTyconDefn, mutRecDefns$$7);
  const patternInput$$603 = EstablishTypeDefinitionCores$$$TcMutRecDefns_Phase1(function (containerInfo$$12, synBinds$$1) {
    return (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.map)(function (synBind) {
        return new RecDefnBindingInfo(0, "RecDefnBindingInfo", containerInfo$$12, new NewSlotsOK(1, "NoNewSlots"), new DeclKind(0, "ModuleOrMemberBinding"), synBind);
      }, synBinds$$1);
    }));
  }, cenv$$245, envInitial$$10, parent$$24, typeNames$$4, false, tpenv$$410, m$$467, scopem$$26, mutRecNSInfo$$5, mutRecDefnsAfterSplit);
  const mutRecDefnsAfterPrep = MutRecShapes$$$mapTyconsWithEnv(function f1$$45(envForDecls$$27, tupledArg$$147) {
    const synTyconInfo$$4 = tupledArg$$147[0][0].fields[0];
    const isAtOriginalTyconDefn$$6 = tupledArg$$147[0][0].fields[5];
    const tyDeclRange = (0, _ast.SynComponentInfo$$get_Range)(synTyconInfo$$4);
    const typars$$16 = synTyconInfo$$4.fields[1];
    const longPath$$4 = synTyconInfo$$4.fields[3];
    const cs = synTyconInfo$$4.fields[2];
    const patternInput$$604 = TcDeclarations$$$ComputeTyconDeclKind(tupledArg$$147[1], isAtOriginalTyconDefn$$6, cenv$$245, envForDecls$$27, false, tyDeclRange, typars$$16, cs, longPath$$4);
    const newslotsOK$$9 = (isAtOriginalTyconDefn$$6 ? (0, _tast.EntityRef$$get_IsFSharpObjectModelTycon)(patternInput$$604[1]) : false) ? new NewSlotsOK(0, "NewSlotsOK") : new NewSlotsOK(1, "NoNewSlots");

    if (!(tupledArg$$147[0][1].tail == null) ? (0, _tast.EntityRef$$get_IsTypeAbbrev)(patternInput$$604[1]) : false) {
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeAbbreviationsCannotHaveAugmentations)(), tyDeclRange));
    }

    return new MutRecDefnsPhase2DataForTycon(0, "MutRecDefnsPhase2DataForTycon", tupledArg$$147[1], tupledArg$$147[0][2], patternInput$$604[0], patternInput$$604[1], tupledArg$$147[3][0], tupledArg$$147[3][1], patternInput$$604[2], tupledArg$$147[0][1], tyDeclRange, newslotsOK$$9, tupledArg$$147[2]);
  }, patternInput$$603[1], patternInput$$603[2]);
  const patternInput$$605 = MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs(function getTyconOpt$$3(_arg3$$17) {
    const tyconOpt$$17 = _arg3$$17.fields[0];
    return tyconOpt$$17;
  }, function getVals$$3(_binds) {
    return (0, _Types.L)();
  }, cenv$$245, true, scopem$$26, m$$467, envInitial$$10, MutRecShapes$$$dropEnvs(mutRecDefnsAfterPrep));
  const patternInput$$606 = TcMutRecDefns_Phase2(cenv$$245, envInitial$$10, m$$467, scopem$$26, mutRecNSInfo$$5, patternInput$$605[0], patternInput$$605[1]);
  const withExtraBindings = MutRecShapes$$$expandTyconsWithEnv(function f1$$46(envForDecls$$28, tupledArg$$148) {
    if (tupledArg$$148[0] != null) {
      const tycon$$48 = tupledArg$$148[0];
      const binds$$45 = AddAugmentationDeclarations$$$AddGenericHashAndComparisonBindings(cenv$$245, tycon$$48);
      const binds3$$1 = AddAugmentationDeclarations$$$AddGenericEqualityBindings(cenv$$245, envForDecls$$28, tycon$$48);
      return [binds$$45, binds3$$1];
    } else {
      return [(0, _Types.L)(), (0, _Types.L)()];
    }
  }, patternInput$$606[1], patternInput$$606[0]);
  EstablishTypeDefinitionCores$$$TcTyconDefnCore_CheckForCyclicStructsAndInheritance(cenv$$245, patternInput$$603[0]);
  return [withExtraBindings, patternInput$$606[1]];
}

function TcDeclarations$$$SplitTyconSignature(_arg1$$101) {
  var r$$11;
  const trepr$$3 = _arg1$$101.fields[1];
  const synTyconInfo$$5 = _arg1$$101.fields[0];
  const extraMembers$$2 = _arg1$$101.fields[2];
  const implements1$$1 = (0, _List.choose)(function chooser$$24(_arg2$$24) {
    if (_arg2$$24.tag === 1) {
      const m$$468 = _arg2$$24.fields[1];
      const f$$68 = _arg2$$24.fields[0];
      return [f$$68, m$$468];
    } else {
      return null;
    }
  }, extraMembers$$2);
  var $target$$610, cspec$$1, kind$$20, m$$469, r$$12;

  if (trepr$$3.tag === 0) {
    $target$$610 = 0;
    cspec$$1 = trepr$$3.fields[1];
    kind$$20 = trepr$$3.fields[0];
    m$$469 = trepr$$3.fields[2];
  } else if (trepr$$3.tag === 1) {
    if (trepr$$3.fields[0].tag === 6) {
      if (r$$11 = trepr$$3.fields[0], !(extraMembers$$2.tail == null)) {
        $target$$610 = 1;
        r$$12 = trepr$$3.fields[0];
      } else {
        $target$$610 = 2;
      }
    } else {
      $target$$610 = 2;
    }
  } else {
    $target$$610 = 2;
  }

  switch ($target$$610) {
    case 0:
      {
        const fields$$14 = (0, _List.choose)(function chooser$$25(_arg3$$18) {
          if (_arg3$$18.tag === 3) {
            const f$$69 = _arg3$$18.fields[0];
            return f$$69;
          } else {
            return null;
          }
        }, cspec$$1);
        const implements2$$1 = (0, _List.choose)(function chooser$$26(_arg4$$15) {
          if (_arg4$$15.tag === 1) {
            const ty$$179 = _arg4$$15.fields[0];
            const m$$470 = _arg4$$15.fields[1];
            return [ty$$179, m$$470];
          } else {
            return null;
          }
        }, cspec$$1);
        const inherits$$7 = (0, _List.choose)(function chooser$$27(_arg5$$13) {
          if (_arg5$$13.tag === 2) {
            const ty$$180 = _arg5$$13.fields[0];
            return [ty$$180, m$$469, null];
          } else {
            return null;
          }
        }, cspec$$1);
        const slotsigs$$6 = (0, _List.choose)(function chooser$$28(_arg6$$12) {
          var v$$102, fl;
          var $target$$611, fl$$1, v$$103;

          if (_arg6$$12.tag === 0) {
            if (v$$102 = _arg6$$12.fields[0], (fl = _arg6$$12.fields[1], fl.IsDispatchSlot)) {
              $target$$611 = 0;
              fl$$1 = _arg6$$12.fields[1];
              v$$103 = _arg6$$12.fields[0];
            } else {
              $target$$611 = 1;
            }
          } else {
            $target$$611 = 1;
          }

          switch ($target$$611) {
            case 0:
              {
                return [v$$103, fl$$1];
              }

            case 1:
              {
                return null;
              }
          }
        }, cspec$$1);
        const members$$8 = (0, _List.filter)(function predicate$$97(_arg7$$6) {
          var memberFlags$$42;
          var $target$$612, memberFlags$$43;

          if (_arg7$$6.tag === 1) {
            $target$$612 = 0;
          } else if (_arg7$$6.tag === 0) {
            if (memberFlags$$42 = _arg7$$6.fields[1], !memberFlags$$42.IsDispatchSlot) {
              $target$$612 = 1;
              memberFlags$$43 = _arg7$$6.fields[1];
            } else {
              $target$$612 = 2;
            }
          } else {
            $target$$612 = 2;
          }

          switch ($target$$612) {
            case 0:
              {
                return true;
              }

            case 1:
              {
                return true;
              }

            case 2:
              {
                if (_arg7$$6.tag === 4) {
                  const m$$471 = _arg7$$6.fields[1];
                  (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypesCannotContainNestedTypes)(), m$$471));
                  return false;
                } else {
                  return false;
                }
              }
          }
        }, cspec$$1);
        const isConcrete$$6 = (0, _List.exists)(function predicate$$98(_arg8$$6) {
          if (_arg8$$6.tag === 0) {
            const memberFlags$$44 = _arg8$$6.fields[1];
            return (0, _Util.equals)(memberFlags$$44.MemberKind, new _ast.MemberKind(1, "Constructor"));
          } else {
            return false;
          }
        }, members$$8);
        const preEstablishedHasDefaultCtor$$2 = (0, _List.exists)(function predicate$$99(_arg9$$5) {
          var id$$127;

          if (_arg9$$5.tag === 0) {
            const valSpfn$$5 = _arg9$$5.fields[0];
            const memberFlags$$45 = _arg9$$5.fields[1];

            if ((0, _Util.equals)(memberFlags$$45.MemberKind, new _ast.MemberKind(1, "Constructor"))) {
              const matchValue$$281 = [(0, _ast.SynValSig$$get_SynType)(valSpfn$$5), (0, _ast.SynValInfo$$get_ArgInfos)((0, _ast.SynValSig$$get_SynInfo)(valSpfn$$5))];
              var $target$$613, id$$128;

              if (matchValue$$281[0].tag === 6) {
                if (matchValue$$281[0].fields[0].tag === 0) {
                  if (matchValue$$281[0].fields[0].fields[0].fields[0].tail != null) {
                    if (matchValue$$281[0].fields[0].fields[0].fields[0].tail.tail == null) {
                      if (matchValue$$281[1].tail != null) {
                        if (matchValue$$281[1].head.tail != null) {
                          if (matchValue$$281[1].head.tail.tail == null) {
                            if (matchValue$$281[1].tail.tail == null) {
                              if (id$$127 = matchValue$$281[0].fields[0].fields[0].fields[0].head, (0, _ast.Ident$$get_idText)(id$$127) === "unit") {
                                $target$$613 = 0;
                                id$$128 = matchValue$$281[0].fields[0].fields[0].fields[0].head;
                              } else {
                                $target$$613 = 1;
                              }
                            } else {
                              $target$$613 = 1;
                            }
                          } else {
                            $target$$613 = 1;
                          }
                        } else {
                          $target$$613 = 1;
                        }
                      } else {
                        $target$$613 = 1;
                      }
                    } else {
                      $target$$613 = 1;
                    }
                  } else {
                    $target$$613 = 1;
                  }
                } else {
                  $target$$613 = 1;
                }
              } else {
                $target$$613 = 1;
              }

              switch ($target$$613) {
                case 0:
                  {
                    return true;
                  }

                case 1:
                  {
                    return false;
                  }
              }
            } else {
              return false;
            }
          } else {
            return false;
          }
        }, members$$8);
        const hasSelfReferentialCtor$$2 = false;
        const repr$$12 = new _ast.SynTypeDefnSimpleRepr(3, "General", kind$$20, inherits$$7, slotsigs$$6, fields$$14, isConcrete$$6, false, null, m$$469);
        const isAtOriginalTyconDefn$$7 = true;
        const tyconCore = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$5, repr$$12, (0, _List.append)(implements2$$1, implements1$$1), preEstablishedHasDefaultCtor$$2, hasSelfReferentialCtor$$2, isAtOriginalTyconDefn$$7);
        return [tyconCore, [synTyconInfo$$5, (0, _List.append)(members$$8, extraMembers$$2)]];
      }

    case 1:
      {
        const isAtOriginalTyconDefn$$8 = false;
        const tyconCore$$1 = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$5, r$$12, implements1$$1, false, false, isAtOriginalTyconDefn$$8);
        return [tyconCore$$1, [synTyconInfo$$5, extraMembers$$2]];
      }

    case 2:
      {
        switch (trepr$$3.tag) {
          case 2:
            {
              const r$$13 = trepr$$3.fields[0];
              const isAtOriginalTyconDefn$$9 = true;
              const core$$7 = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$5, new _ast.SynTypeDefnSimpleRepr(7, "Exception", r$$13), implements1$$1, false, false, isAtOriginalTyconDefn$$9);
              return [core$$7, [synTyconInfo$$5, extraMembers$$2]];
            }

          case 1:
            {
              const r$$14 = trepr$$3.fields[0];
              const isAtOriginalTyconDefn$$10 = true;
              const tyconCore$$2 = new MutRecDefnsPhase1DataForTycon(0, "MutRecDefnsPhase1DataForTycon", synTyconInfo$$5, r$$14, implements1$$1, false, false, isAtOriginalTyconDefn$$10);
              return [tyconCore$$2, [synTyconInfo$$5, extraMembers$$2]];
            }

          default:
            {
              throw new _Types.MatchFailureException("C:/code/FSharp.Compiler.Service_fable/src/fsharp/TypeChecker.fs", 16363, 14);
            }
        }
      }
  }
}

function TcDeclarations$$$TcMutRecSignatureDecls_Phase2(cenv$$246, scopem$$27, envMutRec$$10, mutRecDefns$$8) {
  return MutRecShapes$$$mapWithEnv(function fTycon$$1(envForDecls$$29, tupledArg$$149) {
    const synTyconInfo$$6 = tupledArg$$149[0][1][0];
    const members$$9 = tupledArg$$149[0][1][1];
    const tpenv$$411 = emptyUnscopedTyparEnv;
    const isAtOriginalTyconDefn$$11 = tupledArg$$149[0][0].fields[5];
    const typars$$17 = synTyconInfo$$6.fields[1];
    const m$$472 = synTyconInfo$$6.fields[7];
    const longPath$$5 = synTyconInfo$$6.fields[3];
    const cs$$1 = synTyconInfo$$6.fields[2];
    const patternInput$$607 = TcDeclarations$$$ComputeTyconDeclKind(tupledArg$$149[1], isAtOriginalTyconDefn$$11, cenv$$246, envForDecls$$29, true, m$$472, typars$$17, cs$$1, longPath$$5);
    const envForTycon$$11 = AddDeclaredTypars(new _NameResolution.CheckForDuplicateTyparFlag(0, "CheckForDuplicateTypars"), patternInput$$607[2], envForDecls$$29);
    const envForTycon$$12 = MakeInnerEnvForTyconRef(envForTycon$$11, patternInput$$607[1], (0, _Util.equals)(patternInput$$607[0], new DeclKind(2, "ExtrinsicExtensionBinding")));
    return TcTyconMemberSpecs(cenv$$246, envForTycon$$12, TyconContainerInfo(tupledArg$$149[0][2], patternInput$$607[1], patternInput$$607[2], new SafeInitData(1, "NoSafeInitInfo")), patternInput$$607[0], tpenv$$411, members$$9);
  }, function fLets$$1(envForDecls$$30, tupledArg$$150) {
    const tpenv$$412 = emptyUnscopedTyparEnv;
    const patternInput$$608 = TcAndPublishValSpec(cenv$$246, envForDecls$$30, tupledArg$$150[0], new DeclKind(0, "ModuleOrMemberBinding"), null, tpenv$$412, tupledArg$$150[1]);
    const env$$327 = (0, _List.foldBack)(function (v$$104, env$$326) {
      return AddLocalVal(cenv$$246.tcSink, scopem$$27, v$$104, env$$326);
    }, patternInput$$608[0], envForDecls$$30);
    return env$$327;
  }, envMutRec$$10, mutRecDefns$$8);
}

function TcDeclarations$$$TcMutRecSignatureDecls(cenv$$247, envInitial$$12, parent$$25, typeNames$$5, tpenv$$413, m$$473, scopem$$28, mutRecNSInfo$$6, mutRecSigs) {
  const mutRecSigsAfterSplit = MutRecShapes$$$mapTycons(TcDeclarations$$$SplitTyconSignature, mutRecSigs);
  const patternInput$$609 = EstablishTypeDefinitionCores$$$TcMutRecDefns_Phase1(function (containerInfo$$14, valDecl) {
    return [containerInfo$$14, valDecl];
  }, cenv$$247, envInitial$$12, parent$$25, typeNames$$5, true, tpenv$$413, m$$473, scopem$$28, mutRecNSInfo$$6, mutRecSigsAfterSplit);
  MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents(mutRecNSInfo$$6, patternInput$$609[2]);
  const patternInput$$610 = MutRecBindingChecking$$$TcMutRecDefns_ComputeEnvs(function getTyconOpt$$4(tupledArg$$151) {
    return tupledArg$$151[1];
  }, function getVals$$4(_binds$$1) {
    return (0, _Types.L)();
  }, cenv$$247, true, scopem$$28, m$$473, envInitial$$12, MutRecShapes$$$dropEnvs(patternInput$$609[2]));
  const mutRecDefnsAfterVals = TcDeclarations$$$TcMutRecSignatureDecls_Phase2(cenv$$247, scopem$$28, patternInput$$610[0], patternInput$$610[1]);
  MutRecBindingChecking$$$TcMutRecDefns_UpdateModuleContents(mutRecNSInfo$$6, mutRecDefnsAfterVals);
  return patternInput$$609[1];
}

function TcSignatureElementNonMutRec(cenv$$248, parent$$26, typeNames$$6, endm, env$$329, synSigDecl) {
  const builder$0040 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040, function () {
    return (0, _illib.EventuallyBuilder$$TryWith$$2B3CF8F)(builder$0040, (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040, function () {
      switch (synSigDecl.tag) {
        case 3:
          {
            const typeSpecs$$2 = synSigDecl.fields[0];
            const m$$475 = synSigDecl.fields[1];
            const scopem$$30 = (0, _range.unionRanges)(m$$475, endm);
            const mutRecDefns$$9 = (0, _List.map)(function mapping$$164(arg0$$1) {
              return new MutRecShape$00605(0, "Tycon", arg0$$1);
            }, typeSpecs$$2);
            const env$$331 = TcDeclarations$$$TcMutRecSignatureDecls(cenv$$248, env$$329, parent$$26, typeNames$$6, emptyUnscopedTyparEnv, m$$475, scopem$$30, null, mutRecDefns$$9);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$331);
          }

        case 5:
          {
            const mp$$3 = synSigDecl.fields[0];
            const m$$476 = synSigDecl.fields[1];
            const scopem$$31 = (0, _range.unionRanges)((0, _range.range$$get_EndRange)(m$$476), endm);
            const env$$332 = TcOpenDecl(cenv$$248.tcSink, cenv$$248.g, cenv$$248.amap, m$$476, scopem$$31, env$$329, mp$$3);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$332);
          }

        case 2:
          {
            const vspec$$13 = synSigDecl.fields[0];
            const m$$477 = synSigDecl.fields[1];
            let parentModule;

            if (parent$$26.tag === 0) {
              const p$$42 = parent$$26.fields[0];
              parentModule = p$$42;
            } else {
              parentModule = (0, _ErrorLogger.error)(new _ErrorLogger.NumberedError((0, _FSComp.SR$$$tcNamespaceCannotContainValues)(), (0, _ast.SynValSig$$get_RangeOfId)(vspec$$13)));
            }

            const containerInfo$$15 = ModuleOrNamespaceContainerInfo(parentModule);
            const patternInput$$612 = TcAndPublishValSpec(cenv$$248, env$$329, containerInfo$$15, new DeclKind(0, "ModuleOrMemberBinding"), null, emptyUnscopedTyparEnv, vspec$$13);
            const scopem$$32 = (0, _range.unionRanges)(m$$477, endm);
            const env$$334 = (0, _List.foldBack)(function (v$$105, env$$333) {
              return AddLocalVal(cenv$$248.tcSink, scopem$$32, v$$105, env$$333);
            }, patternInput$$612[0], env$$329);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$334);
          }

        case 1:
          {
            const xml$$1 = synSigDecl.fields[0].fields[4];
            const vis$$51 = synSigDecl.fields[0].fields[6];
            const mdefs = synSigDecl.fields[2];
            const m$$478 = synSigDecl.fields[3];
            const longPath$$6 = synSigDecl.fields[0].fields[3];
            const isRec$$6 = synSigDecl.fields[1];
            const im$$1 = synSigDecl.fields[0].fields[7];
            const compInfo$$2 = synSigDecl.fields[0];
            const attribs$$13 = synSigDecl.fields[0].fields[0];
            const _parms$$1 = synSigDecl.fields[0].fields[1];
            const _constraints$$1 = synSigDecl.fields[0].fields[2];

            if (isRec$$6) {
              const modDecl = new _ast.SynModuleSigDecl(1, "NestedModule", compInfo$$2, false, mdefs, m$$478);
              return (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040, TcSignatureElementsMutRec(cenv$$248, parent$$26, typeNames$$6, endm, null, env$$329, (0, _Types.L)(modDecl, (0, _Types.L)())));
            } else {
              const id$$129 = ComputeModuleName(longPath$$6);
              const patternInput$$613 = ComputeAccessAndCompPath(env$$329, null, im$$1, vis$$51, null, parent$$26);
              const attribs$$14 = TcAttributes(cenv$$248, env$$329, AttributeTargets$$$ModuleDecl, attribs$$13);
              CheckNamespaceModuleOrTypeName(cenv$$248.g, id$$129);
              const modKind$$4 = EstablishTypeDefinitionCores$$$ComputeModuleOrNamespaceKind(cenv$$248.g, true, typeNames$$6, attribs$$14, (0, _ast.Ident$$get_idText)(id$$129));
              const modName$$2 = EstablishTypeDefinitionCores$$$AdjustModuleName(modKind$$4, (0, _ast.Ident$$get_idText)(id$$129));
              CheckForDuplicateConcreteType(env$$329, modName$$2, (0, _ast.Ident$$get_idRange)(id$$129));
              const id$$130 = (0, _ast.ident)(modName$$2, (0, _ast.Ident$$get_idRange)(id$$129));
              const mspec$$6 = (0, _tast.NewModuleOrNamespace)(env$$329.eCompPath, patternInput$$613[0], id$$130, (0, _ast.PreXmlDoc$$ToXmlDoc)(xml$$1), attribs$$14, new _tast.MaybeLazy$00601(0, "Strict", (0, _tast.NewEmptyModuleOrNamespaceType)(modKind$$4)));
              return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040, TcModuleOrNamespaceSignatureElementsNonMutRec(cenv$$248, new _tast.ParentRef(0, "Parent", (0, _tast.mkLocalModRef)(mspec$$6)), env$$329, id$$130, modKind$$4, mdefs, m$$478, xml$$1), function (_arg1$$104) {
                mspec$$6.entity_modul_contents = new _tast.MaybeLazy$00601(0, "Strict", _arg1$$104[0]);
                const scopem$$33 = (0, _range.unionRanges)(m$$478, endm);
                PublishModuleDefn(cenv$$248, env$$329, mspec$$6);
                const env$$335 = AddLocalSubModuleAndReport(cenv$$248.tcSink, scopem$$33, cenv$$248.g, cenv$$248.amap, m$$478, env$$329, mspec$$6);
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$335);
              });
            }
          }

        case 0:
          {
            const p$$43 = synSigDecl.fields[1];
            const m$$479 = synSigDecl.fields[2];
            const id$$131 = synSigDecl.fields[0];
            const ad$$41 = env$$329.eAccessRights;
            let resolved$$1;

            if (p$$43.tail != null) {
              const rest$$17 = p$$43.tail;
              const id$$132 = p$$43.head;
              resolved$$1 = (0, _NameResolution.ResolveLongIndentAsModuleOrNamespace)(cenv$$248.tcSink, new _NameResolution.ResultCollectionSettings(0, "AllResults"), cenv$$248.amap, m$$479, true, new _NameResolution.FullyQualifiedFlag(1, "OpenQualified"), env$$329.eNameResEnv, ad$$41, id$$132, rest$$17, false);
            } else {
              resolved$$1 = new _illib.ResultOrException$00601(0, "Result", (0, _Types.L)());
            }

            const mvvs$$2 = (0, _illib.ResultOrExceptionModule$$$ForceRaise)(resolved$$1);
            const scopem$$34 = (0, _range.unionRanges)(m$$479, endm);
            const unfilteredModrefs = (0, _List.map)(function mapping$$165(tupledArg$$152) {
              return (0, _lib.p23)(tupledArg$$152[0], tupledArg$$152[1], tupledArg$$152[2]);
            }, mvvs$$2);
            const modrefs$$10 = (0, _List.filter)(function predicate$$100(modref$$8) {
              return !(0, _tast.EntityRef$$get_IsNamespace)(modref$$8);
            }, unfilteredModrefs);
            return (0, _illib.EventuallyBuilder$$Combine$$7DDFD27F)(builder$0040, (!(unfilteredModrefs.tail == null) ? modrefs$$10.tail == null : false) ? ((0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcModuleAbbreviationForNamespace$$Z721C83C5)((0, _TastOps.fullDisplayTextOfModRef)((0, _List.head)(unfilteredModrefs))), m$$479)), (0, _illib.EventuallyBuilder$$Zero)(builder$0040)) : (0, _illib.EventuallyBuilder$$Zero)(builder$0040), (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040, function () {
              if (modrefs$$10.tail == null) {
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$329);
              } else {
                (0, _List.iterate)(function action$$57(modref$$9) {
                  (0, _ErrorLogger.CommitOperationResult)((0, _AttributeChecking.CheckEntityAttributes)(cenv$$248.g, modref$$9, m$$479));
                }, modrefs$$10);
                const env$$336 = AddModuleAbbreviationAndReport(cenv$$248.tcSink, scopem$$34, id$$131, modrefs$$10, env$$329);
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$336);
              }
            }));
          }

        case 6:
          {
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$329);
          }

        case 7:
          {
            const xml$$2 = synSigDecl.fields[0].fields[4];
            const vis$$53 = synSigDecl.fields[0].fields[6];
            const m$$480 = synSigDecl.fields[0].fields[7];
            const longId$$16 = synSigDecl.fields[0].fields[0];
            const isRec$$7 = synSigDecl.fields[0].fields[1];
            const isModule$$1 = synSigDecl.fields[0].fields[2];
            const defs$$2 = synSigDecl.fields[0].fields[3];
            const attribs$$15 = synSigDecl.fields[0].fields[5];
            (0, _Seq.iterate)(function (id$$133) {
              CheckNamespaceModuleOrTypeName(cenv$$248.g, id$$133);
            }, longId$$16);
            let patternInput$$615;

            if (isModule$$1) {
              const patternInput$$614 = (0, _illib.List$$$frontAndBack)(longId$$16);
              const modDecl$$1 = (0, _Types.L)(new _ast.SynModuleSigDecl(1, "NestedModule", new _ast.SynComponentInfo(0, "ComponentInfo", attribs$$15, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(patternInput$$614[1], (0, _Types.L)()), xml$$2, false, vis$$53, m$$480), false, defs$$2, m$$480), (0, _Types.L)());
              patternInput$$615 = [patternInput$$614[0], modDecl$$1];
            } else {
              patternInput$$615 = [longId$$16, defs$$2];
            }

            const envNS = LocateEnv(cenv$$248.topCcu, env$$329, patternInput$$615[0]);
            const envNS$$1 = ImplicitlyOpenOwnNamespace(cenv$$248.tcSink, cenv$$248.g, cenv$$248.amap, m$$480, patternInput$$615[0], envNS);
            const mtypNS = envNS$$1.eModuleOrNamespaceTypeAccumulator.contents;
            const patternInput$$616 = BuildRootModuleType(patternInput$$615[0], envNS$$1.eCompPath, mtypNS);
            const mspecNSOpt = (0, _List.tryHead)(patternInput$$616[1]);
            (0, _List.iterate)(function action$$58(mspec$$7) {
              const modref$$10 = (0, _tast.mkLocalModRef)(mspec$$7);
              const item$$56 = new _NameResolution.Item(18, "ModuleOrNamespaces", (0, _Types.L)(modref$$10, (0, _Types.L)()));
              (0, _NameResolution.CallNameResolutionSink)(cenv$$248.tcSink, (0, _tast.Entity$$get_Range)(mspec$$7), TcEnv$$get_NameEnv(env$$329), item$$56, item$$56, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$329), env$$329.eAccessRights);
            }, patternInput$$616[1]);
            const envNS$$2 = isRec$$7 ? AddLocalRootModuleOrNamespace(cenv$$248.tcSink, cenv$$248.g, cenv$$248.amap, m$$480, envNS$$1, patternInput$$616[0]) : envNS$$1;
            const nsInfo = [mspecNSOpt, envNS$$2.eModuleOrNamespaceTypeAccumulator];
            const mutRecNSInfo$$7 = isRec$$7 ? nsInfo : null;
            return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040, TcSignatureElements(cenv$$248, new _tast.ParentRef(1, "ParentNone"), (0, _range.range$$get_EndRange)(m$$480), envNS$$2, xml$$2, mutRecNSInfo$$7, patternInput$$615[1]), function (_arg2$$27) {
              const envAtEnd = _arg2$$27;
              MutRecBindingChecking$$$TcMutRecDefns_UpdateNSContents(nsInfo);
              let env$$339;

              if (patternInput$$615[0].tail == null) {
                env$$339 = envAtEnd;
              } else {
                const env$$337 = AddLocalRootModuleOrNamespace(cenv$$248.tcSink, cenv$$248.g, cenv$$248.amap, m$$480, env$$329, patternInput$$616[0]);
                let env$$338;
                const matchValue$$282 = TryStripPrefixPath(cenv$$248.g, patternInput$$615[0]);

                if (matchValue$$282 == null) {
                  env$$338 = env$$337;
                } else {
                  const p$$44 = matchValue$$282[0];
                  env$$338 = TcOpenDecl(cenv$$248.tcSink, cenv$$248.g, cenv$$248.amap, (0, _range.range$$get_EndRange)(m$$480), (0, _range.range$$get_EndRange)(m$$480), env$$337, (0, _Types.L)(p$$44, (0, _Types.L)()));
                }

                env$$338.eModuleOrNamespaceTypeAccumulator.contents = (0, _tast.CombineCcuContentFragments)(m$$480, (0, _Types.L)(env$$338.eModuleOrNamespaceTypeAccumulator.contents, (0, _Types.L)(patternInput$$616[0], (0, _Types.L)())));
                env$$339 = env$$338;
              }

              return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$339);
            });
          }

        default:
          {
            const m$$474 = synSigDecl.fields[1];
            const edef = synSigDecl.fields[0];
            const scopem$$29 = (0, _range.unionRanges)((0, _range.range$$get_EndRange)(m$$474), endm);
            const patternInput$$611 = TcExceptionDeclarations$$$TcExnSignature(cenv$$248, env$$329, parent$$26, emptyUnscopedTyparEnv, edef, scopem$$29);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, patternInput$$611[3]);
          }
      }
    }), function (_arg3$$20) {
      const e$$125 = _arg3$$20;
      (0, _ErrorLogger.errorRecovery)(e$$125, endm);
      return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040, env$$329);
    });
  });
}

function TcSignatureElements(cenv$$249, parent$$27, endm$$1, env$$340, xml$$3, mutRecNSInfo$$8, defs$$4) {
  const builder$0040$$1 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$1, function () {
    return (0, _illib.EventuallyBuilder$$Combine$$7DDFD27F)(builder$0040$$1, cenv$$249.compilingCanonicalFslibModuleType ? ((0, _TastOps.ensureCcuHasModuleOrNamespaceAtPath)(cenv$$249.topCcu, env$$340.ePath, env$$340.eCompPath, (0, _ast.PreXmlDoc$$ToXmlDoc)(xml$$3)), (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$1)) : (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$1), (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$1, function () {
      const typeNames$$7 = EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecSigDecls(defs$$4);
      return mutRecNSInfo$$8 == null ? (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040$$1, TcSignatureElementsNonMutRec(cenv$$249, parent$$27, typeNames$$7, endm$$1, env$$340, defs$$4)) : (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040$$1, TcSignatureElementsMutRec(cenv$$249, parent$$27, typeNames$$7, endm$$1, mutRecNSInfo$$8, env$$340, defs$$4));
    }));
  });
}

function TcSignatureElementsNonMutRec(cenv$$250, parent$$28, typeNames$$8, endm$$2, env$$341, defs$$5) {
  const builder$0040$$2 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$2, function () {
    return (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040$$2, (0, _illib.EventuallyModule$$$fold)(function (env$$342, synSigDecl$$1) {
      return TcSignatureElementNonMutRec(cenv$$250, parent$$28, typeNames$$8, endm$$2, env$$342, synSigDecl$$1);
    }, env$$341, defs$$5));
  });
}

function TcSignatureElementsMutRec(cenv$$251, parent$$29, typeNames$$9, endm$$3, mutRecNSInfo$$9, envInitial$$14, defs$$6) {
  const builder$0040$$3 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$3, function () {
    const m$$481 = defs$$6.tail == null ? endm$$3 : (0, _List.reduce)(_range.unionRanges, (0, _List.map)(function mapping$$166(d$$24) {
      return (0, _ast.SynModuleSigDecl$$get_Range)(d$$24);
    }, defs$$6));
    const scopem$$35 = (0, _List.foldBack)(function folder$$28(h$$2, m$$482) {
      return (0, _range.unionRanges)((0, _ast.SynModuleSigDecl$$get_Range)(h$$2), m$$482);
    }, defs$$6, endm$$3);
    let mutRecDefns$$10;

    const loop$$5 = function loop$$5(isNamespace, defs$$7) {
      return (0, _illib.List$$$collectFold)(function f$$70(tupledArg$$153, def$$2) {
        switch (def$$2.tag) {
          case 5:
            {
              const m$$483 = def$$2.fields[1];
              const lid = def$$2.fields[0];

              if (!tupledArg$$153[0]) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOpenFirstInMutRec)(), m$$483));
              }

              const decls$$7 = (0, _Types.L)(new MutRecShape$00605(4, "Open", new MutRecDataForOpen(0, "MutRecDataForOpen", lid, m$$483)), (0, _Types.L)());
              return [decls$$7, [tupledArg$$153[0], tupledArg$$153[1]]];
            }

          case 4:
            {
              const members$$10 = def$$2.fields[0].fields[1];
              const exnRepr = def$$2.fields[0].fields[0];
              const vis$$54 = exnRepr.fields[4];
              const synAttrs$$7 = exnRepr.fields[0];
              const m$$484 = exnRepr.fields[5];
              const id$$134 = exnRepr.fields[1].fields[1];
              const doc$$9 = exnRepr.fields[3];
              const _args = exnRepr.fields[1].fields[2];
              const compInfo$$3 = new _ast.SynComponentInfo(0, "ComponentInfo", synAttrs$$7, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(id$$134, (0, _Types.L)()), doc$$9, false, vis$$54, (0, _ast.Ident$$get_idRange)(id$$134));
              const decls$$8 = (0, _Types.L)(new MutRecShape$00605(0, "Tycon", new _ast.SynTypeDefnSig(0, "TypeDefnSig", compInfo$$3, new _ast.SynTypeDefnSigRepr(2, "Exception", exnRepr), members$$10, m$$484)), (0, _Types.L)());
              return [decls$$8, [false, false]];
            }

          case 2:
            {
              const vspec$$14 = def$$2.fields[0];

              if (isNamespace) {
                (0, _ErrorLogger.error)(new _ErrorLogger.NumberedError((0, _FSComp.SR$$$tcNamespaceCannotContainValues)(), (0, _ast.SynValSig$$get_RangeOfId)(vspec$$14)));
              }

              const decls$$9 = (0, _Types.L)(new MutRecShape$00605(1, "Lets", vspec$$14), (0, _Types.L)());
              return [decls$$9, [false, false]];
            }

          case 1:
            {
              const synDefs = def$$2.fields[2];
              const isRec$$8 = def$$2.fields[1];
              const compInfo$$4 = def$$2.fields[0];

              if (isRec$$8) {
                (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRecImplied)(), (0, _ast.SynComponentInfo$$get_Range)(compInfo$$4)));
              }

              const mutRecDefs = loop$$5(false, synDefs);
              const decls$$10 = (0, _Types.L)(new MutRecShape$00605(2, "Module", compInfo$$4, mutRecDefs), (0, _Types.L)());
              return [decls$$10, [false, false]];
            }

          case 6:
            {
              return [(0, _Types.L)(), [tupledArg$$153[0], tupledArg$$153[1]]];
            }

          case 0:
            {
              const p$$45 = def$$2.fields[1];
              const m$$485 = def$$2.fields[2];
              const id$$135 = def$$2.fields[0];

              if (!tupledArg$$153[1]) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcModuleAbbrevFirstInMutRec)(), m$$485));
              }

              const decls$$11 = (0, _Types.L)(new MutRecShape$00605(3, "ModuleAbbrev", new MutRecDataForModuleAbbrev(0, "MutRecDataForModuleAbbrev", id$$135, p$$45, m$$485)), (0, _Types.L)());
              return [decls$$11, [false, tupledArg$$153[1]]];
            }

          case 7:
            {
              return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnsupportedMutRecDecl)(), (0, _ast.SynModuleSigDecl$$get_Range)(def$$2)));
            }

          default:
            {
              const typeSpecs$$3 = def$$2.fields[0];
              const decls$$6 = (0, _List.map)(function mapping$$167(arg0$$2) {
                return new MutRecShape$00605(0, "Tycon", arg0$$2);
              }, typeSpecs$$3);
              return [decls$$6, [false, false]];
            }
        }
      }, [true, true], defs$$7)[0];
    };

    mutRecDefns$$10 = loop$$5(parent$$29.tag === 0 ? false : true, defs$$6);
    return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$3, TcDeclarations$$$TcMutRecSignatureDecls(cenv$$251, envInitial$$14, parent$$29, typeNames$$9, emptyUnscopedTyparEnv, m$$481, scopem$$35, mutRecNSInfo$$9, mutRecDefns$$10));
  });
}

function TcModuleOrNamespaceSignatureElementsNonMutRec(cenv$$252, parent$$30, env$$343, id$$136, modKind$$5, defs$$8, m$$486, xml$$4) {
  const builder$0040$$4 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$4, function () {
    const endm$$4 = (0, _range.range$$get_EndRange)(m$$486);
    const patternInput$$617 = MakeInnerEnv(env$$343, id$$136, modKind$$5);
    return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$4, TcSignatureElements(cenv$$252, parent$$30, endm$$4, patternInput$$617[0], xml$$4, null, defs$$8), function (_arg4$$16) {
      const envAtEnd$$1 = _arg4$$16;
      return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$4, [patternInput$$617[1].contents, envAtEnd$$1]);
    });
  });
}

function ElimModuleDoBinding(bind$$34) {
  if (bind$$34.tag === 3) {
    const spExpr = bind$$34.fields[0];
    const m$$487 = bind$$34.fields[2];
    const expr$$132 = bind$$34.fields[1];
    const bind2 = new _ast.SynBinding(0, "Binding", null, new _ast.SynBindingKind(0, "StandaloneExpression"), false, false, (0, _Types.L)(), (0, _ast.PreXmlDoc$$$get_Empty)(), _ast.SynInfo$$$emptySynValData, new _ast.SynPat(1, "Wild", m$$487), null, expr$$132, m$$487, spExpr);
    return new _ast.SynModuleDecl(2, "Let", false, (0, _Types.L)(bind2, (0, _Types.L)()), m$$487);
  } else {
    return bind$$34;
  }
}

function TcMutRecDefnsEscapeCheck(binds$$46, env$$344) {
  const freeInEnv$$11 = GeneralizationHelpers$$$ComputeUnabstractableTycons(env$$344);

  const checkTycon = function checkTycon(tycon$$49) {
    if (!(0, _tast.Entity$$get_IsTypeAbbrev)(tycon$$49) ? (0, _zset.ZsetModule$$$contains)(tycon$$49, freeInEnv$$11) : false) {
      const nm$$73 = (0, _tast.Entity$$get_DisplayName)(tycon$$49);
      (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcTypeUsedInInvalidWay$$30230F9B)(nm$$73, nm$$73, nm$$73), (0, _tast.Entity$$get_Range)(tycon$$49)));
    }
  };

  MutRecShapes$$$iterTycons(function f1$$47($arg$$140) {
    (0, _Seq.iterate)(checkTycon, (0, _Option.defaultArg)($arg$$140[0], [], function ($x$$139) {
      return [$x$$139];
    }));
  }, binds$$46);
  const freeInEnv$$12 = GeneralizationHelpers$$$ComputeUnabstractableTraitSolutions(env$$344);

  const checkBinds = function checkBinds(binds$$47) {
    (0, _Seq.iterate)(function (bind$$35) {
      if ((0, _zset.ZsetModule$$$contains)((0, _tast.Binding$$get_Var)(bind$$35), freeInEnv$$12)) {
        const nm$$74 = (0, _tast.Val$$get_DisplayName)((0, _tast.Binding$$get_Var)(bind$$35));
        (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcMemberUsedInInvalidWay$$30230F9B)(nm$$74, nm$$74, nm$$74), (0, _tast.Val$$get_Range)((0, _tast.Binding$$get_Var)(bind$$35))));
      }
    }, binds$$47);
  };

  MutRecShapes$$$iterTyconsAndLets(function f1$$48($arg$$141) {
    checkBinds($arg$$141[1]);
  }, checkBinds, binds$$46);
}

function CheckLetOrDoInNamespace(binds$$48, m$$488) {
  var $target$$614;

  if (binds$$48.tail == null) {
    $target$$614 = 1;
  } else if (binds$$48.head.fields[0] == null) {
    if (binds$$48.head.fields[1].tag === 0) {
      if (binds$$48.head.fields[2]) {
        $target$$614 = 2;
      } else if (binds$$48.head.fields[3]) {
        $target$$614 = 2;
      } else if (binds$$48.head.fields[4].tail == null) {
        if (binds$$48.head.fields[8] == null) {
          if (binds$$48.head.fields[9].tag === 18) {
            if (binds$$48.head.fields[9].fields[0].tag === 2) {
              if (binds$$48.head.fields[9].fields[0].fields[0].tag === 0) {
                if (binds$$48.tail.tail == null) {
                  $target$$614 = 0;
                } else {
                  $target$$614 = 2;
                }
              } else {
                $target$$614 = 2;
              }
            } else {
              $target$$614 = 2;
            }
          } else if (binds$$48.head.fields[9].tag === 2) {
            if (binds$$48.head.fields[9].fields[0].tag === 0) {
              if (binds$$48.tail.tail == null) {
                $target$$614 = 0;
              } else {
                $target$$614 = 2;
              }
            } else {
              $target$$614 = 2;
            }
          } else {
            $target$$614 = 2;
          }
        } else {
          $target$$614 = 2;
        }
      } else {
        $target$$614 = 2;
      }
    } else if (binds$$48.head.fields[1].tag === 2) {
      if (binds$$48.head.fields[2]) {
        $target$$614 = 2;
      } else if (binds$$48.head.fields[3]) {
        $target$$614 = 2;
      } else if (binds$$48.head.fields[4].tail == null) {
        if (binds$$48.head.fields[8] == null) {
          if (binds$$48.head.fields[9].tag === 18) {
            if (binds$$48.head.fields[9].fields[0].tag === 2) {
              if (binds$$48.head.fields[9].fields[0].fields[0].tag === 0) {
                if (binds$$48.tail.tail == null) {
                  $target$$614 = 0;
                } else {
                  $target$$614 = 2;
                }
              } else {
                $target$$614 = 2;
              }
            } else {
              $target$$614 = 2;
            }
          } else if (binds$$48.head.fields[9].tag === 2) {
            if (binds$$48.head.fields[9].fields[0].tag === 0) {
              if (binds$$48.tail.tail == null) {
                $target$$614 = 0;
              } else {
                $target$$614 = 2;
              }
            } else {
              $target$$614 = 2;
            }
          } else {
            $target$$614 = 2;
          }
        } else {
          $target$$614 = 2;
        }
      } else {
        $target$$614 = 2;
      }
    } else {
      $target$$614 = 2;
    }
  } else {
    $target$$614 = 2;
  }

  switch ($target$$614) {
    case 1:
      {
        (0, _ErrorLogger.error)(new _ErrorLogger.NumberedError((0, _FSComp.SR$$$tcNamespaceCannotContainValues)(), m$$488));
        break;
      }

    case 2:
      {
        (0, _ErrorLogger.error)(new _ErrorLogger.NumberedError((0, _FSComp.SR$$$tcNamespaceCannotContainValues)(), (0, _ast.SynBinding$$get_RangeOfHeadPat)((0, _List.head)(binds$$48))));
        break;
      }
  }
}

function TcModuleOrNamespaceElementNonMutRec(cenv$$253, parent$$31, typeNames$$10, scopem$$36, env$$345, synDecl) {
  const builder$0040$$5 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$5, function () {
    (0, _ast.SynArgNameGenerator$$Reset)(cenv$$253.synArgNameGenerator);
    const tpenv$$414 = emptyUnscopedTyparEnv;
    return (0, _illib.EventuallyBuilder$$TryWith$$2B3CF8F)(builder$0040$$5, (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$5, function () {
      const matchValue$$283 = ElimModuleDoBinding(synDecl);

      switch (matchValue$$283.tag) {
        case 5:
          {
            const m$$490 = matchValue$$283.fields[1];
            const edef$$1 = matchValue$$283.fields[0];
            const patternInput$$618 = TcExceptionDeclarations$$$TcExnDefn(cenv$$253, env$$345, parent$$31, edef$$1, scopem$$36);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$127) {
              return (0, _Types.L)(new _tast.ModuleOrNamespaceExpr(4, "TMDefRec", true, (0, _Types.L)(patternInput$$618[1], (0, _Types.L)()), (0, _List.map)(function mapping$$168(arg0$$3) {
                return new _tast.ModuleOrNamespaceBinding(0, "Binding", arg0$$3);
              }, patternInput$$618[0]), m$$490), e$$127);
            }, (0, _Types.L)()], patternInput$$618[2], patternInput$$618[2]]);
          }

        case 4:
          {
            const typeDefs = matchValue$$283.fields[0];
            const m$$491 = matchValue$$283.fields[1];
            const scopem$$37 = (0, _range.unionRanges)(m$$491, scopem$$36);
            const mutRecDefns$$11 = (0, _List.map)(function mapping$$169(arg0$$4) {
              return new MutRecShape$00605(0, "Tycon", arg0$$4);
            }, typeDefs);
            const patternInput$$619 = TcDeclarations$$$TcMutRecDefinitions(cenv$$253, env$$345, parent$$31, typeNames$$10, tpenv$$414, m$$491, scopem$$37, null, mutRecDefns$$11);

            const exprfWithEscapeCheck = function exprfWithEscapeCheck(e$$128) {
              TcMutRecDefnsEscapeCheck(patternInput$$619[0], env$$345);
              return (0, _Types.L)(TcMutRecDefsFinish(cenv$$253, patternInput$$619[0], m$$491), e$$128);
            };

            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[exprfWithEscapeCheck, (0, _Types.L)()], patternInput$$619[1], patternInput$$619[1]]);
          }

        case 6:
          {
            const mp$$4 = matchValue$$283.fields[0].fields[0];
            const m$$492 = matchValue$$283.fields[1];
            const scopem$$38 = (0, _range.unionRanges)((0, _range.range$$get_EndRange)(m$$492), scopem$$36);
            const env$$348 = TcOpenDecl(cenv$$253.tcSink, cenv$$253.g, cenv$$253.amap, m$$492, scopem$$38, env$$345, mp$$4);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$129) {
              return e$$129;
            }, (0, _Types.L)()], env$$348, env$$348]);
          }

        case 2:
          {
            const m$$493 = matchValue$$283.fields[2];
            const letrec = matchValue$$283.fields[0];
            const binds$$50 = matchValue$$283.fields[1];

            if (parent$$31.tag === 0) {
              const parentModule$$1 = parent$$31.fields[0];
              const containerInfo$$16 = ModuleOrNamespaceContainerInfo(parentModule$$1);

              if (letrec) {
                const scopem$$39 = (0, _range.unionRanges)(m$$493, scopem$$36);
                const binds$$51 = (0, _List.map)(function mapping$$170(bind$$36) {
                  return new RecDefnBindingInfo(0, "RecDefnBindingInfo", containerInfo$$16, new NewSlotsOK(1, "NoNewSlots"), new DeclKind(0, "ModuleOrMemberBinding"), bind$$36);
                }, binds$$50);
                const patternInput$$620 = TcLetrec(new OverridesOK(1, "WarnOnOverrides"), cenv$$253, env$$345, tpenv$$414, binds$$51, m$$493, scopem$$39);
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$130) {
                  return (0, _Types.L)(new _tast.ModuleOrNamespaceExpr(4, "TMDefRec", true, (0, _Types.L)(), (0, _List.map)(function mapping$$171(arg0$$5) {
                    return new _tast.ModuleOrNamespaceBinding(0, "Binding", arg0$$5);
                  }, patternInput$$620[0]), m$$493), e$$130);
                }, (0, _Types.L)()], patternInput$$620[1], patternInput$$620[1]]);
              } else {
                const patternInput$$621 = TcLetBindings(cenv$$253, env$$345, containerInfo$$16, new DeclKind(0, "ModuleOrMemberBinding"), tpenv$$414, binds$$50, m$$493, scopem$$36);
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$131) {
                  return (0, _List.append)(patternInput$$621[0], e$$131);
                }, (0, _Types.L)()], patternInput$$621[1], patternInput$$621[1]]);
              }
            } else {
              CheckLetOrDoInNamespace(binds$$50, m$$493);
              return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (x$$173) {
                return x$$173;
              }, (0, _Types.L)()], env$$345, env$$345]);
            }
          }

        case 3:
          {
            return (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040$$5, (() => {
              throw new Error("unreachable");
            })());
          }

        case 7:
          {
            const synAttrs$$8 = matchValue$$283.fields[0];
            const patternInput$$622 = TcAttributesWithPossibleTargets(false, cenv$$253, env$$345, AttributeTargets$$$Top, synAttrs$$8);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$132) {
              return e$$132;
            }, patternInput$$622[0]], env$$345, env$$345]);
          }

        case 8:
          {
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$133) {
              return e$$133;
            }, (0, _Types.L)()], env$$345, env$$345]);
          }

        case 1:
          {
            const mdefs$$1 = matchValue$$283.fields[2];
            const m$$494 = matchValue$$283.fields[4];
            const isRec$$9 = matchValue$$283.fields[1];
            const isContinuingModule = matchValue$$283.fields[3];
            const compInfo$$5 = matchValue$$283.fields[0];

            if (isRec$$9) {
              const modDecl$$2 = new _ast.SynModuleDecl(1, "NestedModule", compInfo$$5, false, mdefs$$1, isContinuingModule, m$$494);
              return (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040$$5, TcModuleOrNamespaceElementsMutRec(cenv$$253, parent$$31, typeNames$$10, m$$494, env$$345, null, (0, _Types.L)(modDecl$$2, (0, _Types.L)())));
            } else {
              const xml$$5 = compInfo$$5.fields[4];
              const vis$$55 = compInfo$$5.fields[6];
              const longPath$$7 = compInfo$$5.fields[3];
              const im$$2 = compInfo$$5.fields[7];
              const attribs$$16 = compInfo$$5.fields[0];
              const _parms$$2 = compInfo$$5.fields[1];
              const _constraints$$2 = compInfo$$5.fields[2];
              const id$$138 = ComputeModuleName(longPath$$7);
              const modAttrs$$1 = TcAttributes(cenv$$253, env$$345, AttributeTargets$$$ModuleDecl, attribs$$16);
              const modKind$$6 = EstablishTypeDefinitionCores$$$ComputeModuleOrNamespaceKind(cenv$$253.g, true, typeNames$$10, modAttrs$$1, (0, _ast.Ident$$get_idText)(id$$138));
              const modName$$4 = EstablishTypeDefinitionCores$$$AdjustModuleName(modKind$$6, (0, _ast.Ident$$get_idText)(id$$138));
              CheckForDuplicateConcreteType(env$$345, modName$$4, im$$2);
              CheckForDuplicateModule(env$$345, (0, _ast.Ident$$get_idText)(id$$138), (0, _ast.Ident$$get_idRange)(id$$138));
              const patternInput$$623 = ComputeAccessAndCompPath(env$$345, null, (0, _ast.Ident$$get_idRange)(id$$138), vis$$55, null, parent$$31);
              const endm$$5 = (0, _range.range$$get_EndRange)(m$$494);
              const id$$139 = (0, _ast.ident)(modName$$4, (0, _ast.Ident$$get_idRange)(id$$138));
              CheckNamespaceModuleOrTypeName(cenv$$253.g, id$$139);
              const patternInput$$624 = MakeInnerEnv(env$$345, id$$139, modKind$$6);
              const mspec$$8 = (0, _tast.NewModuleOrNamespace)(env$$345.eCompPath, patternInput$$623[0], id$$139, (0, _ast.PreXmlDoc$$ToXmlDoc)(xml$$5), modAttrs$$1, new _tast.MaybeLazy$00601(0, "Strict", (0, _tast.NewEmptyModuleOrNamespaceType)(modKind$$6)));
              return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$5, TcModuleOrNamespaceElements(cenv$$253, new _tast.ParentRef(0, "Parent", (0, _tast.mkLocalModRef)(mspec$$8)), endm$$5, patternInput$$624[0], xml$$5, null, mdefs$$1), function (_arg1$$105) {
                mspec$$8.entity_modul_contents = new _tast.MaybeLazy$00601(0, "Strict", patternInput$$624[1].contents);
                const modDefn = new _tast.ModuleOrNamespaceExpr(4, "TMDefRec", false, (0, _Types.L)(), (0, _Types.L)(new _tast.ModuleOrNamespaceBinding(1, "Module", mspec$$8, _arg1$$105[0]), (0, _Types.L)()), m$$494);
                PublishModuleDefn(cenv$$253, env$$345, mspec$$8);
                const env$$351 = AddLocalSubModuleAndReport(cenv$$253.tcSink, scopem$$36, cenv$$253.g, cenv$$253.amap, m$$494, env$$345, mspec$$8);
                const envAtEnd$$3 = isContinuingModule ? _arg1$$105[2] : env$$351;
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (modDefs) {
                  return (0, _Types.L)(modDefn, modDefs);
                }, _arg1$$105[1]], env$$351, envAtEnd$$3]);
              });
            }
          }

        case 9:
          {
            const xml$$6 = matchValue$$283.fields[0].fields[4];
            const vis$$57 = matchValue$$283.fields[0].fields[6];
            const m$$495 = matchValue$$283.fields[0].fields[7];
            const longId$$17 = matchValue$$283.fields[0].fields[0];
            const isRec$$10 = matchValue$$283.fields[0].fields[1];
            const isModule$$2 = matchValue$$283.fields[0].fields[2];
            const defs$$9 = matchValue$$283.fields[0].fields[3];
            const attribs$$17 = matchValue$$283.fields[0].fields[5];
            return (0, _illib.EventuallyBuilder$$Combine$$7DDFD27F)(builder$0040$$5, _lib.progress.contents ? ((0, _ildiag.dprintn)("Typecheck implementation " + (0, _ast.textOfLid)(longId$$17)), (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$5)) : (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$5), (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$5, function () {
              const endm$$6 = (0, _range.range$$get_EndRange)(m$$495);
              (0, _Seq.iterate)(function (id$$140) {
                CheckNamespaceModuleOrTypeName(cenv$$253.g, id$$140);
              }, longId$$17);
              let patternInput$$626;

              if (isModule$$2) {
                const patternInput$$625 = (0, _illib.List$$$frontAndBack)(longId$$17);
                const modDecl$$3 = (0, _Types.L)(new _ast.SynModuleDecl(1, "NestedModule", new _ast.SynComponentInfo(0, "ComponentInfo", attribs$$17, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(patternInput$$625[1], (0, _Types.L)()), xml$$6, false, vis$$57, m$$495), false, defs$$9, true, m$$495), (0, _Types.L)());
                patternInput$$626 = [patternInput$$625[0], modDecl$$3];
              } else {
                patternInput$$626 = [longId$$17, defs$$9];
              }

              const envNS$$3 = LocateEnv(cenv$$253.topCcu, env$$345, patternInput$$626[0]);
              const envNS$$4 = ImplicitlyOpenOwnNamespace(cenv$$253.tcSink, cenv$$253.g, cenv$$253.amap, m$$495, patternInput$$626[0], envNS$$3);
              const mtypNS$$1 = envNS$$4.eModuleOrNamespaceTypeAccumulator.contents;
              const patternInput$$627 = BuildRootModuleType(patternInput$$626[0], envNS$$4.eCompPath, mtypNS$$1);
              const mspecNSOpt$$1 = (0, _List.tryHead)(patternInput$$627[1]);
              (0, _List.iterate)(function action$$59(mspec$$9) {
                const modref$$11 = (0, _tast.mkLocalModRef)(mspec$$9);
                const item$$57 = new _NameResolution.Item(18, "ModuleOrNamespaces", (0, _Types.L)(modref$$11, (0, _Types.L)()));
                (0, _NameResolution.CallNameResolutionSink)(cenv$$253.tcSink, (0, _tast.Entity$$get_Range)(mspec$$9), TcEnv$$get_NameEnv(env$$345), item$$57, item$$57, _TastOps.emptyTyparInst, new _NameResolution.ItemOccurence(0, "Binding"), TcEnv$$get_DisplayEnv(env$$345), env$$345.eAccessRights);
              }, patternInput$$627[1]);
              const envNS$$5 = isRec$$10 ? AddLocalRootModuleOrNamespace(cenv$$253.tcSink, cenv$$253.g, cenv$$253.amap, m$$495, envNS$$4, patternInput$$627[0]) : envNS$$4;
              const nsInfo$$1 = [mspecNSOpt$$1, envNS$$5.eModuleOrNamespaceTypeAccumulator];
              const mutRecNSInfo$$10 = isRec$$10 ? nsInfo$$1 : null;
              return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$5, TcModuleOrNamespaceElements(cenv$$253, parent$$31, endm$$6, envNS$$5, xml$$6, mutRecNSInfo$$10, patternInput$$626[1]), function (_arg2$$28) {
                MutRecBindingChecking$$$TcMutRecDefns_UpdateNSContents(nsInfo$$1);
                let env$$354;

                if (patternInput$$626[0].tail == null) {
                  env$$354 = _arg2$$28[2];
                } else {
                  const env$$352 = AddLocalRootModuleOrNamespace(cenv$$253.tcSink, cenv$$253.g, cenv$$253.amap, m$$495, env$$345, patternInput$$627[0]);
                  let env$$353;
                  const matchValue$$284 = TryStripPrefixPath(cenv$$253.g, patternInput$$626[0]);

                  if (matchValue$$284 == null) {
                    env$$353 = env$$352;
                  } else {
                    const p$$47 = matchValue$$284[0];
                    env$$353 = TcOpenDecl(cenv$$253.tcSink, cenv$$253.g, cenv$$253.amap, (0, _range.range$$get_EndRange)(m$$495), (0, _range.range$$get_EndRange)(m$$495), env$$352, (0, _Types.L)(p$$47, (0, _Types.L)()));
                  }

                  env$$353.eModuleOrNamespaceTypeAccumulator.contents = (0, _tast.CombineCcuContentFragments)(m$$495, (0, _Types.L)(env$$353.eModuleOrNamespaceTypeAccumulator.contents, (0, _Types.L)(patternInput$$627[0], (0, _Types.L)())));
                  env$$354 = env$$353;
                }

                const modExprRoot = BuildRootModuleExpr(patternInput$$626[0], envNS$$5.eCompPath, _arg2$$28[0]);
                return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (modExprs) {
                  return (0, _Types.L)(modExprRoot, modExprs);
                }, _arg2$$28[1]], env$$354, _arg2$$28[2]]);
              });
            }));
          }

        default:
          {
            const p$$46 = matchValue$$283.fields[1];
            const m$$489 = matchValue$$283.fields[2];
            const id$$137 = matchValue$$283.fields[0];
            const env$$346 = MutRecBindingChecking$$$TcModuleAbbrevDecl(cenv$$253, scopem$$36, env$$345, id$$137, p$$46, m$$489);
            return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$126) {
              return e$$126;
            }, (0, _Types.L)()], env$$346, env$$346]);
          }
      }
    }), function (_arg3$$21) {
      const exn = _arg3$$21;
      (0, _ErrorLogger.errorRecovery)(exn, (0, _ast.SynModuleDecl$$get_Range)(synDecl));
      return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$5, [[function (e$$134) {
        return e$$134;
      }, (0, _Types.L)()], env$$345, env$$345]);
    });
  });
}

function TcModuleOrNamespaceElementsNonMutRec(cenv$$254, parent$$32, typeNames$$11, endm$$7, defsSoFar, env$$355, envAtEnd$$5, moreDefs) {
  const builder$0040$$6 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$6, function () {
    if (moreDefs.tail == null) {
      return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$6, [(0, _List.reverse)(defsSoFar), envAtEnd$$5]);
    } else {
      const otherDefs = moreDefs.tail;
      const firstDef = moreDefs.head;
      const scopem$$40 = otherDefs.tail == null ? (0, _range.unionRanges)((0, _ast.SynModuleDecl$$get_Range)(firstDef), endm$$7) : (0, _range.unionRanges)((0, _ast.SynModuleDecl$$get_Range)((0, _List.head)(otherDefs)), endm$$7);
      return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$6, TcModuleOrNamespaceElementNonMutRec(cenv$$254, parent$$32, typeNames$$11, scopem$$40, env$$355, firstDef), function (_arg4$$17) {
        return (0, _illib.EventuallyBuilder$$ReturnFrom$$1505)(builder$0040$$6, TcModuleOrNamespaceElementsNonMutRec(cenv$$254, parent$$32, typeNames$$11, endm$$7, (0, _Types.L)(_arg4$$17[0], defsSoFar), _arg4$$17[1], _arg4$$17[2], otherDefs));
      });
    }
  });
}

function TcModuleOrNamespaceElementsMutRec(cenv$$255, parent$$33, typeNames$$12, endm$$8, envInitial$$15, mutRecNSInfo$$11, defs$$11) {
  const builder$0040$$7 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$7, function () {
    const m$$496 = defs$$11.tail == null ? endm$$8 : (0, _List.reduce)(_range.unionRanges, (0, _List.map)(function mapping$$172(d$$25) {
      return (0, _ast.SynModuleDecl$$get_Range)(d$$25);
    }, defs$$11));
    const scopem$$41 = (0, _List.foldBack)(function folder$$29(h$$3, m$$497) {
      return (0, _range.unionRanges)((0, _ast.SynModuleDecl$$get_Range)(h$$3), m$$497);
    }, defs$$11, endm$$8);
    let patternInput$$629;

    const loop$$6 = function loop$$6(isNamespace$$1, attrs$$33, defs$$12) {
      return (0, _illib.List$$$collectFold)(function f$$71(tupledArg$$154, def$$3) {
        const matchValue$$285 = ElimModuleDoBinding(def$$3);

        switch (matchValue$$285.tag) {
          case 2:
            {
              const m$$498 = matchValue$$285.fields[2];
              const letrec$$1 = matchValue$$285.fields[0];
              const binds$$54 = matchValue$$285.fields[1];
              let binds$$55;

              if (isNamespace$$1) {
                CheckLetOrDoInNamespace(binds$$54, m$$498);
                binds$$55 = (0, _Types.L)();
              } else if (letrec$$1) {
                binds$$55 = (0, _Types.L)(new MutRecShape$00605(1, "Lets", binds$$54), (0, _Types.L)());
              } else {
                binds$$55 = (0, _List.map)(function ($arg$$142) {
                  return new MutRecShape$00605(1, "Lets", (0, _Types.L)($arg$$142, (0, _Types.L)()));
                }, binds$$54);
              }

              return [binds$$55, [false, false, tupledArg$$154[2]]];
            }

          case 1:
            {
              const synDefs$$1 = matchValue$$285.fields[2];
              const isRec$$11 = matchValue$$285.fields[1];
              const compInfo$$6 = matchValue$$285.fields[0];
              const _isContinuingModule = matchValue$$285.fields[3];

              if (isRec$$11) {
                (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcRecImplied)(), (0, _ast.SynComponentInfo$$get_Range)(compInfo$$6)));
              }

              const patternInput$$628 = loop$$6(false, tupledArg$$154[2], synDefs$$1);
              const attrs$$35 = patternInput$$628[1][2];
              const decls$$13 = (0, _Types.L)(new MutRecShape$00605(2, "Module", compInfo$$6, patternInput$$628[0]), (0, _Types.L)());
              return [decls$$13, [false, false, attrs$$35]];
            }

          case 6:
            {
              const m$$499 = matchValue$$285.fields[1];
              const lid$$1 = matchValue$$285.fields[0].fields[0];

              if (!tupledArg$$154[0]) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcOpenFirstInMutRec)(), m$$499));
              }

              const decls$$14 = (0, _Types.L)(new MutRecShape$00605(4, "Open", new MutRecDataForOpen(0, "MutRecDataForOpen", lid$$1, m$$499)), (0, _Types.L)());
              return [decls$$14, [tupledArg$$154[0], tupledArg$$154[1], tupledArg$$154[2]]];
            }

          case 5:
            {
              const repr$$13 = matchValue$$285.fields[0].fields[0];
              const members$$11 = matchValue$$285.fields[0].fields[1];
              const _m$$6 = matchValue$$285.fields[1];
              const vis$$58 = repr$$13.fields[4];
              const synAttrs$$9 = repr$$13.fields[0];
              const m$$500 = repr$$13.fields[5];
              const id$$141 = repr$$13.fields[1].fields[1];
              const doc$$10 = repr$$13.fields[3];
              const _repr = repr$$13.fields[2];
              const _args$$1 = repr$$13.fields[1].fields[2];
              const compInfo$$7 = new _ast.SynComponentInfo(0, "ComponentInfo", synAttrs$$9, (0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)(id$$141, (0, _Types.L)()), doc$$10, false, vis$$58, (0, _ast.Ident$$get_idRange)(id$$141));
              const decls$$15 = (0, _Types.L)(new MutRecShape$00605(0, "Tycon", new _ast.SynTypeDefn(0, "TypeDefn", compInfo$$7, new _ast.SynTypeDefnRepr(2, "Exception", repr$$13), members$$11, m$$500)), (0, _Types.L)());
              return [decls$$15, [false, false, tupledArg$$154[2]]];
            }

          case 8:
            {
              return [(0, _Types.L)(), [tupledArg$$154[0], tupledArg$$154[1], tupledArg$$154[2]]];
            }

          case 7:
            {
              const synAttrs$$10 = matchValue$$285.fields[0];
              return [(0, _Types.L)(), [false, false, synAttrs$$10]];
            }

          case 0:
            {
              const p$$48 = matchValue$$285.fields[1];
              const m$$501 = matchValue$$285.fields[2];
              const id$$142 = matchValue$$285.fields[0];

              if (!tupledArg$$154[1]) {
                (0, _ErrorLogger.errorR)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcModuleAbbrevFirstInMutRec)(), m$$501));
              }

              const decls$$16 = (0, _Types.L)(new MutRecShape$00605(3, "ModuleAbbrev", new MutRecDataForModuleAbbrev(0, "MutRecDataForModuleAbbrev", id$$142, p$$48, m$$501)), (0, _Types.L)());
              return [decls$$16, [false, tupledArg$$154[1], tupledArg$$154[2]]];
            }

          case 3:
            {
              throw new Error("unreachable: SynModuleDecl.DoExpr - ElimModuleDoBinding");
            }

          case 9:
            {
              const d$$26 = matchValue$$285;
              return (0, _ErrorLogger.error)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcUnsupportedMutRecDecl)(), (0, _ast.SynModuleDecl$$get_Range)(d$$26)));
            }

          default:
            {
              const typeDefs$$1 = matchValue$$285.fields[0];
              const decls$$12 = (0, _List.map)(function mapping$$173(arg0$$6) {
                return new MutRecShape$00605(0, "Tycon", arg0$$6);
              }, typeDefs$$1);
              return [decls$$12, [false, false, tupledArg$$154[2]]];
            }
        }
      }, [true, true, attrs$$33], defs$$12);
    };

    patternInput$$629 = loop$$6(parent$$33.tag === 0 ? false : true, (0, _Types.L)(), defs$$11);
    const synAttrs$$11 = patternInput$$629[1][2];
    const tpenv$$415 = emptyUnscopedTyparEnv;
    const patternInput$$630 = TcDeclarations$$$TcMutRecDefinitions(cenv$$255, envInitial$$15, parent$$33, typeNames$$12, tpenv$$415, m$$496, scopem$$41, mutRecNSInfo$$11, patternInput$$629[0]);
    const patternInput$$631 = TcAttributesWithPossibleTargets(false, cenv$$255, patternInput$$630[1], AttributeTargets$$$Top, synAttrs$$11);

    const exprfWithEscapeCheck$$1 = function exprfWithEscapeCheck$$1(modExprs$$1) {
      TcMutRecDefnsEscapeCheck(patternInput$$630[0], envInitial$$15);
      const modExpr$$1 = TcMutRecDefsFinish(cenv$$255, patternInput$$630[0], m$$496);
      return (0, _Types.L)(modExpr$$1, modExprs$$1);
    };

    return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$7, [[exprfWithEscapeCheck$$1, patternInput$$631[0]], patternInput$$630[1], patternInput$$630[1]]);
  });
}

function TcMutRecDefsFinish(cenv$$256, defs$$13, m$$502) {
  const tycons$$10 = (0, _List.choose)(function chooser$$29(_arg5$$14) {
    var $target$$615, tycon$$50;

    if (_arg5$$14.tag === 0) {
      if (_arg5$$14.fields[0][0] != null) {
        $target$$615 = 0;
        tycon$$50 = _arg5$$14.fields[0][0];
      } else {
        $target$$615 = 1;
      }
    } else {
      $target$$615 = 1;
    }

    switch ($target$$615) {
      case 0:
        {
          return tycon$$50;
        }

      case 1:
        {
          return null;
        }
    }
  }, defs$$13);
  const binds$$57 = (0, _List.collect)(function mapping$$175(_arg6$$13) {
    var $target$$616, binds$$56;

    switch (_arg6$$13.tag) {
      case 3:
        $target$$616 = 1;
        break;

      case 0:
        $target$$616 = 2;
        binds$$56 = _arg6$$13.fields[0][1];
        break;

      case 1:
        $target$$616 = 2;
        binds$$56 = _arg6$$13.fields[0];
        break;

      case 2:
        $target$$616 = 3;
        break;

      default:
        $target$$616 = 0;
    }

    switch ($target$$616) {
      case 0:
        {
          return (0, _Types.L)();
        }

      case 1:
        {
          return (0, _Types.L)();
        }

      case 2:
        {
          return (0, _List.map)(function mapping$$174(arg0$$8) {
            return new _tast.ModuleOrNamespaceBinding(0, "Binding", arg0$$8);
          }, binds$$56);
        }

      case 3:
        {
          const mtypeAcc$$10 = _arg6$$13.fields[0][0].fields[0];
          const mspec$$10 = _arg6$$13.fields[0][0].fields[1];
          const mdefs$$2 = _arg6$$13.fields[1];
          const mexpr$$3 = TcMutRecDefsFinish(cenv$$256, mdefs$$2, m$$502);
          mspec$$10.entity_modul_contents = new _tast.MaybeLazy$00601(0, "Strict", mtypeAcc$$10.contents);
          return (0, _Types.L)(new _tast.ModuleOrNamespaceBinding(1, "Module", mspec$$10, mexpr$$3), (0, _Types.L)());
        }
    }
  }, defs$$13);
  return new _tast.ModuleOrNamespaceExpr(4, "TMDefRec", true, tycons$$10, binds$$57, m$$502);
}

function TcModuleOrNamespaceElements(cenv$$257, parent$$34, endm$$9, env$$356, xml$$7, mutRecNSInfo$$12, defs$$14) {
  const builder$0040$$8 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$8, function () {
    return (0, _illib.EventuallyBuilder$$Combine$$7DDFD27F)(builder$0040$$8, cenv$$257.compilingCanonicalFslibModuleType ? ((0, _TastOps.ensureCcuHasModuleOrNamespaceAtPath)(cenv$$257.topCcu, env$$356.ePath, env$$356.eCompPath, (0, _ast.PreXmlDoc$$ToXmlDoc)(xml$$7)), (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$8)) : (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$8), (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$8, function () {
      const typeNames$$13 = EstablishTypeDefinitionCores$$$TypeNamesInNonMutRecDecls(defs$$14);
      return mutRecNSInfo$$12 == null ? (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$8, TcModuleOrNamespaceElementsNonMutRec(cenv$$257, parent$$34, typeNames$$13, endm$$9, (0, _Types.L)(), env$$356, env$$356, defs$$14), function (_arg8$$7) {
        const mexpr$$5 = new _tast.ModuleOrNamespaceExpr(1, "TMDefs", (0, _List.foldBack)(function (tupledArg$$155, x$$174) {
          return tupledArg$$155[0](x$$174);
        }, _arg8$$7[0], (0, _Types.L)()));
        const topAttrsNew$$2 = (0, _List.foldBack)(function (tupledArg$$156, x$$175) {
          return (0, _List.append)(tupledArg$$156[1], x$$175);
        }, _arg8$$7[0], (0, _Types.L)());
        return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$8, [mexpr$$5, topAttrsNew$$2, _arg8$$7[1]]);
      }) : (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$8, TcModuleOrNamespaceElementsMutRec(cenv$$257, parent$$34, typeNames$$13, endm$$9, env$$356, mutRecNSInfo$$12, defs$$14), function (_arg7$$7) {
        const topAttrsNew$$1 = _arg7$$7[0][1];
        const exprf = _arg7$$7[0][0];
        const mexpr$$4 = new _tast.ModuleOrNamespaceExpr(1, "TMDefs", exprf((0, _Types.L)()));
        return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$8, [mexpr$$4, topAttrsNew$$1, _arg7$$7[2]]);
      });
    }));
  });
}

function ApplyAssemblyLevelAutoOpenAttributeToTcEnv(g$$66, amap$$22, ccu$$6, scopem$$42, env$$357, p$$49, root$$1) {
  const warn = function warn() {
    (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$tcAttributeAutoOpenWasIgnored$$Z384F8060)(p$$49, (0, _tast.CcuThunk$$get_AssemblyName)(ccu$$6)), scopem$$42));
    return env$$357;
  };

  const p$$50 = (0, _il.splitNamespace)(p$$49);

  if (p$$50.tail == null) {
    return warn();
  } else {
    const patternInput$$632 = (0, _illib.List$$$frontAndBack)(p$$50);
    const modref$$12 = (0, _tast.mkNonLocalTyconRef)((0, _tast.mkNonLocalEntityRef)(ccu$$6, (0, _Array.ofList)(patternInput$$632[0], Array)), patternInput$$632[1]);

    if ((0, _tast.EntityRef$$get_TryDeref)(modref$$12).tag === 0) {
      const openDecl$$2 = (0, _NameResolution.OpenDeclaration$$$Create$$722A02CA)((0, _Types.L)(), (0, _Types.L)(modref$$12, (0, _Types.L)()), scopem$$42, false);
      return OpenModulesOrNamespaces((0, _NameResolution.TcResultsSink$$$get_NoSink)(), g$$66, amap$$22, scopem$$42, root$$1, env$$357, (0, _Types.L)(modref$$12, (0, _Types.L)()), openDecl$$2);
    } else {
      return warn();
    }
  }
}

function AddCcuToTcEnv(g$$67, amap$$23, scopem$$43, env$$358, assemblyName$$1, ccu$$7, autoOpens, internalsVisible$$1) {
  const env$$359 = AddNonLocalCcu(g$$67, amap$$23, scopem$$43, env$$358, assemblyName$$1, ccu$$7, internalsVisible$$1);
  let autoOpens$$2;
  const autoOpens$$1 = (0, _List.map)(function mapping$$176(p$$51) {
    return [p$$51, false];
  }, autoOpens);
  autoOpens$$2 = (0, _tast.ccuEq)(ccu$$7, (0, _TcGlobals.TcGlobals$$get_fslibCcu)(g$$67)) ? (0, _Types.L)(["Microsoft", true], autoOpens$$1) : autoOpens$$1;
  const env$$361 = (0, _List.fold)(function folder$$30(env$$360, tupledArg$$157) {
    return ApplyAssemblyLevelAutoOpenAttributeToTcEnv(g$$67, amap$$23, ccu$$7, scopem$$43, env$$360, tupledArg$$157[0], tupledArg$$157[1]);
  }, env$$359, autoOpens$$2);
  return env$$361;
}

function CreateInitialTcEnv(g$$68, amap$$24, scopem$$44, assemblyName$$2, ccus) {
  return (0, _List.fold)(function folder$$31(env$$362, tupledArg$$158) {
    try {
      return AddCcuToTcEnv(g$$68, amap$$24, scopem$$44, env$$362, assemblyName$$2, tupledArg$$158[0], tupledArg$$158[1], tupledArg$$158[2]);
    } catch (e$$135) {
      (0, _ErrorLogger.errorRecovery)(e$$135, scopem$$44);
      return env$$362;
    }
  }, emptyTcEnv(g$$68), ccus);
}

const TopAttribs = (0, _Types.declare)(function TopAttribs(arg1, arg2, arg3) {
  this.mainMethodAttrs = arg1;
  this.netModuleAttrs = arg2;
  this.assemblyAttrs = arg3;
}, _Types.Record);
exports.TopAttribs = TopAttribs;
const EmptyTopAttrs = new TopAttribs((0, _Types.L)(), (0, _Types.L)(), (0, _Types.L)());
exports.EmptyTopAttrs = EmptyTopAttrs;

function CombineTopAttrs(topAttrs1, topAttrs2) {
  return new TopAttribs((0, _List.append)(topAttrs1.mainMethodAttrs, topAttrs2.mainMethodAttrs), (0, _List.append)(topAttrs1.netModuleAttrs, topAttrs2.netModuleAttrs), (0, _List.append)(topAttrs1.assemblyAttrs, topAttrs2.assemblyAttrs));
}

function IterTyconsOfModuleOrNamespaceType(f$$73, mty$$3) {
  (0, _QueueList.QueueListModule$$$iter)(function f$$74(tycon$$51) {
    f$$73(tycon$$51);
  }, (0, _tast.ModuleOrNamespaceType$$get_AllEntities)(mty$$3));
  (0, _List.iterate)(function action$$60(v$$106) {
    IterTyconsOfModuleOrNamespaceType(f$$73, (0, _tast.Entity$$get_ModuleOrNamespaceType)(v$$106));
  }, (0, _tast.ModuleOrNamespaceType$$get_ModuleAndNamespaceDefinitions)(mty$$3));
}

function ApplyDefaults(cenv$$258, g$$69, denvAtEnd, m$$503, mexpr$$6, extraAttribs) {
  try {
    const unsolved = (0, _FindUnsolved.UnsolvedTyparsOfModuleDef)(g$$69, cenv$$258.amap, denvAtEnd, mexpr$$6, extraAttribs);
    GeneralizationHelpers$$$CanonicalizePartialInferenceProblem(cenv$$258, denvAtEnd, m$$503, unsolved);

    const applyDefaults = function applyDefaults(priority) {
      (0, _List.iterate)(function action$$62(tp$$67) {
        if (!(0, _tast.Typar$$get_IsSolved)(tp$$67)) {
          (0, _List.iterate)(function action$$61(tpc) {
            var ty2$$6, priority2, m$$504;
            var $target$$619, m$$505, priority2$$1, ty2$$7;

            if (tpc.tag === 1) {
              if (ty2$$6 = tpc.fields[1], (priority2 = tpc.fields[0] | 0, (m$$504 = tpc.fields[2], priority2 === priority))) {
                $target$$619 = 0;
                m$$505 = tpc.fields[2];
                priority2$$1 = tpc.fields[0];
                ty2$$7 = tpc.fields[1];
              } else {
                $target$$619 = 1;
              }
            } else {
              $target$$619 = 1;
            }

            switch ($target$$619) {
              case 0:
                {
                  const ty1$$5 = (0, _tast.mkTyparTy)(tp$$67);

                  if (!(0, _tast.Typar$$get_IsSolved)(tp$$67) ? !(0, _TastOps.typeEquiv)(cenv$$258.g, ty1$$5, ty2$$7) : false) {
                    const csenv$$5 = (0, _ConstraintSolver.MakeConstraintSolverEnv)(new _ConstraintSolver.ContextInfo(0, "NoContext"), cenv$$258.css, m$$505, denvAtEnd);
                    (0, _ErrorLogger.RaiseOperationResult)((0, _ErrorLogger.TryD)(function () {
                      return (0, _ConstraintSolver.SolveTyparEqualsType)(csenv$$5, 0, m$$505, new _ConstraintSolver.OptionalTrace(0, "NoTrace"), ty1$$5, ty2$$7);
                    }, function (e$$136) {
                      solveTypAsError(cenv$$258, denvAtEnd, m$$505, ty1$$5);
                      return (0, _ErrorLogger.ErrorD)(new _ConstraintSolver.ErrorFromApplyingDefault(g$$69, denvAtEnd, tp$$67, ty2$$7, e$$136, m$$505));
                    }));
                  }

                  break;
                }
            }
          }, (0, _tast.Typar$$get_Constraints)(tp$$67));
        }
      }, unsolved);
    };

    for (let priority$$1 = 10; priority$$1 >= 0; priority$$1--) {
      applyDefaults(priority$$1);
    }

    (0, _List.iterate)(function action$$63(tp$$68) {
      if (!(0, _tast.Typar$$get_IsSolved)(tp$$68)) {
        if (!(0, _Util.equals)((0, _tast.Typar$$get_StaticReq)(tp$$68), new _ast.TyparStaticReq(0, "NoStaticReq"))) {
          (0, _ConstraintSolver.ChooseTyparSolutionAndSolve)(cenv$$258.css, denvAtEnd, tp$$68);
        }
      }
    }, unsolved);
  } catch (e$$137) {
    (0, _ErrorLogger.errorRecovery)(e$$137, m$$503);
  }
}

function CheckValueRestriction(denvAtEnd$$1, rootSigOpt, implFileTypePriorToSig, m$$506) {
  if (rootSigOpt == null) {
    const check$$2 = function check$$2(mty$$4) {
      (0, _Seq.iterate)(function (v$$107) {
        var matchValue$$287, tvi;
        const ftyvs$$3 = (0, _zset.ZsetModule$$$elements)((0, _TastOps.freeInVal)(_TastOps.CollectTyparsNoCaching, v$$107).FreeTypars);

        if ((!(0, _tast.Val$$get_IsCompilerGenerated)(v$$107) ? !(0, _List.exists)(function predicate$$101(tp$$69) {
          return (0, _tast.Typar$$get_IsFromError)(tp$$69);
        }, ftyvs$$3) : false) ? (matchValue$$287 = (0, _tast.Val$$get_ValReprInfo)(v$$107), matchValue$$287 != null ? (tvi = matchValue$$287, (0, _tast.ValReprInfo$$get_HasNoArgs)(tvi)) : true) : false) {
          if (ftyvs$$3.tail != null) {
            const tp$$70 = ftyvs$$3.head;
            (0, _ErrorLogger.errorR)(new ValueRestriction(denvAtEnd$$1, false, v$$107, tp$$70, (0, _tast.Val$$get_Range)(v$$107)));
          }
        }
      }, (0, _tast.ModuleOrNamespaceType$$get_AllValsAndMembers)(mty$$4));
      (0, _List.iterate)(function action$$64(v$$108) {
        check$$2((0, _tast.Entity$$get_ModuleOrNamespaceType)(v$$108));
      }, (0, _tast.ModuleOrNamespaceType$$get_ModuleAndNamespaceDefinitions)(mty$$4));
    };

    try {
      check$$2(implFileTypePriorToSig);
    } catch (e$$138) {
      (0, _ErrorLogger.errorRecovery)(e$$138, m$$506);
    }
  }
}

function SolveInternalUnknowns(g$$70, cenv$$259, denvAtEnd$$2, mexpr$$7, extraAttribs$$1) {
  const unsolved$$1 = (0, _FindUnsolved.UnsolvedTyparsOfModuleDef)(g$$70, cenv$$259.amap, denvAtEnd$$2, mexpr$$7, extraAttribs$$1);
  (0, _List.iterate)(function action$$65(tp$$71) {
    if (!(0, _Util.equals)((0, _tast.Typar$$get_Rigidity)(tp$$71), new _tast.TyparRigidity(0, "Rigid")) ? !(0, _tast.Typar$$get_IsSolved)(tp$$71) : false) {
      (0, _ConstraintSolver.ChooseTyparSolutionAndSolve)(cenv$$259.css, denvAtEnd$$2, tp$$71);
    }
  }, unsolved$$1);
}

function CheckModuleSignature(g$$71, cenv$$260, m$$507, denvAtEnd$$3, rootSigOpt$$1, implFileTypePriorToSig$$1, implFileSpecPriorToSig, mexpr$$8) {
  if (rootSigOpt$$1 != null) {
    const sigFileType = rootSigOpt$$1;
    const denv$$45 = new _TastOps.DisplayEnv(denvAtEnd$$3.includeStaticParametersInTypeNames, denvAtEnd$$3.openTopPathsSorted, denvAtEnd$$3.openTopPathsRaw, denvAtEnd$$3.shortTypeNames, denvAtEnd$$3.suppressNestedTypes, denvAtEnd$$3.maxMembers, denvAtEnd$$3.showObsoleteMembers, denvAtEnd$$3.showHiddenMembers, denvAtEnd$$3.showTyparBinding, true, denvAtEnd$$3.suppressInlineKeyword, denvAtEnd$$3.suppressMutableKeyword, denvAtEnd$$3.showMemberContainers, denvAtEnd$$3.shortConstraints, denvAtEnd$$3.useColonForReturnType, denvAtEnd$$3.showAttributes, denvAtEnd$$3.showOverrides, denvAtEnd$$3.showConstraintTyparAnnotations, denvAtEnd$$3.abbreviateAdditionalConstraints, denvAtEnd$$3.showTyparDefaultConstraints, denvAtEnd$$3.g, denvAtEnd$$3.contextAccessibility, denvAtEnd$$3.generatedValueLayout);

    try {
      if (!(0, _SignatureConformance.CheckNamesOfModuleOrNamespace)(denv$$45, (0, _tast.mkLocalTyconRef)(implFileSpecPriorToSig), sigFileType)) {
        throw new _ErrorLogger.ReportedError(null);
      }

      const patternInput$$633 = (0, _TastOps.ComputeRemappingFromInferredSignatureToExplicitSignature)(cenv$$260.g, implFileTypePriorToSig$$1, sigFileType);
      const aenv = new _TastOps.TypeEquivEnv((0, _TastOps.TypeEquivEnv$$$get_Empty)().EquivTypars, (0, _TastOps.TyconRefMap$00601$$$OfList$$ZB24A5BC)(patternInput$$633[0].mrpiEntities));

      if (!(0, _SignatureConformance.Checker$$CheckSignature)((0, _SignatureConformance.Checker$$$$002Ector$$675B03B6)(cenv$$260.g, cenv$$260.amap, denv$$45, patternInput$$633[0], true), aenv, (0, _tast.mkLocalModRef)(implFileSpecPriorToSig), sigFileType)) {
        throw new _ErrorLogger.ReportedError(null);
      }
    } catch (e$$139) {
      (0, _ErrorLogger.errorRecovery)(e$$139, m$$507);
    }

    return new _tast.ModuleOrNamespaceExprWithSig(0, "ModuleOrNamespaceExprWithSig", sigFileType, mexpr$$8, m$$507);
  } else {
    const implFileTypePriorToSigCopied = (0, _TastOps.copyModuleOrNamespaceType)(g$$71, new _TastOps.ValCopyFlag(0, "CloneAll"), implFileTypePriorToSig$$1);
    return new _tast.ModuleOrNamespaceExprWithSig(0, "ModuleOrNamespaceExprWithSig", implFileTypePriorToSigCopied, mexpr$$8, m$$507);
  }
}

function TypeCheckOneImplFile(g$$72, niceNameGen$$2, amap$$25, topCcu$$1, checkForErrors, conditionalDefines$$1, tcSink$$26, isInternalTestSpanStackReferring$$1, env$$363, rootSigOpt$$2, _arg1$$107) {
  const scopedPragmas = _arg1$$107.fields[3];
  const qualNameOfFile = _arg1$$107.fields[2];
  const isScript$$1 = _arg1$$107.fields[1];
  const isLastCompiland = _arg1$$107.fields[6];
  const implFileFrags = _arg1$$107.fields[5];
  const builder$0040$$9 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$9, function () {
    const cenv$$261 = cenv$$$Create$$Z24644A4C(g$$72, isScript$$1, niceNameGen$$2, amap$$25, topCcu$$1, false, rootSigOpt$$2 != null, conditionalDefines$$1, tcSink$$26, function (vref$$15, vrefFlags$$6, vrefTypeInst$$1, m$$508) {
      return LightweightTcValForUsingInBuildMethodCall(g$$72, vref$$15, vrefFlags$$6, vrefTypeInst$$1, m$$508);
    }, isInternalTestSpanStackReferring$$1);
    const patternInput$$634 = MakeInitialEnv(env$$363);
    const defs$$15 = (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.map)(function (x$$177) {
        return new _ast.SynModuleDecl(9, "NamespaceFragment", x$$177);
      }, implFileFrags);
    }));
    return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$9, TcModuleOrNamespaceElements(cenv$$261, new _tast.ParentRef(1, "ParentNone"), (0, _ast.QualifiedNameOfFile$$get_Range)(qualNameOfFile), patternInput$$634[0], new _ast.PreXmlDoc(2, "PreXmlDocEmpty"), null, defs$$15), function (_arg2$$30) {
      const implFileTypePriorToSig$$2 = patternInput$$634[1].contents;
      let topAttrs$$2;
      const patternInput$$635 = (0, _List.partition)(function predicate$$102(tupledArg$$159) {
        return (tupledArg$$159[0] & 64) !== 0;
      }, _arg2$$30[1]);
      const patternInput$$636 = (0, _List.partition)(function predicate$$103(tupledArg$$160) {
        return (tupledArg$$160[0] & 1) !== 0;
      }, patternInput$$635[1]);
      const patternInput$$637 = (0, _List.partition)(function predicate$$104(tupledArg$$161) {
        return (tupledArg$$161[0] & 2) !== 0;
      }, patternInput$$636[1]);
      topAttrs$$2 = new TopAttribs((0, _List.map)(function (tuple$$47) {
        return tuple$$47[1];
      }, patternInput$$635[0]), (0, _List.map)(function (tuple$$48) {
        return tuple$$48[1];
      }, patternInput$$637[0]), (0, _List.map)(function (tuple$$49) {
        return tuple$$49[1];
      }, patternInput$$636[0]));
      const denvAtEnd$$4 = TcEnv$$get_DisplayEnv(_arg2$$30[2]);
      const m$$509 = (0, _ast.QualifiedNameOfFile$$get_Range)(qualNameOfFile);
      const implFileSpecPriorToSig$$1 = (0, _TastOps.wrapModuleOrNamespaceType)((0, _ast.QualifiedNameOfFile$$get_Id)(qualNameOfFile), (0, _tast.compPathOfCcu)(topCcu$$1), implFileTypePriorToSig$$2);
      const extraAttribs$$2 = (0, _List.append)(topAttrs$$2.mainMethodAttrs, (0, _List.append)(topAttrs$$2.netModuleAttrs, topAttrs$$2.assemblyAttrs));
      (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        ApplyDefaults(cenv$$261, g$$72, denvAtEnd$$4, m$$509, _arg2$$30[0], extraAttribs$$2);
      });
      (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        try {
          IterTyconsOfModuleOrNamespaceType(function f$$75(tycon$$52) {
            (0, _MethodOverrides.FinalTypeDefinitionChecksAtEndOfInferenceScope)(cenv$$261.infoReader, TcEnv$$get_NameEnv(_arg2$$30[2]), cenv$$261.tcSink, true, denvAtEnd$$4, tycon$$52);
          }, implFileTypePriorToSig$$2);
        } catch (e$$140) {
          (0, _ErrorLogger.errorRecovery)(e$$140, m$$509);
        }
      });
      (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        CheckValueRestriction(denvAtEnd$$4, rootSigOpt$$2, implFileTypePriorToSig$$2, m$$509);
      });
      (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        SolveInternalUnknowns(g$$72, cenv$$261, denvAtEnd$$4, _arg2$$30[0], extraAttribs$$2);
      });
      const implFileExprAfterSig = (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        return CheckModuleSignature(g$$72, cenv$$261, m$$509, denvAtEnd$$4, rootSigOpt$$2, implFileTypePriorToSig$$2, implFileSpecPriorToSig$$1, _arg2$$30[0]);
      });
      (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        (0, _Seq.iterate)(function (check$$3) {
          try {
            check$$3();
          } catch (e$$141) {
            (0, _ErrorLogger.errorRecovery)(e$$141, m$$509);
          }
        }, cenv$$261.postInferenceChecks);
      });
      const hasExplicitEntryPoint = (0, _ErrorLogger.conditionallySuppressErrorReporting)(checkForErrors(), function () {
        try {
          const reportErrors = !checkForErrors();
          return (0, _PostInferenceChecks.CheckTopImpl)(g$$72, cenv$$261.amap, reportErrors, cenv$$261.infoReader, env$$363.eInternalsVisibleCompPaths, cenv$$261.topCcu, TcEnv$$get_DisplayEnv(_arg2$$30[2]), implFileExprAfterSig, extraAttribs$$2, isLastCompiland, isInternalTestSpanStackReferring$$1);
        } catch (e$$142) {
          (0, _ErrorLogger.errorRecovery)(e$$142, m$$509);
          return false;
        }
      });
      (0, _List.iterate)(function action$$66(_arg3$$23) {
        var $target$$631, range, tref$$6, version;

        if (_arg3$$23.fields[2].tail != null) {
          if (_arg3$$23.fields[2].head.fields[0].tag === 0) {
            if (_arg3$$23.fields[2].head.fields[0].fields[0].tag === 14) {
              if (_arg3$$23.fields[2].tail.tail == null) {
                $target$$631 = 0;
                range = _arg3$$23.fields[2].head.fields[0].fields[1];
                tref$$6 = _arg3$$23.fields[0];
                version = _arg3$$23.fields[2].head.fields[0].fields[0].fields[0];
              } else {
                $target$$631 = 1;
              }
            } else {
              $target$$631 = 1;
            }
          } else {
            $target$$631 = 1;
          }
        } else {
          $target$$631 = 1;
        }

        switch ($target$$631) {
          case 0:
            {
              const attrName = (0, _il.ILTypeRef$$get_FullName)((0, _tast.EntityRef$$get_CompiledRepresentationForNamedType)(tref$$6));

              const isValid = function isValid() {
                try {
                  (0, _il.parseILVersion)(version);
                  return true;
                } catch (matchValue$$288) {
                  return false;
                }
              };

              var $target$$632;

              if (attrName === "System.Reflection.AssemblyFileVersionAttribute") {
                if (!isValid()) {
                  $target$$632 = 0;
                } else {
                  $target$$632 = 1;
                }
              } else if (attrName === "System.Reflection.AssemblyVersionAttribute") {
                if (!isValid()) {
                  $target$$632 = 0;
                } else {
                  $target$$632 = 1;
                }
              } else {
                $target$$632 = 1;
              }

              switch ($target$$632) {
                case 0:
                  {
                    (0, _ErrorLogger.warning)(new _ErrorLogger.Error$((0, _FSComp.SR$$$fscBadAssemblyVersion$$Z384F8060)(attrName, version), range));
                    break;
                  }
              }

              break;
            }
        }
      }, topAttrs$$2.assemblyAttrs);
      const implFile = new _tast.TypedImplFile(0, "TImplFile", qualNameOfFile, scopedPragmas, implFileExprAfterSig, hasExplicitEntryPoint, isScript$$1);
      return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$9, [topAttrs$$2, implFile, implFileTypePriorToSig$$2, _arg2$$30[2], cenv$$261.createsGeneratedProvidedTypes]);
    });
  });
}

function TypeCheckOneSigFile(g$$73, niceNameGen$$3, amap$$26, topCcu$$2, checkForErrors$$1, conditionalDefines$$2, tcSink$$27, isInternalTestSpanStackReferring$$2, tcEnv, _arg1$$109) {
  const sigFileFrags = _arg1$$109.fields[4];
  const qualNameOfFile$$1 = _arg1$$109.fields[1];
  const builder$0040$$10 = _illib.eventually;
  return (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$10, function () {
    const cenv$$262 = cenv$$$Create$$Z24644A4C(g$$73, false, niceNameGen$$3, amap$$26, topCcu$$2, true, false, conditionalDefines$$2, tcSink$$27, function (vref$$16, vrefFlags$$7, vrefTypeInst$$2, m$$510) {
      return LightweightTcValForUsingInBuildMethodCall(g$$73, vref$$16, vrefFlags$$7, vrefTypeInst$$2, m$$510);
    }, isInternalTestSpanStackReferring$$2);
    const patternInput$$638 = MakeInitialEnv(tcEnv);
    const specs = (0, _List.ofSeq)((0, _Seq.delay)(function () {
      return (0, _Seq.map)(function (x$$178) {
        return new _ast.SynModuleSigDecl(7, "NamespaceFragment", x$$178);
      }, sigFileFrags);
    }));
    return (0, _illib.EventuallyBuilder$$Bind$$11F6F5F3)(builder$0040$$10, TcSignatureElements(cenv$$262, new _tast.ParentRef(1, "ParentNone"), (0, _ast.QualifiedNameOfFile$$get_Range)(qualNameOfFile$$1), patternInput$$638[0], new _ast.PreXmlDoc(2, "PreXmlDocEmpty"), null, specs), function (_arg2$$32) {
      const tcEnv$$1 = _arg2$$32;
      const sigFileType$$1 = patternInput$$638[1].contents;
      return (0, _illib.EventuallyBuilder$$Combine$$7DDFD27F)(builder$0040$$10, !checkForErrors$$1() ? (0, _illib.EventuallyBuilder$$TryWith$$2B3CF8F)(builder$0040$$10, (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$10, function () {
        IterTyconsOfModuleOrNamespaceType(function f$$76(tycon$$53) {
          (0, _MethodOverrides.FinalTypeDefinitionChecksAtEndOfInferenceScope)(cenv$$262.infoReader, TcEnv$$get_NameEnv(tcEnv$$1), cenv$$262.tcSink, false, TcEnv$$get_DisplayEnv(tcEnv$$1), tycon$$53);
        }, sigFileType$$1);
        return (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$10);
      }), function (_arg3$$24) {
        const e$$143 = _arg3$$24;
        (0, _ErrorLogger.errorRecovery)(e$$143, (0, _ast.QualifiedNameOfFile$$get_Range)(qualNameOfFile$$1));
        return (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$10);
      }) : (0, _illib.EventuallyBuilder$$Zero)(builder$0040$$10), (0, _illib.EventuallyBuilder$$Delay$$5AC0008B)(builder$0040$$10, function () {
        return (0, _illib.EventuallyBuilder$$Return$$1505)(builder$0040$$10, [tcEnv$$1, sigFileType$$1, cenv$$262.createsGeneratedProvidedTypes]);
      }));
    });
  });
}